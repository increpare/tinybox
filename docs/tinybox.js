(function (console, $hx_exports, $global) { "use strict";
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,removeRenderer: null
	,removeWindow: null
	,setPreloader: null
	,unregisterModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.__onWindowClose),window),false,-10000);
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onDropFile.add((function(f4,a14) {
			return function(a2) {
				f4(a14,a2);
			};
		})($bind(this,this.onWindowDropFile),window));
		window.onEnter.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f8,a18) {
			return function() {
				f8(a18);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f9,a19) {
			return function(a21,a3) {
				f9(a19,a21,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f10,a110) {
			return function(a22,a31) {
				f10(a110,a22,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f12,a112) {
			return function() {
				f12(a112);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f13,a113) {
			return function(x,y,a23) {
				f13(a113,x,y,a23);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f14,a114) {
			return function(x1,y1) {
				f14(a114,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f15,a115) {
			return function(x2,y2) {
				f15(a115,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f16,a116) {
			return function(x3,y3,a24) {
				f16(a116,x3,y3,a24);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f17,a117) {
			return function(a25,a32) {
				f17(a117,a25,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f18,a118) {
			return function(x4,y4) {
				f18(a118,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f19,a119) {
			return function(a26,a33) {
				f19(a119,a26,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f20,a120) {
			return function() {
				f20(a120);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f21,a121) {
			return function(a27,a34,a4) {
				f21(a121,a27,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f22,a122) {
			return function(a28) {
				f22(a122,a28);
			};
		})($bind(this,this.onTextInput),window));
		if(window.id > -1) this.onWindowCreate(window);
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var $it0 = lime_ui_Gamepad.devices.iterator();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			this.__onGamepadConnect(gamepad);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var $it1 = lime_ui_Joystick.devices.iterator();
		while( $it1.hasNext() ) {
			var joystick = $it1.next();
			this.__onJoystickConnect(joystick);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.__renderers,renderer,0) > -1) HxOverrides.remove(this.__renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.__windows,window,0) > -1) HxOverrides.remove(this.__windows,window);
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(preloader == null || preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,unregisterModule: function(application) {
		this.__application.onExit.remove($bind(this,this.onModuleExit));
		this.__application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,x,y) {
				f5(a15,a24,x,y);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}
			
			if ('performance' in window == false) {
				window.performance = {};
			}
			
			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		if(this.parent.__windows[0] != null) this.parent.__windows[0].backend.updateSize();
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null && this.parent.__renderers[0].context != null) {
				this.parent.__renderers[0].render();
				this.parent.__renderers[0].onRender.dispatch();
				if(!this.parent.__renderers[0].onRender.canceled) this.parent.__renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) event.preventDefault();
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) event.preventDefault();
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				this.parent.__windows[0].backend.handleResizeEvent(event);
				break;
			case "beforeunload":
				if(!event.defaultPrevented) {
					this.parent.__windows[0].onClose.dispatch();
					if(this.parent.__windows[0] != null && this.parent.__windows[0].onClose.canceled) event.preventDefault();
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) return;
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) continue;
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") cache.isGamepad = true;
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) lime_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(5,value);
						} else {
							if(value > 0) joystick.onButtonDown.dispatch(i3); else joystick.onButtonUp.dispatch(i3);
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) gamepad.onButtonDown.dispatch(button); else gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.setPreloader(this.__preloader);
				var _g2 = 0;
				var _g11 = this.modules;
				while(_g2 < _g11.length) {
					var module = _g11[_g2];
					++_g2;
					this.setPreloader(this.__preloader);
				}
			}
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
		this.backend.exit();
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeModule: function(module) {
		if(module != null) {
			module.unregisterModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) this.removeRenderer(window.renderer);
			if(this.__windows[0] == window) this.window = null;
			if(this.__windows.length == 0) lime_system_System.exit(0);
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_renderer: function() {
		return this.__renderers[0];
	}
	,get_renderers: function() {
		return this.__renderers;
	}
	,get_window: function() {
		return this.__windows[0];
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_renderers:"get_renderers",get_renderer:"get_renderer",get_preloader:"get_preloader",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	var projectName = "tinybox";
	var config = { build : "12", company : "Haxegon", file : "tinybox", fps : 30, name : "tinybox", orientation : "landscape", packageName : "com.haxegon.tinybox", version : "1.0.0", windows : [{ allowHighDPI : true, alwaysOnTop : false, antialiasing : 0, background : 0, borderless : false, colorDepth : 16, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : null, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, stencilBuffer : true, title : "tinybox", vsync : true, width : null, x : null, y : null}]};
	lime_system_System.__registerEntryPoint(projectName,ApplicationMain.create,config);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	app.create(config);
	ManifestResources.init(config);
	var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.setPreloader(preloader);
	preloader.create(config);
	preloader.onComplete.add((function(f,a1) {
		return function() {
			f(a1);
		};
	})(ApplicationMain.start,app.__windows[0].stage));
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		preloader.addLibrary(library);
	}
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraryNames;
	while(_g2 < _g11.length) {
		var name = _g11[_g2];
		++_g2;
		preloader.addLibraryName(name);
	}
	preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		var current = stage.getChildAt(0);
		if(current == null || !js_Boot.__instanceof(current,openfl_display_DisplayObjectContainer)) {
			current = new openfl_display_MovieClip();
			stage.addChild(current);
		}
		new DocumentClass(current);
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(listener == null) return;
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.set(type,list);
			this.__iterators.set(type,[iterator]);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) return;
			}
			var iterators = this.__iterators.get(type);
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) iterator1.copy();
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null || listener == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var iterators = this.__iterators.get(type);
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		if(!this.__eventMap.iterator().hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return true;
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) return true;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var iterators = this.__iterators.get(type);
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		while( iterator.hasNext() ) {
			var listener = iterator.next();
			if(listener == null) continue;
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) break;
			}
		}
		if(iterator != iterators[0]) HxOverrides.remove(iterators,iterator);
		return true;
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		while(_g < numElements) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__isMask: null
	,__renderable: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__renderGLMask: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"}
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var data;
	data = a != null?a.data:null;
	return new openfl__$Vector_AbstractVector(this1.data.concat(data));
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.copy());
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	return this1.data.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.data.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.data.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	if(sep == null) sep = ",";
	return this1.data.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	return this1.data.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.data.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.data.push(x);
};
openfl__$Vector_Vector_$Impl_$.removeAt = function(this1,index) {
	return this1.data.removeAt(index);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.reverse());
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.data.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.data.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return new openfl__$Vector_AbstractVector(this1.data.slice(pos,end));
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.data.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return new openfl__$Vector_AbstractVector(this1.data.splice(pos,len));
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	if(this1 != null && this1.data != null) return this1.data.toString(); else return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.data.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_BoolVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_IntVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FloatVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FunctionVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_ObjectVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.data.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.data.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.data.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.data.set_length(value);
};
var lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject = function(create,clean,size) {
	if(create != null) this.create = create;
	if(clean != null) this.clean = clean;
	if(size != null) this.set_size(size);
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_Vector_openfl_display_DisplayObject"] = lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject;
lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject.__name__ = ["lime","utils","ObjectPool_openfl_Vector_openfl_display_DisplayObject"];
lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) object = this.__getInactive(); else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		} else this.__pool.remove(object);
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject0 = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject1 = this.__inactiveObjectList.pop();
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		var _g_head = this.__inactiveObjectList.h;
		var _g_val = null;
		while(_g_head != null) {
			var object;
			object = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			count--;
			if(count == 0 || this.inactiveObjects == 0) return;
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) this.__size = null; else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) this.__removeInactive(current - value); else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else break;
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapRender: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(HxOverrides.indexOf(dispatchers,this,0) == -1) dispatchers.push(this);
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			mouseEvent.stageX = this.__getRenderTransform().__transformX(mouseEvent.localX,mouseEvent.localY);
			mouseEvent.stageY = this.__getRenderTransform().__transformY(mouseEvent.localX,mouseEvent.localY);
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			touchEvent.stageX = this.__getRenderTransform().__transformX(touchEvent.localX,touchEvent.localY);
			touchEvent.stageY = this.__getRenderTransform().__transformY(touchEvent.localX,touchEvent.localY);
		}
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		var usingTemp = false;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			usingTemp = true;
			matrix = openfl_geom_Matrix.__pool.get();
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		if(usingTemp) openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.stage != null) return this.__hitTest(x,y,shapeFlag,null,true,this); else return false;
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					var _this = openfl_display_DisplayObject.__broadcastEvents.get(type);
					HxOverrides.remove(_this,this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) this.__graphics.__cleanup();
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) return true;
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchStack: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__dispatch(event);
				if(event.__isCanceled) return;
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) return;
			if(event.bubbles) {
				event.eventPhase = 3;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__dispatch(event);
					if(event.__isCanceled) return;
					i1--;
				}
			}
		}
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) event.target = this;
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) this.parent.__dispatch(event); else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.data.set(i,parent);
					parent = parent.parent;
					i++;
				}
				var _g = 0;
				while(_g < i) {
					var j = _g++;
					stack.data.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null && this.__filters.length > 0) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) this.__getBounds(rect,matrix); else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) this.__update(true,false); else while(current != this.stage) {
				list.push(current);
				current = current.parent;
				if(current == null) break;
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
				current.__worldTransformInvalid = false;
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) this.__renderTransform.__transformInversePoint(global); else {
			local.x = this.__renderTransform.__transformInverseX(global.x,global.y);
			local.y = this.__renderTransform.__transformInverseY(global.x,global.y);
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) this.__graphics.__readGraphicsData(graphicsData);
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
			if(this.__cacheBitmap != null && !this.__cacheBitmapRender) openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession); else openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderSession);
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession); else openfl__$internal_renderer_opengl_GLDisplayObject.render(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession); else openfl__$internal_renderer_opengl_GLDisplayObject.renderMask(this,renderSession);
	}
	,__setParentRenderDirty: function() {
		var renderParent;
		if(this.__renderParent != null) renderParent = this.__renderParent; else renderParent = this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		var renderParent;
		if(this.__renderParent != null) renderParent = this.__renderParent; else renderParent = this.parent;
		if(this.__isMask && renderParent == null) renderParent = this.__maskTarget;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(renderParent != null) {
				this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				if(this.__blendMode == null || this.__blendMode == 10) this.__worldBlendMode = renderParent.__blendMode; else this.__worldBlendMode = this.__blendMode;
			} else this.__worldAlpha = this.get_alpha();
		}
		if(updateChildren && this.get_mask() != null) this.get_mask().__update(transformOnly,true,maskGraphics);
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.__cacheBitmapRender) return;
		if(this.get_cacheAsBitmap()) {
			var matrix = null;
			var rect = null;
			this.__update(false,true);
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || !this.__cacheBitmapColorTransform.__equals(this.__worldColorTransform);
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null && this.__filters.length > 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			if(updateTransform || hasFilters) {
				matrix = openfl_geom_Matrix.__pool.get();
				rect = openfl_geom_Rectangle.__pool.get();
				matrix.identity();
				this.__getFilterBounds(rect,this.__renderTransform);
				bitmapWidth = Math.ceil(rect.width);
				bitmapHeight = Math.ceil(rect.height);
			}
			if(hasFilters) {
				if(this.__cacheBitmap != null && (bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height())) needRender = true; else {
					var _g = 0;
					var _g1 = this.__filters;
					while(_g < _g1.length) {
						var filter = _g1[_g];
						++_g;
						if(filter.__renderDirty) {
							needRender = true;
							break;
						}
					}
				}
			}
			if(needRender) {
				this.__cacheBitmapBackground = this.opaqueBackground;
				var color;
				if(this.opaqueBackground != null) color = -16777216 | this.opaqueBackground; else color = 0;
				if(rect.width >= 0.5 && rect.height >= 0.5) {
					if(this.__cacheBitmap == null || bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height()) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
						if(this.__cacheBitmap == null) this.__cacheBitmap = new openfl_display_Bitmap();
						this.__cacheBitmap.set_bitmapData(this.__cacheBitmapData);
					} else this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect,color);
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					return;
				}
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				this.__cacheBitmap.__renderTransform.identity();
				this.__cacheBitmap.__renderTransform.tx = rect.x;
				this.__cacheBitmap.__renderTransform.ty = rect.y;
				matrix.concat(this.__renderTransform);
				matrix.tx -= Math.round(rect.x);
				matrix.ty -= Math.round(rect.y);
			}
			this.__cacheBitmap.smoothing = renderSession.allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				this.__cacheBitmapRender = true;
				this.__cacheBitmapData.__draw(this,matrix,null,null,null,renderSession.allowSmoothing);
				if(hasFilters) {
					var needSecondBitmapData = false;
					var needCopyOfOriginal = false;
					var _g2 = 0;
					var _g11 = this.__filters;
					while(_g2 < _g11.length) {
						var filter1 = _g11[_g2];
						++_g2;
						if(filter1.__needSecondBitmapData) needSecondBitmapData = true;
						if(filter1.__preserveObject) needCopyOfOriginal = true;
					}
					var bitmapData = this.__cacheBitmapData;
					var bitmapData2 = null;
					var bitmapData3 = null;
					if(needSecondBitmapData) bitmapData2 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0); else bitmapData2 = bitmapData;
					if(needCopyOfOriginal) bitmapData3 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					var sourceRect = bitmapData.rect;
					var destPoint = new openfl_geom_Point();
					var cacheBitmap;
					var lastBitmap;
					var _g3 = 0;
					var _g12 = this.__filters;
					while(_g3 < _g12.length) {
						var filter2 = _g12[_g3];
						++_g3;
						if(filter2.__preserveObject) bitmapData3.copyPixels(bitmapData,bitmapData.rect,destPoint);
						lastBitmap = filter2.__applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
						if(filter2.__preserveObject) lastBitmap.draw(bitmapData3,null,this.get_transform().get_colorTransform());
						filter2.__renderDirty = false;
						if(needSecondBitmapData && lastBitmap == bitmapData2) {
							cacheBitmap = bitmapData;
							bitmapData = bitmapData2;
							bitmapData2 = cacheBitmap;
						}
					}
					this.__cacheBitmap.set_bitmapData(bitmapData);
				}
				this.__cacheBitmapRender = false;
				if(this.__cacheBitmapColorTransform == null) this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				this.__cacheBitmapColorTransform.__copyFrom(this.__worldColorTransform);
				if(!this.__cacheBitmapColorTransform.__isDefault()) this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
			}
			if(updateTransform) {
				this.__update(false,true);
				openfl_geom_Matrix.__pool.release(matrix);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		} else if(this.__cacheBitmap != null) {
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapColorTransform = null;
		}
	}
	,__updateChildren: function(transformOnly) {
		var renderParent;
		if(this.__renderParent != null) renderParent = this.__renderParent; else renderParent = this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__worldAlpha = this.get_alpha();
		this.__worldBlendMode = this.get_blendMode();
		if(this.__transformDirty) this.__transformDirty = false;
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local;
		if(overrided) local = overrideTransform; else local = this.__transform;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(this.__renderTransform == null) this.__renderTransform = new openfl_geom_Matrix();
		var renderParent;
		if(this.__renderParent != null) renderParent = this.__renderParent; else renderParent = this.parent;
		var parentTransform;
		if(!overrided && this.parent != null) {
			parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else this.__worldTransform.copyFrom(local);
		if(!overrided && renderParent != null) {
			parentTransform = renderParent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else this.__renderTransform.copyFrom(local);
		if(this.__scrollRect != null) this.__renderTransform.__translateTransformed(-this.__scrollRect.x,-this.__scrollRect.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) value = 10;
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) return this.__cacheAsBitmap; else return true;
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) this.__filters = value; else this.__filters = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) this.set_scaleY(value / rect.height); else this.set_scaleY(1);
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) return openfl__$internal_Lib.current.__loaderInfo;
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) this.__cacheBitmap.set_mask(value);
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl__$internal_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl__$internal_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl__$internal_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) this.__setTransformDirty();
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) this.__setTransformDirty();
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) this.__setTransformDirty();
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) this.__setTransformDirty();
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) this.__setTransformDirty();
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) this.set_scaleX(value / rect.width); else this.set_scaleX(1);
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) this.__setTransformDirty();
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) this.__setTransformDirty();
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 43, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) return true; else return false;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		return this.__tabIndex = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		}
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) this.__setStageReference(this.stage);
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) this.stage.set_focus(null);
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.data.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) return null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) return child;
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) break;
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) continue;
			child.__getFilterBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) continue;
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) stack.push(hitObject);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) return;
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) orphan.__cleanup();
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) return;
		if(this.__children.length > 0) {
			renderSession.maskManager.pushObject(this);
			renderSession.filterManager.pushObject(this);
			if(renderSession.clearRenderDirty) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderSession);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderSession);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) orphan.__cleanup();
		}
		this.__removedChildren.data.set_length(0);
		if(this.__children.length > 0) {
			renderSession.filterManager.popObject(this);
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderGLMask: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) return;
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderGLMask(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderGLMask(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) orphan.__cleanup();
		}
		this.__removedChildren.data.set_length(0);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) return interactiveOnly; else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) stack.push(hitObject);
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) stack[stack.length] = hitObject;
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl_display_Graphics(this);
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) return this.buttonMode; else return this.__tabEnabled;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var haxegon_Load = function() {
	openfl_display_Sprite.call(this);
	if(this.stage != null) this.start(); else this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["haxegon.Load"] = haxegon_Load;
haxegon_Load.__name__ = ["haxegon","Load"];
haxegon_Load.__super__ = openfl_display_Sprite;
haxegon_Load.prototype = $extend(openfl_display_Sprite.prototype,{
	starling: null
	,onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.start();
	}
	,start: function() {
		this.starling = new starling_core_Starling(haxegon_Core,this.stage);
		this.starling.start();
	}
	,__class__: haxegon_Load
});
var DocumentClass = function(current) {
	current.addChild(this);
	haxegon_Load.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = haxegon_Load;
DocumentClass.prototype = $extend(haxegon_Load.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,matchedRight: function() {
		if(this.r.m == null) throw new js__$Boot_HaxeError("No string matched");
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw new js__$Boot_HaxeError("No string matched");
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf = new StringBuf();
		do {
			if(offset >= s.length) break; else if(!this.matchSub(s,offset)) {
				buf.add(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf.add(HxOverrides.substr(s,offset,p.pos - offset));
			buf.add(f(this));
			if(p.len == 0) {
				buf.add(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else offset = p.pos + p.len;
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) buf.add(HxOverrides.substr(s,offset,null));
		return buf.b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,val: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
var Main = function() {
	this.overLink2 = 0;
	this.overLink1 = 0;
	this.helpmode = false;
	this.copyBuffer = null;
	this.minusCounter = 0;
	this.plusCounter = 0;
	this.rCounter = 0;
	this.lCounter = 0;
	this.scrollInterval = 12;
	this.scrollt = 0;
	this.backups = [];
	this.bottomNote = 59;
	this.selectedSequence = 0;
	this.noteVol = 9;
	this.maxVol = 9;
	this.lastl = 3;
	this.noteLength = 3;
	this.selectedInst = 0;
	this.channelOrder = [0,1,2,3,4];
	this.oldAddY = -1;
	this.oldAddX = -1;
	this.pressedDownOnCanvas = false;
	this.B62 = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","à","á","â","ä","æ","ã","å","ā","è","é"];
	this.dat = { patternLength : 16, cellDuration : 3, instruments : [57803926,67910236,85155178,1,14620627], sequences : [0], notes : [[[],[],[],[],[]]]};
	this.notenames = ["c#","d","d#","e","f","f#","g","g#","a","a#","b","c"];
	this.blackNotes = [false,false,true,false,true,false,false,true,false,true,false,true];
	this.instCols = [[8913032,16733695],[8947712,16777045],[8912896,16733525],[34952,5636095],[34816,5635925]];
	this.playTick = 0;
	this.playing = false;
	this.darkText = 8947848;
	this.textCol = 15658734;
	this.backgroundCol = haxegon_Col.NIGHTBLUE;
	this.panelColLight = 170;
	this.panelCol = 136;
	this.mainHighlighter = 11184895;
	this.mainHighlightish = 8947967;
	this.mainHighlight = 5592575;
	this.mainButton = 255;
	this.charWidth = 5;
	this.EXPORTMODE = false;
	var _g = this;
	window.document.oncontextmenu = window.document.body.oncontextmenu = function() {
		return false;
	};
	window.document.addEventListener("click",function(event) {
		if(_g.overLink1 > 0) {
			window.open("https://www.increpare.com","_blank");
			_g.overLink1 = 0;
		}
		if(_g.overLink2 > 0) {
			window.open("https://www.patreon.com/increpare","_blank");
			_g.overLink2 = 0;
		}
		event.target.textContent = "click count: " + event.detail;
	},false);
	haxegon_Text.set_font("pixel");
	haxegon_Text.set_size(1);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.prototype = {
	EXPORTMODE: null
	,charWidth: null
	,mainButton: null
	,mainHighlight: null
	,mainHighlightish: null
	,mainHighlighter: null
	,panelCol: null
	,panelColLight: null
	,backgroundCol: null
	,textCol: null
	,darkText: null
	,playing: null
	,playTick: null
	,instCols: null
	,blackNotes: null
	,notenames: null
	,dat: null
	,B62: null
	,pressedDownOnCanvas: null
	,oldAddX: null
	,oldAddY: null
	,stripWhitespace: function(s) {
		return StringTools.trim(s);
	}
	,loadDat: function(s) {
		s = this.stripWhitespace(s);
		s = this.unmakeRLE(s);
		var arr = [];
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var ci = _g1++;
			var c = s.charAt(ci);
			arr.push(HxOverrides.indexOf(this.B62,c,0));
		}
		this.dat = { patternLength : 16, cellDuration : 3, instruments : [57803926,67910236,85155178,1,14620627], sequences : [0], notes : [[[],[],[],[],[]]]};
		var i = 0;
		this.dat.patternLength = arr[i];
		i++;
		this.dat.cellDuration = arr[i];
		this.dat.instruments = [];
		var _g2 = 0;
		while(_g2 < 5) {
			var j = _g2++;
			var n = 0;
			var p = 1;
			var _g11 = 0;
			while(_g11 < 5) {
				var k = _g11++;
				i++;
				n = n + p * arr[i];
				p = p * 62;
			}
			this.dat.instruments.push(n);
		}
		var outputAr = [];
		i++;
		var sequenceCount = arr[i];
		outputAr.push(arr[i]);
		this.dat.notes = [];
		var _g3 = 0;
		while(_g3 < sequenceCount) {
			var j1 = _g3++;
			var sequence = [[],[],[],[],[]];
			var _g12 = 0;
			while(_g12 < 5) {
				var m = _g12++;
				i++;
				var noteCount = arr[i];
				outputAr.push(arr[i]);
				var noteSeq = sequence[m];
				var _g21 = 0;
				while(_g21 < noteCount) {
					var k1 = _g21++;
					i++;
					var v1 = arr[i];
					outputAr.push(arr[i]);
					i++;
					var v2 = arr[i];
					outputAr.push(arr[i]);
					var v = v1 + 62 * v2;
					noteSeq.push([v]);
				}
				var _g22 = 1;
				while(_g22 < 4) {
					var l = _g22++;
					var _g31 = 0;
					while(_g31 < noteCount) {
						var m1 = _g31++;
						i++;
						noteSeq[m1].push(arr[i]);
						outputAr.push(arr[i]);
					}
				}
			}
			this.dat.notes.push(sequence);
		}
	}
	,saveDat: function() {
		var intArray = [];
		intArray.push(this.dat.patternLength);
		intArray.push(this.dat.cellDuration);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var n = this.dat.instruments[i];
			haxe_Log.trace("N " + n,{ fileName : "Main.hx", lineNumber : 158, className : "Main", methodName : "saveDat"});
			var _g1 = 0;
			while(_g1 < 5) {
				var j = _g1++;
				var p1 = Math.pow(62,j);
				var v = (n / p1 | 0) % 62;
				intArray.push(v);
			}
		}
		var outputAr = [];
		intArray.push(this.dat.notes.length);
		outputAr.push(intArray[intArray.length - 1]);
		var _g2 = 0;
		var _g11 = this.dat.notes;
		while(_g2 < _g11.length) {
			var r = _g11[_g2];
			++_g2;
			var _g21 = 0;
			while(_g21 < 5) {
				var i1 = _g21++;
				var instNotes = r[i1];
				intArray.push(instNotes.length);
				var _g3 = 0;
				while(_g3 < instNotes.length) {
					var n1 = instNotes[_g3];
					++_g3;
					intArray.push(n1[0] % 62);
					intArray.push(haxegon_Convert.toint(n1[0] / 62) % 62);
				}
				var _g31 = 1;
				while(_g31 < 4) {
					var j1 = _g31++;
					var _g4 = 0;
					while(_g4 < instNotes.length) {
						var n2 = instNotes[_g4];
						++_g4;
						intArray.push(n2[j1]);
					}
				}
			}
		}
		var result = "";
		var _g5 = 0;
		while(_g5 < intArray.length) {
			var n3 = intArray[_g5];
			++_g5;
			result = result + this.B62[n3];
		}
		result = this.makeRLE(result);
		return result;
	}
	,makeRLE: function(s) {
		var result = "";
		var lastChar = s.charAt(0);
		var lastCharCount = 1;
		var _g1 = 1;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = s.charAt(i);
			if(c == lastChar) lastCharCount++; else {
				if(lastCharCount > 1) result = result + lastCharCount;
				result = result + lastChar;
				lastChar = c;
				lastCharCount = 1;
			}
		}
		if(lastCharCount > 1) result = result + lastCharCount;
		result = result + lastChar;
		return result;
	}
	,unmakeRLE: function(s) {
		var result = "";
		var lastInt = 0;
		var i = 0;
		while(i < s.length) {
			var c = s.charAt(i);
			while(c == "0" || c == "1" || c == "2" || c == "3" || c == "4" || c == "5" || c == "6" || c == "7" || c == "8" || c == "9") {
				lastInt = lastInt * 10 + haxegon_Convert.toint(c);
				i++;
				c = s.charAt(i);
			}
			if(lastInt == 0) lastInt = 1;
			var _g = 0;
			while(_g < lastInt) {
				var i1 = _g++;
				result = result + c;
			}
			i++;
			c = s.charAt(i);
			lastInt = 0;
		}
		return result;
	}
	,channelOrder: null
	,selectedInst: null
	,noteLength: null
	,lastl: null
	,maxVol: null
	,noteVol: null
	,selectedSequence: null
	,bottomNote: null
	,backups: null
	,MakeBackupCopy: function() {
		var oldDat = this.saveDat();
		if(this.backups.length > 0 && oldDat == this.backups[this.backups.length - 1]) return;
		this.backups.push(oldDat);
	}
	,DoUndo: function() {
		if(this.backups.length == 0) return;
		this.playing = false;
		var backup = this.backups.pop();
		this.loadDat(backup);
		if(this.selectedSequence > this.dat.notes.length) this.selectedSequence = this.dat.notes.length - 1;
	}
	,drawButton: function(text,x,y,textcolor,color,colorhover,returnhoverstatus) {
		if(returnhoverstatus == null) returnhoverstatus = false;
		var width = 35;
		var w = Math.round(haxegon_Text.width(text));
		if(w + 8 >= width) width = w + 8;
		var height = 9;
		var dx = haxegon_Mouse.get_x() - x;
		var dy = haxegon_Mouse.get_y() - y;
		var collide = !(dx < 0 || dx >= width || dy < 0 || dy >= height);
		var click = collide && haxegon_Mouse.leftclick();
		if(collide && !click) color = colorhover;
		haxegon_Gfx.fillbox(x,y,width,height,color);
		haxegon_Text.display(x + 4,y + 2,text,textcolor);
		if(returnhoverstatus == true) click = collide;
		return click;
	}
	,collideBox: function(x,y,w,h) {
		var dx = haxegon_Mouse.get_x() - x;
		var dy = haxegon_Mouse.get_y() - y;
		var collide = !(dx < 0 || dx >= w || dy < 0 || dy >= h);
		if(collide == false) return 0;
		if(haxegon_Mouse.leftclick()) return 2;
		if(haxegon_Mouse.rightclick()) return 3;
		return 1;
	}
	,scrollt: null
	,scrollInterval: null
	,getNum: function() {
		if(haxegon_Input.justpressed(haxegon_Key.ONE)) return 1;
		if(haxegon_Input.justpressed(haxegon_Key.TWO)) return 2;
		if(haxegon_Input.justpressed(haxegon_Key.THREE)) return 3;
		if(haxegon_Input.justpressed(haxegon_Key.FOUR)) return 4;
		if(haxegon_Input.justpressed(haxegon_Key.FIVE)) return 5;
		if(haxegon_Input.justpressed(haxegon_Key.SIX)) return 6;
		if(haxegon_Input.justpressed(haxegon_Key.SEVEN)) return 7;
		if(haxegon_Input.justpressed(haxegon_Key.EIGHT)) return 8;
		if(haxegon_Input.justpressed(haxegon_Key.NINE)) return 9;
		if(haxegon_Input.justpressed(haxegon_Key.ZERO)) return 0;
		return -1;
	}
	,startPlay: function() {
		this.playing = true;
		this.playTick = this.selectedSequence * this.dat.patternLength * this.dat.cellDuration - 1;
	}
	,stopPlay: function() {
		this.playing = false;
	}
	,PushNewSequence: function() {
		this.MakeBackupCopy();
		var minNotFound = 0;
		var changed = true;
		this.dat.notes.push([[],[],[],[],[]]);
	}
	,GamePrompt: function(description,text) {
		return window.prompt(description,text);
	}
	,MusicPlayNote: function(a,b,c,d) {
		playNote(a,b,c,d / 4);
	}
	,lCounter: null
	,rCounter: null
	,plusCounter: null
	,minusCounter: null
	,copyBuffer: null
	,DecreasePatternLength: function() {
		if(this.dat.patternLength == 1) return;
		this.dat.patternLength--;
		var _g = 0;
		var _g1 = this.dat.notes;
		while(_g < _g1.length) {
			var sequence = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < sequence.length) {
				var channel = sequence[_g2];
				++_g2;
				var _g3 = 1 - channel.length;
				while(_g3 < 1) {
					var i = _g3++;
					var n = channel[-i];
					if(n[2] == this.dat.patternLength) channel.splice(-i,1);
					if(n[2] + n[1] - 1 == this.dat.patternLength) n[1]--;
				}
			}
		}
	}
	,DoCopy: function() {
		var toCopy = this.dat.notes[this.selectedSequence];
		this.copyBuffer = [];
		var _g = 0;
		while(_g < toCopy.length) {
			var a = toCopy[_g];
			++_g;
			var r1 = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				var b = a[_g1];
				++_g1;
				var r2 = [];
				var _g2 = 0;
				while(_g2 < b.length) {
					var c = b[_g2];
					++_g2;
					r2.push(c);
				}
				r1.push(r2);
			}
			this.copyBuffer.push(r1);
		}
	}
	,DoPaste: function() {
		if(this.copyBuffer == null) return;
		this.dat.notes[this.selectedSequence] = this.copyBuffer;
		this.DoCopy();
	}
	,occasional: function() {
		return 0.2 > haxegon_Random.random();
	}
	,GenerateRandom: function() {
		this.dat = { patternLength : haxegon_Random["int"](3,16), cellDuration : haxegon_Random["int"](1,10), instruments : [haxegon_Random["int"](0,99999999),haxegon_Random["int"](0,99999999),haxegon_Random["int"](0,99999999),haxegon_Random["int"](0,99999999),haxegon_Random["int"](0,99999999)], sequences : [0], notes : []};
		var sequenceCount = 11;
		var noteDensity = haxegon_Random["float"](0.1,0.5);
		var preferredLengths = [];
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			preferredLengths.push(haxegon_Random["int"](1,this.dat.patternLength));
		}
		var _g1 = 0;
		while(_g1 < sequenceCount) {
			var i1 = _g1++;
			var sequence = [];
			var _g11 = 0;
			while(_g11 < 5) {
				var j = _g11++;
				var channel = [];
				if(!this.occasional()) {
					var maxOnset = this.dat.patternLength - preferredLengths[j];
					var _g3 = 0;
					var _g2 = maxOnset;
					while(_g3 < _g2) {
						var k = _g3++;
						var r = haxegon_Random["float"](0,1);
						if(k % 4 == 0) r = r * r;
						if(r < noteDensity) channel.push([haxegon_Random["int"](1,120),preferredLengths[j],haxegon_Random["int"](1,maxOnset),haxegon_Random["int"](1,7)]);
					}
				}
				sequence.push(channel);
			}
			this.dat.notes.push(sequence);
		}
		var _g4 = 0;
		while(_g4 < sequenceCount) {
			var i2 = _g4++;
			this.selectedSequence = i2;
			this.DoCopy();
			this.selectedSequence = haxegon_Random["int"](0,this.dat.notes.length);
			this.DoPaste();
		}
	}
	,helpmode: null
	,overLink1: null
	,overLink2: null
	,doHelp: function() {
		haxegon_Gfx.clearscreen(this.backgroundCol);
		if(haxegon_Input.justpressed(haxegon_Key.SPACE) || haxegon_Input.justpressed(haxegon_Key.H) || haxegon_Input.justpressed(haxegon_Key.ESCAPE) || haxegon_Mouse.leftclick()) this.helpmode = false;
		haxegon_Text.set_size(2.5);
		var titleTop = 20;
		haxegon_Text.display(haxegon_Text.CENTER,10,"tinybox");
		haxegon_Text.set_size(1);
		var linkButton = 8913032;
		var linkHighlight = 8934792;
		if(this.drawButton("increpare.com",3,12,this.textCol,linkButton,linkHighlight,true)) this.overLink1 = 5;
		var rposx = haxegon_Gfx.screenwidth - 3 - Math.round(haxegon_Text.width("  patreon   ")) - 8;
		if(this.drawButton("  patreon   ",rposx,12,this.textCol,linkButton,linkHighlight,true)) this.overLink2 = 5;
		var i = 0;
		var textTop = titleTop + 15;
		haxegon_Text.display(3,textTop + 13 * i++,"Shortcuts:");
		haxegon_Text.display(3,textTop + 13 * i++,"~ Arrow keys or wsad,to scroll/set note length.");
		haxegon_Text.display(3,textTop + 13 * i++,"~ +/- or q and e to control volume.");
		haxegon_Text.display(3,textTop + 13 * i++,"~ Right click on instruments to randomize,");
		haxegon_Text.display(3,textTop + 13 * i++,"~ Or press numbers when hovering to enter.");
		haxegon_Text.display(3,textTop + 13 * i++,"~ You can press c/v to copy/paste sequences.");
		haxegon_Text.display(3,textTop + 13 * i++,"~ Right click notes/sequences to remove.");
		haxegon_Text.display(3,textTop + 13 * i++,"~ Z to undo.");
	}
	,doExportPanel: function() {
		haxegon_Gfx.clearscreen(this.backgroundCol);
		if(haxegon_Input.justpressed(haxegon_Key.SPACE) || haxegon_Input.justpressed(haxegon_Key.H) || haxegon_Input.justpressed(haxegon_Key.ESCAPE) || haxegon_Mouse.leftclick()) this.helpmode = false;
		haxegon_Text.set_size(2.5);
		var titleTop = 20;
		var pc = Math.floor(100 * this.playTick / (this.dat.notes.length * this.dat.patternLength * this.dat.cellDuration));
		haxegon_Text.display(haxegon_Text.CENTER,50,"EXPORTING");
		haxegon_Text.display(haxegon_Text.CENTER,70,pc + "%");
		haxegon_Text.set_size(1);
	}
	,startExport: function() {
		this.selectedSequence = 0;
		this.EXPORTMODE = true;
		startRecording();
		this.startPlay();
	}
	,audioUpdate: function() {
		if(!this.playing) return;
		this.playTick++;
		var pieceLengthInTicks = this.dat.notes.length * this.dat.patternLength * this.dat.cellDuration;
		if(this.EXPORTMODE) {
			if(this.playTick == pieceLengthInTicks) {
				this.stopPlay();
				stopRecording();
				this.EXPORTMODE = false;
				return;
			}
		}
		this.playTick = this.playTick % pieceLengthInTicks;
		var globalCell = haxegon_Convert.toint(this.playTick / this.dat.cellDuration);
		var playPattern = haxegon_Convert.toint(globalCell / this.dat.patternLength);
		this.selectedSequence = playPattern;
		var patternProgress = globalCell - this.dat.patternLength * playPattern;
		if(this.playTick % this.dat.cellDuration == 0) this.TryPlayNote(patternProgress);
	}
	,update: function() {
		this.overLink1--;
		this.overLink2--;
		if(this.EXPORTMODE) {
			this.audioUpdate();
			this.doExportPanel();
			return;
		}
		if(this.helpmode) {
			this.doHelp();
			return;
		}
		if(haxegon_Input.justpressed(haxegon_Key.H)) this.helpmode = true;
		if(haxegon_Input.justpressed(haxegon_Key.Z)) this.DoUndo();
		if(haxegon_Input.justpressed(haxegon_Key.R)) this.GenerateRandom();
		if(haxegon_Input.justpressed(haxegon_Key.C)) this.DoCopy();
		if(haxegon_Input.justpressed(haxegon_Key.V) || haxegon_Input.justpressed(haxegon_Key.P)) this.DoPaste();
		if(haxegon_Input.justpressed(haxegon_Key.SPACE) || haxegon_Input.justpressed(haxegon_Key.ENTER)) {
			if(this.playing) this.playing = false; else this.startPlay();
		}
		if((haxegon_Input.pressed(haxegon_Key.DOWN) || haxegon_Input.pressed(haxegon_Key.S) || haxegon_Mouse.mousewheel < -0.5) && this.bottomNote > 0) this.bottomNote--;
		if((haxegon_Input.pressed(haxegon_Key.UP) || haxegon_Input.pressed(haxegon_Key.W) || haxegon_Mouse.mousewheel > 0.5) && this.bottomNote < 108) this.bottomNote++;
		if(haxegon_Input.pressed(haxegon_Key.LEFT) || haxegon_Input.pressed(haxegon_Key.A)) {
			this.lCounter--;
			if(this.lCounter <= 0) {
				if(this.lastl > 1) {
					this.noteLength = this.lastl - 1;
					this.lastl = this.noteLength;
					this.lCounter = 5;
				}
			}
		} else this.lCounter = 0;
		if(haxegon_Input.pressed(haxegon_Key.RIGHT) || haxegon_Input.pressed(haxegon_Key.D)) {
			this.rCounter--;
			if(this.rCounter <= 0) {
				if(this.noteLength < 16) {
					this.noteLength++;
					this.lastl = this.noteLength;
					this.rCounter = 5;
				}
			}
		} else this.rCounter = 0;
		if(haxegon_Input.pressed(haxegon_Key.PLUS) || haxegon_Input.pressed(haxegon_Key.E)) {
			this.plusCounter--;
			if(this.plusCounter <= 0) {
				if(this.noteVol < this.maxVol) {
					this.noteVol++;
					this.plusCounter = 4;
				}
			}
		} else this.plusCounter = 0;
		if(haxegon_Input.pressed(haxegon_Key.MINUS) || haxegon_Input.pressed(haxegon_Key.Q)) {
			this.minusCounter--;
			if(this.minusCounter <= 0) {
				if(this.noteVol > 1) {
					this.noteVol--;
					this.minusCounter = 4;
				}
			}
		} else this.minusCounter = 0;
		this.scrollt--;
		haxegon_Gfx.clearscreen(this.backgroundCol);
		var cellCount = 12;
		var colLength = Math.min(this.dat.notes.length + 1,12);
		var seqTop = 14;
		haxegon_Gfx.fillbox(1,seqTop,13,11 + colLength * 10,this.panelCol);
		haxegon_Text.display(2,seqTop + 3,"SEQ",this.textCol);
		var _g1 = 0;
		var _g = this.dat.notes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tCol = this.darkText;
			var collide1 = this.collideBox(2,seqTop + 11 + i * 10,11,9);
			var col2;
			if(i == this.selectedSequence) col2 = this.mainHighlighter; else col2 = this.mainHighlight;
			if(collide1 == 1 && i != this.selectedSequence) {
				col2 = this.mainHighlightish;
				tCol = haxegon_Col.GREY;
			}
			if(collide1 == 2) {
				this.selectedSequence = i;
				this.playTick = this.selectedSequence * this.dat.patternLength * this.dat.cellDuration - 1;
			}
			if(collide1 == 3) {
				if(this.dat.notes.length > 1) {
					this.dat.notes.splice(i,1);
					if(this.selectedSequence >= i && this.selectedSequence > 0) this.selectedSequence--;
					break;
				}
			}
			haxegon_Gfx.fillbox(2,seqTop + 11 + i * 10,11,9,col2);
			var s = haxegon_Convert.tostring(i + 1);
			if(i < 9) s = "0" + s;
			haxegon_Text.display(4,seqTop + 11 + i * 10 + 2,s,tCol);
		}
		if(this.dat.notes.length < 12) {
			var i1 = this.dat.notes.length;
			var collide2 = this.collideBox(2,seqTop + 11 + i1 * 10,11,9);
			var col3 = haxegon_Col.GREY;
			if(collide2 == 1) col3 = haxegon_Col.WHITE;
			if(collide2 == 2) this.PushNewSequence();
			haxegon_Text.display(6,seqTop + 11 + i1 * 10 + 2,"+",col3);
		}
		var xOffset = haxegon_Gfx.screenwidth - 76;
		var yOffset = 3;
		var collide = this.collideBox(xOffset + 46,1,26,7);
		if(collide == 2 && this.dat.cellDuration > 1) this.dat.cellDuration--;
		if(collide == 3 && this.dat.cellDuration < 10) this.dat.cellDuration++;
		var col;
		if(collide == 1) col = this.mainHighlighter; else col = this.mainHighlight;
		haxegon_Gfx.fillbox(xOffset + 39,yOffset,20,9,this.panelCol);
		haxegon_Gfx.fillbox(xOffset + 59,yOffset,15,9,col);
		haxegon_Text.display(xOffset + 44,yOffset + 2,"bpm",this.textCol);
		var bpmString = haxegon_Convert.tostring(haxegon_Convert.toint(450 / this.dat.cellDuration));
		haxegon_Text.display(xOffset + 61,yOffset + 2,bpmString,this.textCol);
		yOffset += 12;
		collide = this.collideBox(xOffset + 39,yOffset - 1,35,9);
		if(collide == 2 && this.dat.patternLength < 16) this.dat.patternLength++;
		if(collide == 3 && this.dat.patternLength > 0) this.DecreasePatternLength();
		var col1;
		if(collide == 1) col1 = this.mainHighlighter; else col1 = this.mainHighlight;
		haxegon_Gfx.fillbox(xOffset + 39,yOffset - 1,24,9,this.panelCol);
		haxegon_Gfx.fillbox(xOffset + 63,yOffset - 1,11,9,col1);
		haxegon_Text.display(xOffset + 42,yOffset + 1,"notes",this.textCol);
		var noteStr = haxegon_Convert.tostring(this.dat.patternLength);
		if(this.dat.patternLength < 10) noteStr = "0" + noteStr;
		haxegon_Text.display(xOffset + 65,yOffset + 1,noteStr,this.textCol);
		var instPanelX = 29;
		var instPanelY = 13;
		haxegon_Gfx.fillbox(instPanelX + 124,instPanelY - 10,48,10,this.panelCol);
		haxegon_Gfx.fillbox(instPanelX - 5,instPanelY - 1,177,11,this.panelCol);
		haxegon_Text.display(instPanelX + 127,instPanelY - 8,"instruments",this.textCol);
		haxegon_Gfx.fillbox(instPanelX + this.selectedInst * 35 - 4,instPanelY,35,9,16777215);
		var k = 0;
		var _g2 = 0;
		while(_g2 < 5) {
			var k1 = _g2++;
			var c = this.collideBox(instPanelX - 4 + k1 * 35,instPanelY,35,9);
			if(c > 0) {
				if(k1 != this.selectedInst) haxegon_Gfx.fillbox(instPanelX - 4 + k1 * 35,instPanelY,35,9,haxegon_Col.GREY);
				if(c == 2) this.setInstrument(k1,true);
			}
			if(c == 3) {
				this.MakeBackupCopy();
				this.dat.instruments[k1] = haxegon_Random["int"](0,99999999);
				this.MusicPlayNote(this.dat.instruments[k1],1,1,1.0);
			}
			haxegon_Gfx.fillbox(instPanelX - 3 + k1 * 35,instPanelY + 1,33,7,this.instCols[k1][0]);
			var n = this.dat.instruments[k1];
			haxegon_Text.display(instPanelX - 2 + k1 * 35,instPanelY + 2,haxegon_Convert.tostring(n),this.instCols[k1][1]);
			if(c > 0) {
				var n1 = this.getNum();
				if(n1 >= 0) this.dat.instruments[k1] = this.dat.instruments[k1] * 10 % 100000000 + n1;
				if(haxegon_Input.justpressed(haxegon_Key.BACKSPACE)) this.dat.instruments[k1] = 0;
			}
		}
		var buttonx = haxegon_Gfx.screenwidth - 37;
		var buttonStep = 10;
		var buttonYOffset = 26 + buttonStep;
		if(this.drawButton("play   ",buttonx,buttonYOffset + buttonStep * 0,this.textCol,this.mainButton,this.mainHighlight)) this.startPlay();
		if(this.drawButton("stop   ",buttonx,buttonYOffset + buttonStep,this.textCol,this.mainButton,this.mainHighlight)) this.playing = false;
		if(this.drawButton("clr pat",buttonx,buttonYOffset + buttonStep * 3,this.textCol,this.mainButton,this.mainHighlight)) {
			this.MakeBackupCopy();
			this.dat.notes[this.selectedSequence] = [[],[],[],[],[]];
		}
		if(this.drawButton("new   ",buttonx,buttonYOffset + buttonStep * 7,this.textCol,this.mainButton,this.mainHighlight)) {
			this.MakeBackupCopy();
			this.dat = { patternLength : 16, cellDuration : 3, instruments : [57803926,67910236,85155178,1,14620627], sequences : [0], notes : [[[],[],[],[],[]]]};
			this.selectedSequence = 0;
		}
		if(this.drawButton("save   ",buttonx,buttonYOffset + buttonStep * 6,this.textCol,this.mainButton,this.mainHighlight)) this.GamePrompt("Music data string:",this.saveDat());
		if(this.drawButton("load   ",buttonx,buttonYOffset + buttonStep * 7,this.textCol,this.mainButton,this.mainHighlight)) {
			var ld = this.GamePrompt("Enter music data string:","");
			if(ld != null && ld.length > 0) this.loadDat(ld);
		}
		if(this.drawButton("export ",buttonx,buttonYOffset + buttonStep * 8,this.textCol,this.mainButton,this.mainHighlight)) this.startExport();
		if(this.drawButton("help   ",buttonx,buttonYOffset + buttonStep * 9 + 10,this.textCol,this.mainButton,this.mainHighlight)) this.helpmode = true;
		var gx = 24;
		var gy = 25;
		var cellWidth = 11;
		var cellHeight = 10;
		var xCells = this.dat.patternLength;
		var yCells = 12;
		haxegon_Gfx.fillbox(gx,gy,xCells * cellWidth + 1,yCells * cellHeight + 1,this.panelCol);
		var octaveDisplay = Math.floor(this.bottomNote / 12);
		var cNotePos = this.bottomNote % 12;
		if(octaveDisplay > 9) haxegon_Text.display(gx - 11,gy + cellHeight * cNotePos + 3,haxegon_Convert.tostring(octaveDisplay)); else haxegon_Text.display(gx - 4,gy + cellHeight * cNotePos + 3,haxegon_Convert.tostring(octaveDisplay));
		var _g3 = 0;
		while(_g3 < 12) {
			var i2 = _g3++;
			haxegon_Text.display(gx - 8,gy + cellHeight * i2 + 3,this.notenames[(this.bottomNote + 11 - i2) % 12],haxegon_Col.GREY);
		}
		if(octaveDisplay >= 0) haxegon_Gfx.fillbox(gx - 8,gy + cellHeight * (cNotePos + 1),xCells * cellWidth + 8,1,5592405);
		var _g4 = 0;
		while(_g4 < xCells) {
			var i3 = _g4++;
			var _g11 = 0;
			while(_g11 < yCells) {
				var j = _g11++;
				var col4 = this.mainHighlight;
				if(i3 % 4 == 0) col4 = this.mainHighlighter; else if(!this.blackNotes[(137 - this.bottomNote + j) % 12]) col4 = this.mainHighlightish;
				haxegon_Gfx.fillbox(gx + 1 + cellWidth * i3,gy + 1 + cellHeight * j,cellWidth - 1,cellHeight - 1,col4);
			}
		}
		var _g5 = 0;
		while(_g5 < 5) {
			var c2 = _g5++;
			var c1 = this.channelOrder[c2];
			var channel = null;
			try {
				channel = this.dat.notes[this.selectedSequence][c1];
			} catch( msg ) {
				haxe_CallStack.lastException = msg;
				if (msg instanceof js__$Boot_HaxeError) msg = msg.val;
				if( js_Boot.__instanceof(msg,String) ) {
					haxe_Log.trace(msg,{ fileName : "Main.hx", lineNumber : 938, className : "Main", methodName : "update"});
				} else throw(msg);
			}
			var colIndex;
			if(c1 == this.selectedInst) colIndex = 1; else colIndex = 0;
			var col5 = this.instCols[c1][colIndex];
			var _g12 = 0;
			while(_g12 < channel.length) {
				var n2 = channel[_g12];
				++_g12;
				var notePos = n2[0];
				var dNote = notePos - this.bottomNote;
				var x = gx + 1 + cellWidth * n2[2];
				var l = n2[1];
				if(dNote <= 0) {
					var y = 145;
					haxegon_Gfx.fillbox(x,y,cellWidth * l - 1,1,col5);
				} else if(dNote > 12) {
					var y1 = 23;
					haxegon_Gfx.fillbox(x,y1,cellWidth * l - 1,1,col5);
				} else {
					var y2 = gy + 2 + cellHeight * (12 - dNote);
					var l1 = n2[1];
					var v = n2[3];
					haxegon_Gfx.fillbox(x,y2 + this.maxVol - v - 1,cellWidth * l1 - 1,v,col5);
				}
			}
		}
		var gridWidth = cellWidth * xCells;
		var gridHeight = cellHeight * yCells;
		var dx = haxegon_Mouse.get_x() - gx;
		var dy = haxegon_Mouse.get_y() - gy;
		if(haxegon_Mouse.leftclick()) this.pressedDownOnCanvas = false;
		if(dx >= 0 && dx < gridWidth && dy >= 0 && dy < gridHeight) {
			if(haxegon_Mouse.leftclick()) this.pressedDownOnCanvas = true;
			if(haxegon_Input.justpressed(haxegon_Key.ONE)) this.setInstrument(0,false);
			if(haxegon_Input.justpressed(haxegon_Key.TWO)) this.setInstrument(1,false);
			if(haxegon_Input.justpressed(haxegon_Key.THREE)) this.setInstrument(2,false);
			if(haxegon_Input.justpressed(haxegon_Key.FOUR)) this.setInstrument(3,false);
			if(haxegon_Input.justpressed(haxegon_Key.FIVE)) this.setInstrument(4,false);
			var sx = Math.floor(dx / cellWidth);
			var sy = Math.floor(dy / cellHeight);
			var l2 = this.noteLength;
			if(sx + l2 >= xCells) {
				l2 = xCells - sx;
				this.lastl = l2;
			}
			haxegon_Gfx.drawbox(gx + 1 + cellWidth * sx,gy + 1 + cellHeight * sy + this.maxVol - this.noteVol - 1,cellWidth * l2 - 1,this.noteVol + 1,16777215);
			if(haxegon_Mouse.leftheld() && this.pressedDownOnCanvas) {
				if(haxegon_Mouse.leftclick()) this.MakeBackupCopy();
				var clickX = sx;
				var clickY = this.bottomNote + 12 - sy;
				var _g6 = 0;
				while(_g6 < l2) {
					var i4 = _g6++;
					if(haxegon_Mouse.leftclick()) {
						this.MakeBackupCopy();
						this.blockNote(clickX + i4,clickY);
					} else this.deleteNote(clickX + i4,clickY);
				}
				if(this.oldAddX >= 0) this.blockNote(this.oldAddX,this.oldAddY);
				var newNote = [clickY,l2,clickX,this.noteVol];
				this.dat.notes[this.selectedSequence][this.selectedInst].push(newNote);
				if(haxegon_Mouse.leftclick()) this.DoPlayNote(this.selectedInst,newNote);
				this.oldAddX = clickX;
				this.oldAddY = clickY;
			} else {
				this.oldAddX = -1;
				this.oldAddY = -1;
			}
			if(haxegon_Mouse.rightheld()) {
				var clickX1 = sx;
				var clickY1 = this.bottomNote + 12 - sy;
				this.deleteNote(clickX1,clickY1);
			}
		} else if(haxegon_Mouse.leftheld() == false) {
			this.oldAddX = -1;
			this.oldAddY = -1;
		}
		haxegon_Text.display(2,4,"tinybox music editor",haxegon_Col.DARKBROWN);
		this.audioUpdate();
		if(this.playing) {
			var globalCell = haxegon_Convert.toint(this.playTick / this.dat.cellDuration);
			var playPattern = haxegon_Convert.toint(globalCell / this.dat.patternLength);
			var patternProgress = globalCell - this.dat.patternLength * playPattern;
			haxegon_Gfx.fillbox(gx + cellWidth * patternProgress,gy,1,gy * cellHeight,haxegon_Col.WHITE);
		}
	}
	,DoPlayNote: function(c,n) {
		var notePos = n[2];
		var pitch = Math.pow(2,(n[0] - 61) / 12);
		var noteLength = n[1] * this.dat.cellDuration / 30;
		this.MusicPlayNote(this.dat.instruments[c],pitch,noteLength,n[3] / this.maxVol);
	}
	,TryPlayNote: function(x) {
		var _g = 0;
		while(_g < 5) {
			var c = _g++;
			var channel = this.dat.notes[this.selectedSequence][c];
			var _g1 = 0;
			while(_g1 < channel.length) {
				var n = channel[_g1];
				++_g1;
				var notePos = n[2];
				if(notePos == x) this.DoPlayNote(c,n);
			}
		}
	}
	,setInstrument: function(k,play) {
		if(play) this.MusicPlayNote(this.dat.instruments[k],1,1,1.0);
		this.selectedInst = k;
		var kIndex = HxOverrides.indexOf(this.channelOrder,k,0);
		this.channelOrder.splice(kIndex,1);
		this.channelOrder.push(k);
	}
	,deleteNote: function(clickX,clickY) {
		var _g = 0;
		var _g1 = this.dat.notes[this.selectedSequence][this.selectedInst];
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var noteX = n[2];
			var noteL = n[1];
			var noteY = n[0];
			if(clickY == noteY && clickX >= noteX && clickX < noteX + noteL) {
				var arr = this.dat.notes[this.selectedSequence][this.selectedInst];
				var noteIndex = HxOverrides.indexOf(arr,n,0);
				arr.splice(noteIndex,1);
				break;
			}
		}
	}
	,blockNote: function(clickX,clickY) {
		var _g = 0;
		var _g1 = this.dat.notes[this.selectedSequence][this.selectedInst];
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var noteX = n[2];
			var noteL = n[1];
			var noteY = n[0];
			if(clickY == noteY && clickX >= noteX && clickX < noteX + noteL) {
				if(clickX == noteX) {
					var arr = this.dat.notes[this.selectedSequence][this.selectedInst];
					var noteIndex = HxOverrides.indexOf(arr,n,0);
					arr.splice(noteIndex,1);
					break;
				} else n[1] = clickX - noteX;
			}
		}
	}
	,__class__: Main
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = ["ManifestResources"];
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	var rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) rootPath = Reflect.field(config,"rootPath");
	if(rootPath == null) rootPath = "";
	lime_utils_Assets.defaultRootPath = rootPath;
	var data;
	var manifest;
	var library;
	data = "{\"name\":null,\"assets\":\"aoy4:pathy43:data%2Fgraphics%2Ffonts%2Fpixel%2Fpixel.fnty4:sizei20629y4:typey4:TEXTy2:idR1y7:preloadtgoR0y45:data%2Fgraphics%2Ffonts%2Fpixel%2Fpixel_0.pngR2i1227R3y5:IMAGER5R7R6tgh\",\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	manifest = lime_utils_AssetManifest.parse(data,rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) ManifestResources.preloadLibraries.push(library); else ManifestResources.preloadLibraryNames.push("default");
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element && (function($this) {
				var $r;
				if(child.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				$r = child.nodeName;
				return $r;
			}(this)) == name) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = window.performance.now() / 1000;
	var r = f();
	haxe_Log.trace(window.performance.now() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return window.performance.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(srcpos == 0 && len == src.b.byteLength) this.b.set(src.b,pos); else this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.set(pos++,value);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len;
		if(this.length < other.length) len = this.length; else len = other.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(b1[i] != b2[i]) return b1[i] - b2[i];
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
	}
	,getDouble: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var high = this.getInt32(pos + 4);
		var low = this.getInt32(pos);
		var x = new haxe__$Int64__$_$_$Int64(high,low);
		return x;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) complement = true;
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0?0:1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) throw new js__$Boot_HaxeError("Not_found");
		var c = this.compare(k,node.key);
		if(c == 0) return this.merge(node.left,node.right); else if(c < 0) return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right); else return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) return t2;
		if(t2 == null) return t1;
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) throw new js__$Boot_HaxeError("Not_found"); else if(t.left == null) return t; else return this.minBinding(t.left);
	}
	,removeMinBinding: function(t) {
		if(t.left == null) return t.right; else return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		exp++;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) return "";
	return s.dir;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var haxegon_Col = function() { };
$hxClasses["haxegon.Col"] = haxegon_Col;
haxegon_Col.__name__ = ["haxegon","Col"];
haxegon_Col.getred = function(c) {
	return c >> 16 & 255;
};
haxegon_Col.getgreen = function(c) {
	return c >> 8 & 255;
};
haxegon_Col.getblue = function(c) {
	return c & 255;
};
haxegon_Col.shiftred = function(c,shift) {
	return haxegon_Col.rgb(Std["int"](Math.min(255,Math.max((c >> 16 & 255) + shift,0))),c >> 8 & 255,c & 255);
};
haxegon_Col.shiftgreen = function(c,shift) {
	return haxegon_Col.rgb(c >> 16 & 255,Std["int"](Math.min(255,Math.max((c >> 8 & 255) + shift,0))),c & 255);
};
haxegon_Col.shiftblue = function(c,shift) {
	return haxegon_Col.rgb(c >> 16 & 255,c >> 8 & 255,Std["int"](Math.min(255,Math.max((c & 255) + shift,0))));
};
haxegon_Col.shifthue = function(c,shift) {
	if(shift < 0) while(shift < 0) shift += 360;
	return haxegon_Col.hsl((haxegon_Col.gethue(c) + (shift | 0)) % 360,haxegon_Col.getsaturation(c),haxegon_Col.getlightness(c));
};
haxegon_Col.multiplysaturation = function(c,shift) {
	return haxegon_Col.hsl(haxegon_Col.gethue(c),haxegon_Geom.clamp(haxegon_Col.getsaturation(c) * shift,0,1.0),haxegon_Col.getlightness(c));
};
haxegon_Col.multiplylightness = function(c,shift) {
	return haxegon_Col.hsl(haxegon_Col.gethue(c),haxegon_Col.getsaturation(c),haxegon_Geom.clamp(haxegon_Col.getlightness(c) * shift,0,1.0));
};
haxegon_Col.gethue = function(c) {
	var r = (c >> 16 & 255) / 255;
	var g = (c >> 8 & 255) / 255;
	var b = (c & 255) / 255;
	var max = Math.max(Math.max(r,g),b);
	var min = Math.min(Math.min(r,g),b);
	var h = (max + min) / 2;
	if(max != min) {
		var d = max - min;
		if(max == r) h = (g - b) / d + (g < b?6:0); else if(max == g) h = (b - r) / d + 2; else if(max == b) h = (r - g) / d + 4;
		h /= 6;
	}
	return h * 360 | 0;
};
haxegon_Col.getsaturation = function(c) {
	var r = (c >> 16 & 255) / 255;
	var g = (c >> 8 & 255) / 255;
	var b = (c & 255) / 255;
	var max = Math.max(Math.max(r,g),b);
	var min = Math.min(Math.min(r,g),b);
	var s = (max + min) / 2;
	var l = s;
	if(max == min) s = 0; else {
		var d = max - min;
		if(l > 0.5) s = d / (2 - max - min); else s = d / (max + min);
	}
	return s;
};
haxegon_Col.getlightness = function(c) {
	var r = (c >> 16 & 255) / 255;
	var g = (c >> 8 & 255) / 255;
	var b = (c & 255) / 255;
	var max = Math.max(Math.max(r,g),b);
	var min = Math.min(Math.min(r,g),b);
	return (max + min) / 2;
};
haxegon_Col.rgb = function(red,green,blue) {
	return blue | green << 8 | red << 16;
};
haxegon_Col.hsl = function(hue,saturation,lightness) {
	var q;
	if(lightness < 0.5) q = lightness * (1 + saturation); else q = lightness + saturation - lightness * saturation;
	var p = 2 * lightness - q;
	var hk = hue % 360 / 360;
	haxegon_Col.hslval[0] = hk + 0.333333333333333315;
	haxegon_Col.hslval[1] = hk;
	haxegon_Col.hslval[2] = hk - 0.333333333333333315;
	var _g = 0;
	while(_g < 3) {
		var n = _g++;
		if(haxegon_Col.hslval[n] < 0) haxegon_Col.hslval[n] += 1;
		if(haxegon_Col.hslval[n] > 1) haxegon_Col.hslval[n] -= 1;
		if(haxegon_Col.hslval[n] < 0.166666666666666657) haxegon_Col.hslval[n] = p + (q - p) * 6 * haxegon_Col.hslval[n]; else if(haxegon_Col.hslval[n] < 0.5) haxegon_Col.hslval[n] = q; else if(haxegon_Col.hslval[n] < 0.66666666666666663) haxegon_Col.hslval[n] = p + (q - p) * 6 * (0.66666666666666663 - haxegon_Col.hslval[n]); else haxegon_Col.hslval[n] = p;
	}
	return haxegon_Col.rgb(haxegon_Col.hslval[0] * 255 | 0,haxegon_Col.hslval[1] * 255 | 0,haxegon_Col.hslval[2] * 255 | 0);
};
var haxegon_Convert = function() { };
$hxClasses["haxegon.Convert"] = haxegon_Convert;
haxegon_Convert.__name__ = ["haxegon","Convert"];
haxegon_Convert.tostring = function(value) {
	return Std.string(value);
};
haxegon_Convert.toint = function(value) {
	return Std.parseInt(Std.string(value));
};
haxegon_Convert.tofloat = function(value) {
	return Std.parseFloat(value);
};
var starling_events_EventDispatcher = function() {
};
$hxClasses["starling.events.EventDispatcher"] = starling_events_EventDispatcher;
starling_events_EventDispatcher.__name__ = ["starling","events","EventDispatcher"];
starling_events_EventDispatcher.prototype = {
	mEventListeners: null
	,addEventListener: function(type,listener) {
		if(this.mEventListeners == null) this.mEventListeners = new haxe_ds_StringMap();
		var listeners = this.mEventListeners.get(type);
		if(listeners == null) {
			var v = openfl__$Vector_Vector_$Impl_$.toFunctionVector(null);
			this.mEventListeners.set(type,v);
			v;
			var this1 = this.mEventListeners.get(type);
			this1.data.push(listener);
		} else {
			var _g1 = 0;
			var _g = listeners.data.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(listeners.data.get(i),listener)) return;
			}
			var index = listeners.data.get_length();
			listeners.data.set(index,listener);
		}
	}
	,removeEventListener: function(type,listener) {
		if(this.mEventListeners != null) {
			var listeners = this.mEventListeners.get(type);
			var numListeners;
			if(listeners != null) numListeners = listeners.data.get_length(); else numListeners = 0;
			if(numListeners > 0) {
				var index = listeners.data.indexOf(listener,0);
				if(index != -1) {
					var restListeners = new openfl__$Vector_AbstractVector(listeners.data.slice(0,index));
					var _g = index + 1;
					while(_g < numListeners) {
						var i = _g++;
						var value = listeners.data.get(i);
						restListeners.data.set(i - 1,value);
					}
					{
						this.mEventListeners.set(type,restListeners);
						restListeners;
					}
				}
			}
		}
	}
	,removeEventListeners: function(type) {
		if(type != null && this.mEventListeners != null) this.mEventListeners.remove(type); else this.mEventListeners = null;
	}
	,dispatchEvent: function(event) {
		var bubbles = event.bubbles;
		if(!bubbles && (this.mEventListeners == null || !this.mEventListeners.exists(event.type))) return;
		var previousTarget = event.target;
		event.setTarget(this);
		if(bubbles && js_Boot.__instanceof(this,starling_display_DisplayObject)) this.bubbleEvent(event); else this.invokeEvent(event);
		if(previousTarget != null) event.setTarget(previousTarget);
	}
	,invokeEvent: function(event) {
		var listeners;
		if(this.mEventListeners != null) listeners = this.mEventListeners.get(event.type); else listeners = null;
		var numListeners;
		if(listeners == null) numListeners = 0; else numListeners = listeners.data.get_length();
		if(numListeners != 0) {
			event.setCurrentTarget(this);
			var _g = 0;
			while(_g < numListeners) {
				var i = _g++;
				var listener = listeners.data.get(i);
				if(listener == null) continue;
				var numArgs = 2;
				if(numArgs == 0) listener(); else if(numArgs == 1) listener(event); else listener(event,event.data);
				if(event.stopsImmediatePropagation) return true;
			}
			return event.stopsPropagation;
		} else return false;
	}
	,bubbleEvent: function(event) {
		var chain;
		var element;
		element = js_Boot.__cast(this , starling_display_DisplayObject);
		var length = 1;
		if(starling_events_EventDispatcher.sBubbleChains.length > 0) {
			chain = starling_events_EventDispatcher.sBubbleChains.pop();
			chain.data.set(0,element);
		} else {
			var a = [element];
			var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
			chain = vector;
		}
		while((element = element.get_parent()) != null) {
			var index = length++;
			chain.data.set(index,element);
		}
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			if(chain.data.get(i1) == null) continue;
			var stopPropagation = chain.data.get(i1).invokeEvent(event);
			if(stopPropagation) break;
		}
		chain.data.set_length(0);
		starling_events_EventDispatcher.sBubbleChains[starling_events_EventDispatcher.sBubbleChains.length] = chain;
	}
	,dispatchEventWith: function(type,bubbles,data) {
		if(bubbles == null) bubbles = false;
		if(bubbles || this.hasEventListener(type)) {
			var event = starling_events_Event.fromPool(type,bubbles,data);
			this.dispatchEvent(event);
			starling_events_Event.toPool(event);
		}
	}
	,hasEventListener: function(type) {
		var listeners;
		if(this.mEventListeners != null) listeners = this.mEventListeners.get(type); else listeners = null;
		if(listeners != null) return listeners.data.get_length() != 0; else return false;
	}
	,__class__: starling_events_EventDispatcher
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_utils_ObjectPool_$openfl_$geom_$Matrix = function(create,clean,size) {
	if(create != null) this.create = create;
	if(clean != null) this.clean = clean;
	if(size != null) this.set_size(size);
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Matrix"] = lime_utils_ObjectPool_$openfl_$geom_$Matrix;
lime_utils_ObjectPool_$openfl_$geom_$Matrix.__name__ = ["lime","utils","ObjectPool_openfl_geom_Matrix"];
lime_utils_ObjectPool_$openfl_$geom_$Matrix.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!(this.__pool.h.__keys__[object.__id__] != null)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) object = this.__getInactive(); else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		} else this.__pool.remove(object);
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject0 = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject1 = this.__inactiveObjectList.pop();
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		var _g_head = this.__inactiveObjectList.h;
		var _g_val = null;
		while(_g_head != null) {
			var object;
			object = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			count--;
			if(count == 0 || this.inactiveObjects == 0) return;
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) this.__size = null; else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) this.__removeInactive(current - value); else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else break;
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Matrix
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else vector3D.setTo(0,0,1);
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) {
			var this1;
			this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.data.get_length() == 16) {
		var data = null;
		this.rawData = new openfl__$Vector_AbstractVector(v.data.concat(data));
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a1.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a1[i]);
			}
		}
		$r = vector;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var value = thisMat.rawData.data.get(i) + (toMat.rawData.data.get(i) - thisMat.rawData.data.get(i)) * percent;
		m.rawData.data.set(i,value);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.data.set(0,c + a1.x * a1.x * t);
	m.rawData.data.set(5,c + a1.y * a1.y * t);
	m.rawData.data.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.data.set(4,tmp1 + tmp2);
	m.rawData.data.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.data.set(8,tmp1 - tmp2);
	m.rawData.data.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.data.set(9,tmp1 + tmp2);
	m.rawData.data.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data.get(0);
		var m121 = this.rawData.data.get(4);
		var m131 = this.rawData.data.get(8);
		var m141 = this.rawData.data.get(12);
		var m112 = this.rawData.data.get(1);
		var m122 = this.rawData.data.get(5);
		var m132 = this.rawData.data.get(9);
		var m142 = this.rawData.data.get(13);
		var m113 = this.rawData.data.get(2);
		var m123 = this.rawData.data.get(6);
		var m133 = this.rawData.data.get(10);
		var m143 = this.rawData.data.get(14);
		var m114 = this.rawData.data.get(3);
		var m124 = this.rawData.data.get(7);
		var m134 = this.rawData.data.get(11);
		var m144 = this.rawData.data.get(15);
		var m211 = lhs.rawData.data.get(0);
		var m221 = lhs.rawData.data.get(4);
		var m231 = lhs.rawData.data.get(8);
		var m241 = lhs.rawData.data.get(12);
		var m212 = lhs.rawData.data.get(1);
		var m222 = lhs.rawData.data.get(5);
		var m232 = lhs.rawData.data.get(9);
		var m242 = lhs.rawData.data.get(13);
		var m213 = lhs.rawData.data.get(2);
		var m223 = lhs.rawData.data.get(6);
		var m233 = lhs.rawData.data.get(10);
		var m243 = lhs.rawData.data.get(14);
		var m214 = lhs.rawData.data.get(3);
		var m224 = lhs.rawData.data.get(7);
		var m234 = lhs.rawData.data.get(11);
		var m244 = lhs.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz;
		tx = ty = tz = 0;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			{
				var _g1 = 0;
				var _g = a.length;
				while(_g1 < _g) {
					var i = _g1++;
					vector.data.set(i,a[i]);
				}
			}
			$r = vector;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var value = this.rawData.data.get(12) + x;
		this.rawData.data.set(12,value);
		var value1 = this.rawData.data.get(13) + y;
		this.rawData.data.set(13,value1);
		var value2 = this.rawData.data.get(14) + z;
		this.rawData.data.set(14,value2);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(new openfl__$Vector_AbstractVector(this.rawData.data.copy()));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(1,vector3D.y);
			this.rawData.data.set(2,vector3D.z);
			this.rawData.data.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(4,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(6,vector3D.z);
			this.rawData.data.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(8,vector3D.x);
			this.rawData.data.set(9,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(12,vector3D.x);
			this.rawData.data.set(13,vector3D.y);
			this.rawData.data.set(14,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(1);
			vector3D.z = this.rawData.data.get(2);
			vector3D.w = this.rawData.data.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(4);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(6);
			vector3D.w = this.rawData.data.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(8);
			vector3D.y = this.rawData.data.get(9);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(12);
			vector3D.y = this.rawData.data.get(13);
			vector3D.z = this.rawData.data.get(14);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = new openfl__$Vector_AbstractVector(other.rawData.data.copy());
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var length;
		var a = vector.data.get_length();
		length = a - index;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = vector.data.get(i + index);
			this.rawData.data.set(i,value);
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var _g1 = 0;
		var _g = this.rawData.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.rawData.data.get(i);
			vector.data.set(i + index,value);
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(4,vector3D.y);
			this.rawData.data.set(8,vector3D.z);
			this.rawData.data.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(1,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(9,vector3D.z);
			this.rawData.data.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(2,vector3D.x);
			this.rawData.data.set(6,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(3,vector3D.x);
			this.rawData.data.set(7,vector3D.y);
			this.rawData.data.set(11,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(4);
			vector3D.z = this.rawData.data.get(8);
			vector3D.w = this.rawData.data.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(1);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(9);
			vector3D.w = this.rawData.data.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(2);
			vector3D.y = this.rawData.data.get(6);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(3);
			vector3D.y = this.rawData.data.get(7);
			vector3D.z = this.rawData.data.get(11);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = 1;
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var m = this.clone();
		var mr = new openfl__$Vector_AbstractVector(m.rawData.data.copy());
		var pos = new openfl_geom_Vector3D(mr.data.get(12),mr.data.get(13),mr.data.get(14));
		mr.data.set(12,0);
		mr.data.set(13,0);
		mr.data.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data.get(0) * mr.data.get(0) + mr.data.get(1) * mr.data.get(1) + mr.data.get(2) * mr.data.get(2));
		scale.y = Math.sqrt(mr.data.get(4) * mr.data.get(4) + mr.data.get(5) * mr.data.get(5) + mr.data.get(6) * mr.data.get(6));
		scale.z = Math.sqrt(mr.data.get(8) * mr.data.get(8) + mr.data.get(9) * mr.data.get(9) + mr.data.get(10) * mr.data.get(10));
		if(mr.data.get(0) * (mr.data.get(5) * mr.data.get(10) - mr.data.get(6) * mr.data.get(9)) - mr.data.get(1) * (mr.data.get(4) * mr.data.get(10) - mr.data.get(6) * mr.data.get(8)) + mr.data.get(2) * (mr.data.get(4) * mr.data.get(9) - mr.data.get(5) * mr.data.get(8)) < 0) scale.z = -scale.z;
		var value = mr.data.get(0) / scale.x;
		mr.data.set(0,value);
		var value1 = mr.data.get(1) / scale.x;
		mr.data.set(1,value1);
		var value2 = mr.data.get(2) / scale.x;
		mr.data.set(2,value2);
		var value3 = mr.data.get(4) / scale.y;
		mr.data.set(4,value3);
		var value4 = mr.data.get(5) / scale.y;
		mr.data.set(5,value4);
		var value5 = mr.data.get(6) / scale.y;
		mr.data.set(6,value5);
		var value6 = mr.data.get(8) / scale.z;
		mr.data.set(8,value6);
		var value7 = mr.data.get(9) / scale.z;
		mr.data.set(9,value7);
		var value8 = mr.data.get(10) / scale.z;
		mr.data.set(10,value8);
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.data.get(0) + mr.data.get(5) + mr.data.get(10) - 1) / 2);
			var len = Math.sqrt((mr.data.get(6) - mr.data.get(9)) * (mr.data.get(6) - mr.data.get(9)) + (mr.data.get(8) - mr.data.get(2)) * (mr.data.get(8) - mr.data.get(2)) + (mr.data.get(1) - mr.data.get(4)) * (mr.data.get(1) - mr.data.get(4)));
			if(len != 0) {
				rot.x = (mr.data.get(6) - mr.data.get(9)) / len;
				rot.y = (mr.data.get(8) - mr.data.get(2)) / len;
				rot.z = (mr.data.get(1) - mr.data.get(4)) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data.get(0) + mr.data.get(5) + mr.data.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.w);
				rot.y = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.w);
				rot.z = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.w);
			} else if(mr.data.get(0) > mr.data.get(5) && mr.data.get(0) > mr.data.get(10)) {
				rot.x = Math.sqrt(1 + mr.data.get(0) - mr.data.get(5) - mr.data.get(10)) / 2;
				rot.w = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.x);
				rot.y = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.x);
				rot.z = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.x);
			} else if(mr.data.get(5) > mr.data.get(10)) {
				rot.y = Math.sqrt(1 + mr.data.get(5) - mr.data.get(0) - mr.data.get(10)) / 2;
				rot.x = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.y);
				rot.w = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.y);
				rot.z = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data.get(10) - mr.data.get(0) - mr.data.get(5)) / 2;
				rot.x = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.z);
				rot.y = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.z);
				rot.w = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data.get(2));
			if(mr.data.get(2) != 1 && mr.data.get(2) != -1) {
				rot.x = Math.atan2(mr.data.get(6),mr.data.get(10));
				rot.z = Math.atan2(mr.data.get(1),mr.data.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data.get(4),mr.data.get(5));
			}
			break;
		}
		vec.data.push(pos);
		vec.data.push(rot);
		vec.data.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(3),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(7),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var value = this.rawData.data.get(i) + (toMat.rawData.data.get(i) - this.rawData.data.get(i)) * percent;
			this.rawData.data.set(i,value);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data.get(0);
			var m21 = this.rawData.data.get(4);
			var m31 = this.rawData.data.get(8);
			var m41 = this.rawData.data.get(12);
			var m12 = this.rawData.data.get(1);
			var m22 = this.rawData.data.get(5);
			var m32 = this.rawData.data.get(9);
			var m42 = this.rawData.data.get(13);
			var m13 = this.rawData.data.get(2);
			var m23 = this.rawData.data.get(6);
			var m33 = this.rawData.data.get(10);
			var m43 = this.rawData.data.get(14);
			var m14 = this.rawData.data.get(3);
			var m24 = this.rawData.data.get(7);
			var m34 = this.rawData.data.get(11);
			var m44 = this.rawData.data.get(15);
			this.rawData.data.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.data.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.data.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.data.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.data.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.data.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.data.set(0,right.x);
		this.rawData.data.set(4,right.y);
		this.rawData.data.set(8,right.z);
		this.rawData.data.set(12,0.0);
		this.rawData.data.set(1,vup.x);
		this.rawData.data.set(5,vup.y);
		this.rawData.data.set(9,vup.z);
		this.rawData.data.set(13,0.0);
		this.rawData.data.set(2,dir.x);
		this.rawData.data.set(6,dir.y);
		this.rawData.data.set(10,dir.z);
		this.rawData.data.set(14,0.0);
		this.rawData.data.set(3,pos.x);
		this.rawData.data.set(7,pos.y);
		this.rawData.data.set(11,pos.z);
		this.rawData.data.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data.get(0);
		var m121 = rhs.rawData.data.get(4);
		var m131 = rhs.rawData.data.get(8);
		var m141 = rhs.rawData.data.get(12);
		var m112 = rhs.rawData.data.get(1);
		var m122 = rhs.rawData.data.get(5);
		var m132 = rhs.rawData.data.get(9);
		var m142 = rhs.rawData.data.get(13);
		var m113 = rhs.rawData.data.get(2);
		var m123 = rhs.rawData.data.get(6);
		var m133 = rhs.rawData.data.get(10);
		var m143 = rhs.rawData.data.get(14);
		var m114 = rhs.rawData.data.get(3);
		var m124 = rhs.rawData.data.get(7);
		var m134 = rhs.rawData.data.get(11);
		var m144 = rhs.rawData.data.get(15);
		var m211 = this.rawData.data.get(0);
		var m221 = this.rawData.data.get(4);
		var m231 = this.rawData.data.get(8);
		var m241 = this.rawData.data.get(12);
		var m212 = this.rawData.data.get(1);
		var m222 = this.rawData.data.get(5);
		var m232 = this.rawData.data.get(9);
		var m242 = this.rawData.data.get(13);
		var m213 = this.rawData.data.get(2);
		var m223 = this.rawData.data.get(6);
		var m233 = this.rawData.data.get(10);
		var m243 = this.rawData.data.get(14);
		var m214 = this.rawData.data.get(3);
		var m224 = this.rawData.data.get(7);
		var m234 = this.rawData.data.get(11);
		var m244 = this.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz;
		tx = ty = tz = 0;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			{
				var _g1 = 0;
				var _g = a.length;
				while(_g1 < _g) {
					var i = _g1++;
					vector.data.set(i,a[i]);
				}
			}
			$r = vector;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.data.get_length() < 3 || components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).z == 0) return false;
		if(orientationStyle == null) orientationStyle = 1;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data.get(2).x;
		scale[4] = scale[5] = scale[6] = components.data.get(2).y;
		scale[8] = scale[9] = scale[10] = components.data.get(2).z;
		if(orientationStyle != null) switch(orientationStyle) {
		case 1:
			var cx = Math.cos(components.data.get(1).x);
			var cy = Math.cos(components.data.get(1).y);
			var cz = Math.cos(components.data.get(1).z);
			var sx = Math.sin(components.data.get(1).x);
			var sy = Math.sin(components.data.get(1).y);
			var sz = Math.sin(components.data.get(1).z);
			this.rawData.data.set(0,cy * cz * scale[0]);
			this.rawData.data.set(1,cy * sz * scale[1]);
			this.rawData.data.set(2,-sy * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.data.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.data.set(6,sx * cy * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.data.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.data.set(10,cx * cy * scale[10]);
			this.rawData.data.set(11,0);
			var value = components.data.get(0).x;
			this.rawData.data.set(12,value);
			var value1 = components.data.get(0).y;
			this.rawData.data.set(13,value1);
			var value2 = components.data.get(0).z;
			this.rawData.data.set(14,value2);
			this.rawData.data.set(15,1);
			break;
		default:
			var x = components.data.get(1).x;
			var y = components.data.get(1).y;
			var z = components.data.get(1).z;
			var w = components.data.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.data.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.data.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.data.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.data.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.data.set(11,0);
			var value3 = components.data.get(0).x;
			this.rawData.data.set(12,value3);
			var value4 = components.data.get(0).y;
			this.rawData.data.set(13,value4);
			var value5 = components.data.get(0).z;
			this.rawData.data.set(14,value5);
			this.rawData.data.set(15,1);
		} else {
			var x = components.data.get(1).x;
			var y = components.data.get(1).y;
			var z = components.data.get(1).z;
			var w = components.data.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.data.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.data.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.data.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.data.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.data.set(11,0);
			var value3 = components.data.get(0).x;
			this.rawData.data.set(12,value3);
			var value4 = components.data.get(0).y;
			this.rawData.data.set(13,value4);
			var value5 = components.data.get(0).z;
			this.rawData.data.set(14,value5);
			this.rawData.data.set(15,1);
		}
		if(components.data.get(2).x == 0) this.rawData.data.set(0,1e-15);
		if(components.data.get(2).y == 0) this.rawData.data.set(5,1e-15);
		if(components.data.get(2).z == 0) this.rawData.data.set(10,1e-15);
		return !(components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14),x * this.rawData.data.get(3) + y * this.rawData.data.get(7) + z * this.rawData.data.get(11) + this.rawData.data.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.data.get_length()) {
			x = vin.data.get(i);
			y = vin.data.get(i + 1);
			z = vin.data.get(i + 2);
			var value = x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12);
			vout.data.set(i,value);
			var value1 = x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13);
			vout.data.set(i + 1,value1);
			var value2 = x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14);
			vout.data.set(i + 2,value2);
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
		var value = oRawData.data.get(4);
		this.rawData.data.set(1,value);
		var value1 = oRawData.data.get(8);
		this.rawData.data.set(2,value1);
		var value2 = oRawData.data.get(12);
		this.rawData.data.set(3,value2);
		var value3 = oRawData.data.get(1);
		this.rawData.data.set(4,value3);
		var value4 = oRawData.data.get(9);
		this.rawData.data.set(6,value4);
		var value5 = oRawData.data.get(13);
		this.rawData.data.set(7,value5);
		var value6 = oRawData.data.get(2);
		this.rawData.data.set(8,value6);
		var value7 = oRawData.data.get(6);
		this.rawData.data.set(9,value7);
		var value8 = oRawData.data.get(14);
		this.rawData.data.set(11,value8);
		var value9 = oRawData.data.get(3);
		this.rawData.data.set(12,value9);
		var value10 = oRawData.data.get(7);
		this.rawData.data.set(13,value10);
		var value11 = oRawData.data.get(11);
		this.rawData.data.set(14,value11);
	}
	,get_determinant: function() {
		return (this.rawData.data.get(0) * this.rawData.data.get(5) - this.rawData.data.get(4) * this.rawData.data.get(1)) * (this.rawData.data.get(10) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(11)) - (this.rawData.data.get(0) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(7)) + (this.rawData.data.get(0) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(7)) + (this.rawData.data.get(4) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(3)) - (this.rawData.data.get(4) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(3)) + (this.rawData.data.get(8) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(9)) * (this.rawData.data.get(2) * this.rawData.data.get(7) - this.rawData.data.get(6) * this.rawData.data.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data.get(12),this.rawData.data.get(13),this.rawData.data.get(14));
	}
	,set_position: function(val) {
		this.rawData.data.set(12,val.x);
		this.rawData.data.set(13,val.y);
		this.rawData.data.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl__$Vector_AbstractVector = function(data,array) {
	this.data = data;
	if(array != null) {
		var cacheFixed = data.fixed;
		data.fixed = false;
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			data.set(i,array[i]);
		}
		data.fixed = cacheFixed;
	}
};
$hxClasses["openfl._Vector.AbstractVector"] = openfl__$Vector_AbstractVector;
openfl__$Vector_AbstractVector.__name__ = ["openfl","_Vector","AbstractVector"];
openfl__$Vector_AbstractVector.prototype = {
	data: null
	,toJSON: function() {
		return this.data.toJSON();
	}
	,__class__: openfl__$Vector_AbstractVector
};
var lime_utils_ObjectPool_$openfl_$geom_$Point = function(create,clean,size) {
	if(create != null) this.create = create;
	if(clean != null) this.clean = clean;
	if(size != null) this.set_size(size);
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Point"] = lime_utils_ObjectPool_$openfl_$geom_$Point;
lime_utils_ObjectPool_$openfl_$geom_$Point.__name__ = ["lime","utils","ObjectPool_openfl_geom_Point"];
lime_utils_ObjectPool_$openfl_$geom_$Point.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!(this.__pool.h.__keys__[object.__id__] != null)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) object = this.__getInactive(); else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		} else this.__pool.remove(object);
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject0 = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject1 = this.__inactiveObjectList.pop();
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		var _g_head = this.__inactiveObjectList.h;
		var _g_val = null;
		while(_g_head != null) {
			var object;
			object = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			count--;
			if(count == 0 || this.inactiveObjects == 0) return;
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) this.__size = null; else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) this.__removeInactive(current - value); else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else break;
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Point
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		openfl_geom_Point.__limeVector2.setTo(this.x,this.y);
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) dot /= la;
	if(lb != 0) dot /= lb;
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_utils_ObjectPool_$openfl_$geom_$Rectangle = function(create,clean,size) {
	if(create != null) this.create = create;
	if(clean != null) this.clean = clean;
	if(size != null) this.set_size(size);
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_geom_Rectangle"] = lime_utils_ObjectPool_$openfl_$geom_$Rectangle;
lime_utils_ObjectPool_$openfl_$geom_$Rectangle.__name__ = ["lime","utils","ObjectPool_openfl_geom_Rectangle"];
lime_utils_ObjectPool_$openfl_$geom_$Rectangle.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!(this.__pool.h.__keys__[object.__id__] != null)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) object = this.__getInactive(); else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		} else this.__pool.remove(object);
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject0 = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject1 = this.__inactiveObjectList.pop();
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		var _g_head = this.__inactiveObjectList.h;
		var _g_val = null;
		while(_g_head != null) {
			var object;
			object = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			count--;
			if(count == 0 || this.inactiveObjects == 0) return;
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) this.__size = null; else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) this.__removeInactive(current - value); else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else break;
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$geom_$Rectangle
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) return true; else return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) offsetX = x - this.x;
		if(this.y < y) offsetY = y - this.y;
		if(this.get_right() > x + width) offsetRight = x + width - this.get_right();
		if(this.get_bottom() > y + height) offsetBottom = y + height - this.get_bottom();
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var starling_display_DisplayObject = function() {
	starling_events_EventDispatcher.call(this);
	this.mX = this.mY = this.mPivotX = this.mPivotY = this.mRotation = this.mSkewX = this.mSkewY = 0.0;
	this.mScaleX = this.mScaleY = this.mAlpha = 1.0;
	this.mVisible = this.mTouchable = true;
	this.mBlendMode = "auto";
	this.mTransformationMatrix = new openfl_geom_Matrix();
	this.mOrientationChanged = this.mUseHandCursor = false;
};
$hxClasses["starling.display.DisplayObject"] = starling_display_DisplayObject;
starling_display_DisplayObject.__name__ = ["starling","display","DisplayObject"];
starling_display_DisplayObject.__super__ = starling_events_EventDispatcher;
starling_display_DisplayObject.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mX: null
	,mY: null
	,mPivotX: null
	,mPivotY: null
	,mScaleX: null
	,mScaleY: null
	,mSkewX: null
	,mSkewY: null
	,mRotation: null
	,mAlpha: null
	,mVisible: null
	,mTouchable: null
	,mBlendMode: null
	,mName: null
	,mUseHandCursor: null
	,mParent: null
	,mTransformationMatrix: null
	,mTransformationMatrix3D: null
	,mOrientationChanged: null
	,mFilter: null
	,mIs3D: null
	,mMask: null
	,mIsMask: null
	,dispose: function() {
		if(this.mFilter != null) this.mFilter.dispose();
		if(this.mMask != null) this.mMask.dispose();
		this.removeEventListeners();
		this.set_mask(null);
	}
	,removeFromParent: function(dispose) {
		if(dispose == null) dispose = false;
		if(this.mParent != null) this.mParent.removeChild(this,dispose); else if(dispose) this.dispose();
	}
	,getTransformationMatrix: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) resultMatrix.identity(); else resultMatrix = new openfl_geom_Matrix();
		if(targetSpace == this) return resultMatrix; else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.concat(currentObject.get_transformationMatrix());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) return resultMatrix;
		starling_display_DisplayObject.sHelperMatrix.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling_display_DisplayObject.sHelperMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		starling_display_DisplayObject.sHelperMatrix.invert();
		resultMatrix.concat(starling_display_DisplayObject.sHelperMatrix);
		return resultMatrix;
	}
	,getBounds: function(targetSpace,resultRect) {
		throw new js__$Boot_HaxeError(new starling_errors_AbstractMethodError());
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.mVisible || !this.mTouchable)) return null;
		if(this.mMask != null && !this.hitTestMask(localPoint)) return null;
		if(this.getBounds(this,starling_display_DisplayObject.sHelperRect).containsPoint(localPoint)) return this; else return null;
	}
	,hitTestMask: function(localPoint) {
		if(this.mMask != null) {
			if(this.mMask.get_stage() != null) this.getTransformationMatrix(this.mMask,starling_display_DisplayObject.sHelperMatrixAlt); else {
				starling_display_DisplayObject.sHelperMatrixAlt.copyFrom(this.mMask.get_transformationMatrix());
				starling_display_DisplayObject.sHelperMatrixAlt.invert();
			}
			var helperPoint;
			if(localPoint == starling_display_DisplayObject.sHelperPoint) helperPoint = new openfl_geom_Point(); else helperPoint = starling_display_DisplayObject.sHelperPoint;
			starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,localPoint,helperPoint);
			return this.mMask.hitTest(helperPoint,true) != null;
		} else return true;
	}
	,localToGlobal: function(localPoint,resultPoint) {
		if(this.get_is3D()) {
			starling_display_DisplayObject.sHelperPoint3D.setTo(localPoint.x,localPoint.y,0);
			return this.local3DToGlobal(starling_display_DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling_display_DisplayObject.sHelperMatrixAlt);
			return starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,localPoint,resultPoint);
		}
	}
	,globalToLocal: function(globalPoint,resultPoint) {
		if(this.get_is3D()) {
			this.globalToLocal3D(globalPoint,starling_display_DisplayObject.sHelperPoint3D);
			this.get_stage().getCameraPosition(this,starling_display_DisplayObject.sHelperPointAlt3D);
			return starling_utils_MathUtil.intersectLineWithXYPlane(starling_display_DisplayObject.sHelperPointAlt3D,starling_display_DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling_display_DisplayObject.sHelperMatrixAlt);
			starling_display_DisplayObject.sHelperMatrixAlt.invert();
			return starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,globalPoint,resultPoint);
		}
	}
	,render: function(support,parentAlpha) {
		throw new js__$Boot_HaxeError(new starling_errors_AbstractMethodError());
	}
	,get_hasVisibleArea: function() {
		return this.mAlpha != 0.0 && this.mVisible && !this.mIsMask && this.mScaleX != 0.0 && this.mScaleY != 0.0;
	}
	,alignPivot: function(hAlign,vAlign) {
		if(vAlign == null) vAlign = "center";
		if(hAlign == null) hAlign = "center";
		var bounds = this.getBounds(this,starling_display_DisplayObject.sHelperRect);
		this.mOrientationChanged = true;
		if(hAlign == "left") this.mPivotX = bounds.x; else if(hAlign == "center") this.mPivotX = bounds.x + bounds.width / 2.0; else if(hAlign == "right") this.mPivotX = bounds.x + bounds.width; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid horizontal alignment: " + hAlign));
		if(vAlign == "top") this.mPivotY = bounds.y; else if(vAlign == "center") this.mPivotY = bounds.y + bounds.height / 2.0; else if(vAlign == "bottom") this.mPivotY = bounds.y + bounds.height; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid vertical alignment: " + vAlign));
	}
	,getTransformationMatrix3D: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) resultMatrix.identity(); else resultMatrix = new openfl_geom_Matrix3D();
		if(targetSpace == this) return resultMatrix; else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix3D());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.append(currentObject.get_transformationMatrix3D());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix3D(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) return resultMatrix;
		starling_display_DisplayObject.sHelperMatrix3D.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling_display_DisplayObject.sHelperMatrix3D.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		starling_display_DisplayObject.sHelperMatrix3D.invert();
		resultMatrix.append(starling_display_DisplayObject.sHelperMatrix3D);
		return resultMatrix;
	}
	,local3DToGlobal: function(localPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Object not connected to stage"));
		this.getTransformationMatrix3D(stage,starling_display_DisplayObject.sHelperMatrixAlt3D);
		starling_utils_MatrixUtil.transformPoint3D(starling_display_DisplayObject.sHelperMatrixAlt3D,localPoint,starling_display_DisplayObject.sHelperPoint3D);
		return starling_utils_MathUtil.intersectLineWithXYPlane(stage.get_cameraPosition(),starling_display_DisplayObject.sHelperPoint3D,resultPoint);
	}
	,globalToLocal3D: function(globalPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Object not connected to stage"));
		this.getTransformationMatrix3D(stage,starling_display_DisplayObject.sHelperMatrixAlt3D);
		starling_display_DisplayObject.sHelperMatrixAlt3D.invert();
		return starling_utils_MatrixUtil.transformCoords3D(starling_display_DisplayObject.sHelperMatrixAlt3D,globalPoint.x,globalPoint.y,0,resultPoint);
	}
	,setParent: function(value) {
		var ancestor = value;
		while(ancestor != this && ancestor != null) ancestor = ancestor.mParent;
		if(ancestor == this) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("An object cannot be added as a child to itself or one " + "of its children (or children's children, etc.)")); else this.mParent = value;
	}
	,setIs3D: function(value) {
		this.mIs3D = value;
	}
	,get_isMask: function() {
		return this.mIsMask;
	}
	,isEquivalent: function(a,b,epsilon) {
		if(epsilon == null) epsilon = 0.0001;
		return a - epsilon < b && a + epsilon > b;
	}
	,findCommonParent: function(object1,object2) {
		var currentObject = object1;
		while(currentObject != null) {
			var index = starling_display_DisplayObject.sAncestors.data.get_length();
			starling_display_DisplayObject.sAncestors.data.set(index,currentObject);
			currentObject = currentObject.mParent;
		}
		currentObject = object2;
		while(currentObject != null && starling_display_DisplayObject.sAncestors.data.indexOf(currentObject,0) == -1) currentObject = currentObject.mParent;
		starling_display_DisplayObject.sAncestors.data.set_length(0);
		if(currentObject != null) return currentObject; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Object not connected to target"));
	}
	,dispatchEvent: function(event) {
		if(event.type == "removedFromStage" && this.get_stage() == null) return; else starling_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,addEventListener: function(type,listener) {
		if(type == "enterFrame" && !this.hasEventListener(type)) {
			this.addEventListener("addedToStage",$bind(this,this.addEnterFrameListenerToStage));
			this.addEventListener("removedFromStage",$bind(this,this.removeEnterFrameListenerFromStage));
			if(this.get_stage() != null) this.addEnterFrameListenerToStage();
		}
		starling_events_EventDispatcher.prototype.addEventListener.call(this,type,listener);
	}
	,removeEventListener: function(type,listener) {
		starling_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener);
		if(type == "enterFrame" && !this.hasEventListener(type)) {
			this.removeEventListener("addedToStage",$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener("removedFromStage",$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
	}
	,removeEventListeners: function(type) {
		if((type == null || type == "enterFrame") && this.hasEventListener("enterFrame")) {
			this.removeEventListener("addedToStage",$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener("removedFromStage",$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
		starling_events_EventDispatcher.prototype.removeEventListeners.call(this,type);
	}
	,addEnterFrameListenerToStage: function(e) {
		starling_core_Starling.get_current().get_stage().addEnterFrameListener(this);
	}
	,removeEnterFrameListenerFromStage: function(e) {
		starling_core_Starling.get_current().get_stage().removeEnterFrameListener(this);
	}
	,get_transformationMatrix: function() {
		if(this.mOrientationChanged) {
			this.mOrientationChanged = false;
			if(this.mSkewX == 0.0 && this.mSkewY == 0.0) {
				if(this.mRotation == 0.0) this.mTransformationMatrix.setTo(this.mScaleX,0.0,0.0,this.mScaleY,this.mX - this.mPivotX * this.mScaleX,this.mY - this.mPivotY * this.mScaleY); else {
					var cos = Math.cos(this.mRotation);
					var sin = Math.sin(this.mRotation);
					var a = this.mScaleX * cos;
					var b = this.mScaleX * sin;
					var c = this.mScaleY * -sin;
					var d = this.mScaleY * cos;
					var tx = this.mX - this.mPivotX * a - this.mPivotY * c;
					var ty = this.mY - this.mPivotX * b - this.mPivotY * d;
					this.mTransformationMatrix.setTo(a,b,c,d,tx,ty);
				}
			} else {
				this.mTransformationMatrix.identity();
				this.mTransformationMatrix.scale(this.mScaleX,this.mScaleY);
				starling_utils_MatrixUtil.skew(this.mTransformationMatrix,this.mSkewX,this.mSkewY);
				this.mTransformationMatrix.rotate(this.mRotation);
				this.mTransformationMatrix.translate(this.mX,this.mY);
				if(this.mPivotX != 0.0 || this.mPivotY != 0.0) {
					this.mTransformationMatrix.tx = this.mX - this.mTransformationMatrix.a * this.mPivotX - this.mTransformationMatrix.c * this.mPivotY;
					this.mTransformationMatrix.ty = this.mY - this.mTransformationMatrix.b * this.mPivotX - this.mTransformationMatrix.d * this.mPivotY;
				}
			}
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(matrix) {
		var PI_Q = Math.PI / 4.0;
		this.mOrientationChanged = false;
		this.mTransformationMatrix.copyFrom(matrix);
		this.mPivotX = this.mPivotY = 0;
		this.mX = matrix.tx;
		this.mY = matrix.ty;
		this.mSkewX = Math.atan(-matrix.c / matrix.d);
		this.mSkewY = Math.atan(matrix.b / matrix.a);
		if(this.mSkewX != this.mSkewX) this.mSkewX = 0.0;
		if(this.mSkewY != this.mSkewY) this.mSkewY = 0.0;
		if(this.mSkewX > -PI_Q && this.mSkewX < PI_Q) this.mScaleY = matrix.d / Math.cos(this.mSkewX); else this.mScaleY = -matrix.c / Math.sin(this.mSkewX);
		if(this.mSkewY > -PI_Q && this.mSkewY < PI_Q) this.mScaleX = matrix.a / Math.cos(this.mSkewY); else this.mScaleX = matrix.b / Math.sin(this.mSkewY);
		if(this.isEquivalent(this.mSkewX,this.mSkewY)) {
			this.mRotation = this.mSkewX;
			this.mSkewX = this.mSkewY = 0;
		} else this.mRotation = 0;
		return this.mTransformationMatrix;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationMatrix3D == null) this.mTransformationMatrix3D = new openfl_geom_Matrix3D();
		return starling_utils_MatrixUtil.convertTo3D(this.get_transformationMatrix(),this.mTransformationMatrix3D);
	}
	,get_is3D: function() {
		return this.mIs3D;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		if(value == this.mUseHandCursor) return this.mUseHandCursor;
		this.mUseHandCursor = value;
		if(this.mUseHandCursor) this.addEventListener("touch",$bind(this,this.onTouch)); else this.removeEventListener("touch",$bind(this,this.onTouch));
		return this.mUseHandCursor;
	}
	,onTouch: function(event) {
		openfl_ui_Mouse.set_cursor(event.interactsWith(this)?"button":"auto");
	}
	,get_bounds: function() {
		return this.getBounds(this.mParent);
	}
	,get_width: function() {
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).width;
	}
	,set_width: function(value) {
		this.set_scaleX(1.0);
		var actualWidth = this.get_width();
		if(actualWidth != 0.0) this.set_scaleX(value / actualWidth);
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).width;
	}
	,get_height: function() {
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).height;
	}
	,set_height: function(value) {
		this.set_scaleY(1.0);
		var actualHeight = this.get_height();
		if(actualHeight != 0.0) this.set_scaleY(value / actualHeight);
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).height;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		if(this.mX != value) {
			this.mX = value;
			this.mOrientationChanged = true;
		}
		return this.mX;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		if(this.mY != value) {
			this.mY = value;
			this.mOrientationChanged = true;
		}
		return this.mY;
	}
	,get_pivotX: function() {
		return this.mPivotX;
	}
	,set_pivotX: function(value) {
		if(this.mPivotX != value) {
			this.mPivotX = value;
			this.mOrientationChanged = true;
		}
		return this.mPivotX;
	}
	,get_pivotY: function() {
		return this.mPivotY;
	}
	,set_pivotY: function(value) {
		if(this.mPivotY != value) {
			this.mPivotY = value;
			this.mOrientationChanged = true;
		}
		return this.mPivotY;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		if(this.mScaleX != value) {
			this.mScaleX = value;
			this.mOrientationChanged = true;
		}
		return this.mScaleX;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		if(this.mScaleY != value) {
			this.mScaleY = value;
			this.mOrientationChanged = true;
		}
		return this.mScaleY;
	}
	,get_scale: function() {
		return this.get_scaleX();
	}
	,set_scale: function(value) {
		return this.set_scaleX(this.set_scaleY(value));
	}
	,get_skewX: function() {
		return this.mSkewX;
	}
	,set_skewX: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mSkewX != value) {
			this.mSkewX = value;
			this.mOrientationChanged = true;
		}
		return this.mSkewX;
	}
	,get_skewY: function() {
		return this.mSkewY;
	}
	,set_skewY: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mSkewY != value) {
			this.mSkewY = value;
			this.mOrientationChanged = true;
		}
		return this.mSkewY;
	}
	,get_rotation: function() {
		return this.mRotation;
	}
	,set_rotation: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mRotation != value) {
			this.mRotation = value;
			this.mOrientationChanged = true;
		}
		return this.mRotation;
	}
	,get_alpha: function() {
		return this.mAlpha;
	}
	,set_alpha: function(value) {
		if(value < 0.0) this.mAlpha = 0.0; else if(value > 1.0) this.mAlpha = 1.0; else this.mAlpha = value;
		return this.mAlpha;
	}
	,get_visible: function() {
		return this.mVisible;
	}
	,set_visible: function(value) {
		return this.mVisible = value;
	}
	,get_touchable: function() {
		return this.mTouchable;
	}
	,set_touchable: function(value) {
		return this.mTouchable = value;
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		return this.mBlendMode = value;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		return this.mName = value;
	}
	,get_filter: function() {
		return this.mFilter;
	}
	,set_filter: function(value) {
		return this.mFilter = value;
	}
	,get_mask: function() {
		return this.mMask;
	}
	,set_mask: function(value) {
		if(this.mMask != value) {
			if(this.mMask != null) this.mMask.mIsMask = false;
			if(value != null) value.mIsMask = true;
			this.mMask = value;
		}
		return this.mMask;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_base: function() {
		var currentObject = this;
		while(currentObject.mParent != null) currentObject = currentObject.mParent;
		return currentObject;
	}
	,get_root: function() {
		var currentObject = this;
		while(currentObject.mParent != null) if(js_Boot.__instanceof(currentObject.mParent,starling_display_Stage)) return currentObject; else currentObject = currentObject.get_parent();
		return null;
	}
	,get_stage: function() {
		if(Std["is"](this.get_base(),starling_display_Stage)) return this.get_base(); else return null;
	}
	,__class__: starling_display_DisplayObject
	,__properties__: {get_stage:"get_stage",get_root:"get_root",get_base:"get_base",get_parent:"get_parent",set_mask:"set_mask",get_mask:"get_mask",set_filter:"set_filter",get_filter:"get_filter",set_name:"set_name",get_name:"get_name",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_touchable:"set_touchable",get_touchable:"get_touchable",set_visible:"set_visible",get_visible:"get_visible",set_alpha:"set_alpha",get_alpha:"get_alpha",set_rotation:"set_rotation",get_rotation:"get_rotation",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scale:"set_scale",get_scale:"get_scale",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_bounds:"get_bounds",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",get_is3D:"get_is3D",get_transformationMatrix3D:"get_transformationMatrix3D",set_transformationMatrix:"set_transformationMatrix",get_transformationMatrix:"get_transformationMatrix",get_isMask:"get_isMask",get_hasVisibleArea:"get_hasVisibleArea"}
});
var starling_display_DisplayObjectContainer = function() {
	starling_display_DisplayObject.call(this);
	this.mChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.display.DisplayObjectContainer"] = starling_display_DisplayObjectContainer;
starling_display_DisplayObjectContainer.__name__ = ["starling","display","DisplayObjectContainer"];
starling_display_DisplayObjectContainer.mergeSort = function(input,compareFunc,startIndex,length,buffer) {
	if(length <= 1) return; else {
		var i = 0;
		var endIndex = startIndex + length;
		var halfLength = length / 2 | 0;
		var l = startIndex;
		var r = startIndex + halfLength;
		starling_display_DisplayObjectContainer.mergeSort(input,compareFunc,startIndex,halfLength,buffer);
		starling_display_DisplayObjectContainer.mergeSort(input,compareFunc,startIndex + halfLength,length - halfLength,buffer);
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			if(l < startIndex + halfLength && (r == endIndex || compareFunc(input.data.get(l),input.data.get(r)) <= 0)) {
				var value = input.data.get(l);
				buffer.data.set(i1,value);
				l++;
			} else {
				var value1 = input.data.get(r);
				buffer.data.set(i1,value1);
				r++;
			}
		}
		var _g1 = startIndex;
		while(_g1 < endIndex) {
			var i2 = _g1++;
			var value2 = buffer.data.get(i2 - startIndex);
			input.data.set(i2,value2);
		}
	}
};
starling_display_DisplayObjectContainer.__super__ = starling_display_DisplayObject;
starling_display_DisplayObjectContainer.prototype = $extend(starling_display_DisplayObject.prototype,{
	mChildren: null
	,mTouchGroup: null
	,dispose: function() {
		var i = this.mChildren.data.get_length() - 1;
		while(i >= 0) {
			this.mChildren.data.get(i).dispose();
			--i;
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		return this.addChildAt(child,this.mChildren.data.get_length());
	}
	,addChildAt: function(child,index) {
		var numChildren = this.mChildren.data.get_length();
		if(index >= 0 && index <= numChildren) {
			if(child.get_parent() == this) this.setChildIndex(child,index); else {
				child.removeFromParent();
				if(index == numChildren) this.mChildren.data.set(numChildren,child); else this.spliceChildren(index,0,child);
				child.setParent(this);
				child.dispatchEventWith("added",true);
				if(this.get_stage() != null) {
					var container;
					if(js_Boot.__instanceof(child,starling_display_DisplayObjectContainer)) container = child; else container = null;
					if(container != null) container.broadcastEventWith("addedToStage"); else child.dispatchEventWith("addedToStage");
				}
			}
			return child;
		} else throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = false;
		var childIndex = this.getChildIndex(child);
		if(childIndex != -1) this.removeChildAt(childIndex,dispose);
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) dispose = false;
		if(index >= 0 && index < this.mChildren.data.get_length()) {
			var child = this.mChildren.data.get(index);
			child.dispatchEventWith("removed",true);
			if(this.get_stage() != null) {
				var container;
				if(js_Boot.__instanceof(child,starling_display_DisplayObjectContainer)) container = child; else container = null;
				if(container != null) container.broadcastEventWith("removedFromStage"); else child.dispatchEventWith("removedFromStage");
			}
			child.setParent(null);
			index = this.mChildren.data.indexOf(child,0);
			if(index >= 0) this.spliceChildren(index,1);
			if(dispose) child.dispose();
			return child;
		} else throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
	}
	,removeChildren: function(beginIndex,endIndex,dispose) {
		if(dispose == null) dispose = false;
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex < 0 || endIndex >= this.get_numChildren()) endIndex = this.get_numChildren() - 1;
		var i = beginIndex;
		while(i <= endIndex) {
			this.removeChildAt(beginIndex,dispose);
			++i;
		}
	}
	,getChildAt: function(index) {
		var numChildren = this.mChildren.data.get_length();
		if(index < 0) index = numChildren + index;
		if(index >= 0 && index < numChildren) return this.mChildren.data.get(index); else throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
	}
	,getChildByName: function(name) {
		var numChildren = this.mChildren.data.get_length();
		var _g = 0;
		while(_g < numChildren) {
			var i = _g++;
			if(this.mChildren.data.get(i).get_name() == name) return this.mChildren.data.get(i);
		}
		return null;
	}
	,getChildIndex: function(child) {
		return this.mChildren.data.indexOf(child,0);
	}
	,setChildIndex: function(child,index) {
		var oldIndex = this.getChildIndex(child);
		if(oldIndex == index) return;
		if(oldIndex == -1) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not a child of this container"));
		this.spliceChildren(oldIndex,1);
		this.spliceChildren(index,0,child);
	}
	,swapChildren: function(child1,child2) {
		var index1 = this.getChildIndex(child1);
		var index2 = this.getChildIndex(child2);
		if(index1 == -1 || index2 == -1) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not a child of this container"));
		this.swapChildrenAt(index1,index2);
	}
	,swapChildrenAt: function(index1,index2) {
		var child1 = this.getChildAt(index1);
		var child2 = this.getChildAt(index2);
		this.mChildren.data.set(index1,child2);
		this.mChildren.data.set(index2,child1);
	}
	,sortChildren: function(compareFunction) {
		var value = this.mChildren.data.get_length();
		starling_display_DisplayObjectContainer.sSortBuffer.data.set_length(value);
		starling_display_DisplayObjectContainer.mergeSort(this.mChildren,compareFunction,0,this.mChildren.data.get_length(),starling_display_DisplayObjectContainer.sSortBuffer);
		starling_display_DisplayObjectContainer.sSortBuffer.data.set_length(0);
	}
	,contains: function(child) {
		while(child != null) if(child == this) return true; else child = child.get_parent();
		return false;
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		var numChildren = this.mChildren.data.get_length();
		if(numChildren == 0) {
			this.getTransformationMatrix(targetSpace,starling_display_DisplayObjectContainer.sHelperMatrix);
			starling_utils_MatrixUtil.transformCoords(starling_display_DisplayObjectContainer.sHelperMatrix,0.0,0.0,starling_display_DisplayObjectContainer.sHelperPoint);
			resultRect.setTo(starling_display_DisplayObjectContainer.sHelperPoint.x,starling_display_DisplayObjectContainer.sHelperPoint.y,0,0);
		} else if(numChildren == 1) this.mChildren.data.get(0).getBounds(targetSpace,resultRect); else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var i = 0;
			var _g = 0;
			while(_g < numChildren) {
				var i1 = _g++;
				this.mChildren.data.get(i1).getBounds(targetSpace,resultRect);
				if(minX > resultRect.x) minX = resultRect.x;
				if(maxX < resultRect.get_right()) maxX = resultRect.get_right();
				if(minY > resultRect.y) minY = resultRect.y;
				if(maxY < resultRect.get_bottom()) maxY = resultRect.get_bottom();
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(!this.hitTestMask(localPoint)) return null;
		var target = null;
		var localX = localPoint.x;
		var localY = localPoint.y;
		var numChildren = this.mChildren.data.get_length();
		var i = numChildren - 1;
		while(i >= 0) {
			var child = this.mChildren.data.get(i);
			if(child.get_isMask()) continue;
			starling_display_DisplayObjectContainer.sHelperMatrix.copyFrom(child.get_transformationMatrix());
			starling_display_DisplayObjectContainer.sHelperMatrix.invert();
			starling_utils_MatrixUtil.transformCoords(starling_display_DisplayObjectContainer.sHelperMatrix,localX,localY,starling_display_DisplayObjectContainer.sHelperPoint);
			target = child.hitTest(starling_display_DisplayObjectContainer.sHelperPoint,forTouch);
			if(target != null) if(forTouch && this.mTouchGroup) return this; else return target;
			--i;
		}
		return null;
	}
	,render: function(support,parentAlpha) {
		var alpha = parentAlpha * this.get_alpha();
		var numChildren = this.mChildren.data.get_length();
		var blendMode = support.get_blendMode();
		var _g = 0;
		while(_g < numChildren) {
			var i = _g++;
			var child = this.mChildren.data.get(i);
			if(child.get_hasVisibleArea()) {
				var filter = child.get_filter();
				var mask = child.get_mask();
				support.pushMatrix();
				support.transformMatrix(child);
				support.set_blendMode(child.get_blendMode());
				if(mask != null) support.pushMask(mask);
				if(filter != null) filter.render(child,support,alpha); else child.render(support,alpha);
				if(mask != null) support.popMask();
				support.set_blendMode(blendMode);
				support.popMatrix();
			}
		}
	}
	,broadcastEvent: function(event) {
		if(event.bubbles) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Broadcast of bubbling events is prohibited"));
		var fromIndex = starling_display_DisplayObjectContainer.sBroadcastListeners.data.get_length();
		this.getChildEventListeners(this,event.type,starling_display_DisplayObjectContainer.sBroadcastListeners);
		var toIndex = starling_display_DisplayObjectContainer.sBroadcastListeners.data.get_length();
		var _g = fromIndex;
		while(_g < toIndex) {
			var i = _g++;
			starling_display_DisplayObjectContainer.sBroadcastListeners.data.get(i).dispatchEvent(event);
		}
		starling_display_DisplayObjectContainer.sBroadcastListeners.data.set_length(fromIndex);
	}
	,broadcastEventWith: function(type,data) {
		var event = starling_events_Event.fromPool(type,false,data);
		this.broadcastEvent(event);
		starling_events_Event.toPool(event);
	}
	,get_numChildren: function() {
		return this.mChildren.data.get_length();
	}
	,get_touchGroup: function() {
		return this.mTouchGroup;
	}
	,set_touchGroup: function(value) {
		return this.mTouchGroup = value;
	}
	,spliceChildren: function(startIndex,deleteCount,insertee) {
		if(deleteCount == null) deleteCount = 2147483647;
		var vector = this.mChildren;
		var oldLength = vector.data.get_length();
		if(startIndex < 0) startIndex += oldLength;
		if(startIndex < 0) startIndex = 0; else if(startIndex > oldLength) startIndex = oldLength;
		if(startIndex + deleteCount > oldLength) deleteCount = oldLength - startIndex;
		var i;
		var insertCount;
		if(insertee != null) insertCount = 1; else insertCount = 0;
		var deltaLength = insertCount - deleteCount;
		var newLength = oldLength + deltaLength;
		var shiftCount = oldLength - startIndex - deleteCount;
		if(deltaLength < 0) {
			i = startIndex + insertCount;
			while(shiftCount != 0) {
				var value = vector.data.get(i - deltaLength);
				vector.data.set(i,value);
				--shiftCount;
				++i;
			}
			vector.data.set_length(newLength);
		} else if(deltaLength > 0) {
			i = 1;
			while(shiftCount != 0) {
				var value1 = vector.data.get(oldLength - i);
				vector.data.set(newLength - i,value1);
				--shiftCount;
				++i;
			}
			vector.data.set_length(newLength);
		}
		if(insertee != null) vector.data.set(startIndex,insertee);
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		var container;
		if(js_Boot.__instanceof(object,starling_display_DisplayObjectContainer)) container = object; else container = null;
		if(object.hasEventListener(eventType)) {
			var index = listeners.data.get_length();
			listeners.data.set(index,object);
		}
		if(container != null) {
			var children = container.mChildren;
			var numChildren = children.data.get_length();
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				this.getChildEventListeners(children.data.get(i),eventType,listeners);
			}
		}
	}
	,__class__: starling_display_DisplayObjectContainer
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_touchGroup:"set_touchGroup",get_touchGroup:"get_touchGroup",get_numChildren:"get_numChildren"})
});
var starling_display_Sprite = function() {
	starling_display_DisplayObjectContainer.call(this);
};
$hxClasses["starling.display.Sprite"] = starling_display_Sprite;
starling_display_Sprite.__name__ = ["starling","display","Sprite"];
starling_display_Sprite.__super__ = starling_display_DisplayObjectContainer;
starling_display_Sprite.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mFlattenedContents: null
	,mFlattenRequested: null
	,mFlattenOptimized: null
	,mClipRect: null
	,dispose: function() {
		this.disposeFlattenedContents();
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,disposeFlattenedContents: function() {
		if(this.mFlattenedContents != null) {
			var _g1 = 0;
			var _g = this.mFlattenedContents.data.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				this.mFlattenedContents.data.get(i).dispose();
			}
			this.mFlattenedContents = null;
		}
	}
	,flatten: function(ignoreChildOrder) {
		if(ignoreChildOrder == null) ignoreChildOrder = false;
		this.mFlattenRequested = true;
		this.mFlattenOptimized = ignoreChildOrder;
		this.broadcastEventWith("flatten");
	}
	,unflatten: function() {
		this.mFlattenRequested = false;
		this.disposeFlattenedContents();
	}
	,get_isFlattened: function() {
		return this.mFlattenedContents != null || this.mFlattenRequested;
	}
	,get_clipRect: function() {
		return this.mClipRect;
	}
	,set_clipRect: function(value) {
		if(this.mClipRect != null && value != null) this.mClipRect.copyFrom(value); else if(value != null) this.mClipRect = value.clone(); else this.mClipRect = null;
		return this.mClipRect;
	}
	,getClipRect: function(targetSpace,resultRect) {
		if(this.mClipRect == null) return null;
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		var x = 0.0;
		var y = 0.0;
		var minX = 1.79e+308;
		var maxX = -1.79e+308;
		var minY = 1.79e+308;
		var maxY = -1.79e+308;
		var transMatrix = this.getTransformationMatrix(targetSpace,starling_display_Sprite.sHelperMatrix);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			switch(i) {
			case 0:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_top();
				break;
			case 1:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_bottom();
				break;
			case 2:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_top();
				break;
			case 3:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_bottom();
				break;
			}
			var transformedPoint = starling_utils_MatrixUtil.transformCoords(transMatrix,x,y,starling_display_Sprite.sHelperPoint);
			if(minX > transformedPoint.x) minX = transformedPoint.x;
			if(maxX < transformedPoint.x) maxX = transformedPoint.x;
			if(minY > transformedPoint.y) minY = transformedPoint.y;
			if(maxY < transformedPoint.y) maxY = transformedPoint.y;
		}
		resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		return resultRect;
	}
	,getBounds: function(targetSpace,resultRect) {
		var bounds = starling_display_DisplayObjectContainer.prototype.getBounds.call(this,targetSpace,resultRect);
		if(this.mClipRect != null) starling_utils_RectangleUtil.intersect(bounds,this.getClipRect(targetSpace,starling_display_Sprite.sHelperRect),bounds);
		return bounds;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(this.mClipRect != null && !this.mClipRect.containsPoint(localPoint)) return null; else return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
	}
	,render: function(support,parentAlpha) {
		if(this.mClipRect != null) {
			var clipRect = support.pushClipRect(this.getClipRect(this.get_stage(),starling_display_Sprite.sHelperRect));
			if(clipRect.isEmpty()) {
				support.popClipRect();
				return;
			}
		}
		if(this.mFlattenedContents != null || this.mFlattenRequested) {
			if(this.mFlattenedContents == null) this.mFlattenedContents = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			if(this.mFlattenRequested) {
				starling_display_QuadBatch.compile(this,this.mFlattenedContents);
				if(this.mFlattenOptimized) starling_display_QuadBatch.optimize(this.mFlattenedContents);
				support.applyClipRect();
				this.mFlattenRequested = false;
			}
			var alpha = parentAlpha * this.get_alpha();
			var numBatches = this.mFlattenedContents.data.get_length();
			var mvpMatrix = support.get_mvpMatrix3D();
			support.finishQuadBatch();
			support.raiseDrawCount(numBatches);
			var _g = 0;
			while(_g < numBatches) {
				var i = _g++;
				var quadBatch = this.mFlattenedContents.data.get(i);
				var blendMode;
				if(quadBatch.get_blendMode() == "auto") blendMode = support.get_blendMode(); else blendMode = quadBatch.get_blendMode();
				quadBatch.renderCustom(mvpMatrix,alpha,blendMode);
			}
		} else starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		if(this.mClipRect != null) support.popClipRect();
	}
	,__class__: starling_display_Sprite
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_clipRect:"set_clipRect",get_clipRect:"get_clipRect",get_isFlattened:"get_isFlattened"})
});
var haxegon_Core = function() {
	haxegon_Core._fps = haxegon_Core.TARGETFRAMERATE = Math.round(starling_core_Starling.get_current().get_nativeStage().get_frameRate());
	starling_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.addedtostage));
};
$hxClasses["haxegon.Core"] = haxegon_Core;
haxegon_Core.__name__ = ["haxegon","Core"];
haxegon_Core.__properties__ = {get_window:"get_window",set_showstats:"set_showstats",get_showstats:"get_showstats",set_time:"set_time",get_time:"get_time",set_fps:"set_fps",get_fps:"get_fps"}
haxegon_Core.callfunctionstartframe = function(f) {
	if(f == null) {
		haxegon_Core.startframeextended = false;
		haxegon_Core.extendedstartframefunction = null;
	} else {
		haxegon_Core.startframeextended = true;
		haxegon_Core.extendedstartframefunction = f;
	}
};
haxegon_Core.callfunctionafterupdate = function(f) {
	if(f == null) {
		haxegon_Core.updateextended = false;
		haxegon_Core.extendedupdatefunction = null;
	} else {
		haxegon_Core.updateextended = true;
		haxegon_Core.extendedupdatefunction = f;
	}
};
haxegon_Core.callfunctionafterrender = function(f) {
	if(f == null) {
		haxegon_Core.renderextended = false;
		haxegon_Core.extendedrenderfunction = null;
	} else {
		haxegon_Core.renderextended = true;
		haxegon_Core.extendedrenderfunction = f;
	}
};
haxegon_Core.delaycall = function(f,time) {
	haxe_Timer.delay(function() {
		f();
	},time * 1000 | 0);
};
haxegon_Core.get_fps = function() {
	return haxegon_Core._fps;
};
haxegon_Core.set_fps = function(_newfps) {
	starling_core_Starling.get_current().get_nativeStage().set_frameRate(_newfps);
	haxegon_Core.TARGETFRAMERATE = _newfps;
	return _newfps;
};
haxegon_Core.get_time = function() {
	return (openfl_Lib.getTimer() - haxegon_Core.starttime) / 1000;
};
haxegon_Core.set_time = function(t) {
	haxegon_Core.starttime = Std["int"](openfl_Lib.getTimer() - t * 1000);
	return openfl_Lib.getTimer() - haxegon_Core.starttime;
};
haxegon_Core.get_showstats = function() {
	return haxegon_Core._showstats;
};
haxegon_Core.set_showstats = function(_b) {
	starling_core_Starling.get_current().set_showStats(_b);
	return _b;
};
haxegon_Core.get_window = function() {
	haxegon_Debug.log("ERROR: Core.window is not available in HTML5.",{ fileName : "Core.hx", lineNumber : 283, className : "haxegon.Core", methodName : "get_window"});
	return null;
};
haxegon_Core.quit = function(code) {
	haxegon_Debug.log("ERROR: Core.quit() has no effect in HTML5.",{ fileName : "Core.hx", lineNumber : 295, className : "haxegon.Core", methodName : "quit"});
};
haxegon_Core.__super__ = starling_display_Sprite;
haxegon_Core.prototype = $extend(starling_display_Sprite.prototype,{
	addedtostage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.addedtostage));
		this.loaded();
	}
	,loaded: function() {
		haxegon_Random.set_seed(Std["int"](Math.random() * 233280));
		haxegon_Input.init(this.get_stage(),starling_core_Starling.get_current().get_nativeStage());
		haxegon_Mouse.init(this.get_stage(),starling_core_Starling.get_current().get_nativeStage());
		haxegon_Data.initassets();
		haxegon_Debug.init();
		haxegon_Gfx.init(this.get_stage(),starling_core_Starling.get_current().get_nativeStage());
		haxegon_Text.defaultfont();
		haxegon_Music.init();
		haxegon_Gfx.screenwidth = Std.parseInt("240");
		haxegon_Gfx.screenheight = Std.parseInt("150");
		haxegon_Gfx.screenwidthmid = haxegon_Gfx.screenwidth / 2 | 0;
		haxegon_Gfx.screenheightmid = haxegon_Gfx.screenheight / 2 | 0;
		haxe_Timer.delay($bind(this,this.continueloading),1);
	}
	,continueloading: function() {
		haxegon_Scene.init();
		if(!haxegon_Gfx.gfxinit) {
			haxegon_Gfx.resizescreen(Std.parseInt("240"),Std.parseInt("150"));
			if(haxegon_Gfx.get_fullscreen()) haxegon_Gfx.set_fullscreen(true); else haxegon_Gfx.set_fullscreen(false);
		} else if(haxegon_Gfx.get_fullscreen()) haxegon_Gfx.set_fullscreen(true); else haxegon_Gfx.set_fullscreen(false);
		haxegon_Core._rate3 = Math.round(3000 / haxegon_Core.TARGETFRAMERATE);
		haxegon_Core._target3 = 3 * openfl_Lib.getTimer() + haxegon_Core._rate3;
		haxegon_Core.starttime = openfl_Lib.getTimer();
		this.get_stage().addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(e) {
		if(!haxegon_Scene.hasseperaterenderfunction) {
			this.doupdate(0,1);
			return;
		}
		var updatecount = 0;
		var _time3 = 3 * openfl_Lib.getTimer();
		if(_time3 < haxegon_Core._target3 - 0.5 * haxegon_Core._rate3) return;
		if(haxegon_Core.startframeextended) haxegon_Core.extendedstartframefunction();
		var frameupdates = Math.ceil(Math.max(1.0,(_time3 - haxegon_Core._target3 + 0.5 * haxegon_Core._rate3) / haxegon_Core._rate3));
		if(frameupdates > 4) {
			haxegon_Core._target3 += haxegon_Core._rate3 * (frameupdates - 4);
			frameupdates = 4;
		}
		if(frameupdates == 1) {
			if(haxegon_Core._target3 - _time3 > 0.1 * haxegon_Core._rate3) haxegon_Core._target3 -= 1; else if(haxegon_Core._target3 - _time3 < -0.1 * haxegon_Core._rate3) haxegon_Core._target3 += 1;
		}
		var _g = 0;
		while(_g < frameupdates) {
			var upd = _g++;
			haxegon_Core._target3 += haxegon_Core._rate3;
			this.doupdate(upd,frameupdates);
		}
		this.dorender();
	}
	,doupdate: function(updateindex,updatecount) {
		haxegon_Mouse.update(haxegon_Gfx.getscreenx(openfl_Lib.get_current().get_mouseX()),haxegon_Gfx.getscreeny(openfl_Lib.get_current().get_mouseY()),updateindex == 0);
		haxegon_Input.update();
		if(!haxegon_Scene.hasseperaterenderfunction) {
			haxegon_Gfx.startframe();
			haxegon_Debug.update();
			haxegon_Scene.update();
			haxegon_Text.drawstringinput();
			haxegon_Debug.render();
			if(haxegon_Core.updateextended) {
				haxegon_Core.currentupdateindex = updateindex;
				haxegon_Core.currentupdatecount = updatecount;
				haxegon_Core.extendedupdatefunction();
			}
			haxegon_Gfx.endframe();
		} else {
			haxegon_Debug.update();
			haxegon_Scene.update();
			if(haxegon_Core.updateextended) {
				haxegon_Core.currentupdateindex = updateindex;
				haxegon_Core.currentupdatecount = updatecount;
				haxegon_Core.extendedupdatefunction();
			}
		}
		haxegon_Music.processmusic();
	}
	,dorender: function() {
		haxegon_Gfx.startframe();
		haxegon_Scene.render();
		haxegon_Text.drawstringinput();
		haxegon_Debug.render();
		if(haxegon_Core.renderextended) haxegon_Core.extendedrenderfunction();
		haxegon_Gfx.endframe();
	}
	,__class__: haxegon_Core
});
var haxegon_Data = function() { };
$hxClasses["haxegon.Data"] = haxegon_Data;
haxegon_Data.__name__ = ["haxegon","Data"];
haxegon_Data.loadtext = function(textfile) {
	if(openfl_utils_Assets.exists("data/text/" + textfile + ".txt")) haxegon_Data.tempstring = openfl_utils_Assets.getText("data/text/" + textfile + ".txt"); else {
		haxegon_Debug.log("ERROR: In loadtext, cannot find \"data/text/" + textfile + ".txt\".",{ fileName : "Data.hx", lineNumber : 16, className : "haxegon.Data", methodName : "loadtext"});
		return [""];
	}
	haxegon_Data.tempstring = haxegon_S.replacechar(haxegon_Data.tempstring,"\r","");
	return haxegon_Data.tempstring.split("\n");
};
haxegon_Data.blank2darray = function(width,height) {
	var returnedarray2d;
	var _g = [];
	var _g1 = 0;
	while(_g1 < width) {
		var x = _g1++;
		_g.push((function($this) {
			var $r;
			var _g2 = [];
			{
				var _g3 = 0;
				while(_g3 < height) {
					var y = _g3++;
					_g2.push(0);
				}
			}
			$r = _g2;
			return $r;
		}(this)));
	}
	returnedarray2d = _g;
	return returnedarray2d;
};
haxegon_Data.initassets = function() {
	haxegon_Data.embeddedassets_original = openfl_utils_Assets.list();
	haxegon_Data.embeddedassets = [];
	var _g1 = 0;
	var _g = haxegon_Data.embeddedassets_original.length;
	while(_g1 < _g) {
		var i = _g1++;
		haxegon_Data.embeddedassets.push(haxegon_Data.embeddedassets_original[i].toLowerCase());
	}
};
haxegon_Data.assetexists = function(filename) {
	filename = filename.toLowerCase();
	return HxOverrides.indexOf(haxegon_Data.embeddedassets,filename,0) >= 0;
};
haxegon_Data.assetexists_infolder = function(folder,filename) {
	filename = filename.toLowerCase();
	folder = folder.toLowerCase();
	var folderlength = folder.length;
	var filenamelength = filename.length;
	var _g1 = 0;
	var _g = haxegon_Data.embeddedassets.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(HxOverrides.substr(haxegon_Data.embeddedassets[i],0,folderlength) == folder) {
			if(haxegon_S.right(haxegon_Data.embeddedassets[i],filenamelength) == filename) return true;
		}
	}
	return false;
};
haxegon_Data.getsoundasset = function(filename) {
	filename = filename.toLowerCase();
	var realfilename = haxegon_Data.embeddedassets_original[HxOverrides.indexOf(haxegon_Data.embeddedassets,filename,0)];
	return openfl_utils_Assets.getSound(realfilename);
};
haxegon_Data.getgraphicsasset = function(filename) {
	filename = filename.toLowerCase();
	var realfilename = haxegon_Data.embeddedassets_original[HxOverrides.indexOf(haxegon_Data.embeddedassets,filename,0)];
	return openfl_utils_Assets.getBitmapData(realfilename);
};
haxegon_Data.getfontasset = function(filename) {
	filename = filename.toLowerCase();
	var realfilename = haxegon_Data.embeddedassets_original[HxOverrides.indexOf(haxegon_Data.embeddedassets,filename,0)];
	return openfl_utils_Assets.getFont(realfilename);
};
haxegon_Data.gettextasset = function(filename) {
	filename = filename.toLowerCase();
	var realfilename = haxegon_Data.embeddedassets_original[HxOverrides.indexOf(haxegon_Data.embeddedassets,filename,0)];
	return openfl_utils_Assets.getText(realfilename);
};
var haxegon_Debug = function() { };
$hxClasses["haxegon.Debug"] = haxegon_Debug;
haxegon_Debug.__name__ = ["haxegon","Debug"];
haxegon_Debug.clear = function() {
	haxegon_Debug.history = [];
	haxegon_Debug.posinfo = [];
	haxegon_Debug.repeatcount = [];
	haxegon_Debug.showlogwindow = false;
	haxegon_Debug.init();
};
haxegon_Debug.log = function(t,pos) {
	window.console.log(pos.fileName + ":" + pos.lineNumber + ": " + Std.string(t));
	if(haxegon_Debug.posinfo.length == 0) {
		haxegon_Debug.posinfo.push(pos);
		haxegon_Debug.history.push(haxegon_Convert.tostring(t));
		haxegon_Debug.repeatcount.push(1);
		haxegon_Debug.gui.scrollpos = haxegon_Debug.history.length;
	} else if(haxegon_Debug.positionmatch(haxegon_Debug.posinfo[haxegon_Debug.posinfo.length - 1],pos) && haxegon_Debug.history[haxegon_Debug.history.length - 1] == haxegon_Convert.tostring(t)) haxegon_Debug.repeatcount[haxegon_Debug.repeatcount.length - 1]++; else {
		haxegon_Debug.posinfo.push(pos);
		haxegon_Debug.history.push(haxegon_Convert.tostring(t));
		haxegon_Debug.repeatcount.push(1);
		haxegon_Debug.gui.scrollpos = haxegon_Debug.history.length;
	}
	if(haxegon_Debug.gui.height < haxegon_Debug.history.length) haxegon_Debug.gui.height = haxegon_Debug.history.length;
	if(haxegon_Debug.gui.height > haxegon_Debug.gui.maxlines) haxegon_Debug.gui.height = haxegon_Debug.gui.maxlines;
	if(haxegon_Debug.gui.scrollpos > haxegon_Debug.history.length - (haxegon_Debug.gui.height - 1) - 1) haxegon_Debug.gui.scrollpos = haxegon_Debug.history.length - (haxegon_Debug.gui.height - 1) - 1;
	haxegon_Debug.showlogwindow = true;
};
haxegon_Debug.positionmatch = function(p1,p2) {
	if(p1.fileName == p2.fileName) {
		if(p1.className == p2.className) {
			if(p1.lineNumber == p2.lineNumber) {
				if(p1.methodName == p2.methodName) return true;
			}
		}
	}
	return false;
};
haxegon_Debug.update = function() {
	if(haxegon_Debug.showlogwindow) {
		var capturinginput = false;
		if(haxegon_Geom.inbox(haxegon_Mouse.get_x(),haxegon_Mouse.get_y(),0,0,haxegon_Gfx.screenwidth,haxegon_Debug.gui.height * haxegon_Debug.gui.scale * 10 + 2)) capturinginput = true;
		return capturinginput;
	}
	return false;
};
haxegon_Debug.drawwindow = function() {
	var windowheight = haxegon_Debug.gui.height * haxegon_Debug.gui.scale * 10 | 0;
	haxegon_Gfx.fillbox(0,0,haxegon_Gfx.screenwidth,windowheight,2566178,0.75);
	var clearwidth = Std["int"](haxegon_Text.width("clear") + 16 * haxegon_Debug.gui.scale);
	if(haxegon_Geom.inbox(haxegon_Mouse.get_x(),haxegon_Mouse.get_y(),haxegon_Gfx.screenwidth - clearwidth,windowheight,clearwidth,haxegon_Debug.gui.scale * 10)) {
		haxegon_Gfx.fillbox(haxegon_Gfx.screenwidth - clearwidth,windowheight,clearwidth,haxegon_Debug.gui.scale * 10,2566178);
		haxegon_Debug.drawicon(haxegon_Gfx.screenwidth - clearwidth + haxegon_Debug.gui.scale * 2 | 0,windowheight + haxegon_Debug.gui.scale * 2 | 0,16777215,"close");
		haxegon_Text.display(haxegon_Gfx.screenwidth - clearwidth + haxegon_Debug.gui.scale * 12,windowheight + haxegon_Debug.gui.scale | 0,"clear",16777215);
		if(haxegon_Debug.gui.mousefocus == "none" && haxegon_Mouse.leftheld()) haxegon_Debug.clear();
	} else {
		haxegon_Gfx.fillbox(haxegon_Gfx.screenwidth - clearwidth,windowheight,clearwidth,haxegon_Debug.gui.scale * 10,2566178,0.5);
		haxegon_Debug.drawicon(haxegon_Gfx.screenwidth - clearwidth + haxegon_Debug.gui.scale * 2 | 0,windowheight + haxegon_Debug.gui.scale * 2 | 0,13290186,"close");
		haxegon_Text.display(haxegon_Gfx.screenwidth - clearwidth + haxegon_Debug.gui.scale * 12,windowheight + haxegon_Debug.gui.scale | 0,"clear",13290186);
	}
	haxegon_Debug.gui.scrollpos = haxegon_Debug.drawscrollbar(haxegon_Gfx.screenwidth - 12 * haxegon_Debug.gui.scale | 0,0,10 * haxegon_Debug.gui.scale | 0,haxegon_Debug.gui.height * haxegon_Debug.gui.scale * 10 | 0,haxegon_Debug.gui.scrollpos,haxegon_Debug.history.length - (haxegon_Debug.gui.height - 1) - 1,true,1);
	var _g1 = 0;
	var _g = haxegon_Debug.gui.height;
	while(_g1 < _g) {
		var j = _g1++;
		var i = j + haxegon_Debug.gui.scrollpos;
		if(i >= 0 && i < haxegon_Debug.history.length) {
			haxegon_Text.align(haxegon_Text.LEFT);
			haxegon_Text.display(haxegon_Debug.gui.scale * 2,haxegon_Debug.gui.scale * 2 + j * (haxegon_Debug.gui.scale * 10),haxegon_Debug.history[i],13290186);
			if(haxegon_Debug.repeatcount[i] > 1) {
				haxegon_Text.align(haxegon_Text.RIGHT);
				haxegon_Text.display(haxegon_Gfx.screenwidth - (haxegon_Debug.gui.showscrollbar?14 * haxegon_Debug.gui.scale:2 * haxegon_Debug.gui.scale) | 0,j * (haxegon_Debug.gui.scale * 10),"x" + haxegon_Debug.repeatcount[i],16759482);
			}
		}
	}
};
haxegon_Debug.render = function() {
	if(haxegon_Debug.showlogwindow) {
		var olddrawto = haxegon_Gfx.drawto;
		var oldfontsize = haxegon_Text.get_size();
		var oldfont = haxegon_Text.get_font();
		var oldalign = haxegon_Text.textalign;
		haxegon_Debug.gui.scale = Math.floor(haxegon_Gfx.screenheight / 300) + 1;
		haxegon_Text.set_font("default");
		haxegon_Text.set_size(haxegon_Debug.gui.scale);
		haxegon_Gfx.endquadbatch();
		if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundleunlock();
		haxegon_Gfx.drawtoscreen();
		haxegon_Debug.drawwindow();
		haxegon_Gfx.drawto = olddrawto;
		haxegon_Gfx.drawto.bundlelock();
		haxegon_Text.set_font(oldfont);
		haxegon_Text.set_size(oldfontsize);
		haxegon_Text.textalign = oldalign;
	}
};
haxegon_Debug.init = function() {
	haxegon_Debug.gui = { height : 0, scale : 2.0, showscrollbar : false, scrollpos : 0, scrolldelay : 0, scrollspeed : 1, mousefocus : "none", maxlines : 8};
};
haxegon_Debug.drawicon = function(x,y,c,type) {
	var oldlinethickness = haxegon_Gfx.get_linethickness();
	haxegon_Gfx.set_linethickness(haxegon_Debug.gui.scale);
	switch(type) {
	case "arrowup":
		haxegon_Gfx.filltri(x,y + 7 * haxegon_Debug.gui.scale,x + 4 * haxegon_Debug.gui.scale,y + haxegon_Debug.gui.scale,x + 8 * haxegon_Debug.gui.scale,y + 7 * haxegon_Debug.gui.scale,c);
		break;
	case "arrowdown":
		haxegon_Gfx.filltri(x,y + haxegon_Debug.gui.scale,x + 4 * haxegon_Debug.gui.scale,y + 7 * haxegon_Debug.gui.scale,x + 8 * haxegon_Debug.gui.scale,y + haxegon_Debug.gui.scale,c);
		break;
	case "close":
		haxegon_Gfx.drawline(x + 1,y + 1,x + 6 * haxegon_Debug.gui.scale,y + 6 * haxegon_Debug.gui.scale,c);
		haxegon_Gfx.drawline(x + 1,y + 6 * haxegon_Debug.gui.scale,x + 6 * haxegon_Debug.gui.scale,y + 1,c);
		break;
	default:
	}
	haxegon_Gfx.set_linethickness(oldlinethickness);
};
haxegon_Debug.drawscrollbar = function(x,y,width,height,scrollpos,scrollmax,applywheel,scrolladjustment) {
	if(scrolladjustment == null) scrolladjustment = 1;
	if(scrollmax > 0) {
		if(applywheel) {
			if(haxegon_Mouse.mousewheel > 0) {
				haxegon_Mouse.mousewheel = 0;
				scrollpos -= scrolladjustment;
				if(scrollpos < 0) scrollpos = 0;
			} else if(haxegon_Mouse.mousewheel < 0) {
				haxegon_Mouse.mousewheel = 0;
				scrollpos += scrolladjustment;
				if(scrollpos >= scrollmax) scrollpos = scrollmax;
			}
		}
		if(haxegon_Mouse.leftheld()) {
			if(haxegon_Geom.inbox(haxegon_Mouse.get_x(),haxegon_Mouse.get_y(),x,y,width,10) && haxegon_Debug.gui.mousefocus == "none" || haxegon_Debug.gui.mousefocus == "topbutton") {
				if(haxegon_Debug.gui.scrolldelay > 0) haxegon_Debug.gui.scrolldelay--; else {
					scrollpos -= scrolladjustment;
					if(scrollpos < 0) scrollpos = 0;
					haxegon_Debug.gui.scrolldelay = haxegon_Debug.gui.scrollspeed;
				}
				haxegon_Debug.gui.mousefocus = "topbutton";
			} else if(haxegon_Geom.inbox(haxegon_Mouse.get_x(),haxegon_Mouse.get_y(),x,y + height - 10,width,10) && haxegon_Debug.gui.mousefocus == "none" || haxegon_Debug.gui.mousefocus == "bottombutton") {
				if(haxegon_Debug.gui.scrolldelay > 0) haxegon_Debug.gui.scrolldelay--; else {
					scrollpos += scrolladjustment;
					if(scrollpos >= scrollmax) scrollpos = scrollmax;
					haxegon_Debug.gui.scrolldelay = haxegon_Debug.gui.scrollspeed;
				}
				haxegon_Debug.gui.mousefocus = "bottombutton";
			} else if(haxegon_Geom.inbox(haxegon_Mouse.get_x(),haxegon_Mouse.get_y(),x,y,width,height) && haxegon_Debug.gui.mousefocus == "none" || haxegon_Debug.gui.mousefocus == "scrollbar") {
				scrollpos = Math.round((haxegon_Mouse.get_y() - y - 7.5) * scrollmax / (height - 20 - 15));
				haxegon_Debug.gui.mousefocus = "scrollbar";
			}
		} else {
			haxegon_Debug.gui.mousefocus = "none";
			haxegon_Debug.gui.scrolldelay = 0;
		}
		scrollpos = Std["int"](Math.min(scrollmax,Math.max(scrollpos,0)));
		var scrollbarposition = Math.round(scrollpos * (height - 20 * haxegon_Debug.gui.scale - 15) / scrollmax);
		haxegon_Gfx.fillbox(x,y,width,height,2762799);
		haxegon_Gfx.fillbox(x + 1,y + 10 * haxegon_Debug.gui.scale + scrollbarposition,width - 1,15,12172481);
		haxegon_Debug.drawicon(x + 2,y + 1,8552581,"arrowup");
		haxegon_Debug.drawicon(x + 2,y + height + -7 * haxegon_Debug.gui.scale | 0,8552581,"arrowdown");
		haxegon_Debug.gui.showscrollbar = true;
	} else {
		scrollpos = 0;
		if(!haxegon_Mouse.leftheld()) haxegon_Debug.gui.mousefocus = "none";
		haxegon_Debug.gui.scrolldelay = 0;
		haxegon_Debug.gui.showscrollbar = false;
	}
	return scrollpos;
};
var haxegon_Filter = function() { };
$hxClasses["haxegon.Filter"] = haxegon_Filter;
haxegon_Filter.__name__ = ["haxegon","Filter"];
haxegon_Filter.__properties__ = {set_bloom:"set_bloom",get_bloom:"get_bloom",set_blur:"set_blur",get_blur:"get_blur"}
haxegon_Filter.reset = function() {
	haxegon_Gfx.screen.set_filter(null);
	haxegon_Filter._blur = false;
	haxegon_Filter._bloom = 0;
};
haxegon_Filter.get_blur = function() {
	return haxegon_Filter._blur;
};
haxegon_Filter.set_blur = function(_b) {
	haxegon_Filter._blur = _b;
	haxegon_Filter.updatefilters();
	return haxegon_Filter._blur;
};
haxegon_Filter.get_bloom = function() {
	return haxegon_Filter._bloom;
};
haxegon_Filter.set_bloom = function(_b) {
	haxegon_Filter._bloom = _b;
	haxegon_Filter.updatefilters();
	return haxegon_Filter._bloom;
};
haxegon_Filter.init = function() {
	haxegon_Filter._blur = false;
	haxegon_Filter.blurfilter = new starling_filters_BlurFilter();
	haxegon_Filter._bloom = 0;
	haxegon_Filter.bloomfilter = new haxegon_filters_BloomFilter();
	haxegon_Filter.reset();
};
haxegon_Filter.updatefilters = function() {
	haxegon_Gfx.screen.set_filter(null);
	if(haxegon_Filter._bloom > 0) {
		haxegon_Filter.bloomfilter.red = haxegon_Filter._bloom / 2 + 0.5;
		haxegon_Filter.bloomfilter.green = haxegon_Filter._bloom / 2 + 0.5;
		haxegon_Filter.bloomfilter.blue = haxegon_Filter._bloom / 2 + 0.5;
		haxegon_Filter.bloomfilter.blur = Math.min(2.5,Math.max((haxegon_Filter._bloom + 0.5) * 2,0)) + (haxegon_Filter._blur?1:0);
		haxegon_Gfx.screen.set_filter(haxegon_Filter.bloomfilter);
		return;
	}
	if(haxegon_Filter._blur) {
		haxegon_Gfx.screen.set_filter(haxegon_Filter.blurfilter);
		return;
	}
};
var haxegon_Geom = function() { };
$hxClasses["haxegon.Geom"] = haxegon_Geom;
haxegon_Geom.__name__ = ["haxegon","Geom"];
haxegon_Geom.inbox = function(x,y,rectx,recty,rectw,recth) {
	if(x >= rectx) {
		if(x < rectx + rectw) {
			if(y >= recty) {
				if(y < recty + recth) return true;
			}
		}
	}
	return false;
};
haxegon_Geom.clamp = function(value,min,max) {
	return Math.min(max,Math.max(value,min));
};
haxegon_Geom.overlap = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	haxegon_Geom.rect1.setTo(x1,y1,w1,h1);
	haxegon_Geom.rect2.setTo(x2,y2,w2,h2);
	return haxegon_Geom.rect1.intersects(haxegon_Geom.rect2);
};
haxegon_Geom.distance = function(x1,y1,x2,y2) {
	return Math.sqrt(Math.pow(x2 - x1,2) + Math.pow(y2 - y1,2));
};
haxegon_Geom.getangle = function(x1,y1,x2,y2) {
	return (Math.PI * 2 - Math.atan2(y2 - y1,x2 - x1)) % (Math.PI * 2);
};
haxegon_Geom.todegrees = function(rad) {
	return rad * 180 / Math.PI;
};
haxegon_Geom.toradians = function(degrees) {
	return degrees * Math.PI / 180;
};
haxegon_Geom.anglebetween = function(angle1,angle2) {
	return -Math.atan2(Math.sin(angle1 - angle2),Math.cos(angle1 - angle2));
};
var haxegon_HaxegonImage = function(n) {
	this.name = n;
};
$hxClasses["haxegon.HaxegonImage"] = haxegon_HaxegonImage;
haxegon_HaxegonImage.__name__ = ["haxegon","HaxegonImage"];
haxegon_HaxegonImage.prototype = {
	fetchsize: function() {
		this.width = Std["int"](this.contents.get_width());
		this.height = Std["int"](this.contents.get_height());
	}
	,contents: null
	,name: null
	,width: null
	,height: null
	,__class__: haxegon_HaxegonImage
};
var haxegon_HaxegonTileset = function(n,w,h) {
	this.name = n;
	this.width = w;
	this.height = h;
	this.tiles = [];
	this.sharedatlas = true;
};
$hxClasses["haxegon.HaxegonTileset"] = haxegon_HaxegonTileset;
haxegon_HaxegonTileset.__name__ = ["haxegon","HaxegonTileset"];
haxegon_HaxegonTileset.prototype = {
	tiles: null
	,name: null
	,width: null
	,height: null
	,sharedatlas: null
	,__class__: haxegon_HaxegonTileset
};
var starling_display_Quad = function(width,height,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(color == null) color = 16777215;
	starling_display_DisplayObject.call(this);
	if(width == 0.0 || height == 0.0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid size: width and height must not be zero"));
	this.mTinted = color != 16777215;
	this.mVertexData = new starling_utils_VertexData(4,premultipliedAlpha);
	this.mVertexData.setPosition(0,0.0,0.0);
	this.mVertexData.setPosition(1,width,0.0);
	this.mVertexData.setPosition(2,0.0,height);
	this.mVertexData.setPosition(3,width,height);
	this.mVertexData.setUniformColor(color);
	this.onVertexDataChanged();
};
$hxClasses["starling.display.Quad"] = starling_display_Quad;
starling_display_Quad.__name__ = ["starling","display","Quad"];
starling_display_Quad.__super__ = starling_display_DisplayObject;
starling_display_Quad.prototype = $extend(starling_display_DisplayObject.prototype,{
	mTinted: null
	,mVertexData: null
	,setWidthHeight: function(width,height) {
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.onVertexDataChanged();
	}
	,onVertexDataChanged: function() {
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		if(targetSpace == this) {
			this.mVertexData.getPosition(3,starling_display_Quad.sHelperPoint);
			resultRect.setTo(0.0,0.0,starling_display_Quad.sHelperPoint.x,starling_display_Quad.sHelperPoint.y);
		} else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			this.mVertexData.getPosition(3,starling_display_Quad.sHelperPoint);
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,starling_display_Quad.sHelperPoint.x * scaleX,starling_display_Quad.sHelperPoint.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else if(this.get_is3D() && this.get_stage() != null) {
			this.get_stage().getCameraPosition(targetSpace,starling_display_Quad.sHelperPoint3D);
			this.getTransformationMatrix3D(targetSpace,starling_display_Quad.sHelperMatrix3D);
			this.mVertexData.getBoundsProjected(starling_display_Quad.sHelperMatrix3D,starling_display_Quad.sHelperPoint3D,0,4,resultRect);
		} else {
			this.getTransformationMatrix(targetSpace,starling_display_Quad.sHelperMatrix);
			this.mVertexData.getBounds(starling_display_Quad.sHelperMatrix,0,4,resultRect);
		}
		return resultRect;
	}
	,getVertexColor: function(vertexID) {
		return this.mVertexData.getColor(vertexID);
	}
	,setVertexColor: function(vertexID,color) {
		this.mVertexData.setColor(vertexID,color);
		this.onVertexDataChanged();
		if(color != 16777215) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
	}
	,getVertexAlpha: function(vertexID) {
		return this.mVertexData.getAlpha(vertexID);
	}
	,setVertexAlpha: function(vertexID,alpha) {
		this.mVertexData.setAlpha(vertexID,alpha);
		this.onVertexDataChanged();
		if(alpha != 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
	}
	,get_color: function() {
		return this.mVertexData.getColor(0);
	}
	,set_color: function(value) {
		this.mVertexData.setUniformColor(value);
		this.onVertexDataChanged();
		if(value != 16777215 || this.get_alpha() != 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
		return this.mVertexData.getColor(0);
	}
	,set_alpha: function(value) {
		starling_display_DisplayObject.prototype.set_alpha.call(this,value);
		if(value < 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
		return this.mAlpha;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) targetVertexID = 0;
		this.mVertexData.copyTo(targetData,targetVertexID);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) targetVertexID = 0;
		this.mVertexData.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha);
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,__class__: starling_display_Quad
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted",set_color:"set_color",get_color:"get_color"})
});
var starling_display_Poly4 = function(x1,y1,x2,y2,x3,y3,x4,y4,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(color == null) color = 16777215;
	if(y4 == null) y4 = 0;
	if(x4 == null) x4 = 0;
	if(y3 == null) y3 = 0;
	if(x3 == null) x3 = 0;
	if(y2 == null) y2 = 0;
	if(x2 == null) x2 = 0;
	if(y1 == null) y1 = 0;
	if(x1 == null) x1 = 0;
	this._lowerRight = new openfl_geom_Point(0,0);
	this.ymax = 0;
	this.ymin = 0;
	this.xmax = 0;
	this.xmin = 0;
	this.p4 = new openfl_geom_Point(0,0);
	this.p3 = new openfl_geom_Point(0,0);
	this.p2 = new openfl_geom_Point(0,0);
	this.p1 = new openfl_geom_Point(0,0);
	this.p1.setTo(x1,y1);
	this.p2.setTo(x2,y2);
	this.p3.setTo(x3,y3);
	this.p4.setTo(x4,y4);
	this.xmin = Math.min(this.p1.x,Math.min(this.p2.x,Math.min(this.p3.x,this.p4.x)));
	this.ymin = Math.min(this.p1.y,Math.min(this.p2.y,Math.min(this.p3.y,this.p4.y)));
	this.xmax = Math.max(this.p1.x,Math.max(this.p2.x,Math.max(this.p3.x,this.p4.x)));
	this.ymax = Math.max(this.p1.y,Math.max(this.p2.y,Math.max(this.p3.y,this.p4.y)));
	starling_display_Quad.call(this,this.xmax - this.xmin,this.ymax - this.ymin,color,premultipliedAlpha);
	this.mVertexData.setPosition(0,this.p1.x - this.xmin,this.p1.y - this.ymin);
	this.mVertexData.setPosition(1,this.p2.x - this.xmin,this.p2.y - this.ymin);
	this.mVertexData.setPosition(2,this.p3.x - this.xmin,this.p3.y - this.ymin);
	this.mVertexData.setPosition(3,this.p4.x - this.xmin,this.p4.y - this.ymin);
	this.onVertexDataChanged();
	this.set_x(this.xmin);
	this.set_y(this.ymin);
	this._lowerRight.setTo(this.xmax - this.xmin,this.ymax - this.ymin);
};
$hxClasses["starling.display.Poly4"] = starling_display_Poly4;
starling_display_Poly4.__name__ = ["starling","display","Poly4"];
starling_display_Poly4.__super__ = starling_display_Quad;
starling_display_Poly4.prototype = $extend(starling_display_Quad.prototype,{
	p1: null
	,p2: null
	,p3: null
	,p4: null
	,xmin: null
	,xmax: null
	,ymin: null
	,ymax: null
	,setVertexPositions: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		if(y4 == null) y4 = 0;
		if(x4 == null) x4 = 0;
		if(y3 == null) y3 = 0;
		if(x3 == null) x3 = 0;
		if(y2 == null) y2 = 0;
		if(x2 == null) x2 = 0;
		if(y1 == null) y1 = 0;
		if(x1 == null) x1 = 0;
		this.p1.setTo(x1,y1);
		this.p2.setTo(x2,y2);
		this.p3.setTo(x3,y3);
		this.p4.setTo(x4,y4);
		this.xmin = Math.min(this.p1.x,Math.min(this.p2.x,Math.min(this.p3.x,this.p4.x)));
		this.ymin = Math.min(this.p1.y,Math.min(this.p2.y,Math.min(this.p3.y,this.p4.y)));
		this.xmax = Math.max(this.p1.x,Math.max(this.p2.x,Math.max(this.p3.x,this.p4.x)));
		this.ymax = Math.max(this.p1.y,Math.max(this.p2.y,Math.max(this.p3.y,this.p4.y)));
		this.setWidthHeight(this.xmax - this.xmin,this.ymax - this.ymin);
		this.mVertexData.setPosition(0,this.p1.x - this.xmin,this.p1.y - this.ymin);
		this.mVertexData.setPosition(1,this.p2.x - this.xmin,this.p2.y - this.ymin);
		this.mVertexData.setPosition(2,this.p3.x - this.xmin,this.p3.y - this.ymin);
		this.mVertexData.setPosition(3,this.p4.x - this.xmin,this.p4.y - this.ymin);
		this.onVertexDataChanged();
		this.set_x(this.xmin);
		this.set_y(this.ymin);
		this._lowerRight.setTo(this.xmax - this.xmin,this.ymax - this.ymin);
	}
	,_lowerRight: null
	,min4: function(a,b,c,d) {
		return Math.min(a,Math.min(b,Math.min(c,d)));
	}
	,max4: function(a,b,c,d) {
		return Math.max(a,Math.max(b,Math.max(c,d)));
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		if(targetSpace == this) resultRect.setTo(0.0,0.0,this._lowerRight.x,this._lowerRight.y); else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,this._lowerRight.x * scaleX,this._lowerRight.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else resultRect = starling_display_Quad.prototype.getBounds.call(this,targetSpace,resultRect);
		return resultRect;
	}
	,__class__: starling_display_Poly4
});
var starling_display_Line = function(x1,y1,x2,y2,thickness,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	this.l4 = new openfl_geom_Point(0,0);
	this.l3 = new openfl_geom_Point(0,0);
	this.l2 = new openfl_geom_Point(0,0);
	this.l1 = new openfl_geom_Point(0,0);
	this.to = new openfl_geom_Point(0,0);
	this.from = new openfl_geom_Point(0,0);
	this.from.setTo(x1,y1);
	this.to.setTo(x2,y2);
	this.thickness = thickness;
	var dx = this.to.x - this.from.x;
	var dy = this.to.y - this.from.y;
	var l = Math.sqrt(dx * dx + dy * dy);
	var u = new openfl_geom_Point(dx / l,dy / l);
	var v = new openfl_geom_Point(u.y,-u.x);
	var halfT = thickness * 0.5;
	this.l1 = this.from.clone();
	this.l1.offset(v.x * halfT,v.y * halfT);
	this.l1.offset(-u.x * halfT,-u.y * halfT);
	this.l2 = this.from.clone();
	this.l2.offset(-v.x * halfT,-v.y * halfT);
	this.l2.offset(-u.x * halfT,-u.y * halfT);
	this.l3 = this.to.clone();
	this.l3.offset(v.x * halfT,v.y * halfT);
	this.l3.offset(u.x * halfT,u.y * halfT);
	this.l4 = this.to.clone();
	this.l4.offset(-v.x * halfT,-v.y * halfT);
	this.l4.offset(u.x * halfT,u.y * halfT);
	starling_display_Poly4.call(this,this.l1.x,this.l1.y,this.l2.x,this.l2.y,this.l3.x,this.l3.y,this.l4.x,this.l4.y,color,premultipliedAlpha);
};
$hxClasses["starling.display.Line"] = starling_display_Line;
starling_display_Line.__name__ = ["starling","display","Line"];
starling_display_Line.__super__ = starling_display_Poly4;
starling_display_Line.prototype = $extend(starling_display_Poly4.prototype,{
	from: null
	,to: null
	,l1: null
	,l2: null
	,l3: null
	,l4: null
	,thickness: null
	,setPosition: function(x1,y1,x2,y2) {
		this.from.setTo(x1,y1);
		this.to.setTo(x2,y2);
		var dx = this.to.x - this.from.x;
		var dy = this.to.y - this.from.y;
		var l = Math.sqrt(dx * dx + dy * dy);
		var u = new openfl_geom_Point(dx / l,dy / l);
		var v = new openfl_geom_Point(u.y,-u.x);
		var halfT = this.thickness * 0.5;
		this.l1 = this.from.clone();
		this.l1.offset(v.x * halfT,v.y * halfT);
		this.l1.offset(-u.x * halfT,-u.y * halfT);
		this.l2 = this.from.clone();
		this.l2.offset(-v.x * halfT,-v.y * halfT);
		this.l2.offset(-u.x * halfT,-u.y * halfT);
		this.l3 = this.to.clone();
		this.l3.offset(v.x * halfT,v.y * halfT);
		this.l3.offset(u.x * halfT,u.y * halfT);
		this.l4 = this.to.clone();
		this.l4.offset(-v.x * halfT,-v.y * halfT);
		this.l4.offset(u.x * halfT,u.y * halfT);
		this.setVertexPositions(this.l1.x,this.l1.y,this.l2.x,this.l2.y,this.l3.x,this.l3.y,this.l4.x,this.l4.y);
	}
	,__class__: starling_display_Line
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var starling_utils_VertexData = function(numVertices,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = false;
	var a = [];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	this.mRawData = vector;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mNumVertices = 0;
	this.set_numVertices(numVertices);
};
$hxClasses["starling.utils.VertexData"] = starling_utils_VertexData;
starling_utils_VertexData.__name__ = ["starling","utils","VertexData"];
starling_utils_VertexData.prototype = {
	mRawData: null
	,mPremultipliedAlpha: null
	,mNumVertices: null
	,clone: function(vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var clone = new starling_utils_VertexData(0,this.mPremultipliedAlpha);
		clone.mNumVertices = numVertices;
		clone.mRawData = new openfl__$Vector_AbstractVector(this.mRawData.data.slice(vertexID * 8,numVertices * 8));
		clone.mRawData.data.fixed = true;
		return clone;
	}
	,copyTo: function(targetData,targetVertexID,vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(targetVertexID == null) targetVertexID = 0;
		this.copyTransformedTo(targetData,targetVertexID,null,vertexID,numVertices);
	}
	,copyTransformedTo: function(targetData,targetVertexID,matrix,vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(targetVertexID == null) targetVertexID = 0;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var x;
		var y;
		var targetRawData = targetData.mRawData;
		var targetIndex = targetVertexID * 8;
		var sourceIndex = vertexID * 8;
		var sourceEnd = (vertexID + numVertices) * 8;
		if(matrix != null) while(sourceIndex < sourceEnd) {
			var index = sourceIndex++;
			x = this.mRawData.data.get(index);
			var index1 = sourceIndex++;
			y = this.mRawData.data.get(index1);
			var index2 = targetIndex++;
			targetRawData.data.set(index2,matrix.a * x + matrix.c * y + matrix.tx);
			var index3 = targetIndex++;
			targetRawData.data.set(index3,matrix.d * y + matrix.b * x + matrix.ty);
			var index4 = targetIndex++;
			var value;
			var index5 = sourceIndex++;
			value = this.mRawData.data.get(index5);
			targetRawData.data.set(index4,value);
			var index6 = targetIndex++;
			var value1;
			var index7 = sourceIndex++;
			value1 = this.mRawData.data.get(index7);
			targetRawData.data.set(index6,value1);
			var index8 = targetIndex++;
			var value2;
			var index9 = sourceIndex++;
			value2 = this.mRawData.data.get(index9);
			targetRawData.data.set(index8,value2);
			var index10 = targetIndex++;
			var value3;
			var index11 = sourceIndex++;
			value3 = this.mRawData.data.get(index11);
			targetRawData.data.set(index10,value3);
			var index12 = targetIndex++;
			var value4;
			var index13 = sourceIndex++;
			value4 = this.mRawData.data.get(index13);
			targetRawData.data.set(index12,value4);
			var index14 = targetIndex++;
			var value5;
			var index15 = sourceIndex++;
			value5 = this.mRawData.data.get(index15);
			targetRawData.data.set(index14,value5);
		} else while(sourceIndex < sourceEnd) {
			var index16 = targetIndex++;
			var value6;
			var index17 = sourceIndex++;
			value6 = this.mRawData.data.get(index17);
			targetRawData.data.set(index16,value6);
		}
	}
	,append: function(data) {
		var targetIndex = this.mRawData.data.get_length();
		var rawData = data.mRawData;
		var rawDataLength = rawData.data.get_length();
		var _g = 0;
		while(_g < rawDataLength) {
			var i = _g++;
			var index = targetIndex++;
			var value = rawData.data.get(i);
			this.mRawData.data.set(index,value);
		}
		this.mNumVertices += data.get_numVertices();
		this.mRawData.data.fixed = true;
	}
	,setPosition: function(vertexID,x,y) {
		var offset = vertexID * 8;
		this.mRawData.data.set(offset,x);
		this.mRawData.data.set(offset + 1,y);
	}
	,getPosition: function(vertexID,position) {
		var offset = vertexID * 8;
		position.x = this.mRawData.data.get(offset);
		position.y = this.mRawData.data.get(offset + 1);
	}
	,setColorAndAlpha: function(vertexID,color,alpha) {
		if(alpha < 0.001) alpha = 0.001; else if(alpha > 1.0) alpha = 1.0;
		var offset = vertexID * 8 + 2;
		var multiplier;
		if(this.mPremultipliedAlpha) multiplier = alpha; else multiplier = 1.0;
		var value = _$UInt_UInt_$Impl_$.toFloat(color >> 16 & 255) / 255.0 * multiplier;
		this.mRawData.data.set(offset,value);
		var value1 = _$UInt_UInt_$Impl_$.toFloat(color >> 8 & 255) / 255.0 * multiplier;
		this.mRawData.data.set(offset + 1,value1);
		var value2 = _$UInt_UInt_$Impl_$.toFloat(color & 255) / 255.0 * multiplier;
		this.mRawData.data.set(offset + 2,value2);
		this.mRawData.data.set(offset + 3,alpha);
	}
	,setColor: function(vertexID,color) {
		var offset = vertexID * 8 + 2;
		var multiplier;
		if(this.mPremultipliedAlpha) multiplier = this.mRawData.data.get(offset + 3); else multiplier = 1.0;
		var value = _$UInt_UInt_$Impl_$.toFloat(color >> 16 & 255) / 255.0 * multiplier;
		this.mRawData.data.set(offset,value);
		var value1 = _$UInt_UInt_$Impl_$.toFloat(color >> 8 & 255) / 255.0 * multiplier;
		this.mRawData.data.set(offset + 1,value1);
		var value2 = _$UInt_UInt_$Impl_$.toFloat(color & 255) / 255.0 * multiplier;
		this.mRawData.data.set(offset + 2,value2);
	}
	,getColor: function(vertexID) {
		var offset = vertexID * 8 + 2;
		var divisor;
		if(this.mPremultipliedAlpha) divisor = this.mRawData.data.get(offset + 3); else divisor = 1.0;
		if(divisor == 0) return 0; else {
			var red = this.mRawData.data.get(offset) / divisor;
			var green = this.mRawData.data.get(offset + 1) / divisor;
			var blue = this.mRawData.data.get(offset + 2) / divisor;
			return (red * 255 | 0) << 16 | (green * 255 | 0) << 8 | (blue * 255 | 0);
		}
	}
	,setAlpha: function(vertexID,alpha) {
		if(this.mPremultipliedAlpha) this.setColorAndAlpha(vertexID,this.getColor(vertexID),alpha); else this.mRawData.data.set(vertexID * 8 + 2 + 3,alpha);
	}
	,getAlpha: function(vertexID) {
		var offset = vertexID * 8 + 2 + 3;
		return this.mRawData.data.get(offset);
	}
	,setTexCoords: function(vertexID,u,v) {
		var offset = vertexID * 8 + 6;
		this.mRawData.data.set(offset,u);
		this.mRawData.data.set(offset + 1,v);
	}
	,getTexCoords: function(vertexID,texCoords) {
		var offset = vertexID * 8 + 6;
		texCoords.x = this.mRawData.data.get(offset);
		texCoords.y = this.mRawData.data.get(offset + 1);
	}
	,translateVertex: function(vertexID,deltaX,deltaY) {
		var offset = vertexID * 8;
		var value = this.mRawData.data.get(offset) + deltaX;
		this.mRawData.data.set(offset,value);
		var value1 = this.mRawData.data.get(offset + 1) + deltaY;
		this.mRawData.data.set(offset + 1,value1);
	}
	,transformVertex: function(vertexID,matrix,numVertices) {
		if(numVertices == null) numVertices = 1;
		var x;
		var y;
		var offset = vertexID * 8;
		var _g = 0;
		while(_g < numVertices) {
			var i = _g++;
			x = this.mRawData.data.get(offset);
			y = this.mRawData.data.get(offset + 1);
			this.mRawData.data.set(offset,matrix.a * x + matrix.c * y + matrix.tx);
			this.mRawData.data.set(offset + 1,matrix.d * y + matrix.b * x + matrix.ty);
			offset += 8;
		}
	}
	,setUniformColor: function(color) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			this.setColor(i,color);
		}
	}
	,setUniformAlpha: function(alpha) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			this.setAlpha(i,alpha);
		}
	}
	,scaleAlpha: function(vertexID,factor,numVertices) {
		if(numVertices == null) numVertices = 1;
		if(factor == 1.0) return;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var i;
		if(this.mPremultipliedAlpha) {
			var _g = 0;
			while(_g < numVertices) {
				var i1 = _g++;
				this.setAlpha(vertexID + i1,this.getAlpha(vertexID + i1) * factor);
			}
		} else {
			var offset = vertexID * 8 + 2 + 3;
			var _g1 = 0;
			while(_g1 < numVertices) {
				var i2 = _g1++;
				var idx = offset + i2 * 8 | 0;
				var value = this.mRawData.data.get(idx) * factor;
				this.mRawData.data.set(idx,value);
			}
		}
	}
	,getBounds: function(transformationMatrix,vertexID,numVertices,resultRect) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		if(numVertices == 0) {
			if(transformationMatrix == null) resultRect.setEmpty(); else {
				starling_utils_MatrixUtil.transformCoords(transformationMatrix,0,0,starling_utils_VertexData.sHelperPoint);
				resultRect.setTo(starling_utils_VertexData.sHelperPoint.x,starling_utils_VertexData.sHelperPoint.y,0,0);
			}
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var offset = vertexID * 8;
			var x;
			var y;
			var i;
			if(transformationMatrix == null) {
				var _g = 0;
				while(_g < numVertices) {
					var i1 = _g++;
					x = this.mRawData.data.get(offset);
					y = this.mRawData.data.get(offset + 1);
					offset += 8;
					if(minX > x) minX = x;
					if(maxX < x) maxX = x;
					if(minY > y) minY = y;
					if(maxY < y) maxY = y;
				}
			} else {
				var _g1 = 0;
				while(_g1 < numVertices) {
					var i2 = _g1++;
					x = this.mRawData.data.get(offset);
					y = this.mRawData.data.get(offset + 1);
					offset += 8;
					starling_utils_MatrixUtil.transformCoords(transformationMatrix,x,y,starling_utils_VertexData.sHelperPoint);
					if(minX > starling_utils_VertexData.sHelperPoint.x) minX = starling_utils_VertexData.sHelperPoint.x;
					if(maxX < starling_utils_VertexData.sHelperPoint.x) maxX = starling_utils_VertexData.sHelperPoint.x;
					if(minY > starling_utils_VertexData.sHelperPoint.y) minY = starling_utils_VertexData.sHelperPoint.y;
					if(maxY < starling_utils_VertexData.sHelperPoint.y) maxY = starling_utils_VertexData.sHelperPoint.y;
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,getBoundsProjected: function(transformationMatrix,camPos,vertexID,numVertices,resultRect) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(camPos == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("camPos must not be null"));
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		if(numVertices == 0) {
			if(transformationMatrix != null) starling_utils_MatrixUtil.transformCoords3D(transformationMatrix,0,0,0,starling_utils_VertexData.sHelperPoint3D); else starling_utils_VertexData.sHelperPoint3D.setTo(0,0,0);
			starling_utils_MathUtil.intersectLineWithXYPlane(camPos,starling_utils_VertexData.sHelperPoint3D,starling_utils_VertexData.sHelperPoint);
			resultRect.setTo(starling_utils_VertexData.sHelperPoint.x,starling_utils_VertexData.sHelperPoint.y,0,0);
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var offset = vertexID * 8;
			var x;
			var y;
			var i;
			var _g = 0;
			while(_g < numVertices) {
				var i1 = _g++;
				x = this.mRawData.data.get(offset);
				y = this.mRawData.data.get(offset + 1);
				offset += 8;
				if(transformationMatrix != null) starling_utils_MatrixUtil.transformCoords3D(transformationMatrix,x,y,0,starling_utils_VertexData.sHelperPoint3D); else starling_utils_VertexData.sHelperPoint3D.setTo(x,y,0);
				starling_utils_MathUtil.intersectLineWithXYPlane(camPos,starling_utils_VertexData.sHelperPoint3D,starling_utils_VertexData.sHelperPoint);
				if(minX > starling_utils_VertexData.sHelperPoint.x) minX = starling_utils_VertexData.sHelperPoint.x;
				if(maxX < starling_utils_VertexData.sHelperPoint.x) maxX = starling_utils_VertexData.sHelperPoint.x;
				if(minY > starling_utils_VertexData.sHelperPoint.y) minY = starling_utils_VertexData.sHelperPoint.y;
				if(maxY < starling_utils_VertexData.sHelperPoint.y) maxY = starling_utils_VertexData.sHelperPoint.y;
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,toString: function() {
		var result = "[VertexData \n";
		var position = new openfl_geom_Point();
		var texCoords = new openfl_geom_Point();
		var _g1 = 0;
		var _g = this.get_numVertices();
		while(_g1 < _g) {
			var i = _g1++;
			this.getPosition(i,position);
			this.getTexCoords(i,texCoords);
			result += "  [Vertex " + i + ": " + "x=" + (position.x == null?"null":"" + position.x) + ", " + "y=" + (position.y == null?"null":"" + position.y) + ", " + "rgb=" + StringTools.hex(this.getColor(i)) + ", " + "a=" + Std.string(this.getAlpha(i)) + ", " + "u=" + (texCoords.x == null?"null":"" + texCoords.x) + ", " + "v=" + (texCoords.y == null?"null":"" + texCoords.y) + "]" + (i == this.get_numVertices() - 1?"\n":",\n");
		}
		return result + "]";
	}
	,get_tinted: function() {
		var offset = 2;
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = 0;
			while(_g2 < 4) {
				var j = _g2++;
				if(this.mRawData.data.get(offset + j) != 1.0) return true;
			}
			offset += 8;
		}
		return false;
	}
	,setPremultipliedAlpha: function(value,updateData) {
		if(updateData == null) updateData = true;
		if(value == this.mPremultipliedAlpha) return;
		if(updateData) {
			var dataLength = this.mNumVertices * 8;
			var i = 2;
			while(i < dataLength) {
				var alpha = this.mRawData.data.get(i + 3);
				var divisor;
				if(this.mPremultipliedAlpha) divisor = alpha; else divisor = 1.0;
				var multiplier;
				if(value) multiplier = alpha; else multiplier = 1.0;
				if(divisor != 0) {
					var value1 = this.mRawData.data.get(i) / divisor * multiplier;
					this.mRawData.data.set(i,value1);
					var value2 = this.mRawData.data.get(i + 1) / divisor * multiplier;
					this.mRawData.data.set(i + 1,value2);
					var value3 = this.mRawData.data.get(i + 2) / divisor * multiplier;
					this.mRawData.data.set(i + 2,value3);
				}
				i += 8;
			}
		}
		this.mPremultipliedAlpha = value;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,set_premultipliedAlpha: function(value) {
		this.setPremultipliedAlpha(value);
		return this.mPremultipliedAlpha;
	}
	,get_numVertices: function() {
		return this.mNumVertices;
	}
	,set_numVertices: function(value) {
		this.mRawData.data.fixed = false;
		this.mRawData.data.set_length(value * 8);
		var startIndex = this.mNumVertices * 8 + 2 + 3;
		var endIndex = value * 8;
		var i = startIndex;
		while(i < endIndex) {
			this.mRawData.data.set(i,1.0);
			i += 8;
		}
		this.mNumVertices = value;
		this.mRawData.data.fixed = true;
		return this.mNumVertices;
	}
	,get_rawData: function() {
		return this.mRawData;
	}
	,__class__: starling_utils_VertexData
	,__properties__: {get_rawData:"get_rawData",set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",set_premultipliedAlpha:"set_premultipliedAlpha",get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted"}
};
var haxegon_Gfx = function() { };
$hxClasses["haxegon.Gfx"] = haxegon_Gfx;
haxegon_Gfx.__name__ = ["haxegon","Gfx"];
haxegon_Gfx.__properties__ = {set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_linethickness:"set_linethickness",get_linethickness:"get_linethickness",set_imagecolor:"set_imagecolor",get_imagecolor:"get_imagecolor",set_imagealpha:"set_imagealpha",get_imagealpha:"get_imagealpha"}
haxegon_Gfx.reset = function() {
	haxegon_Gfx.transform = false;
	haxegon_Gfx.imagerotate = 0;
	haxegon_Gfx.imagerotatexpivot = 0;
	haxegon_Gfx.imagerotateypivot = 0;
	haxegon_Gfx.imagexscale = 1.0;
	haxegon_Gfx.imageyscale = 1.0;
	haxegon_Gfx.imagescalexpivot = 0;
	haxegon_Gfx.imagescaleypivot = 0;
	haxegon_Gfx.coltransform = false;
	haxegon_Gfx.imagealphamult = 1.0;
	haxegon_Gfx.imagecolormult = 16777215;
};
haxegon_Gfx.reset_ifclear = function() {
	if(haxegon_Gfx.imagerotate == 0) {
		if(haxegon_Gfx.imagexscale == 1.0) {
			if(haxegon_Gfx.imageyscale == 1.0) haxegon_Gfx.transform = false;
		}
	}
	if(haxegon_Gfx.imagealphamult == 1.0) {
		if(haxegon_Gfx.imagecolormult == 16777215) haxegon_Gfx.coltransform = false;
	}
};
haxegon_Gfx.rotation = function(angle,xpivot,ypivot) {
	if(ypivot == null) ypivot = -15000;
	if(xpivot == null) xpivot = -15000;
	haxegon_Gfx.imagerotate = angle;
	haxegon_Gfx.imagerotatexpivot = xpivot;
	haxegon_Gfx.imagerotateypivot = ypivot;
	haxegon_Gfx.transform = true;
	haxegon_Gfx.reset_ifclear();
};
haxegon_Gfx.scale = function(xscale,yscale,xpivot,ypivot) {
	if(ypivot == null) ypivot = -10000;
	if(xpivot == null) xpivot = -10000;
	if(xscale == null && yscale == null) {
		xscale = 1.0;
		yscale = 1.0;
	}
	if(yscale == null && xscale != null) yscale = xscale;
	haxegon_Gfx.imagexscale = xscale;
	haxegon_Gfx.imageyscale = yscale;
	haxegon_Gfx.imagescalexpivot = xpivot;
	haxegon_Gfx.imagescaleypivot = ypivot;
	haxegon_Gfx.transform = true;
	haxegon_Gfx.reset_ifclear();
};
haxegon_Gfx.resetalpha = function() {
	haxegon_Gfx.set_imagealpha(1.0);
};
haxegon_Gfx.set_imagealpha = function(_alpha) {
	haxegon_Gfx.imagealphamult = _alpha;
	haxegon_Gfx.coltransform = true;
	haxegon_Gfx.reset_ifclear();
	return haxegon_Gfx.imagealphamult;
};
haxegon_Gfx.get_imagealpha = function() {
	return haxegon_Gfx.imagealphamult;
};
haxegon_Gfx.resetcolor = function() {
	haxegon_Gfx.set_imagecolor(16777215);
};
haxegon_Gfx.set_imagecolor = function(_color) {
	haxegon_Gfx.imagecolormult = _color;
	haxegon_Gfx.coltransform = true;
	haxegon_Gfx.reset_ifclear();
	return haxegon_Gfx.imagecolormult;
};
haxegon_Gfx.get_imagecolor = function() {
	return haxegon_Gfx.imagecolormult;
};
haxegon_Gfx.numberoftiles = function(tileset) {
	haxegon_Gfx.changetileset(tileset);
	return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length;
};
haxegon_Gfx.changetileset = function(tilesetname) {
	if(haxegon_Gfx.currenttilesetname != tilesetname) {
		haxegon_Gfx.drawstate = 0;
		if(haxegon_Gfx.tilesetindex.exists(tilesetname)) {
			haxegon_Gfx.currenttileset = haxegon_Gfx.tilesetindex.get(tilesetname);
			haxegon_Gfx.currenttilesetname = tilesetname;
		} else haxegon_Debug.log("ERROR: Cannot change to tileset \"" + tilesetname + "\", no tileset with that name found.",{ fileName : "Gfx.hx", lineNumber : 177, className : "haxegon.Gfx", methodName : "changetileset"});
	}
};
haxegon_Gfx.loadtiles = function(imagename,width,height) {
	var tex;
	if(haxegon_Gfx.imageindex.exists(imagename)) tex = haxegon_Gfx.getassetpackedtexture(imagename); else {
		if(haxegon_Data.assetexists("data/graphics/" + imagename + ".png")) tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".png"),false); else if(haxegon_Data.assetexists("data/graphics/" + imagename + ".jpg")) tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".jpg"),false); else {
			haxegon_Debug.log("ERROR: In loadtiles, cannot find \"data/graphics/" + imagename + ".png\" or \"data/graphics/" + imagename + ".jpg\"",{ fileName : "Gfx.hx", lineNumber : 195, className : "haxegon.Gfx", methodName : "loadtiles"});
			return;
		}
		haxegon_Gfx.starlingassets.addTexture(imagename,tex);
	}
	var spritesheet = haxegon_Gfx.starlingassets.getTexture(imagename);
	var tiles_rect = new openfl_geom_Rectangle(0,0,width,height);
	haxegon_Gfx.tiles.push(new haxegon_HaxegonTileset(imagename,width,height));
	haxegon_Gfx.tilesetindex.set(imagename,haxegon_Gfx.tiles.length - 1);
	haxegon_Gfx.currenttileset = haxegon_Gfx.tiles.length - 1;
	var tilerows;
	var tilecolumns;
	tilecolumns = Std["int"]((spritesheet.get_width() - spritesheet.get_width() % width) / width);
	tilerows = Std["int"]((spritesheet.get_height() - spritesheet.get_height() % height) / height);
	var framex = 0;
	var framey = 0;
	if(spritesheet.get_frame() != null) {
		framex = Std["int"](spritesheet.get_frame().get_left());
		framey = Std["int"](spritesheet.get_frame().get_top());
	}
	var _g = 0;
	while(_g < tilerows) {
		var j = _g++;
		var _g1 = 0;
		while(_g1 < tilecolumns) {
			var i = _g1++;
			var rect = new openfl_geom_Rectangle(framex + i * width,framey + j * height,width,height);
			var newtex = starling_textures_Texture.fromTexture(spritesheet,rect);
			haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.push(new starling_display_Image(newtex));
			haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length - 1].set_smoothing("none");
		}
	}
};
haxegon_Gfx.addblanktiles = function(tilesetname,num) {
	var tileset = 0;
	if(haxegon_Gfx.tilesetindex.exists(tilesetname)) tileset = haxegon_Gfx.tilesetindex.get(tilesetname); else haxegon_Debug.log("ERROR: Cannot add blank tiles to tileset \"" + tilesetname + "\", no tileset with that name found.",{ fileName : "Gfx.hx", lineNumber : 238, className : "haxegon.Gfx", methodName : "addblanktiles"});
	var w = Std["int"](haxegon_Gfx.tiles[tileset].tiles[0].get_width());
	var h = Std["int"](haxegon_Gfx.tiles[tileset].tiles[0].get_height());
	var _g = 0;
	while(_g < num) {
		var i = _g++;
		var tex = starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(w,h,true,0),false);
		var img = new starling_display_Image(tex);
		img.set_touchable(false);
		haxegon_Gfx.tiles[tileset].tiles.push(img);
	}
	haxegon_Gfx.tiles[tileset].sharedatlas = false;
};
haxegon_Gfx.createtiles = function(tilesetname,width,height,amount) {
	var exindex = haxegon_Gfx.tilesetindex.get(tilesetname);
	if(exindex == null) {
		haxegon_Gfx.tiles.push(new haxegon_HaxegonTileset(tilesetname,width | 0,height | 0));
		haxegon_Gfx.tilesetindex.set(tilesetname,haxegon_Gfx.tiles.length - 1);
		haxegon_Gfx.currenttileset = haxegon_Gfx.tiles.length - 1;
		var _g = 0;
		while(_g < amount) {
			var i = _g++;
			var tex = starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(Math.floor(width),Math.floor(height),true,0),false);
			var img = new starling_display_Image(tex);
			img.set_touchable(false);
			haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.push(img);
		}
		haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].sharedatlas = false;
		haxegon_Gfx.changetileset(tilesetname);
	} else {
		haxegon_Gfx.changetileset(tilesetname);
		haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].sharedatlas = false;
		var purge = haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width != Math.floor(width) || haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height != Math.floor(height);
		haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width = Math.floor(width);
		haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height = Math.floor(height);
		while(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length > (purge?0:amount)) {
			var extile = haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.pop();
			extile.set_touchable(false);
			extile.get_texture().dispose();
			extile.dispose();
		}
		var _g1 = 0;
		while(_g1 < amount) {
			var i1 = _g1++;
			if(i1 < haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length && !purge && Std["is"](haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i1].get_texture(),starling_textures_RenderTexture)) (js_Boot.__cast(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i1].get_texture() , starling_textures_RenderTexture)).clear(); else {
				var tex1 = starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(Math.floor(width),Math.floor(height),true,0),false);
				var img1 = new starling_display_Image(tex1);
				img1.set_touchable(false);
				if(i1 < haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.length) {
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i1].get_texture().dispose();
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i1].dispose();
					haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[i1] = img1;
				} else haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles.push(img1);
			}
		}
	}
};
haxegon_Gfx.tilewidth = function(tilesetname) {
	haxegon_Gfx.changetileset(tilesetname);
	return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width;
};
haxegon_Gfx.tileheight = function(tilesetname) {
	haxegon_Gfx.changetileset(tilesetname);
	return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height;
};
haxegon_Gfx.getassetpackedtexture = function(imagename) {
	var bd = null;
	try {
		bd = haxegon_Gfx.starlingassets.getTexture(imagename);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		haxegon_Debug.log("ERROR: Cannot find " + imagename + ".png in packed textures.",{ fileName : "Gfx.hx", lineNumber : 325, className : "haxegon.Gfx", methodName : "getassetpackedtexture"});
	}
	return bd;
};
haxegon_Gfx.loadimagefrompackedtexture = function(imagename,tex) {
	haxegon_Gfx.imageindex.set(imagename,haxegon_Gfx.images.length);
	haxegon_Gfx.haxegonimage = new haxegon_HaxegonImage(imagename);
	haxegon_Gfx.haxegonimage.contents = new starling_display_Image(tex);
	haxegon_Gfx.haxegonimage.fetchsize();
	haxegon_Gfx.images.push(haxegon_Gfx.haxegonimage);
	haxegon_Gfx.images[haxegon_Gfx.images.length - 1].contents.set_smoothing("none");
};
haxegon_Gfx.loadimage = function(imagename) {
	if(haxegon_Gfx.imageindex.exists(imagename)) return;
	var tex;
	if(haxegon_Data.assetexists("data/graphics/" + imagename + ".png")) tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".png"),false); else if(haxegon_Data.assetexists("data/graphics/" + imagename + ".jpg")) tex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/" + imagename + ".jpg"),false); else {
		haxegon_Debug.log("ERROR: In loadimage, cannot find \"data/graphics/" + imagename + ".png\" or \"data/graphics/" + imagename + ".jpg\"",{ fileName : "Gfx.hx", lineNumber : 351, className : "haxegon.Gfx", methodName : "loadimage"});
		return;
	}
	haxegon_Gfx.starlingassets.addTexture(imagename,tex);
	haxegon_Gfx.imageindex.set(imagename,haxegon_Gfx.images.length);
	haxegon_Gfx.haxegonimage = new haxegon_HaxegonImage(imagename);
	haxegon_Gfx.haxegonimage.contents = new starling_display_Image(haxegon_Gfx.starlingassets.getTexture(imagename));
	haxegon_Gfx.haxegonimage.contents.set_smoothing("none");
	haxegon_Gfx.haxegonimage.fetchsize();
	haxegon_Gfx.images.push(haxegon_Gfx.haxegonimage);
};
haxegon_Gfx.createimage = function(imagename,width,height) {
	var tex = starling_textures_Texture.fromBitmapData(new openfl_display_BitmapData(Math.floor(width),Math.floor(height),true,0),false);
	var img = new starling_display_Image(tex);
	img.set_touchable(false);
	img.set_smoothing("none");
	var exindex = haxegon_Gfx.imageindex.get(imagename);
	if(exindex == null) {
		haxegon_Gfx.imageindex.set(imagename,haxegon_Gfx.images.length);
		haxegon_Gfx.haxegonimage = new haxegon_HaxegonImage(imagename);
		haxegon_Gfx.haxegonimage.contents = img;
		haxegon_Gfx.haxegonimage.fetchsize();
		haxegon_Gfx.images.push(haxegon_Gfx.haxegonimage);
	} else {
		haxegon_Gfx.images[exindex].contents.get_texture().dispose();
		haxegon_Gfx.images[exindex].contents.dispose();
		haxegon_Gfx.images[exindex].contents = img;
		haxegon_Gfx.images[exindex].fetchsize();
	}
};
haxegon_Gfx.imagewidth = function(imagename) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) haxegon_Gfx.loadimage(imagename);
	var imagenum = haxegon_Gfx.imageindex.get(imagename);
	return haxegon_Gfx.images[imagenum].width;
};
haxegon_Gfx.imageheight = function(imagename) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) haxegon_Gfx.loadimage(imagename);
	var imagenum = haxegon_Gfx.imageindex.get(imagename);
	return haxegon_Gfx.images[imagenum].height;
};
haxegon_Gfx.promotetorendertarget = function(image) {
	if(!Std["is"](image.get_texture(),starling_textures_RenderTexture)) {
		var newtexture = new starling_textures_RenderTexture(Std["int"](image.get_texture().get_width()),Std["int"](image.get_texture().get_height()));
		haxegon_Gfx.shapematrix.identity();
		newtexture.draw(image,haxegon_Gfx.shapematrix);
		image.get_texture().dispose();
		image.set_texture(newtexture);
	}
};
haxegon_Gfx.drawtoscreen = function() {
	haxegon_Gfx.endquadbatch();
	if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundleunlock();
	haxegon_Gfx.drawto = haxegon_Gfx.backbuffer;
	if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundlelock();
};
haxegon_Gfx.drawtoimage = function(imagename) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) {
		haxegon_Debug.log("ERROR: In drawtoimage, cannot find image \"" + imagename + "\".",{ fileName : "Gfx.hx", lineNumber : 437, className : "haxegon.Gfx", methodName : "drawtoimage"});
		return;
	}
	haxegon_Gfx.endquadbatch();
	if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundleunlock();
	var imagenum = haxegon_Gfx.imageindex.get(imagename);
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.images[imagenum].contents);
	haxegon_Gfx.drawto = js_Boot.__cast(haxegon_Gfx.images[imagenum].contents.get_texture() , starling_textures_RenderTexture);
	if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundlelock();
};
haxegon_Gfx.drawtotile = function(tilesetname,tilenum) {
	var tileset = 0;
	if(haxegon_Gfx.tilesetindex.exists(tilesetname)) tileset = haxegon_Gfx.tilesetindex.get(tilesetname); else haxegon_Debug.log("ERROR: Cannot change to tileset \"" + tilesetname + "\", no tileset with that name found.",{ fileName : "Gfx.hx", lineNumber : 457, className : "haxegon.Gfx", methodName : "drawtotile"});
	if(tilenum >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenum == haxegon_Gfx.numberoftiles(tilesetname)) haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenum == null?"null":"" + tilenum) + " is not a valid tile.)",{ fileName : "Gfx.hx", lineNumber : 462, className : "haxegon.Gfx", methodName : "drawtotile"}); else haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".",{ fileName : "Gfx.hx", lineNumber : 464, className : "haxegon.Gfx", methodName : "drawtotile"});
	}
	haxegon_Gfx.endquadbatch();
	if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundleunlock();
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.tiles[tileset].tiles[tilenum]);
	haxegon_Gfx.drawto = js_Boot.__cast(haxegon_Gfx.tiles[tileset].tiles[tilenum].get_texture() , starling_textures_RenderTexture);
	if(haxegon_Gfx.drawto != null) haxegon_Gfx.drawto.bundlelock();
};
haxegon_Gfx.imagealignx = function(imagewidth,x) {
	if(x <= -5000) {
		haxegon_Gfx.t1 = x - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = x - haxegon_Gfx.LEFT;
		haxegon_Gfx.t3 = x - haxegon_Gfx.RIGHT;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t1 + haxegon_Gfx.screenwidthmid - (imagewidth / 2 | 0); else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t2; else return haxegon_Gfx.t3 + imagewidth;
	}
	return x;
};
haxegon_Gfx.imagealigny = function(imageheight,y) {
	if(y <= -5000) {
		haxegon_Gfx.t1 = y - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = y - haxegon_Gfx.TOP;
		haxegon_Gfx.t3 = y - haxegon_Gfx.BOTTOM;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t1 + haxegon_Gfx.screenheightmid - (imageheight / 2 | 0); else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t2; else return haxegon_Gfx.t3 + imageheight;
	}
	return y;
};
haxegon_Gfx.imagealignonimagex = function(imagewidth,x) {
	if(x <= -5000) {
		haxegon_Gfx.t1 = x - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = x - haxegon_Gfx.LEFT;
		haxegon_Gfx.t3 = x - haxegon_Gfx.RIGHT;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t1 + (imagewidth / 2 | 0); else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t2; else return haxegon_Gfx.t3 + imagewidth;
	}
	return x;
};
haxegon_Gfx.imagealignonimagey = function(imageheight,y) {
	if(y <= -5000) {
		haxegon_Gfx.t1 = y - haxegon_Gfx.CENTER;
		haxegon_Gfx.t2 = y - haxegon_Gfx.TOP;
		haxegon_Gfx.t3 = y - haxegon_Gfx.BOTTOM;
		if(haxegon_Gfx.t1 == 0 || Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t2) && Math.abs(haxegon_Gfx.t1) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t1 + (imageheight / 2 | 0); else if(haxegon_Gfx.t2 == 0 || Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t1) && Math.abs(haxegon_Gfx.t2) < Math.abs(haxegon_Gfx.t3)) return haxegon_Gfx.t2; else return haxegon_Gfx.t3 + imageheight;
	}
	return y;
};
haxegon_Gfx.internaldrawimage = function(x,y,image,imagewidth,imageheight) {
	if(!haxegon_Gfx.transform && !haxegon_Gfx.coltransform) {
		haxegon_Gfx.shapematrix.identity();
		haxegon_Gfx.shapematrix.translate(x | 0,y | 0);
		haxegon_Gfx.quadbatch.addImage(image,1.0,haxegon_Gfx.shapematrix);
	} else {
		haxegon_Gfx.tempxalign = 0;
		haxegon_Gfx.tempyalign = 0;
		haxegon_Gfx.shapematrix.identity();
		if(haxegon_Gfx.imagexscale != 1.0 || haxegon_Gfx.imageyscale != 1.0) {
			if(haxegon_Gfx.imagescalexpivot != 0.0) haxegon_Gfx.tempxalign = haxegon_Gfx.imagealignonimagex(imagewidth,haxegon_Gfx.imagescalexpivot);
			if(haxegon_Gfx.imagescaleypivot != 0.0) haxegon_Gfx.tempyalign = haxegon_Gfx.imagealignonimagey(imageheight,haxegon_Gfx.imagescaleypivot);
			haxegon_Gfx.shapematrix.translate(-haxegon_Gfx.tempxalign,-haxegon_Gfx.tempyalign);
			haxegon_Gfx.shapematrix.scale(haxegon_Gfx.imagexscale,haxegon_Gfx.imageyscale);
			haxegon_Gfx.shapematrix.translate(haxegon_Gfx.tempxalign,haxegon_Gfx.tempyalign);
		}
		if(haxegon_Gfx.imagerotate != 0) {
			if(haxegon_Gfx.imagerotatexpivot != 0.0) haxegon_Gfx.tempxalign = haxegon_Gfx.imagealignonimagex(imagewidth,haxegon_Gfx.imagerotatexpivot);
			if(haxegon_Gfx.imagerotateypivot != 0.0) haxegon_Gfx.tempyalign = haxegon_Gfx.imagealignonimagey(imageheight,haxegon_Gfx.imagerotateypivot);
			haxegon_Gfx.shapematrix.translate(-haxegon_Gfx.tempxalign,-haxegon_Gfx.tempyalign);
			haxegon_Gfx.shapematrix.rotate(haxegon_Gfx.imagerotate * 3.1415 / 180);
			haxegon_Gfx.shapematrix.translate(haxegon_Gfx.tempxalign,haxegon_Gfx.tempyalign);
		}
		haxegon_Gfx.shapematrix.translate(x,y);
		if(haxegon_Gfx.coltransform) {
			image.set_color(haxegon_Gfx.imagecolormult);
			haxegon_Gfx.quadbatch.addImage(image,haxegon_Gfx.imagealphamult,haxegon_Gfx.shapematrix);
			image.set_color(haxegon_Col.WHITE);
		} else haxegon_Gfx.quadbatch.addImage(image,1.0,haxegon_Gfx.shapematrix);
	}
};
haxegon_Gfx.drawimage = function(x,y,imagename) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) haxegon_Gfx.loadimage(imagename);
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 3;
	haxegon_Gfx.haxegonimage = haxegon_Gfx.images[haxegon_Gfx.imageindex.get(imagename)];
	x = haxegon_Gfx.imagealignx(haxegon_Gfx.haxegonimage.width,x);
	y = haxegon_Gfx.imagealigny(haxegon_Gfx.haxegonimage.height,y);
	haxegon_Gfx.internaldrawimage(x,y,haxegon_Gfx.haxegonimage.contents,haxegon_Gfx.haxegonimage.width,haxegon_Gfx.haxegonimage.height);
	haxegon_Gfx.endquadbatch();
};
haxegon_Gfx.drawsubimage = function(x,y,x1,y1,w1,h1,imagename) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) {
		haxegon_Debug.log("ERROR: In drawsubimage, cannot find image \"" + imagename + "\".",{ fileName : "Gfx.hx", lineNumber : 617, className : "haxegon.Gfx", methodName : "drawsubimage"});
		return;
	}
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.haxegonimage = haxegon_Gfx.images[haxegon_Gfx.imageindex.get(imagename)];
	x = haxegon_Gfx.imagealignx(haxegon_Gfx.haxegonimage.width,x);
	y = haxegon_Gfx.imagealigny(haxegon_Gfx.haxegonimage.height,y);
	haxegon_Gfx.trect.x = x1;
	haxegon_Gfx.trect.y = y1;
	haxegon_Gfx.trect.width = w1;
	haxegon_Gfx.trect.height = h1;
	var subtex = starling_textures_Texture.fromTexture(haxegon_Gfx.haxegonimage.contents.get_texture(),haxegon_Gfx.trect);
	var subimage = new starling_display_Image(subtex);
	subimage.set_touchable(false);
	subimage.set_smoothing("none");
	haxegon_Gfx.internaldrawimage(x,y,subimage,Std["int"](subimage.get_width()),Std["int"](subimage.get_height()));
	haxegon_Gfx.endquadbatch();
	subtex.dispose();
	subimage.dispose();
};
haxegon_Gfx.grabtilefromscreen = function(tilesetname,tilenumber,screenx,screeny) {
	haxegon_Gfx.changetileset(tilesetname);
	if(tilenumber >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenumber == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenumber == null?"null":"" + tilenumber) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenumber == null?"null":"" + tilenumber) + " is not a valid tile.)",{ fileName : "Gfx.hx", lineNumber : 655, className : "haxegon.Gfx", methodName : "grabtilefromscreen"});
			return;
		} else {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenumber == null?"null":"" + tilenumber) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".",{ fileName : "Gfx.hx", lineNumber : 658, className : "haxegon.Gfx", methodName : "grabtilefromscreen"});
			return;
		}
	}
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenumber]);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(-screenx,-screeny);
	(js_Boot.__cast(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenumber].get_texture() , starling_textures_RenderTexture)).draw(haxegon_Gfx.screen,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.grabtilefromimage = function(tilesetname,tilenumber,imagename,imagex,imagey) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) {
		throw new js__$Boot_HaxeError("ERROR: In grabtilefromimage, \"" + imagename + "\" does not exist.");
		return;
	}
	haxegon_Gfx.changetileset(tilesetname);
	if(tilenumber >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenumber == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to grab tile from image to tile number " + (tilenumber == null?"null":"" + tilenumber) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenumber == null?"null":"" + tilenumber) + " is not a valid tile.)",{ fileName : "Gfx.hx", lineNumber : 686, className : "haxegon.Gfx", methodName : "grabtilefromimage"});
			return;
		} else {
			haxegon_Debug.log("ERROR: Tried to grab tile from image to tile number " + (tilenumber == null?"null":"" + tilenumber) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".",{ fileName : "Gfx.hx", lineNumber : 689, className : "haxegon.Gfx", methodName : "grabtilefromimage"});
			return;
		}
	}
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenumber]);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(-imagex,-imagey);
	(js_Boot.__cast(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenumber].get_texture() , starling_textures_RenderTexture)).draw(haxegon_Gfx.images[haxegon_Gfx.imageindex.get(imagename)].contents,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.grabimagefromscreen = function(imagename,screenx,screeny) {
	if(!haxegon_Gfx.imageindex.exists(imagename)) {
		haxegon_Debug.log("ERROR: In Gfx.grabimagefromscreen, \"" + imagename + "\" does not exist. You need to create an image label first before using this function.",{ fileName : "Gfx.hx", lineNumber : 709, className : "haxegon.Gfx", methodName : "grabimagefromscreen"});
		return;
	}
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.haxegonimage = haxegon_Gfx.images[haxegon_Gfx.imageindex.get(imagename)];
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.haxegonimage.contents);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(-screenx,-screeny);
	(js_Boot.__cast(haxegon_Gfx.haxegonimage.contents.get_texture() , starling_textures_RenderTexture)).draw(haxegon_Gfx.screen,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.grabimagefromimage = function(destinationimage,sourceimage,sourceimagex,sourceimagey) {
	if(!haxegon_Gfx.imageindex.exists(destinationimage)) {
		haxegon_Debug.log("ERROR: In grabimagefromimage, \"" + destinationimage + "\" does not exist. You need to create an image label first before using this function.",{ fileName : "Gfx.hx", lineNumber : 729, className : "haxegon.Gfx", methodName : "grabimagefromimage"});
		return;
	}
	if(!haxegon_Gfx.imageindex.exists(sourceimage)) {
		haxegon_Debug.log("ERROR: No image called \"" + sourceimage + "\" found.",{ fileName : "Gfx.hx", lineNumber : 734, className : "haxegon.Gfx", methodName : "grabimagefromimage"});
		return;
	}
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.haxegonimage = haxegon_Gfx.images[haxegon_Gfx.imageindex.get(destinationimage)];
	var sourceimage1 = haxegon_Gfx.images[haxegon_Gfx.imageindex.get(sourceimage)];
	haxegon_Gfx.promotetorendertarget(haxegon_Gfx.haxegonimage.contents);
	haxegon_Gfx.shapematrix.identity();
	haxegon_Gfx.shapematrix.translate(-sourceimagex,-sourceimagey);
	(js_Boot.__cast(haxegon_Gfx.haxegonimage.contents.get_texture() , starling_textures_RenderTexture)).draw(sourceimage1.contents,haxegon_Gfx.shapematrix);
};
haxegon_Gfx.copytile = function(totileset,totilenumber,fromtileset,fromtilenumber) {
	if(haxegon_Gfx.tilesetindex.exists(fromtileset)) {
		if(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width == haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(fromtileset)].width && haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height == haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(fromtileset)].height) {
			haxegon_Gfx.promotetorendertarget(haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(totileset)].tiles[totilenumber]);
			haxegon_Gfx.shapematrix.identity();
			(js_Boot.__cast(haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(totileset)].tiles[totilenumber].get_texture() , starling_textures_RenderTexture)).draw(haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(fromtileset)].tiles[fromtilenumber],haxegon_Gfx.shapematrix);
		} else {
			haxegon_Debug.log("ERROR: Tilesets " + totileset + " (" + Std.string(haxegon_Gfx.tilewidth(totileset)) + "x" + Std.string(haxegon_Gfx.tileheight(totileset)) + ") and " + fromtileset + " (" + Std.string(haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(fromtileset)].width) + "x" + Std.string(haxegon_Gfx.tiles[haxegon_Gfx.tilesetindex.get(fromtileset)].height) + ") are different sizes. Maybe try just drawing to the tile you want instead with Gfx.drawtotile()?",{ fileName : "Gfx.hx", lineNumber : 762, className : "haxegon.Gfx", methodName : "copytile"});
			return;
		}
	} else {
		haxegon_Debug.log("ERROR: Tileset " + fromtileset + " hasn't been loaded or created.",{ fileName : "Gfx.hx", lineNumber : 766, className : "haxegon.Gfx", methodName : "copytile"});
		return;
	}
};
haxegon_Gfx.drawsubtile = function(x,y,tilesetname,tilenum,x1,y1,w,h) {
	haxegon_Gfx.changetileset(tilesetname);
	if(tilenum >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenum == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenum == null?"null":"" + tilenum) + " is not a valid tile.)",{ fileName : "Gfx.hx", lineNumber : 780, className : "haxegon.Gfx", methodName : "drawsubtile"});
			return;
		} else {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".",{ fileName : "Gfx.hx", lineNumber : 783, className : "haxegon.Gfx", methodName : "drawsubtile"});
			return;
		}
	}
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	x = haxegon_Gfx.tilealignx(x);
	y = haxegon_Gfx.tilealigny(y);
	haxegon_Gfx.trect.x = x1;
	haxegon_Gfx.trect.y = y1;
	haxegon_Gfx.trect.width = w;
	haxegon_Gfx.trect.height = h;
	var subtex = starling_textures_Texture.fromTexture(haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenum].get_texture(),haxegon_Gfx.trect);
	var subimage = new starling_display_Image(subtex);
	subimage.set_touchable(false);
	haxegon_Gfx.internaldrawimage(x,y,subimage,Std["int"](subimage.get_width()),Std["int"](subimage.get_height()));
	haxegon_Gfx.endquadbatch();
	subtex.dispose();
	subimage.dispose();
};
haxegon_Gfx.drawtile = function(x,y,tilesetname,tilenum) {
	haxegon_Gfx.changetileset(tilesetname);
	if(tilenum >= haxegon_Gfx.numberoftiles(tilesetname)) {
		if(tilenum == haxegon_Gfx.numberoftiles(tilesetname)) {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\". (Because this includes tile number 0, " + (tilenum == null?"null":"" + tilenum) + " is not a valid tile.)",{ fileName : "Gfx.hx", lineNumber : 820, className : "haxegon.Gfx", methodName : "drawtile"});
			return;
		} else {
			haxegon_Debug.log("ERROR: Tried to draw tile number " + (tilenum == null?"null":"" + tilenum) + ", but there are only " + Std.string(haxegon_Gfx.numberoftiles(tilesetname)) + " tiles in tileset \"" + haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].name + "\".",{ fileName : "Gfx.hx", lineNumber : 823, className : "haxegon.Gfx", methodName : "drawtile"});
			return;
		}
	}
	if(haxegon_Gfx.drawstate != 4) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 4;
	x = haxegon_Gfx.tilealignx(x);
	y = haxegon_Gfx.tilealigny(y);
	haxegon_Gfx.internaldrawimage(x,y,haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].tiles[tilenum],haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width,haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height);
};
haxegon_Gfx.tilealignx = function(x) {
	if(x == haxegon_Gfx.CENTER) return haxegon_Gfx.screenwidthmid - (haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width / 2 | 0);
	if(x == haxegon_Gfx.LEFT || x == haxegon_Gfx.TOP) return 0;
	if(x == haxegon_Gfx.RIGHT || x == haxegon_Gfx.BOTTOM) return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width;
	return x;
};
haxegon_Gfx.tilealigny = function(y) {
	if(y == haxegon_Gfx.CENTER) return haxegon_Gfx.screenheightmid - (haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height / 2 | 0);
	if(y == haxegon_Gfx.LEFT || y == haxegon_Gfx.TOP) return 0;
	if(y == haxegon_Gfx.RIGHT || y == haxegon_Gfx.BOTTOM) return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height;
	return y;
};
haxegon_Gfx.tilealignontilex = function(x) {
	if(x == haxegon_Gfx.CENTER) return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width / 2 | 0;
	if(x == haxegon_Gfx.LEFT || x == haxegon_Gfx.TOP) return 0;
	if(x == haxegon_Gfx.RIGHT || x == haxegon_Gfx.BOTTOM) return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].width;
	return x;
};
haxegon_Gfx.tilealignontiley = function(y) {
	if(y == haxegon_Gfx.CENTER) return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height / 2 | 0;
	if(y == haxegon_Gfx.LEFT || y == haxegon_Gfx.TOP) return 0;
	if(y == haxegon_Gfx.RIGHT || y == haxegon_Gfx.BOTTOM) return haxegon_Gfx.tiles[haxegon_Gfx.currenttileset].height;
	return y;
};
haxegon_Gfx.drawline = function(x1,y1,x2,y2,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(haxegon_Gfx.drawstate != 1) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 1;
	haxegon_Gfx.templine.setPosition(x1,y1,x2,y2);
	haxegon_Gfx.templine.thickness = haxegon_Gfx.get_linethickness();
	haxegon_Gfx.templine.set_color(color);
	haxegon_Gfx.templine.set_alpha(alpha);
	haxegon_Gfx.quadbatch.addQuad(haxegon_Gfx.templine);
};
haxegon_Gfx.drawhexagon = function(x,y,radius,angle,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(radius <= 0) return;
	if(!haxegon_Geom.inbox(x,y,-radius,-radius,haxegon_Gfx.screenwidth + radius * 2,haxegon_Gfx.screenheight + radius * 2)) return;
	if(haxegon_Gfx.drawstate != 1) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 1;
	var tempring = new starling_display_Ring(x - radius,y - radius,radius - haxegon_Gfx.get_linethickness(),radius,color,alpha,true,6,angle);
	var _g1 = 0;
	var _g = tempring._polygons.length;
	while(_g1 < _g) {
		var i = _g1++;
		haxegon_Gfx.quadbatchcount++;
		if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
		haxegon_Gfx.quadbatch.addQuad(tempring._polygons[i]);
	}
};
haxegon_Gfx.fillhexagon = function(x,y,radius,angle,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(radius <= 0) return;
	if(!haxegon_Geom.inbox(x,y,-radius,-radius,haxegon_Gfx.screenwidth + radius * 2,haxegon_Gfx.screenheight + radius * 2)) return;
	if(haxegon_Gfx.drawstate != 1) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 1;
	var tempring = new starling_display_Disk(x - radius,y - radius,radius,color,alpha,true,6,angle);
	var _g1 = 0;
	var _g = tempring._polygons.length;
	while(_g1 < _g) {
		var i = _g1++;
		haxegon_Gfx.quadbatchcount++;
		if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
		haxegon_Gfx.quadbatch.addQuad(tempring._polygons[i]);
	}
};
haxegon_Gfx.drawcircle = function(x,y,radius,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(radius <= 0) return;
	if(!haxegon_Geom.inbox(x,y,-radius,-radius,haxegon_Gfx.screenwidth + radius * 2,haxegon_Gfx.screenheight + radius * 2)) return;
	if(haxegon_Gfx.drawstate != 1) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 1;
	var tempring = new starling_display_Ring(x - radius,y - radius,radius - haxegon_Gfx.get_linethickness(),radius,color,alpha);
	var _g1 = 0;
	var _g = tempring._polygons.length;
	while(_g1 < _g) {
		var i = _g1++;
		haxegon_Gfx.quadbatchcount++;
		if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
		haxegon_Gfx.quadbatch.addQuad(tempring._polygons[i]);
	}
};
haxegon_Gfx.fillcircle = function(x,y,radius,col,alpha) {
	if(alpha == null) alpha = 1.0;
	if(col == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(radius <= 0) return;
	if(!haxegon_Geom.inbox(x,y,-radius,-radius,haxegon_Gfx.screenwidth + radius * 2,haxegon_Gfx.screenheight + radius * 2)) return;
	if(haxegon_Gfx.drawstate != 1) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 1;
	var tempring = new starling_display_Disk(x - radius,y - radius,radius,col,alpha);
	var _g1 = 0;
	var _g = tempring._polygons.length;
	while(_g1 < _g) {
		var i = _g1++;
		haxegon_Gfx.quadbatchcount++;
		if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
		haxegon_Gfx.quadbatch.addQuad(tempring._polygons[i]);
	}
};
haxegon_Gfx.drawtri = function(x1,y1,x2,y2,x3,y3,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	haxegon_Gfx.drawline(x1,y1,x2,y2,color,alpha);
	haxegon_Gfx.drawline(x1,y1,x3,y3,color,alpha);
	haxegon_Gfx.drawline(x2,y2,x3,y3,color,alpha);
};
haxegon_Gfx.filltri = function(x1,y1,x2,y2,x3,y3,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(haxegon_Gfx.drawstate != 2) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 2;
	haxegon_Gfx.temppoly4.setVertexPositions(x1,y1,x2,y2,x3,y3,x3,y3);
	haxegon_Gfx.temppoly4.set_color(color);
	haxegon_Gfx.temppoly4.set_alpha(alpha);
	haxegon_Gfx.quadbatch.addQuad(haxegon_Gfx.temppoly4);
};
haxegon_Gfx.drawbox = function(x,y,width,height,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT || haxegon_Gfx.drawto == null) return;
	if(width < 0) {
		width = -width;
		x = x - width;
	}
	if(height < 0) {
		height = -height;
		y = y - height;
	}
	haxegon_Gfx.fillbox(x,y,width,haxegon_Gfx.get_linethickness(),color,alpha);
	haxegon_Gfx.fillbox(x + haxegon_Gfx.get_linethickness(),y + height - haxegon_Gfx.get_linethickness(),width - haxegon_Gfx.get_linethickness() * 2,haxegon_Gfx.get_linethickness(),color,alpha);
	haxegon_Gfx.fillbox(x,y + haxegon_Gfx.get_linethickness(),haxegon_Gfx.get_linethickness(),height - haxegon_Gfx.get_linethickness(),color,alpha);
	haxegon_Gfx.fillbox(x + width - haxegon_Gfx.get_linethickness(),y + haxegon_Gfx.get_linethickness(),haxegon_Gfx.get_linethickness(),height - haxegon_Gfx.get_linethickness(),color,alpha);
};
haxegon_Gfx.fillbox = function(x,y,width,height,col,alpha) {
	if(alpha == null) alpha = 1.0;
	if(col == haxegon_Col.TRANSPARENT) return;
	if(haxegon_Gfx.drawstate != 1) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 1;
	haxegon_Gfx.tempquad.set_x(x);
	haxegon_Gfx.tempquad.set_y(y);
	haxegon_Gfx.tempquad.set_width(width);
	haxegon_Gfx.tempquad.set_height(height);
	haxegon_Gfx.tempquad.set_color(col);
	haxegon_Gfx.tempquad.set_alpha(alpha);
	haxegon_Gfx.quadbatch.addQuad(haxegon_Gfx.tempquad);
};
haxegon_Gfx.updatequadbatch = function() {
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
};
haxegon_Gfx.endquadbatch = function() {
	if(haxegon_Gfx.quadbatchcount > 0) {
		haxegon_Gfx.drawto.draw(haxegon_Gfx.quadbatch);
		haxegon_Gfx.quadbatch.reset();
		haxegon_Gfx.quadbatchcount = 0;
		haxegon_Gfx.drawstate = 0;
	}
};
haxegon_Gfx.endquadbatchonsurface = function(d) {
	if(haxegon_Gfx.quadbatchcount > 0) {
		d.draw(haxegon_Gfx.quadbatch);
		haxegon_Gfx.quadbatch.reset();
		haxegon_Gfx.quadbatchcount = 0;
	}
};
haxegon_Gfx.get_linethickness = function() {
	return haxegon_Gfx._linethickness;
};
haxegon_Gfx.set_linethickness = function(size) {
	haxegon_Gfx._linethickness = size;
	if(haxegon_Gfx._linethickness < 1) haxegon_Gfx._linethickness = 1;
	if(haxegon_Gfx._linethickness > 255) haxegon_Gfx._linethickness = 255;
	return haxegon_Gfx._linethickness;
};
haxegon_Gfx.clearscreen = function(color) {
	if(color == null) color = 0;
	if(haxegon_Gfx.drawto == null) return;
	haxegon_Gfx.endquadbatch();
	if(color == haxegon_Col.TRANSPARENT) haxegon_Gfx.drawto.clear(); else haxegon_Gfx.drawto.clear(color,1.0);
};
haxegon_Gfx.setpixel = function(x,y,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == haxegon_Col.TRANSPARENT && haxegon_Gfx.drawto != null) return;
	haxegon_Gfx.fillbox(x,y,1,1,color,alpha);
};
haxegon_Gfx.getpixel = function(x,y) {
	var w;
	var h;
	var xs;
	var ys;
	var resultpixel = haxegon_Col.TRANSPARENT;
	if(haxegon_Gfx.drawto == haxegon_Gfx.backbuffer) {
		w = haxegon_Gfx.screenwidth;
		h = haxegon_Gfx.screenheight;
		xs = starling_core_Starling.get_current().get_viewPort().width / w;
		ys = starling_core_Starling.get_current().get_viewPort().height / h;
		var screenshot = new openfl_display_BitmapData(w,h);
		screenshot = starling_core_Starling.get_current().get_stage().drawToBitmapData(screenshot,false);
		var pixelalpha = screenshot.getPixel32(x * xs | 0,y * ys | 0) >> 24 & 255;
		var pixel = screenshot.getPixel(x * xs | 0,y * ys | 0);
		if(pixelalpha == 0) resultpixel = haxegon_Col.TRANSPARENT; else resultpixel = pixel;
		screenshot.dispose();
	} else {
		w = haxegon_Gfx.screenwidth;
		h = haxegon_Gfx.screenheight;
		xs = starling_core_Starling.get_current().get_viewPort().width / w;
		ys = starling_core_Starling.get_current().get_viewPort().height / h;
		haxegon_Gfx.endquadbatch();
		haxegon_Gfx.drawto.bundleunlock();
		var screenshot1 = new openfl_display_BitmapData(w,h);
		screenshot1 = starling_core_Starling.get_current().get_stage().drawToBitmapData(screenshot1,false);
		haxegon_Gfx.backbuffer.bundlelock();
		haxegon_Gfx.backbuffer.clear();
		haxegon_Gfx.backbuffer.draw(new starling_display_Image(haxegon_Gfx.drawto));
		haxegon_Gfx.backbuffer.bundleunlock();
		var screenshot2 = new openfl_display_BitmapData(w,h);
		screenshot2 = starling_core_Starling.get_current().get_stage().drawToBitmapData(screenshot2,true);
		var pixelalpha1 = screenshot2.getPixel32(x * xs | 0,y * ys | 0) >> 24 & 255;
		var pixel1 = screenshot2.getPixel(x * xs | 0,y * ys | 0);
		if(pixelalpha1 == 0) resultpixel = haxegon_Col.TRANSPARENT; else resultpixel = pixel1;
		screenshot2.dispose();
		haxegon_Gfx.backbuffer.draw(new starling_display_Image(starling_textures_Texture.fromBitmapData(screenshot1)));
		screenshot1.dispose();
	}
	return resultpixel;
};
haxegon_Gfx.updategraphicsmode = function(windowwidth,windowheight) {
	if(!haxegon_Gfx._fullscreen) {
		if(haxegon_Gfx.flashstage.get_displayState() == 1 || haxegon_Gfx.flashstage.get_displayState() == 0) haxegon_Gfx.flashstage.set_displayState(2);
	} else if(haxegon_Gfx.flashstage.get_displayState() == 2) try {
		haxegon_Gfx.flashstage.set_displayState(1);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
	}
	if(windowwidth == 0 && windowheight == 0) return;
	haxegon_Gfx.starstage.set_stageWidth(haxegon_Gfx.screenwidth);
	haxegon_Gfx.starstage.set_stageHeight(haxegon_Gfx.screenheight);
	var stretchscalex;
	var stretchscaley;
	var stretchscalex1 = (windowwidth | 0) / haxegon_Gfx.screenwidth;
	var stretchscaley1 = (windowheight | 0) / haxegon_Gfx.screenheight;
	var stretchscale = Math.min(stretchscalex1,stretchscaley1);
	var viewPortRectangle = new openfl_geom_Rectangle();
	viewPortRectangle.width = haxegon_Gfx.screenwidth * stretchscale;
	viewPortRectangle.height = haxegon_Gfx.screenheight * stretchscale;
	viewPortRectangle.x = (windowwidth - (haxegon_Gfx.screenwidth * stretchscale | 0)) / 2 | 0;
	viewPortRectangle.y = (windowheight - (haxegon_Gfx.screenheight * stretchscale | 0)) / 2 | 0;
	starling_core_Starling.get_current().set_viewPort(viewPortRectangle);
};
haxegon_Gfx.getscreenx = function(_x) {
	return Math.floor((_x - starling_core_Starling.get_current().get_viewPort().x) * haxegon_Gfx.screenwidth / starling_core_Starling.get_current().get_viewPort().width);
};
haxegon_Gfx.getscreeny = function(_y) {
	return Math.floor((_y - starling_core_Starling.get_current().get_viewPort().y) * haxegon_Gfx.screenheight / starling_core_Starling.get_current().get_viewPort().height);
};
haxegon_Gfx.resizescreen = function(width,height) {
	haxegon_Gfx.initgfx(width | 0,height | 0);
	haxegon_Text.init(haxegon_Gfx.starstage);
	haxegon_Gfx.updategraphicsmode(haxegon_Gfx.starstage.get_stageWidth(),haxegon_Gfx.starstage.get_stageHeight());
};
haxegon_Gfx.get_fullscreen = function() {
	return haxegon_Gfx._fullscreen;
};
haxegon_Gfx.set_fullscreen = function(fs) {
	haxegon_Gfx._fullscreen = fs;
	if(fs) haxegon_Debug.log("Warning: HTML5 target does not currently support fullscreen. Check again in a later version!",{ fileName : "Gfx.hx", lineNumber : 1214, className : "haxegon.Gfx", methodName : "set_fullscreen"});
	return fs;
};
haxegon_Gfx.init = function(_starlingstage,_flashstage) {
	haxegon_Gfx.starstage = _starlingstage;
	haxegon_Gfx.flashstage = _flashstage;
	haxegon_Gfx.starstage.addEventListener("resize",haxegon_Gfx.onresize);
	haxegon_Gfx.quadbatch = new starling_display_QuadBatch();
	haxegon_Gfx.set_linethickness(1);
	haxegon_Gfx.loadpackedtextures();
	haxegon_Gfx.reset();
};
haxegon_Gfx.onresize = function(e) {
	haxegon_Gfx.updategraphicsmode(e.get_width(),e.get_height());
};
haxegon_Gfx.loadpackedtextures = function() {
	if(!haxegon_Gfx.gfxinit) {
		haxegon_Gfx.starlingassets = new starling_utils_AssetManager();
		haxegon_Gfx.starlingassets.set_verbose(false);
		var atlasnum = 0;
		var _g = 0;
		var _g1 = openfl_utils_Assets.list("TEXT");
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var extension = haxegon_S.getlastbranch(t,".");
			if(extension == "xml") {
				var xml = Xml.parse(openfl_utils_Assets.getText(t)).firstElement();
				if((function($this) {
					var $r;
					if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
					$r = xml.nodeName;
					return $r;
				}(this)) == "TextureAtlas") {
					var texturepackedimage = starling_textures_Texture.fromBitmapData(openfl_utils_Assets.getBitmapData("data/graphics/" + xml.get("imagePath")),false);
					haxegon_Gfx.starlingassets.addTexture("atlas" + atlasnum,texturepackedimage);
					haxegon_Gfx.starlingassets.addTextureAtlas("atlas" + atlasnum,new starling_textures_TextureAtlas(texturepackedimage,xml));
					atlasnum++;
					var $it0 = xml.elementsNamed("SubTexture");
					while( $it0.hasNext() ) {
						var i = $it0.next();
						haxegon_Gfx.loadimagefrompackedtexture(i.get("name"),haxegon_Gfx.getassetpackedtexture(i.get("name")));
					}
				}
			}
		}
	}
};
haxegon_Gfx.initgfx = function(width,height) {
	haxegon_Gfx.screenwidth = width;
	haxegon_Gfx.screenheight = height;
	haxegon_Gfx.screenwidthmid = haxegon_Gfx.screenwidth / 2 | 0;
	haxegon_Gfx.screenheightmid = haxegon_Gfx.screenheight / 2 | 0;
	haxegon_Gfx.devicexres = Std["int"](openfl_system_Capabilities.get_screenResolutionX());
	haxegon_Gfx.deviceyres = Std["int"](openfl_system_Capabilities.get_screenResolutionY());
	if(!haxegon_Gfx.gfxinit) {
		haxegon_Gfx.backbuffer = new starling_textures_RenderTexture(width,height,true);
		haxegon_Gfx.drawto = haxegon_Gfx.backbuffer;
		haxegon_Gfx.screen = new starling_display_Image(haxegon_Gfx.backbuffer);
		haxegon_Gfx.screen.set_touchable(false);
		haxegon_Gfx.screen.set_scale(1);
		haxegon_Gfx.screen.set_smoothing("none");
		haxegon_Gfx.starstage.addChildAt(haxegon_Gfx.screen,0);
		haxegon_Filter.init();
	}
	haxegon_Gfx.gfxinit = true;
};
haxegon_Gfx.settrect = function(x,y,w,h) {
	haxegon_Gfx.trect.x = x;
	haxegon_Gfx.trect.y = y;
	haxegon_Gfx.trect.width = w;
	haxegon_Gfx.trect.height = h;
};
haxegon_Gfx.startframe = function() {
	haxegon_Gfx.drawstate = 0;
	haxegon_Gfx.drawto.bundlelock();
	if(haxegon_Gfx.clearcolor != haxegon_Col.TRANSPARENT) haxegon_Gfx.clearscreen(haxegon_Gfx.clearcolor);
	haxegon_Gfx.quadbatch.reset();
	haxegon_Gfx.quadbatchcount = 0;
	haxegon_Text.resettextfields();
};
haxegon_Gfx.endframe = function() {
	haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawto.bundleunlock();
};
var haxegon_Keystate = $hxClasses["haxegon.Keystate"] = { __ename__ : ["haxegon","Keystate"], __constructs__ : ["justreleased","notpressed","pressed","justpressed","forcerelease"] };
haxegon_Keystate.justreleased = ["justreleased",0];
haxegon_Keystate.justreleased.toString = $estr;
haxegon_Keystate.justreleased.__enum__ = haxegon_Keystate;
haxegon_Keystate.notpressed = ["notpressed",1];
haxegon_Keystate.notpressed.toString = $estr;
haxegon_Keystate.notpressed.__enum__ = haxegon_Keystate;
haxegon_Keystate.pressed = ["pressed",2];
haxegon_Keystate.pressed.toString = $estr;
haxegon_Keystate.pressed.__enum__ = haxegon_Keystate;
haxegon_Keystate.justpressed = ["justpressed",3];
haxegon_Keystate.justpressed.toString = $estr;
haxegon_Keystate.justpressed.__enum__ = haxegon_Keystate;
haxegon_Keystate.forcerelease = ["forcerelease",4];
haxegon_Keystate.forcerelease.toString = $estr;
haxegon_Keystate.forcerelease.__enum__ = haxegon_Keystate;
var haxegon_Input = function() { };
$hxClasses["haxegon.Input"] = haxegon_Input;
haxegon_Input.__name__ = ["haxegon","Input"];
haxegon_Input.pressed = function(k) {
	if(k == haxegon_Key.ANY) {
		var $it0 = haxegon_Input.keymap.keys();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			if(haxegon_Input.keyheld[haxegon_Input.keymap.get(a)] >= 0) return true;
		}
		return false;
	}
	return haxegon_Input.keyheld[haxegon_Input.keymap.get(k)] >= 0;
};
haxegon_Input.justpressed = function(k) {
	if(k == haxegon_Key.ANY) {
		var $it0 = haxegon_Input.keymap.keys();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			if(haxegon_Input.current[haxegon_Input.keymap.get(a)] == haxegon_Keystate.justpressed) return true;
		}
		return false;
	}
	if(haxegon_Input.current[haxegon_Input.keymap.get(k)] == haxegon_Keystate.justpressed) return true; else return false;
};
haxegon_Input.justreleased = function(k) {
	if(k == haxegon_Key.ANY) {
		var $it0 = haxegon_Input.keymap.keys();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			if(haxegon_Input.current[haxegon_Input.keymap.get(a)] == haxegon_Keystate.justreleased) {
				haxegon_Input.current[haxegon_Input.keymap.get(a)] = haxegon_Keystate.notpressed;
				return true;
			}
		}
		return false;
	}
	if(haxegon_Input.current[haxegon_Input.keymap.get(k)] == haxegon_Keystate.justreleased) {
		haxegon_Input.current[haxegon_Input.keymap.get(k)] = haxegon_Keystate.notpressed;
		return true;
	} else return false;
};
haxegon_Input.forcerelease = function(k) {
	if(k != null || k == haxegon_Key.ANY) {
		haxegon_Input.keycode = haxegon_Input.keymap.get(k);
		if(haxegon_Input.keyheld[haxegon_Input.keycode] >= 0) {
			haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.forcerelease;
			haxegon_Input.last[haxegon_Input.keycode] = haxegon_Keystate.forcerelease;
			haxegon_Input.keyheld[haxegon_Input.keycode] = -1;
		}
	} else {
		var _g1 = 0;
		var _g = haxegon_Input.keyheld.length;
		while(_g1 < _g) {
			var k2 = _g1++;
			if(haxegon_Input.keyheld[k2] >= 0) {
				haxegon_Input.current[k2] = haxegon_Keystate.forcerelease;
				haxegon_Input.last[k2] = haxegon_Keystate.forcerelease;
				haxegon_Input.keyheld[k2] = -1;
			}
		}
	}
};
haxegon_Input.pressheldtime = function(k) {
	if(k == haxegon_Key.ANY) {
		var longestkeypress = 0;
		var longestkey = null;
		var $it0 = haxegon_Input.keymap.keys();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			if(a != haxegon_Key.ANY) {
				if(haxegon_Input.keyheld[haxegon_Input.keymap.get(a)] > longestkeypress) {
					longestkeypress = haxegon_Input.keyheld[haxegon_Input.keymap.get(a)];
					longestkey = a;
				}
			}
		}
		return longestkeypress;
	}
	haxegon_Input.keycode = haxegon_Input.keymap.get(k);
	return haxegon_Input.keyheld[haxegon_Input.keycode];
};
haxegon_Input.delaypressed = function(k,delay) {
	if(k == haxegon_Key.ANY) {
		var $it0 = haxegon_Input.keymap.keys();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			if(a != haxegon_Key.ANY) {
				if(haxegon_Input.pressed(a)) return haxegon_Input.delaypressed(a,delay);
			}
		}
		return false;
	}
	haxegon_Input.keycode = haxegon_Input.keymap.get(k);
	if(haxegon_Input.keyheld[haxegon_Input.keycode] >= 1) {
		if(haxegon_Input.keyheld[haxegon_Input.keycode] <= 1) return true; else if(haxegon_Input.keyheld[haxegon_Input.keycode] % delay == 0) return true;
	}
	return false;
};
haxegon_Input.init = function(_starlingstage,_flashstage) {
	haxegon_Input.starstage = _starlingstage;
	haxegon_Input.flashstage = _flashstage;
	haxegon_Input.starstage.addEventListener("keyDown",haxegon_Input.handlekeydown);
	haxegon_Input.starstage.addEventListener("keyUp",haxegon_Input.handlekeyup);
	haxegon_Input.flashstage.addEventListener("deactivate",haxegon_Input.handledeactivate);
	haxegon_Input.clipboardbuffer = [""];
	haxegon_Input.cut = false;
	haxegon_Input.paste = false;
	haxegon_Input.selectall = false;
	haxegon_Input.undo = false;
	haxegon_Input.redo = false;
	haxegon_Input.resetKeys();
};
haxegon_Input.unload = function() {
	haxegon_Input.starstage.removeEventListener("keyDown",haxegon_Input.handlekeydown);
	haxegon_Input.starstage.removeEventListener("keyUp",haxegon_Input.handlekeyup);
	haxegon_Input.flashstage.removeEventListener("deactivate",haxegon_Input.handledeactivate);
};
haxegon_Input.update = function() {
	if(haxegon_Input.lastcharcode == -1) haxegon_Input.lastcharcode = haxegon_Input.charcode; else if(haxegon_Input.charcode == haxegon_Input.lastcharcode) {
		haxegon_Input.lastcharcode = -1;
		haxegon_Input.charcode = -1;
	} else haxegon_Input.lastcharcode = haxegon_Input.charcode;
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_Input.lookup.h.hasOwnProperty(i)) {
			if(haxegon_Input.last[i] == haxegon_Keystate.justreleased && haxegon_Input.current[i] == haxegon_Keystate.justreleased) haxegon_Input.current[i] = haxegon_Keystate.notpressed; else if(haxegon_Input.last[i] == haxegon_Keystate.justpressed && haxegon_Input.current[i] == haxegon_Keystate.justpressed) haxegon_Input.current[i] = haxegon_Keystate.pressed;
			haxegon_Input.last[i] = haxegon_Input.current[i];
			if(haxegon_Input.current[i] == haxegon_Keystate.justpressed || haxegon_Input.current[i] == haxegon_Keystate.pressed) ++haxegon_Input.keyheld[i];
		}
	}
};
haxegon_Input.reset = function() {
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var i = _g1++;
		if(haxegon_Input.lookup.h.hasOwnProperty(i)) {
			haxegon_Input.current[i] = haxegon_Keystate.notpressed;
			haxegon_Input.last[i] = haxegon_Keystate.notpressed;
			haxegon_Input.keyheld[i] = -1;
		}
	}
};
haxegon_Input.iskeycodeheld = function(k) {
	if(k == haxegon_Keystate.justpressed || k == haxegon_Keystate.pressed) return true;
	return false;
};
haxegon_Input.handlecut = function(event) {
	haxegon_Input.handlecopy(event);
	haxegon_Input.cut = true;
};
haxegon_Input.handlecopy = function(event) {
	haxegon_Input.current[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = haxegon_Keystate.notpressed;
	haxegon_Input.keyheld[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = -1;
};
haxegon_Input.handlepaste = function(event) {
	haxegon_Input.current[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = haxegon_Keystate.notpressed;
	haxegon_Input.keyheld[haxegon_Input.keymap.get(haxegon_Key.CONTROL)] = -1;
};
haxegon_Input.handleselectall = function(event) {
	haxegon_Input.selectall = true;
};
haxegon_Input.handlekeydown = function(event) {
	if(document.activeElement.nodeName!="BODY") return;
	haxegon_Input.charcode = event.get_charCode();
	if(haxegon_Input.charcode == 91 || haxegon_Input.charcode == 93 || haxegon_Input.charcode == 224 || haxegon_Input.charcode == 17) {
		var _g1 = 0;
		var _g = haxegon_Input.numletters;
		while(_g1 < _g) {
			var keycode = _g1++;
			if(haxegon_Input.iskeycodeheld(haxegon_Input.current[keycode])) haxegon_Input.current[keycode] = haxegon_Keystate.justreleased; else haxegon_Input.current[keycode] = haxegon_Keystate.notpressed;
			haxegon_Input.keyheld[keycode] = -1;
		}
	} else {
	}
	haxegon_Input.charcode = event.get_charCode();
	haxegon_Input.keycode = event.get_keyCode();
	if(haxegon_Input.iskeycodeheld(haxegon_Input.current[haxegon_Input.keymap.get(haxegon_Key.CONTROL)])) {
		if(haxegon_Input.keycode == 90) {
			haxegon_Input.undo = true;
			return;
		} else if(haxegon_Input.keycode == 89) {
			haxegon_Input.redo = true;
			return;
		}
	}
	if(haxegon_Input.lookup.h.hasOwnProperty(haxegon_Input.keycode) && haxegon_Input.current[haxegon_Input.keycode] != haxegon_Keystate.forcerelease) {
		if(haxegon_Input.iskeycodeheld(haxegon_Input.current[haxegon_Input.keycode])) haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.pressed; else {
			haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.justpressed;
			haxegon_Input.keyheld[haxegon_Input.keycode] = 0;
		}
	}
	if(haxegon_Input.keycode == 8) {
		if(haxegon_Input.keybuffer.length > 0) haxegon_Input.keybuffer = HxOverrides.substr(haxegon_Input.keybuffer,0,haxegon_Input.keybuffer.length - 1);
	} else if(haxegon_Input.charcode >= 32 && haxegon_Input.charcode <= 126) {
		if(haxegon_Input.keybuffer.length < haxegon_Text.inputmaxlength) haxegon_Input.keybuffer += String.fromCharCode(haxegon_Input.charcode);
	}
};
haxegon_Input.handledeactivate = function(e) {
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var keycode = _g1++;
		haxegon_Input.current[keycode] = haxegon_Keystate.notpressed;
		haxegon_Input.keyheld[keycode] = -1;
	}
};
haxegon_Input.getchar = function() {
	if(haxegon_Input.lastcharcode == -1) return "";
	return String.fromCharCode(haxegon_Input.lastcharcode);
};
haxegon_Input.handlekeyup = function(event) {
	haxegon_Input.keycode = event.get_keyCode();
	if(haxegon_Input.lookup.h.hasOwnProperty(haxegon_Input.keycode)) {
		if(haxegon_Input.iskeycodeheld(haxegon_Input.current[haxegon_Input.keycode])) haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.justreleased; else haxegon_Input.current[haxegon_Input.keycode] = haxegon_Keystate.notpressed;
		haxegon_Input.keyheld[haxegon_Input.keycode] = -1;
	}
};
haxegon_Input.addkey = function(KeyName,KeyCode) {
	haxegon_Input.keymap.set(KeyName,KeyCode);
	haxegon_Input.lookup.h[KeyCode] = KeyName;
	haxegon_Input.current[KeyCode] = haxegon_Keystate.notpressed;
	haxegon_Input.last[KeyCode] = haxegon_Keystate.notpressed;
	haxegon_Input.keyheld[KeyCode] = -1;
};
haxegon_Input.resetKeys = function() {
	haxegon_Input.keymap = new haxe_ds_EnumValueMap();
	haxegon_Input.lookup = new haxe_ds_IntMap();
	haxegon_Input.current = [];
	haxegon_Input.last = [];
	haxegon_Input.keyheld = [];
	haxegon_Input.lastcharcode = -1;
	var i = 0;
	var _g1 = 0;
	var _g = haxegon_Input.numletters;
	while(_g1 < _g) {
		var i1 = _g1++;
		haxegon_Input.current.push(haxegon_Keystate.notpressed);
		haxegon_Input.last.push(haxegon_Keystate.notpressed);
		haxegon_Input.keyheld.push(-1);
	}
	haxegon_Input.addkey(haxegon_Key.A,65);
	haxegon_Input.addkey(haxegon_Key.B,66);
	haxegon_Input.addkey(haxegon_Key.C,67);
	haxegon_Input.addkey(haxegon_Key.D,68);
	haxegon_Input.addkey(haxegon_Key.E,69);
	haxegon_Input.addkey(haxegon_Key.F,70);
	haxegon_Input.addkey(haxegon_Key.G,71);
	haxegon_Input.addkey(haxegon_Key.H,72);
	haxegon_Input.addkey(haxegon_Key.I,73);
	haxegon_Input.addkey(haxegon_Key.J,74);
	haxegon_Input.addkey(haxegon_Key.K,75);
	haxegon_Input.addkey(haxegon_Key.L,76);
	haxegon_Input.addkey(haxegon_Key.M,77);
	haxegon_Input.addkey(haxegon_Key.N,78);
	haxegon_Input.addkey(haxegon_Key.O,79);
	haxegon_Input.addkey(haxegon_Key.P,80);
	haxegon_Input.addkey(haxegon_Key.Q,81);
	haxegon_Input.addkey(haxegon_Key.R,82);
	haxegon_Input.addkey(haxegon_Key.S,83);
	haxegon_Input.addkey(haxegon_Key.T,84);
	haxegon_Input.addkey(haxegon_Key.U,85);
	haxegon_Input.addkey(haxegon_Key.V,86);
	haxegon_Input.addkey(haxegon_Key.W,87);
	haxegon_Input.addkey(haxegon_Key.X,88);
	haxegon_Input.addkey(haxegon_Key.Y,89);
	haxegon_Input.addkey(haxegon_Key.Z,90);
	haxegon_Input.addkey(haxegon_Key.ZERO,48);
	haxegon_Input.addkey(haxegon_Key.ONE,49);
	haxegon_Input.addkey(haxegon_Key.TWO,50);
	haxegon_Input.addkey(haxegon_Key.THREE,51);
	haxegon_Input.addkey(haxegon_Key.FOUR,52);
	haxegon_Input.addkey(haxegon_Key.FIVE,53);
	haxegon_Input.addkey(haxegon_Key.SIX,54);
	haxegon_Input.addkey(haxegon_Key.SEVEN,55);
	haxegon_Input.addkey(haxegon_Key.EIGHT,56);
	haxegon_Input.addkey(haxegon_Key.NINE,57);
	haxegon_Input.addkey(haxegon_Key.F1,112);
	haxegon_Input.addkey(haxegon_Key.F2,113);
	haxegon_Input.addkey(haxegon_Key.F3,114);
	haxegon_Input.addkey(haxegon_Key.F4,115);
	haxegon_Input.addkey(haxegon_Key.F5,116);
	haxegon_Input.addkey(haxegon_Key.F6,117);
	haxegon_Input.addkey(haxegon_Key.F7,118);
	haxegon_Input.addkey(haxegon_Key.F8,119);
	haxegon_Input.addkey(haxegon_Key.F9,120);
	haxegon_Input.addkey(haxegon_Key.F10,121);
	haxegon_Input.addkey(haxegon_Key.F11,122);
	haxegon_Input.addkey(haxegon_Key.F12,123);
	haxegon_Input.addkey(haxegon_Key.ESCAPE,27);
	haxegon_Input.addkey(haxegon_Key.MINUS,189);
	haxegon_Input.addkey(haxegon_Key.PLUS,187);
	haxegon_Input.addkey(haxegon_Key.DELETE,46);
	haxegon_Input.addkey(haxegon_Key.BACKSPACE,8);
	haxegon_Input.addkey(haxegon_Key.LBRACKET,219);
	haxegon_Input.addkey(haxegon_Key.RBRACKET,221);
	haxegon_Input.addkey(haxegon_Key.BACKSLASH,220);
	haxegon_Input.addkey(haxegon_Key.CAPSLOCK,20);
	haxegon_Input.addkey(haxegon_Key.SEMICOLON,186);
	haxegon_Input.addkey(haxegon_Key.QUOTE,222);
	haxegon_Input.addkey(haxegon_Key.ENTER,13);
	haxegon_Input.addkey(haxegon_Key.SHIFT,16);
	haxegon_Input.addkey(haxegon_Key.COMMA,188);
	haxegon_Input.addkey(haxegon_Key.PERIOD,190);
	haxegon_Input.addkey(haxegon_Key.SLASH,191);
	haxegon_Input.addkey(haxegon_Key.CONTROL,17);
	haxegon_Input.addkey(haxegon_Key.ALT,18);
	haxegon_Input.addkey(haxegon_Key.SPACE,32);
	haxegon_Input.addkey(haxegon_Key.UP,38);
	haxegon_Input.addkey(haxegon_Key.DOWN,40);
	haxegon_Input.addkey(haxegon_Key.LEFT,37);
	haxegon_Input.addkey(haxegon_Key.RIGHT,39);
	haxegon_Input.addkey(haxegon_Key.TAB,9);
	haxegon_Input.addkey(haxegon_Key.HOME,36);
	haxegon_Input.addkey(haxegon_Key.END,35);
	haxegon_Input.addkey(haxegon_Key.PAGEUP,33);
	haxegon_Input.addkey(haxegon_Key.PAGEDOWN,34);
};
haxegon_Input.keyname = function(k) {
	switch(k[1]) {
	case 1:
		return "A";
	case 2:
		return "B";
	case 3:
		return "C";
	case 4:
		return "D";
	case 5:
		return "E";
	case 6:
		return "F";
	case 7:
		return "G";
	case 8:
		return "H";
	case 9:
		return "I";
	case 10:
		return "J";
	case 11:
		return "K";
	case 12:
		return "L";
	case 13:
		return "M";
	case 14:
		return "N";
	case 15:
		return "O";
	case 16:
		return "P";
	case 17:
		return "Q";
	case 18:
		return "R";
	case 19:
		return "S";
	case 20:
		return "T";
	case 21:
		return "U";
	case 22:
		return "V";
	case 23:
		return "W";
	case 24:
		return "X";
	case 25:
		return "Y";
	case 26:
		return "Z";
	case 27:
		return "0";
	case 28:
		return "1";
	case 29:
		return "2";
	case 30:
		return "3";
	case 31:
		return "4";
	case 32:
		return "5";
	case 33:
		return "6";
	case 34:
		return "7";
	case 35:
		return "8";
	case 36:
		return "9";
	case 37:
		return "F1";
	case 38:
		return "F2";
	case 39:
		return "F3";
	case 40:
		return "F4";
	case 41:
		return "F5";
	case 42:
		return "F6";
	case 43:
		return "F7";
	case 44:
		return "F8";
	case 45:
		return "F9";
	case 46:
		return "F10";
	case 47:
		return "F11";
	case 48:
		return "F12";
	case 49:
		return "Esc";
	case 50:
		return "-";
	case 51:
		return "+";
	case 52:
		return "Del";
	case 53:
		return "Backspace";
	case 54:
		return "[";
	case 55:
		return "]";
	case 56:
		return "\\";
	case 57:
		return "Caps Lock";
	case 58:
		return ";";
	case 59:
		return "'";
	case 60:
		return "Enter";
	case 61:
		return "Shift";
	case 62:
		return ",";
	case 63:
		return ".";
	case 64:
		return "/";
	case 65:
		return "Ctrl";
	case 66:
		return "Alt";
	case 67:
		return "Space";
	case 68:
		return "Up";
	case 69:
		return "Down";
	case 70:
		return "Left";
	case 71:
		return "Right";
	case 72:
		return "Tab";
	case 73:
		return "Home";
	case 74:
		return "End";
	case 75:
		return "Page Up";
	case 76:
		return "Page Down";
	case 0:
		return "Any Key";
	}
	return "";
};
var haxegon_Key = $hxClasses["haxegon.Key"] = { __ename__ : ["haxegon","Key"], __constructs__ : ["ANY","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","ESCAPE","MINUS","PLUS","DELETE","BACKSPACE","LBRACKET","RBRACKET","BACKSLASH","CAPSLOCK","SEMICOLON","QUOTE","ENTER","SHIFT","COMMA","PERIOD","SLASH","CONTROL","ALT","SPACE","UP","DOWN","LEFT","RIGHT","TAB","HOME","END","PAGEUP","PAGEDOWN"] };
haxegon_Key.ANY = ["ANY",0];
haxegon_Key.ANY.toString = $estr;
haxegon_Key.ANY.__enum__ = haxegon_Key;
haxegon_Key.A = ["A",1];
haxegon_Key.A.toString = $estr;
haxegon_Key.A.__enum__ = haxegon_Key;
haxegon_Key.B = ["B",2];
haxegon_Key.B.toString = $estr;
haxegon_Key.B.__enum__ = haxegon_Key;
haxegon_Key.C = ["C",3];
haxegon_Key.C.toString = $estr;
haxegon_Key.C.__enum__ = haxegon_Key;
haxegon_Key.D = ["D",4];
haxegon_Key.D.toString = $estr;
haxegon_Key.D.__enum__ = haxegon_Key;
haxegon_Key.E = ["E",5];
haxegon_Key.E.toString = $estr;
haxegon_Key.E.__enum__ = haxegon_Key;
haxegon_Key.F = ["F",6];
haxegon_Key.F.toString = $estr;
haxegon_Key.F.__enum__ = haxegon_Key;
haxegon_Key.G = ["G",7];
haxegon_Key.G.toString = $estr;
haxegon_Key.G.__enum__ = haxegon_Key;
haxegon_Key.H = ["H",8];
haxegon_Key.H.toString = $estr;
haxegon_Key.H.__enum__ = haxegon_Key;
haxegon_Key.I = ["I",9];
haxegon_Key.I.toString = $estr;
haxegon_Key.I.__enum__ = haxegon_Key;
haxegon_Key.J = ["J",10];
haxegon_Key.J.toString = $estr;
haxegon_Key.J.__enum__ = haxegon_Key;
haxegon_Key.K = ["K",11];
haxegon_Key.K.toString = $estr;
haxegon_Key.K.__enum__ = haxegon_Key;
haxegon_Key.L = ["L",12];
haxegon_Key.L.toString = $estr;
haxegon_Key.L.__enum__ = haxegon_Key;
haxegon_Key.M = ["M",13];
haxegon_Key.M.toString = $estr;
haxegon_Key.M.__enum__ = haxegon_Key;
haxegon_Key.N = ["N",14];
haxegon_Key.N.toString = $estr;
haxegon_Key.N.__enum__ = haxegon_Key;
haxegon_Key.O = ["O",15];
haxegon_Key.O.toString = $estr;
haxegon_Key.O.__enum__ = haxegon_Key;
haxegon_Key.P = ["P",16];
haxegon_Key.P.toString = $estr;
haxegon_Key.P.__enum__ = haxegon_Key;
haxegon_Key.Q = ["Q",17];
haxegon_Key.Q.toString = $estr;
haxegon_Key.Q.__enum__ = haxegon_Key;
haxegon_Key.R = ["R",18];
haxegon_Key.R.toString = $estr;
haxegon_Key.R.__enum__ = haxegon_Key;
haxegon_Key.S = ["S",19];
haxegon_Key.S.toString = $estr;
haxegon_Key.S.__enum__ = haxegon_Key;
haxegon_Key.T = ["T",20];
haxegon_Key.T.toString = $estr;
haxegon_Key.T.__enum__ = haxegon_Key;
haxegon_Key.U = ["U",21];
haxegon_Key.U.toString = $estr;
haxegon_Key.U.__enum__ = haxegon_Key;
haxegon_Key.V = ["V",22];
haxegon_Key.V.toString = $estr;
haxegon_Key.V.__enum__ = haxegon_Key;
haxegon_Key.W = ["W",23];
haxegon_Key.W.toString = $estr;
haxegon_Key.W.__enum__ = haxegon_Key;
haxegon_Key.X = ["X",24];
haxegon_Key.X.toString = $estr;
haxegon_Key.X.__enum__ = haxegon_Key;
haxegon_Key.Y = ["Y",25];
haxegon_Key.Y.toString = $estr;
haxegon_Key.Y.__enum__ = haxegon_Key;
haxegon_Key.Z = ["Z",26];
haxegon_Key.Z.toString = $estr;
haxegon_Key.Z.__enum__ = haxegon_Key;
haxegon_Key.ZERO = ["ZERO",27];
haxegon_Key.ZERO.toString = $estr;
haxegon_Key.ZERO.__enum__ = haxegon_Key;
haxegon_Key.ONE = ["ONE",28];
haxegon_Key.ONE.toString = $estr;
haxegon_Key.ONE.__enum__ = haxegon_Key;
haxegon_Key.TWO = ["TWO",29];
haxegon_Key.TWO.toString = $estr;
haxegon_Key.TWO.__enum__ = haxegon_Key;
haxegon_Key.THREE = ["THREE",30];
haxegon_Key.THREE.toString = $estr;
haxegon_Key.THREE.__enum__ = haxegon_Key;
haxegon_Key.FOUR = ["FOUR",31];
haxegon_Key.FOUR.toString = $estr;
haxegon_Key.FOUR.__enum__ = haxegon_Key;
haxegon_Key.FIVE = ["FIVE",32];
haxegon_Key.FIVE.toString = $estr;
haxegon_Key.FIVE.__enum__ = haxegon_Key;
haxegon_Key.SIX = ["SIX",33];
haxegon_Key.SIX.toString = $estr;
haxegon_Key.SIX.__enum__ = haxegon_Key;
haxegon_Key.SEVEN = ["SEVEN",34];
haxegon_Key.SEVEN.toString = $estr;
haxegon_Key.SEVEN.__enum__ = haxegon_Key;
haxegon_Key.EIGHT = ["EIGHT",35];
haxegon_Key.EIGHT.toString = $estr;
haxegon_Key.EIGHT.__enum__ = haxegon_Key;
haxegon_Key.NINE = ["NINE",36];
haxegon_Key.NINE.toString = $estr;
haxegon_Key.NINE.__enum__ = haxegon_Key;
haxegon_Key.F1 = ["F1",37];
haxegon_Key.F1.toString = $estr;
haxegon_Key.F1.__enum__ = haxegon_Key;
haxegon_Key.F2 = ["F2",38];
haxegon_Key.F2.toString = $estr;
haxegon_Key.F2.__enum__ = haxegon_Key;
haxegon_Key.F3 = ["F3",39];
haxegon_Key.F3.toString = $estr;
haxegon_Key.F3.__enum__ = haxegon_Key;
haxegon_Key.F4 = ["F4",40];
haxegon_Key.F4.toString = $estr;
haxegon_Key.F4.__enum__ = haxegon_Key;
haxegon_Key.F5 = ["F5",41];
haxegon_Key.F5.toString = $estr;
haxegon_Key.F5.__enum__ = haxegon_Key;
haxegon_Key.F6 = ["F6",42];
haxegon_Key.F6.toString = $estr;
haxegon_Key.F6.__enum__ = haxegon_Key;
haxegon_Key.F7 = ["F7",43];
haxegon_Key.F7.toString = $estr;
haxegon_Key.F7.__enum__ = haxegon_Key;
haxegon_Key.F8 = ["F8",44];
haxegon_Key.F8.toString = $estr;
haxegon_Key.F8.__enum__ = haxegon_Key;
haxegon_Key.F9 = ["F9",45];
haxegon_Key.F9.toString = $estr;
haxegon_Key.F9.__enum__ = haxegon_Key;
haxegon_Key.F10 = ["F10",46];
haxegon_Key.F10.toString = $estr;
haxegon_Key.F10.__enum__ = haxegon_Key;
haxegon_Key.F11 = ["F11",47];
haxegon_Key.F11.toString = $estr;
haxegon_Key.F11.__enum__ = haxegon_Key;
haxegon_Key.F12 = ["F12",48];
haxegon_Key.F12.toString = $estr;
haxegon_Key.F12.__enum__ = haxegon_Key;
haxegon_Key.ESCAPE = ["ESCAPE",49];
haxegon_Key.ESCAPE.toString = $estr;
haxegon_Key.ESCAPE.__enum__ = haxegon_Key;
haxegon_Key.MINUS = ["MINUS",50];
haxegon_Key.MINUS.toString = $estr;
haxegon_Key.MINUS.__enum__ = haxegon_Key;
haxegon_Key.PLUS = ["PLUS",51];
haxegon_Key.PLUS.toString = $estr;
haxegon_Key.PLUS.__enum__ = haxegon_Key;
haxegon_Key.DELETE = ["DELETE",52];
haxegon_Key.DELETE.toString = $estr;
haxegon_Key.DELETE.__enum__ = haxegon_Key;
haxegon_Key.BACKSPACE = ["BACKSPACE",53];
haxegon_Key.BACKSPACE.toString = $estr;
haxegon_Key.BACKSPACE.__enum__ = haxegon_Key;
haxegon_Key.LBRACKET = ["LBRACKET",54];
haxegon_Key.LBRACKET.toString = $estr;
haxegon_Key.LBRACKET.__enum__ = haxegon_Key;
haxegon_Key.RBRACKET = ["RBRACKET",55];
haxegon_Key.RBRACKET.toString = $estr;
haxegon_Key.RBRACKET.__enum__ = haxegon_Key;
haxegon_Key.BACKSLASH = ["BACKSLASH",56];
haxegon_Key.BACKSLASH.toString = $estr;
haxegon_Key.BACKSLASH.__enum__ = haxegon_Key;
haxegon_Key.CAPSLOCK = ["CAPSLOCK",57];
haxegon_Key.CAPSLOCK.toString = $estr;
haxegon_Key.CAPSLOCK.__enum__ = haxegon_Key;
haxegon_Key.SEMICOLON = ["SEMICOLON",58];
haxegon_Key.SEMICOLON.toString = $estr;
haxegon_Key.SEMICOLON.__enum__ = haxegon_Key;
haxegon_Key.QUOTE = ["QUOTE",59];
haxegon_Key.QUOTE.toString = $estr;
haxegon_Key.QUOTE.__enum__ = haxegon_Key;
haxegon_Key.ENTER = ["ENTER",60];
haxegon_Key.ENTER.toString = $estr;
haxegon_Key.ENTER.__enum__ = haxegon_Key;
haxegon_Key.SHIFT = ["SHIFT",61];
haxegon_Key.SHIFT.toString = $estr;
haxegon_Key.SHIFT.__enum__ = haxegon_Key;
haxegon_Key.COMMA = ["COMMA",62];
haxegon_Key.COMMA.toString = $estr;
haxegon_Key.COMMA.__enum__ = haxegon_Key;
haxegon_Key.PERIOD = ["PERIOD",63];
haxegon_Key.PERIOD.toString = $estr;
haxegon_Key.PERIOD.__enum__ = haxegon_Key;
haxegon_Key.SLASH = ["SLASH",64];
haxegon_Key.SLASH.toString = $estr;
haxegon_Key.SLASH.__enum__ = haxegon_Key;
haxegon_Key.CONTROL = ["CONTROL",65];
haxegon_Key.CONTROL.toString = $estr;
haxegon_Key.CONTROL.__enum__ = haxegon_Key;
haxegon_Key.ALT = ["ALT",66];
haxegon_Key.ALT.toString = $estr;
haxegon_Key.ALT.__enum__ = haxegon_Key;
haxegon_Key.SPACE = ["SPACE",67];
haxegon_Key.SPACE.toString = $estr;
haxegon_Key.SPACE.__enum__ = haxegon_Key;
haxegon_Key.UP = ["UP",68];
haxegon_Key.UP.toString = $estr;
haxegon_Key.UP.__enum__ = haxegon_Key;
haxegon_Key.DOWN = ["DOWN",69];
haxegon_Key.DOWN.toString = $estr;
haxegon_Key.DOWN.__enum__ = haxegon_Key;
haxegon_Key.LEFT = ["LEFT",70];
haxegon_Key.LEFT.toString = $estr;
haxegon_Key.LEFT.__enum__ = haxegon_Key;
haxegon_Key.RIGHT = ["RIGHT",71];
haxegon_Key.RIGHT.toString = $estr;
haxegon_Key.RIGHT.__enum__ = haxegon_Key;
haxegon_Key.TAB = ["TAB",72];
haxegon_Key.TAB.toString = $estr;
haxegon_Key.TAB.__enum__ = haxegon_Key;
haxegon_Key.HOME = ["HOME",73];
haxegon_Key.HOME.toString = $estr;
haxegon_Key.HOME.__enum__ = haxegon_Key;
haxegon_Key.END = ["END",74];
haxegon_Key.END.toString = $estr;
haxegon_Key.END.__enum__ = haxegon_Key;
haxegon_Key.PAGEUP = ["PAGEUP",75];
haxegon_Key.PAGEUP.toString = $estr;
haxegon_Key.PAGEUP.__enum__ = haxegon_Key;
haxegon_Key.PAGEDOWN = ["PAGEDOWN",76];
haxegon_Key.PAGEDOWN.toString = $estr;
haxegon_Key.PAGEDOWN.__enum__ = haxegon_Key;
var haxegon_Mouse = function() { };
$hxClasses["haxegon.Mouse"] = haxegon_Mouse;
haxegon_Mouse.__name__ = ["haxegon","Mouse"];
haxegon_Mouse.__properties__ = {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
haxegon_Mouse.get_x = function() {
	return haxegon_Mouse._x;
};
haxegon_Mouse.set_x = function(_newx) {
	haxegon_Mouse._x = _newx | 0;
	haxegon_Debug.log("ERROR: Cannot set value of Mouse.x in HTML5.",{ fileName : "Mouse.hx", lineNumber : 27, className : "haxegon.Mouse", methodName : "set_x"});
	return haxegon_Mouse._x;
};
haxegon_Mouse.get_y = function() {
	return haxegon_Mouse._y;
};
haxegon_Mouse.set_y = function(_newy) {
	haxegon_Mouse._y = _newy | 0;
	haxegon_Debug.log("ERROR: Cannot set value of Mouse.y in HTML5.",{ fileName : "Mouse.hx", lineNumber : 44, className : "haxegon.Mouse", methodName : "set_y"});
	return haxegon_Mouse._y;
};
haxegon_Mouse.offscreen = function() {
	if(haxegon_Geom.inbox(haxegon_Mouse.get_x(),haxegon_Mouse.get_y(),0,0,haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight)) return haxegon_Mouse._mouseoffstage; else return true;
};
haxegon_Mouse.cursormoved = function() {
	return haxegon_Mouse._cursormoved;
};
haxegon_Mouse.leftheld = function() {
	return haxegon_Mouse._current > 0;
};
haxegon_Mouse.leftclick = function() {
	return haxegon_Mouse._current == 2;
};
haxegon_Mouse.leftreleased = function() {
	return haxegon_Mouse._current == -1;
};
haxegon_Mouse.leftforcerelease = function() {
	haxegon_Mouse._current = -1;
};
haxegon_Mouse.leftheldpresstime = function() {
	return haxegon_Mouse._held;
};
haxegon_Mouse.rightheld = function() {
	return haxegon_Mouse._rightcurrent > 0;
};
haxegon_Mouse.rightclick = function() {
	return haxegon_Mouse._rightcurrent == 2;
};
haxegon_Mouse.rightreleased = function() {
	return haxegon_Mouse._rightcurrent == -1;
};
haxegon_Mouse.rightforcerelease = function() {
	haxegon_Mouse._rightcurrent = -1;
};
haxegon_Mouse.rightheldpresstime = function() {
	return haxegon_Mouse._rightheld;
};
haxegon_Mouse.middleheld = function() {
	return haxegon_Mouse._middlecurrent > 0;
};
haxegon_Mouse.middleclick = function() {
	return haxegon_Mouse._middlecurrent == 2;
};
haxegon_Mouse.middlereleased = function() {
	return haxegon_Mouse._middlecurrent == -1;
};
haxegon_Mouse.middleforcerelease = function() {
	haxegon_Mouse._middlecurrent = -1;
};
haxegon_Mouse.middleheldpresstime = function() {
	return haxegon_Mouse._middleheld;
};
haxegon_Mouse.leftdelaypressed = function(delay) {
	if(haxegon_Mouse._held >= 1) {
		if(haxegon_Mouse._held == 1) return true; else if(haxegon_Mouse._held % delay == 0) return true;
	}
	return false;
};
haxegon_Mouse.rightdelaypressed = function(delay) {
	if(haxegon_Mouse._rightheld >= 1) {
		if(haxegon_Mouse._rightheld == 1) return true; else if(haxegon_Mouse._rightheld % delay == 0) return true;
	}
	return false;
};
haxegon_Mouse.middledelaypressed = function(delay) {
	if(haxegon_Mouse._middleheld >= 1) {
		if(haxegon_Mouse._middleheld == 1) return true; else if(haxegon_Mouse._middleheld % delay == 0) return true;
	}
	return false;
};
haxegon_Mouse.init = function(_starlingstage,_flashstage) {
	haxegon_Mouse._x = 0;
	haxegon_Mouse._y = 0;
	haxegon_Mouse.previousx = 0;
	haxegon_Mouse.previousy = 0;
	haxegon_Mouse._cursormoved = false;
	haxegon_Mouse._current = 0;
	haxegon_Mouse._held = 0;
	haxegon_Mouse._last = 0;
	haxegon_Mouse._rightcurrent = 0;
	haxegon_Mouse._rightheld = 0;
	haxegon_Mouse._rightlast = 0;
	haxegon_Mouse._middlecurrent = 0;
	haxegon_Mouse._middleheld = 0;
	haxegon_Mouse._middlelast = 0;
	haxegon_Mouse.starstage = _starlingstage;
	haxegon_Mouse.flashstage = _flashstage;
	haxegon_Mouse.starstage.addEventListener("touch",haxegon_Mouse.ontouch);
	haxegon_Mouse.flashstage.addEventListener("rightMouseDown",haxegon_Mouse.handleRightMouseDown);
	haxegon_Mouse.flashstage.addEventListener("rightMouseUp",haxegon_Mouse.handleRightMouseUp);
	haxegon_Mouse.flashstage.addEventListener("middleMouseDown",haxegon_Mouse.handleMiddleMouseDown);
	haxegon_Mouse.flashstage.addEventListener("middleMouseUp",haxegon_Mouse.handleMiddleMouseUp);
	haxegon_Mouse.flashstage.addEventListener("mouseWheel",haxegon_Mouse.handleMouseWheel);
	haxegon_Mouse.flashstage.addEventListener("mouseMove",haxegon_Mouse.mouseOver);
	haxegon_Mouse.flashstage.addEventListener("mouseLeave",haxegon_Mouse.mouseLeave);
};
haxegon_Mouse.unload = function(_starlingstage,_flashstage) {
	_starlingstage.removeEventListener("touch",haxegon_Mouse.ontouch);
	_flashstage.removeEventListener("rightMouseDown",haxegon_Mouse.handleRightMouseDown);
	_flashstage.removeEventListener("rightMouseUp",haxegon_Mouse.handleRightMouseUp);
	_flashstage.removeEventListener("middleMouseDown",haxegon_Mouse.handleMiddleMouseDown);
	_flashstage.removeEventListener("middleMouseUp",haxegon_Mouse.handleMiddleMouseUp);
	_flashstage.removeEventListener("mouseWheel",haxegon_Mouse.handleMouseWheel);
	_flashstage.removeEventListener("mouseMove",haxegon_Mouse.mouseOver);
	_flashstage.removeEventListener("mouseLeave",haxegon_Mouse.mouseLeave);
};
haxegon_Mouse.show = function() {
	openfl_ui_Mouse.show();
};
haxegon_Mouse.hide = function() {
	openfl_ui_Mouse.hide();
};
haxegon_Mouse.ontouch = function(e) {
	var touch = e.getTouch(haxegon_Mouse.starstage);
	haxegon_Mouse._mouseoffstage = true;
	if(touch != null) {
		if(touch.get_phase() == "hover") haxegon_Mouse._mouseoffstage = false;
		if(touch.get_phase() == "began") {
			haxegon_Mouse._mouseoffstage = false;
			if(haxegon_Mouse._current > 0) haxegon_Mouse._current = 1; else haxegon_Mouse._current = 2;
			haxegon_Mouse._held = 0;
		} else if(touch.get_phase() == "ended") {
			if(haxegon_Mouse._current > 0) haxegon_Mouse._current = -1; else haxegon_Mouse._current = 0;
			haxegon_Mouse._held = 0;
			haxegon_Mouse._rightheld = 0;
		} else if(touch.get_phase() == "moved") haxegon_Mouse._mouseoffstage = false;
	}
};
haxegon_Mouse.handleRightMouseDown = function(event) {
	if(haxegon_Mouse._rightcurrent > 0) haxegon_Mouse._rightcurrent = 1; else haxegon_Mouse._rightcurrent = 2;
};
haxegon_Mouse.handleRightMouseUp = function(event) {
	if(haxegon_Mouse._rightcurrent > 0) haxegon_Mouse._rightcurrent = -1; else haxegon_Mouse._rightcurrent = 0;
};
haxegon_Mouse.handleMiddleMouseDown = function(event) {
	if(haxegon_Mouse._middlecurrent > 0) haxegon_Mouse._middlecurrent = 1; else haxegon_Mouse._middlecurrent = 2;
};
haxegon_Mouse.handleMiddleMouseUp = function(event) {
	if(haxegon_Mouse._middlecurrent > 0) {
		haxegon_Mouse._middlecurrent = -1;
		haxegon_Mouse._middleheld = 0;
	} else haxegon_Mouse._middlecurrent = 0;
};
haxegon_Mouse.handleMouseWheel = function(event) {
	if(event.delta > 0) haxegon_Mouse.mousewheel = 2; else haxegon_Mouse.mousewheel = -2;
};
haxegon_Mouse.mouseOver = function(event) {
	haxegon_Mouse._mouseoffstage = false;
};
haxegon_Mouse.mouseLeave = function(event) {
	haxegon_Mouse._mouseoffstage = true;
	haxegon_Mouse.reset();
};
haxegon_Mouse.update = function(mx,my,firstframe) {
	haxegon_Mouse._x = mx;
	haxegon_Mouse._y = my;
	if(haxegon_Mouse.get_x() == haxegon_Mouse.previousx && haxegon_Mouse.get_y() == haxegon_Mouse.previousy) {
		haxegon_Mouse._cursormoved = false;
		haxegon_Mouse.deltax = 0;
		haxegon_Mouse.deltay = 0;
	} else {
		haxegon_Mouse.deltax = haxegon_Mouse.get_x() - haxegon_Mouse.previousx;
		haxegon_Mouse.deltay = haxegon_Mouse.get_y() - haxegon_Mouse.previousy;
		haxegon_Mouse.previousx = haxegon_Mouse.get_x();
		haxegon_Mouse.previousy = haxegon_Mouse.get_y();
		haxegon_Mouse._cursormoved = true;
	}
	if(haxegon_Mouse._last == -1 && haxegon_Mouse._current == -1) haxegon_Mouse._current = 0; else if(haxegon_Mouse._last == 2 && haxegon_Mouse._current == 2) haxegon_Mouse._current = 1;
	haxegon_Mouse._last = haxegon_Mouse._current;
	if(haxegon_Mouse._current > 0) ++haxegon_Mouse._held;
	if(haxegon_Mouse._rightlast == -1 && haxegon_Mouse._rightcurrent == -1) haxegon_Mouse._rightcurrent = 0; else if(haxegon_Mouse._rightlast == 2 && haxegon_Mouse._rightcurrent == 2) haxegon_Mouse._rightcurrent = 1;
	haxegon_Mouse._rightlast = haxegon_Mouse._rightcurrent;
	if(haxegon_Mouse._rightcurrent > 0) ++haxegon_Mouse._rightheld;
	if(haxegon_Mouse._middlelast == -1 && haxegon_Mouse._middlecurrent == -1) haxegon_Mouse._middlecurrent = 0; else if(haxegon_Mouse._middlelast == 2 && haxegon_Mouse._middlecurrent == 2) haxegon_Mouse._middlecurrent = 1;
	haxegon_Mouse._middlelast = haxegon_Mouse._middlecurrent;
	if(haxegon_Mouse._middlecurrent > 0) ++haxegon_Mouse._middleheld;
	if(firstframe) {
		if(haxegon_Mouse.mousewheel == -2) haxegon_Mouse.mousewheel = -1; else if(haxegon_Mouse.mousewheel == 2) haxegon_Mouse.mousewheel = 1; else haxegon_Mouse.mousewheel = 0;
	}
};
haxegon_Mouse.reset = function() {
	haxegon_Mouse._current = 0;
	haxegon_Mouse._last = 0;
	haxegon_Mouse._held = 0;
	haxegon_Mouse._rightcurrent = 0;
	haxegon_Mouse._rightlast = 0;
	haxegon_Mouse._rightheld = 0;
	haxegon_Mouse._middlecurrent = 0;
	haxegon_Mouse._middlelast = 0;
	haxegon_Mouse._middleheld = 0;
};
var haxegon_Music = function() { };
$hxClasses["haxegon.Music"] = haxegon_Music;
haxegon_Music.__name__ = ["haxegon","Music"];
haxegon_Music.playsound = function(soundname,volume,offset) {
	if(offset == null) offset = 0.0;
	if(volume == null) volume = 1.0;
	if(!haxegon_Music.effectindex.exists(soundname)) {
		if(!haxegon_Music.loadsound(soundname)) return;
	}
	haxegon_Music.temptransform = new openfl_media_SoundTransform(haxegon_Music.volumelevels[Std["int"](haxegon_Music.effectindex.get(soundname))] * volume * haxegon_Music.globalsound);
	haxegon_Music.efchannel[haxegon_Music.currentefchan] = haxegon_Music.efchan[Std["int"](haxegon_Music.effectindex.get(soundname))].play(offset * 1000);
	haxegon_Music.efchannel[haxegon_Music.currentefchan].set_soundTransform(haxegon_Music.temptransform);
	haxegon_Music.currentefchan++;
	if(haxegon_Music.currentefchan > 15) haxegon_Music.currentefchan -= 16;
};
haxegon_Music.stopsound = function() {
	haxegon_Music.temptransform = new openfl_media_SoundTransform(0);
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(haxegon_Music.efchannel[i] != null) haxegon_Music.efchannel[i].set_soundTransform(haxegon_Music.temptransform);
	}
};
haxegon_Music.loadsound = function(soundname,volumelevel) {
	if(volumelevel == null) volumelevel = 1.0;
	if(haxegon_Data.assetexists("data/sounds/" + soundname + ".ogg")) haxegon_Music.efchan.push(haxegon_Data.getsoundasset("data/sounds/" + soundname + ".ogg")); else {
		haxegon_Debug.log("ERROR: In loadsound, cannot find \"data/sounds/ogg/" + soundname + ".ogg\". (.ogg files are required on this platform.)",{ fileName : "Music.hx", lineNumber : 42, className : "haxegon.Music", methodName : "loadsound"});
		return false;
	}
	haxegon_Music.effectindex.set(soundname,haxegon_Music.numeffects);
	haxegon_Music.volumelevels.push(volumelevel);
	haxegon_Music.numeffects++;
	return true;
};
haxegon_Music.loadsong = function(songname,volumelevel) {
	if(volumelevel == null) volumelevel = 1.0;
	if(haxegon_Data.assetexists("data/sounds/" + songname + ".ogg")) haxegon_Music.musicchan.push(haxegon_Data.getsoundasset("data/sounds/" + songname + ".ogg")); else {
		haxegon_Debug.log("ERROR: In loadsong, cannot find \"data/sounds/ogg/" + songname + ".ogg\". (.ogg files are required on this platform.)",{ fileName : "Music.hx", lineNumber : 64, className : "haxegon.Music", methodName : "loadsong"});
		return false;
	}
	haxegon_Music.songindex.set(songname,haxegon_Music.numsongs);
	haxegon_Music.songvolumelevels.push(volumelevel);
	haxegon_Music.numsongs++;
	return true;
};
haxegon_Music.playsong = function(songname,time,loop) {
	if(loop == null) loop = true;
	if(time == null) time = 0.0;
	if(!haxegon_Music.songindex.exists(songname)) {
		if(!haxegon_Music.loadsong(songname)) return;
	}
	if(haxegon_Music.currentsong != songname) {
		if(haxegon_Music.currentsong != "nothing") {
			haxegon_Music.musicchannel.stop();
			haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.loopmusic);
		}
		haxegon_Music.musicfade = 0;
		haxegon_Music.musicfadein = 0;
		if(songname != "nothing") {
			haxegon_Music.currentsong = songname;
			if(loop) {
				if(time == 0) haxegon_Music.musicchannel = haxegon_Music.musicchan[Std["int"](haxegon_Music.songindex.get(songname))].play(0,999999); else {
					haxegon_Music.musicchannel = haxegon_Music.musicchan[Std["int"](haxegon_Music.songindex.get(songname))].play(time * 1000 % haxegon_Music.musicchan[Std["int"](haxegon_Music.songindex.get(songname))].get_length());
					haxegon_Music.musicchannel.addEventListener("soundComplete",haxegon_Music.loopmusic);
				}
			} else haxegon_Music.musicchannel = haxegon_Music.musicchan[Std["int"](haxegon_Music.songindex.get(songname))].play(time * 1000 % haxegon_Music.musicchan[Std["int"](haxegon_Music.songindex.get(songname))].get_length());
			haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.songvolumelevels[Std["int"](haxegon_Music.songindex.get(songname))] * haxegon_Music.globalsound));
		} else haxegon_Music.currentsong = "nothing";
	}
};
haxegon_Music.stopsong = function() {
	if(haxegon_Music.musicchannel != null) {
		haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.stopmusic);
		haxegon_Music.musicchannel.stop();
	}
	haxegon_Music.currentsong = "nothing";
};
haxegon_Music.fadeout = function() {
	if(haxegon_Music.musicfade == 0) haxegon_Music.musicfade = 31;
};
haxegon_Music.init = function() {
	haxegon_Music.currentsong = "nothing";
	haxegon_Music.musicfade = 0;
	haxegon_Music.currentefchan = 0;
	haxegon_Music.usingtickertext = false;
	haxegon_Music.globalsound = 1;
	haxegon_Music.muted = false;
	haxegon_Music.numplays = 0;
	haxegon_Music.numeffects = 0;
	haxegon_Music.numsongs = 0;
};
haxegon_Music.loopmusic = function(e) {
	haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.loopmusic);
	if(haxegon_Music.currentsong != "nothing") {
		haxegon_Music.musicchannel = haxegon_Music.musicchan[Std["int"](haxegon_Music.songindex.get(haxegon_Music.currentsong))].play(0,999999);
		haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.songvolumelevels[Std["int"](haxegon_Music.songindex.get(haxegon_Music.currentsong))] * haxegon_Music.globalsound));
	}
};
haxegon_Music.stopmusic = function(e) {
	haxegon_Music.musicchannel.removeEventListener("soundComplete",haxegon_Music.stopmusic);
	haxegon_Music.musicchannel.stop();
	haxegon_Music.currentsong = "nothing";
};
haxegon_Music.processmusicfade = function() {
	haxegon_Music.musicfade--;
	if(haxegon_Music.musicchannel != null) {
		if(haxegon_Music.musicfade > 0) haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.musicfade / 30 * haxegon_Music.globalsound)); else {
			haxegon_Music.musicchannel.stop();
			haxegon_Music.currentsong = "nothing";
		}
	}
};
haxegon_Music.processmusicfadein = function() {
	haxegon_Music.musicfadein--;
	if(haxegon_Music.musicchannel != null) {
		if(haxegon_Music.musicfadein > 0) haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform((60 - haxegon_Music.musicfadein) / 60 * haxegon_Music.globalsound)); else haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.globalsound));
	}
};
haxegon_Music.processmusic = function() {
	if(haxegon_Music.musicfade > 0) haxegon_Music.processmusicfade();
	if(haxegon_Music.musicfadein > 0) haxegon_Music.processmusicfadein();
};
haxegon_Music.updateallvolumes = function() {
	if(haxegon_Music.currentsong != "nothing") haxegon_Music.musicchannel.set_soundTransform(new openfl_media_SoundTransform(haxegon_Music.songvolumelevels[Std["int"](haxegon_Music.songindex.get(haxegon_Music.currentsong))] * haxegon_Music.globalsound));
};
haxegon_Music.processmute = function() {
	if(haxegon_Text.input_show == 0) {
		if(haxegon_Input.justpressed(haxegon_Key.M) && haxegon_Music.mutebutton <= 0) {
			haxegon_Music.mutebutton = 2;
			if(haxegon_Music.muted) haxegon_Music.muted = false; else haxegon_Music.muted = true;
		}
		if(haxegon_Music.mutebutton > 0 && !haxegon_Input.pressed(haxegon_Key.M)) haxegon_Music.mutebutton--;
	}
	if(haxegon_Music.muted) {
		if(haxegon_Music.globalsound == 1) {
			haxegon_Music.globalsound = 0;
			haxegon_Music.updateallvolumes();
		}
	}
	if(!haxegon_Music.muted && haxegon_Music.globalsound < 1) {
		haxegon_Music.globalsound += 0.05;
		if(haxegon_Music.globalsound > 1.0) haxegon_Music.globalsound = 1.0;
		haxegon_Music.updateallvolumes();
	}
};
var haxegon_Random = function() { };
$hxClasses["haxegon.Random"] = haxegon_Random;
haxegon_Random.__name__ = ["haxegon","Random"];
haxegon_Random.__properties__ = {set_seed:"set_seed",get_seed:"get_seed"}
haxegon_Random.bool = function() {
	return haxegon_Random.random() < 0.5;
};
haxegon_Random.chance = function(n) {
	return haxegon_Random["float"](0,100) < n;
};
haxegon_Random["int"] = function(from,to) {
	return from + Math.floor((to - from + 1) * haxegon_Random.random());
};
haxegon_Random["float"] = function(from,to) {
	return from + (to - from) * haxegon_Random.random();
};
haxegon_Random.string = function(length,charactersToUse) {
	if(charactersToUse == null) charactersToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	var str = "";
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		str += charactersToUse.charAt(haxegon_Random["int"](0,charactersToUse.length - 1));
	}
	return str;
};
haxegon_Random.pick = function(arr) {
	return arr[haxegon_Random["int"](0,arr.length - 1)];
};
haxegon_Random.random = function() {
	haxegon_Random._actualseed = haxegon_Random._actualseed * 16807 % 2147483647;
	return Math.abs(haxegon_Random._actualseed / 2147483647);
};
haxegon_Random.get_seed = function() {
	return haxegon_Random._initialseed;
};
haxegon_Random.set_seed = function(s) {
	if(s == 0) s = 1;
	haxegon_Random._initialseed = s;
	haxegon_Random._actualseed = Std["int"](Math.abs(haxegon_Random._initialseed % 2147483647));
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		haxegon_Random.random();
	}
	return haxegon_Random._initialseed;
};
var haxegon_S = function() { };
$hxClasses["haxegon.S"] = haxegon_S;
haxegon_S.__name__ = ["haxegon","S"];
haxegon_S.asciicode = function(character) {
	return HxOverrides.cca(character,0);
};
haxegon_S.fromascii = function(asciicode) {
	return String.fromCharCode(asciicode);
};
haxegon_S.join = function(array,seperator) {
	return array.join(seperator);
};
haxegon_S.seperate = function(currentstring,delimiter) {
	return currentstring.split(delimiter);
};
haxegon_S.uppercase = function(currentstring) {
	return currentstring.toUpperCase();
};
haxegon_S.lowercase = function(currentstring) {
	return currentstring.toLowerCase();
};
haxegon_S.split = function(currentstring,delimiter) {
	return currentstring.split(delimiter);
};
haxegon_S.removefromstring = function(fullstring,substring) {
	var t = fullstring.indexOf(substring,0);
	if(t == -1) return fullstring; else return haxegon_S.removefromstring(haxegon_S.getroot(fullstring,substring) + haxegon_S.getbranch(fullstring,substring),substring);
};
haxegon_S.isinstring = function(fullstring,stringtocheck) {
	if(fullstring.indexOf(stringtocheck,0) != -1) return true;
	return false;
};
haxegon_S.positioninstring = function(fullstring,substring,start) {
	if(start == null) start = 0;
	return fullstring.indexOf(substring,start);
};
haxegon_S.letterat = function(currentstring,position) {
	if(position == null) position = 0;
	return HxOverrides.substr(currentstring,position,1);
};
haxegon_S.mid = function(currentstring,start,length) {
	if(length == null) length = 1;
	if(start == null) start = 0;
	return HxOverrides.substr(currentstring,start,length);
};
haxegon_S.left = function(currentstring,length) {
	if(length == null) length = 1;
	return HxOverrides.substr(currentstring,0,length);
};
haxegon_S.right = function(currentstring,length) {
	if(length == null) length = 1;
	return HxOverrides.substr(currentstring,currentstring.length - length,length);
};
haxegon_S.removefromleft = function(currentstring,length) {
	if(length == null) length = 1;
	return haxegon_S.right(currentstring,currentstring.length - length);
};
haxegon_S.removefromright = function(currentstring,length) {
	if(length == null) length = 1;
	return HxOverrides.substr(currentstring,0,currentstring.length - length);
};
haxegon_S.reversetext = function(currentstring) {
	var reversedstring = "";
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) {
		var i = _g1++;
		reversedstring += HxOverrides.substr(currentstring,currentstring.length - i - 1,1);
	}
	return reversedstring;
};
haxegon_S.replacechar = function(currentstring,ch,ch2) {
	if(ch2 == null) ch2 = "";
	if(ch == null) ch = "|";
	return StringTools.replace(currentstring,ch,ch2);
};
haxegon_S.getlastbranch = function(currentstring,ch) {
	var i = currentstring.length - 1;
	while(i >= 0) {
		if(HxOverrides.substr(currentstring,i,1) == ch) return HxOverrides.substr(currentstring,i + 1,currentstring.length - i - 1);
		i--;
	}
	return currentstring;
};
haxegon_S.getroot = function(currentstring,ch) {
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(HxOverrides.substr(currentstring,i,1) == ch) return HxOverrides.substr(currentstring,0,i);
	}
	return currentstring;
};
haxegon_S.getbranch = function(currentstring,ch) {
	var _g1 = 0;
	var _g = currentstring.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(HxOverrides.substr(currentstring,i,1) == ch) return HxOverrides.substr(currentstring,i + 1,currentstring.length - i - 1);
	}
	return currentstring;
};
haxegon_S.getbetweenbrackets = function(currentstring) {
	while(HxOverrides.substr(currentstring,0,1) != "(" && currentstring.length > 0) currentstring = HxOverrides.substr(currentstring,1,currentstring.length - 1);
	while(HxOverrides.substr(currentstring,currentstring.length - 1,1) != ")" && currentstring.length > 0) currentstring = HxOverrides.substr(currentstring,0,currentstring.length - 1);
	if(currentstring.length <= 0) return "";
	return HxOverrides.substr(currentstring,1,currentstring.length - 2);
};
haxegon_S.trimspaces = function(currentstring) {
	while(HxOverrides.substr(currentstring,0,1) == " " && currentstring.length > 0) currentstring = HxOverrides.substr(currentstring,1,currentstring.length - 1);
	while(HxOverrides.substr(currentstring,currentstring.length - 1,1) == " " && currentstring.length > 0) currentstring = HxOverrides.substr(currentstring,0,currentstring.length - 1);
	while(HxOverrides.substr(currentstring,0,1) == "\t" && currentstring.length > 0) currentstring = HxOverrides.substr(currentstring,1,currentstring.length - 1);
	while(HxOverrides.substr(currentstring,currentstring.length - 1,1) == "\t" && currentstring.length > 0) currentstring = HxOverrides.substr(currentstring,0,currentstring.length - 1);
	if(currentstring.length <= 0) return "";
	return currentstring;
};
haxegon_S.isnumber = function(currentstring) {
	if((function($this) {
		var $r;
		var f = parseFloat(currentstring);
		$r = isNaN(f);
		return $r;
	}(this))) return false; else return true;
	return false;
};
var haxegon_Scene = function() { };
$hxClasses["haxegon.Scene"] = haxegon_Scene;
haxegon_Scene.__name__ = ["haxegon","Scene"];
haxegon_Scene.init = function() {
	haxegon_Scene.scenelist = [];
	haxegon_Scene.currentscene = 0;
	haxegon_Scene.scenelist.push(Type.createInstance(Main,[]));
	haxegon_Scene.checkforrenderfunction();
};
haxegon_Scene.checkforrenderfunction = function() {
	haxegon_Scene.hasseperaterenderfunction = Reflect.field(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"render") != null;
	if(!haxegon_Scene.hasseperaterenderfunction) haxegon_Scene.hasseperaterenderfunction = Reflect.field(Type.getClass(haxegon_Scene.scenelist[haxegon_Scene.currentscene]),"render") != null;
};
haxegon_Scene.update = function() {
	haxegon_Scene.callscenemethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"update");
};
haxegon_Scene.render = function() {
	haxegon_Scene.callscenemethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"render");
};
haxegon_Scene.callscenemethod = function(scene,method) {
	var instanceFunc = Reflect.field(haxegon_Scene.scenelist[haxegon_Scene.currentscene],method);
	if(instanceFunc != null && Reflect.isFunction(instanceFunc)) {
		try {
			Reflect.callMethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],instanceFunc,[]);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
				throw new js__$Boot_HaxeError("ERROR: Couldn't call " + Type.getClassName(scene) + "." + method + "() without any arguments.");
			} else throw(e);
		}
		return;
	}
	var classFunc = Reflect.field(Type.getClass(haxegon_Scene.scenelist[haxegon_Scene.currentscene]),method);
	if(classFunc != null && Reflect.isFunction(classFunc)) {
		try {
			Reflect.callMethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],classFunc,[]);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_ArgumentError) ) {
				throw new js__$Boot_HaxeError("ERROR: Couldn't call " + Type.getClassName(scene) + "." + method + "() without any arguments.");
			} else throw(e1);
		}
		return;
	}
};
haxegon_Scene.findscene = function(findscene) {
	var _g1 = 0;
	var _g = haxegon_Scene.scenelist.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(findscene == Type.getClass(haxegon_Scene.scenelist[i])) return i;
	}
	haxegon_Scene.scenelist.push(Type.createInstance(findscene,[]));
	return haxegon_Scene.scenelist.length - 1;
};
haxegon_Scene.change = function(newscene) {
	haxegon_Scene.currentscene = haxegon_Scene.findscene(newscene);
	haxegon_Scene.callscenemethod(haxegon_Scene.scenelist[haxegon_Scene.currentscene],"reset");
	haxegon_Scene.checkforrenderfunction();
	return haxegon_Scene.scenelist[haxegon_Scene.currentscene];
};
haxegon_Scene.get = function(requiredscene) {
	return haxegon_Scene.scenelist[haxegon_Scene.findscene(requiredscene)];
};
haxegon_Scene.$name = function(requiredscene) {
	return Type.getClassName(Type.getClass(haxegon_Scene.scenelist[haxegon_Scene.findscene(requiredscene)]));
};
haxegon_Scene.getcurrentsceneclass = function() {
	return haxegon_Scene.scenelist[haxegon_Scene.currentscene];
};
var haxegon_Fontclass = function(_name,_size) {
	this.autosize = true;
	this.type = haxegon_Text.fontfile[haxegon_Text.fontfileindex.get(_name)].type;
	this.loadfont(_name,_size);
	this.nexttextfield();
};
$hxClasses["haxegon.Fontclass"] = haxegon_Fontclass;
haxegon_Fontclass.__name__ = ["haxegon","Fontclass"];
haxegon_Fontclass.prototype = {
	loadfont: function(_name,_size) {
		this.name = _name;
		this.size = _size;
		this.fontfile = haxegon_Text.fontfile[haxegon_Text.fontfileindex.get(_name)];
		this.tflist = [];
		this.tflist.push(this.inittextfield());
	}
	,inittextfield: function() {
		var newtf = new starling_text_TextField(haxegon_Gfx.screenwidth,haxegon_Gfx.screenheight,"???",this.fontfile.typename,this.fontfile.sizescale * this.size);
		newtf.set_vAlign("top");
		newtf.set_hAlign("left");
		newtf.set_autoSize("bothDirections");
		return newtf;
	}
	,reset: function() {
		this.currenttextfield = -1;
	}
	,nexttextfield: function() {
		this.currenttextfield++;
		if(this.currenttextfield >= this.tflist.length) this.tflist.push(this.inittextfield());
		this.tf = this.tflist[this.currenttextfield];
	}
	,updatewidth: function(v) {
		this.autosize = v;
		if(v) this.tf.set_autoSize("bothDirections"); else {
			this.tf.set_autoSize("vertical");
			this.tf.set_width(haxegon_Text.wordwrapwidth);
		}
	}
	,get_width: function() {
		if(this.autosize) this.tf.set_autoSize("bothDirections"); else {
			this.tf.set_autoSize("vertical");
			this.tf.set_width(haxegon_Text.wordwrapwidth);
		}
		return Std["int"](this.tf.get_width());
	}
	,get_height: function() {
		if(this.autosize) this.tf.set_autoSize("bothDirections"); else {
			this.tf.set_autoSize("vertical");
			this.tf.set_width(haxegon_Text.wordwrapwidth);
		}
		return Std["int"](this.tf.get_height());
	}
	,tf: null
	,tflist: null
	,currenttextfield: null
	,fontfile: null
	,name: null
	,type: null
	,size: null
	,autosize: null
	,__class__: haxegon_Fontclass
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxegon_Fontfile = function(_file) {
	if(_file == null) {
		this.type = "bitmap";
		this.fontxml = Xml.parse(haxegon_embeddedassets_DefaultFont.get_xmlstring()).firstElement();
		this.typename = this.fontxml.elementsNamed("info").next().get("face");
		this.sizescale = Std.parseInt(this.fontxml.elementsNamed("info").next().get("size"));
		this.fonttex = starling_textures_Texture.fromBitmapData(haxegon_embeddedassets_DefaultFont.get_bitmapdata(),false);
		this.bitmapfont = new starling_text_BitmapFont(this.fonttex,this.fontxml);
		starling_text_TextField.registerBitmapFont(this.bitmapfont);
		this.filename = "";
		this.typename = "default";
		this.sizescale = Std.parseInt(this.fontxml.elementsNamed("info").next().get("size"));
	} else if(haxegon_Data.assetexists("data/graphics/fonts/" + _file + "/" + _file + ".fnt")) {
		this.type = "bitmap";
		var fontdata = haxegon_Data.gettextasset("data/graphics/fonts/" + _file + "/" + _file + ".fnt");
		this.fontxml = Xml.parse(fontdata).firstElement();
		this.typename = this.fontxml.elementsNamed("info").next().get("face");
		this.pngname = Xml.parse(fontdata).firstElement().elementsNamed("pages").next().elementsNamed("page").next().get("file");
		if(this.pngname == null) haxegon_Debug.log("ERROR: Bitmap font XML file \"" + _file + ".fnt\" does not reference a .png file.",{ fileName : "Text.hx", lineNumber : 125, className : "haxegon.Fontfile", methodName : "new"});
		if(haxegon_S.right(this.pngname,4) == ".png") this.pngname = HxOverrides.substr(this.pngname,0,this.pngname.length - 4);
		this.sizescale = Std.parseInt(this.fontxml.elementsNamed("info").next().get("size"));
		if(haxegon_Gfx.imageindex.exists("fonts/" + _file + "/" + this.pngname)) this.fonttex = haxegon_Gfx.starlingassets.getTexture("fonts/" + _file + "/" + this.pngname); else this.fonttex = starling_textures_Texture.fromBitmapData(haxegon_Data.getgraphicsasset("data/graphics/fonts/" + _file + "/" + this.pngname + ".png"),false);
		this.bitmapfont = new starling_text_BitmapFont(this.fonttex,this.fontxml);
		starling_text_TextField.registerBitmapFont(this.bitmapfont);
	} else {
		this.type = "ttf";
		this.filename = "data/graphics/fonts/" + _file + "/" + _file + ".ttf";
		try {
			this.font = haxegon_Data.getfontasset(this.filename);
			this.typename = this.font.name;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxegon_Debug.log("ERROR: Cannot set font to \"" + _file + "\", no TTF or Bitmap Font found.",{ fileName : "Text.hx", lineNumber : 148, className : "haxegon.Fontfile", methodName : "new"});
		}
		this.sizescale = 1;
	}
};
$hxClasses["haxegon.Fontfile"] = haxegon_Fontfile;
haxegon_Fontfile.__name__ = ["haxegon","Fontfile"];
haxegon_Fontfile.prototype = {
	typename: null
	,bitmapfont: null
	,fontxml: null
	,fonttex: null
	,pngname: null
	,sizescale: null
	,font: null
	,filename: null
	,type: null
	,__class__: haxegon_Fontfile
};
var haxegon_Text = function() { };
$hxClasses["haxegon.Text"] = haxegon_Text;
haxegon_Text.__name__ = ["haxegon","Text"];
haxegon_Text.__properties__ = {set_size:"set_size",get_size:"get_size",set_font:"set_font",get_font:"get_font",set_wordwrap:"set_wordwrap",get_wordwrap:"get_wordwrap"}
haxegon_Text.init = function(stage) {
	haxegon_Text.gfxstage = stage;
	haxegon_Text.input_cursorglow = 0;
	haxegon_Text.inputmaxlength = 40;
	haxegon_Text.wordwrapwidth = 0;
};
haxegon_Text.align = function(a) {
	haxegon_Text.textalign = a;
};
haxegon_Text.rotation = function(a,xpivot,ypivot) {
	if(ypivot == null) ypivot = -15000;
	if(xpivot == null) xpivot = -15000;
	haxegon_Text.textrotate = a;
	haxegon_Text.textrotatexpivot = xpivot;
	haxegon_Text.textrotateypivot = ypivot;
};
haxegon_Text.input_checkfortext = function() {
	haxegon_Text.inputtext = haxegon_Input.keybuffer;
};
haxegon_Text.input = function(x,y,prompt,questioncolor,answercolor) {
	if(answercolor == null) answercolor = 13421772;
	if(questioncolor == null) questioncolor = 16777215;
	haxegon_Text.input_show = 2;
	haxegon_Text.input_font = haxegon_Text.currentfont;
	haxegon_Text.input_textsize = haxegon_Text.currentsize;
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(prompt + haxegon_Text.inputtext);
	x = haxegon_Text.alignx(x);
	y = haxegon_Text.aligny(y);
	haxegon_Text.input_textxp = x;
	haxegon_Text.input_textyp = y;
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(prompt);
	haxegon_Text.input_responsexp = haxegon_Text.input_textxp + Math.floor(haxegon_Text.typeface[haxegon_Text.currentindex].get_width());
	haxegon_Text.input_responseyp = y;
	haxegon_Text.input_text = prompt;
	haxegon_Text.input_response = haxegon_Text.inputtext;
	haxegon_Text.input_textcol = questioncolor;
	haxegon_Text.input_responsecol = answercolor;
	haxegon_Text.input_checkfortext();
	if(haxegon_Input.justpressed(haxegon_Key.ENTER) && haxegon_Text.inputtext != "") return true;
	return false;
};
haxegon_Text.getinput = function() {
	var response = haxegon_Text.inputtext;
	haxegon_Text.lastentry = haxegon_Text.inputtext;
	haxegon_Text.inputtext = "";
	haxegon_Input.keybuffer = "";
	haxegon_Text.input_show = 0;
	return response;
};
haxegon_Text.drawstringinput = function() {
	if(haxegon_Text.input_show > 0) {
		haxegon_Text.setfont(haxegon_Text.input_font,haxegon_Text.input_textsize);
		haxegon_Text.input_cursorglow++;
		if(haxegon_Text.input_cursorglow >= 96) haxegon_Text.input_cursorglow = 0;
		haxegon_Text.display(haxegon_Text.input_textxp,haxegon_Text.input_textyp,haxegon_Text.input_text,haxegon_Text.input_textcol);
		if(haxegon_Text.input_text.length < haxegon_Text.inputmaxlength) {
			if(haxegon_Text.input_cursorglow % 48 < 24) haxegon_Text.display(haxegon_Text.input_responsexp,haxegon_Text.input_responseyp,haxegon_Text.input_response,haxegon_Text.input_responsecol); else haxegon_Text.display(haxegon_Text.input_responsexp,haxegon_Text.input_responseyp,haxegon_Text.input_response + "_",haxegon_Text.input_responsecol);
		} else haxegon_Text.display(haxegon_Text.input_responsexp,haxegon_Text.input_responseyp,haxegon_Text.input_response,haxegon_Text.input_responsecol);
	}
	haxegon_Text.input_show--;
	if(haxegon_Text.input_show < 0) haxegon_Text.input_show = 0;
};
haxegon_Text.get_wordwrap = function() {
	return haxegon_Text.wordwrapwidth;
};
haxegon_Text.set_wordwrap = function(textwidth) {
	if(textwidth < 0) {
		haxegon_Debug.log("Error: Text.wordwrap must be a number greater than 0.",{ fileName : "Text.hx", lineNumber : 261, className : "haxegon.Text", methodName : "set_wordwrap"});
		haxegon_Text.wordwrapwidth = 0;
	} else haxegon_Text.wordwrapwidth = textwidth;
	return haxegon_Text.wordwrapwidth;
};
haxegon_Text.currentwidth = function() {
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_width();
};
haxegon_Text.currentheight = function() {
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_height();
};
haxegon_Text.width = function(text) {
	if(haxegon_Text.wordwrapwidth > 0) haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(false); else haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(true);
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(text);
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_width();
};
haxegon_Text.height = function(text) {
	if(text == null) text = "?";
	if(haxegon_Text.wordwrapwidth > 0) haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(false); else haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(true);
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(text);
	return haxegon_Text.typeface[haxegon_Text.currentindex].get_height();
};
haxegon_Text.alignx = function(x) {
	if(x <= -5000) {
		haxegon_Text.t1 = x - haxegon_Text.CENTER;
		haxegon_Text.t2 = x - haxegon_Text.LEFT;
		haxegon_Text.t3 = x - haxegon_Text.RIGHT;
		if(haxegon_Text.t1 == 0 || Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t2) && Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t3)) return haxegon_Text.t1 + Math.floor(haxegon_Gfx.screenwidthmid - haxegon_Text.currentwidth() / 2); else if(haxegon_Text.t2 == 0 || Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t1) && Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t3)) return haxegon_Text.t2; else return haxegon_Text.t3 + Math.floor(haxegon_Gfx.screenwidth - haxegon_Text.currentwidth());
	}
	return Math.floor(x);
};
haxegon_Text.aligny = function(y) {
	if(y <= -5000) {
		haxegon_Text.t1 = y - haxegon_Text.CENTER;
		haxegon_Text.t2 = y - haxegon_Text.TOP;
		haxegon_Text.t3 = y - haxegon_Text.BOTTOM;
		if(haxegon_Text.t1 == 0 || Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t2) && Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t3)) return haxegon_Text.t1 + Math.floor(haxegon_Gfx.screenheightmid - haxegon_Text.currentheight() / 2); else if(haxegon_Text.t2 == 0 || Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t1) && Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t3)) return haxegon_Text.t2; else return haxegon_Text.t3 + Math.floor(haxegon_Gfx.screenheight - haxegon_Text.currentheight());
	}
	return Math.floor(y);
};
haxegon_Text.aligntextx = function(t,x) {
	if(x <= -5000) {
		haxegon_Text.t1 = x - haxegon_Text.CENTER;
		haxegon_Text.t2 = x - haxegon_Text.LEFT;
		haxegon_Text.t3 = x - haxegon_Text.RIGHT;
		if(haxegon_Text.t1 == 0 || Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t2) && Math.abs(haxegon_Text.t1) < Math.abs(haxegon_Text.t3)) return haxegon_Text.t1 + Math.floor(haxegon_Text.width(t) / 2); else if(haxegon_Text.t2 == 0 || Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t1) && Math.abs(haxegon_Text.t2) < Math.abs(haxegon_Text.t3)) return haxegon_Text.t2; else return haxegon_Text.t3 + haxegon_Text.width(t);
	}
	return x;
};
haxegon_Text.aligntexty = function(t,y) {
	haxe_Log.trace("warning: unimplemented function aligntexty",{ fileName : "Text.hx", lineNumber : 357, className : "haxegon.Text", methodName : "aligntexty"});
	return 0;
};
haxegon_Text.display = function(x,y,text,color,alpha) {
	if(alpha == null) alpha = 1.0;
	if(color == null) color = 16777215;
	if(text == "") return;
	if(haxegon_Gfx.drawstate != 5) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.quadbatchcount++;
	if(haxegon_Gfx.quadbatchcount >= 16383) haxegon_Gfx.endquadbatch();
	haxegon_Gfx.drawstate = 5;
	if(haxegon_Text.typeface.length == 0) haxegon_Text.defaultfont();
	haxegon_Text.typeface[haxegon_Text.currentindex].nexttextfield();
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_color(color);
	haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_text(text);
	if(haxegon_Text.textalign == haxegon_Text.LEFT) haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_hAlign("left");
	if(haxegon_Text.textalign == haxegon_Text.CENTER) haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_hAlign("center");
	if(haxegon_Text.textalign == haxegon_Text.RIGHT) haxegon_Text.typeface[haxegon_Text.currentindex].tf.set_hAlign("right");
	if(haxegon_Text.wordwrapwidth > 0) haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(false); else haxegon_Text.typeface[haxegon_Text.currentindex].updatewidth(true);
	x = haxegon_Text.alignx(x);
	y = haxegon_Text.aligny(y);
	x -= haxegon_Text.aligntextx(text,haxegon_Text.textalign);
	haxegon_Text.fontmatrix.identity();
	if(haxegon_Text.textrotate != 0) {
		if(haxegon_Text.textrotatexpivot != 0.0) haxegon_Text.tempxpivot = haxegon_Text.aligntextx(text,haxegon_Text.textrotatexpivot);
		if(haxegon_Text.textrotateypivot != 0.0) haxegon_Text.tempypivot = haxegon_Text.aligntexty(text,haxegon_Text.textrotateypivot);
		haxegon_Text.fontmatrix.translate(-haxegon_Text.tempxpivot,-haxegon_Text.tempypivot);
		haxegon_Text.fontmatrix.rotate(haxegon_Text.textrotate * 3.1415 / 180);
		haxegon_Text.fontmatrix.translate(haxegon_Text.tempxpivot,haxegon_Text.tempypivot);
	}
	haxegon_Text.fontmatrix.translate(x,y);
	if(haxegon_Text.typeface[haxegon_Text.currentindex].type == "ttf") haxegon_Gfx.drawto.draw(haxegon_Text.typeface[haxegon_Text.currentindex].tf,haxegon_Text.fontmatrix,alpha); else if(alpha != 1.0) haxegon_Gfx.drawto.draw(haxegon_Text.typeface[haxegon_Text.currentindex].tf,haxegon_Text.fontmatrix,alpha); else {
		haxegon_Text.typeface[haxegon_Text.currentindex].tf.createComposedContents();
		haxegon_Gfx.quadbatch.addQuadBatch(haxegon_Text.typeface[haxegon_Text.currentindex].tf.mQuadBatch,1.0,haxegon_Text.fontmatrix);
	}
};
haxegon_Text.defaultfont = function() {
	haxegon_Text.addfont(null,1);
	haxegon_Text.setfont("default",1);
};
haxegon_Text.setfont = function(fontname,size) {
	if(size == null) size = 1;
	if(!haxegon_Text.fontfileindex.exists(fontname)) haxegon_Text.addfont(fontname,size);
	if(fontname != haxegon_Text.currentfont) {
		haxegon_Text.currentfont = fontname;
		if(haxegon_Text.typefaceindex.exists(haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize))) haxegon_Text.currentindex = haxegon_Text.typefaceindex.get(haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize)); else {
			haxegon_Text.addtypeface(haxegon_Text.currentfont,haxegon_Text.currentsize);
			haxegon_Text.currentindex = haxegon_Text.typefaceindex.get(haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize));
		}
	}
	haxegon_Text.changesize(size);
};
haxegon_Text.changesize = function(t) {
	if(t != haxegon_Text.currentsize) {
		if(t == -1) {
			t = 1;
			if(haxegon_Text.fontfileindex.exists(haxegon_Text.currentfont)) {
				if(haxegon_Text.fontfile[haxegon_Text.fontfileindex.get(haxegon_Text.currentfont)].type == "ttf") t = 24;
			} else haxegon_Debug.log("Error: changesize called on a font that hasn't been loaded yet",{ fileName : "Text.hx", lineNumber : 442, className : "haxegon.Text", methodName : "changesize"});
		}
		haxegon_Text.fontlastsize.set(haxegon_Text.currentfont,t);
		haxegon_Text.currentsize = t;
		if(haxegon_Text.currentfont != "null") {
			if(haxegon_Text.typefaceindex.exists(haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize))) haxegon_Text.currentindex = haxegon_Text.typefaceindex.get(haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize)); else {
				haxegon_Text.addtypeface(haxegon_Text.currentfont,haxegon_Text.currentsize);
				haxegon_Text.currentindex = haxegon_Text.typefaceindex.get(haxegon_Text.currentfont + "_" + Std.string(haxegon_Text.currentsize));
			}
		} else {
			haxegon_Text.addfont(null,t);
			haxegon_Text.setfont("default",t);
		}
	}
};
haxegon_Text.resettextfields = function() {
	var _g1 = 0;
	var _g = haxegon_Text.typeface.length;
	while(_g1 < _g) {
		var i = _g1++;
		haxegon_Text.typeface[i].reset();
	}
};
haxegon_Text.addfont = function(fontname,defaultsize) {
	if(defaultsize == null) defaultsize = -1;
	haxegon_Text.fontfile.push(new haxegon_Fontfile(fontname));
	if(fontname == null) fontname = "default";
	haxegon_Text.fontfileindex.set(fontname,haxegon_Text.fontfile.length - 1);
	if(defaultsize == -1) {
		if(haxegon_Text.fontfile[haxegon_Text.fontfile.length - 1].type == "ttf") defaultsize = 24; else defaultsize = 1;
	}
	haxegon_Text.changesize(defaultsize);
};
haxegon_Text.addtypeface = function(_name,_size) {
	haxegon_Text.typeface.push(new haxegon_Fontclass(_name,_size));
	haxegon_Text.typefaceindex.set(_name + "_" + (_size == null?"null":"" + _size),haxegon_Text.typeface.length - 1);
};
haxegon_Text.get_font = function() {
	return haxegon_Text.currentfont;
};
haxegon_Text.set_font = function(fontname) {
	if(fontname == "" || fontname.toLowerCase() == "default") fontname = "default";
	if(fontname == haxegon_Text.currentfont) return haxegon_Text.currentfont;
	haxegon_Gfx.endquadbatch();
	haxegon_Text.setfont(fontname,haxegon_Text.fontlastsize.exists(fontname)?haxegon_Text.fontlastsize.get(fontname):-1);
	return haxegon_Text.currentfont;
};
haxegon_Text.get_size = function() {
	return haxegon_Text.currentsize;
};
haxegon_Text.set_size = function(fontsize) {
	if(haxegon_Text.currentsize != fontsize) {
		haxegon_Gfx.endquadbatch();
		haxegon_Text.changesize(fontsize);
	}
	return haxegon_Text.currentsize;
};
var haxegon_embeddedassets_DefaultFont = function() { };
$hxClasses["haxegon.embeddedassets.DefaultFont"] = haxegon_embeddedassets_DefaultFont;
haxegon_embeddedassets_DefaultFont.__name__ = ["haxegon","embeddedassets","DefaultFont"];
haxegon_embeddedassets_DefaultFont.__properties__ = {get_xmlstring:"get_xmlstring",get_bitmapdata:"get_bitmapdata"}
haxegon_embeddedassets_DefaultFont.get_bitmapdata = function() {
	if(haxegon_embeddedassets_DefaultFont._actualbitmapdata == null) {
		haxegon_embeddedassets_DefaultFont.fontbytearray = [2027613595,-581768128,142931965,1599786917,1449500863,115525934,-597157437,607386676,226082174,-875085895,-84342018,-282799619,-1711489809,1257204205,1221055983,-1481301091,1475831679,-1955288390,-1300789042,1153273692,-1552181571,2071377553,1593130727,969503696,2002234949,-90376824,-10092881,-391761504,-1017225729,1473743714,226348780,-623527267,2120021503,-1904781342,-1804899329,-744576714,1147967404,-1748672041,-702735455,-1236273346,-1037773316,-389636461,-1381287706,-1343374206,1639068502,-142285677,-1964028730,-165108145,-966199844,346834301,-1139616857,-247493215,420384354,1378190933,1968633413,-1924463385,976830267,2011560264,1843455499,98540750,-1322551367,1055708174,1247586008,-1592594680,658616165,-1742697703,1688163775,-1661534390,1554258093,1788554974,-1402937048,2006105499,-496490321,937558004,-1398105004,-1482828836,-716102766,2084730230,-698691847,1307655758,787102327,-1221150301,-1236062013,503246788,739766116,-161488525,-1145563257,-1284117754,-2100089859,111671249,-844410100,-329057268,1595055194,1029429142,706530250,-892672055,-1656887671,1048625979,1442433932,190018433,316921305,227909610,-529834626,-1316300978,1972540147,988153672,-1628575187,1180191973,-920241868,-1023438221,-1531163003,326200285,1244523726,245939347,851437044,713686863,-258827778,170387142,-1232471786,904280889,-1215057037,2102849887,-1789154832,-832750311,-356028913,1170836810,-22595244,1574956415,1415785097,257817008,-1813535619,-831643737,-1195271859,1425759684,-689430831,-1095812569,-751182029,-302054301,1734090989,1973991611,603919228,819535785,-838128903,-542266454,946448911,1211174605,-14863407,1338900452,-1693964401,1685998458,1272250325,-1160603361,1920513068,2006055679,251412317,-11570806,-1719686283,-237770113,1707960574,-1208280165,-1815233538,1332122174,-1715243090,1307705107,2091072351,-1345434948,67063786,-6948878,-1151113,1465275966,322916588,1198732257,1134358490,848096206,-1364218820,771708925,-1282793687,1877176923,1529589420,1883131561,432544777,-715920085,-1347638044,1044609782,-1644593307,1709571610,-1630078044,1591695993,1709513205,-894165,737095135,-1558183655];
		haxegon_embeddedassets_DefaultFont._actualbitmapdata = new openfl_display_BitmapData(256,22);
		var bmpBytes = new openfl_utils_ByteArrayData(0);
		bmpBytes.__endian = 0;
		var _g1 = 0;
		var _g = haxegon_embeddedassets_DefaultFont.fontbytearray.length;
		while(_g1 < _g) {
			var i = _g1++;
			bmpBytes.writeUnsignedInt(haxegon_embeddedassets_DefaultFont.fontbytearray[i]);
		}
		bmpBytes.uncompress();
		haxegon_embeddedassets_DefaultFont._actualbitmapdata.setPixels(new openfl_geom_Rectangle(0,0,256,22),bmpBytes);
		bmpBytes.clear();
	}
	return haxegon_embeddedassets_DefaultFont._actualbitmapdata;
};
haxegon_embeddedassets_DefaultFont.get_xmlstring = function() {
	return haxegon_embeddedassets_DefaultFont.XML_DATA;
};
var starling_filters_FragmentFilter = function(numPasses,resolution) {
	if(resolution == null) resolution = 1.0;
	if(numPasses == null) numPasses = 1;
	this.mHelperRect2 = new openfl_geom_Rectangle();
	this.mHelperRect = new openfl_geom_Rectangle();
	this.mHelperMatrix3D = new openfl_geom_Matrix3D();
	this.mHelperMatrix = new openfl_geom_Matrix();
	this.mMvpConstantID = 0;
	this.mBaseTextureID = 0;
	this.mTexCoordsAtID = 1;
	this.mVertexPosAtID = 0;
	if(numPasses < 1) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("At least one pass is required."));
	this.mNumPasses = numPasses;
	this.mMarginX = this.mMarginY = 0.0;
	this.mOffsetX = this.mOffsetY = 0;
	this.mResolution = resolution;
	this.mPassTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMode = "replace";
	this.mVertexData = new starling_utils_VertexData(4);
	this.mVertexData.setTexCoords(0,0,0);
	this.mVertexData.setTexCoords(1,1,0);
	this.mVertexData.setTexCoords(2,0,1);
	this.mVertexData.setTexCoords(3,1,1);
	this.mIndexData = (function($this) {
		var $r;
		var a = [0,1,2,1,3,2];
		var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this));
	if(starling_core_Starling.get_current().get_contextValid()) this.createPrograms();
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.filters.FragmentFilter"] = starling_filters_FragmentFilter;
starling_filters_FragmentFilter.__name__ = ["starling","filters","FragmentFilter"];
starling_filters_FragmentFilter.prototype = {
	mVertexPosAtID: null
	,mTexCoordsAtID: null
	,mBaseTextureID: null
	,mMvpConstantID: null
	,mNumPasses: null
	,mPassTextures: null
	,mMode: null
	,mResolution: null
	,mMarginX: null
	,mMarginY: null
	,mOffsetX: null
	,mOffsetY: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mCacheRequested: null
	,mCache: null
	,mHelperMatrix: null
	,mHelperMatrix3D: null
	,mHelperRect: null
	,mHelperRect2: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) this.mVertexBuffer.dispose();
		if(this.mIndexBuffer != null) this.mIndexBuffer.dispose();
		this.disposePassTextures();
		this.disposeCache();
	}
	,onContextCreated: function(event) {
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.disposePassTextures();
		this.createPrograms();
		if(this.mCache != null) this.cache();
	}
	,render: function(object,support,parentAlpha) {
		if(this.get_mode() == "above") object.render(support,parentAlpha);
		if(this.mCacheRequested) {
			this.mCacheRequested = false;
			this.mCache = this.renderPasses(object,support,1.0,true);
			this.disposePassTextures();
		}
		if(this.mCache != null) this.mCache.render(support,parentAlpha); else this.renderPasses(object,support,parentAlpha,false);
		if(this.get_mode() == "below") object.render(support,parentAlpha);
	}
	,renderPasses: function(object,support,parentAlpha,intoCache) {
		if(intoCache == null) intoCache = false;
		var passTexture;
		var cacheTexture = null;
		var context = starling_core_Starling.get_current().get_context();
		var targetSpace = object.get_stage();
		var stage = starling_core_Starling.get_current().get_stage();
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var projMatrix = this.mHelperMatrix;
		var projMatrix3D = this.mHelperMatrix3D;
		var bounds = this.mHelperRect;
		var boundsPot = this.mHelperRect2;
		var previousStencilRefValue;
		var previousRenderTarget;
		var intersectWithStage;
		if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		intersectWithStage = !intoCache && this.mOffsetX == 0 && this.mOffsetY == 0;
		this.calculateBounds(object,targetSpace,this.mResolution * scale,intersectWithStage,bounds,boundsPot);
		if(bounds.isEmpty()) {
			this.disposePassTextures();
			if(intoCache) return new starling_display_QuadBatch(); else return null;
		}
		this.updateBuffers(context,boundsPot);
		this.updatePassTextures(boundsPot.width,boundsPot.height,this.mResolution * scale);
		support.finishQuadBatch();
		support.raiseDrawCount(this.mNumPasses);
		support.pushMatrix();
		support.pushMatrix3D();
		support.pushClipRect(boundsPot,false);
		projMatrix.copyFrom(support.get_projectionMatrix());
		projMatrix3D.copyFrom(support.get_projectionMatrix3D());
		previousRenderTarget = support.get_renderTarget();
		previousStencilRefValue = support.get_stencilReferenceValue();
		if(previousRenderTarget != null && !starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement()) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("To nest filters, you need at least Flash Player / AIR version 15."));
		if(intoCache) cacheTexture = starling_textures_Texture.empty(boundsPot.width,boundsPot.height,true,false,true,this.mResolution * scale);
		support.set_renderTarget(this.mPassTextures.data.get(0));
		support.clear();
		support.set_blendMode("normal");
		support.set_stencilReferenceValue(0);
		support.setProjectionMatrix(bounds.x,bounds.y,boundsPot.width,boundsPot.height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
		object.render(support,parentAlpha);
		support.finishQuadBatch();
		starling_core_RenderSupport.setBlendFactors(true);
		support.loadIdentity();
		context.setVertexBufferAt(this.mVertexPosAtID,this.mVertexBuffer,0,2);
		context.setVertexBufferAt(this.mTexCoordsAtID,this.mVertexBuffer,6,2);
		var _g1 = 0;
		var _g = this.mNumPasses;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < this.mNumPasses - 1) {
				support.set_renderTarget(this.getPassTexture(i + 1));
				support.clear();
			} else if(intoCache) {
				support.set_renderTarget(cacheTexture);
				support.clear();
			} else {
				support.popClipRect();
				support.set_projectionMatrix(projMatrix);
				support.set_projectionMatrix3D(projMatrix3D);
				support.set_renderTarget(previousRenderTarget);
				support.translateMatrix(this.mOffsetX,this.mOffsetY);
				support.set_stencilReferenceValue(previousStencilRefValue);
				support.set_blendMode(object.get_blendMode());
				support.applyBlendMode(true);
			}
			passTexture = this.getPassTexture(i);
			context.setProgramConstantsFromMatrix(1,this.mMvpConstantID,support.get_mvpMatrix3D(),true);
			context.setTextureAt(this.mBaseTextureID,passTexture.get_base());
			this.activate(i,context,passTexture);
			context.drawTriangles(this.mIndexBuffer,0,2);
			this.deactivate(i,context,passTexture);
		}
		context.setVertexBufferAt(this.mVertexPosAtID,null);
		context.setVertexBufferAt(this.mTexCoordsAtID,null);
		context.setTextureAt(this.mBaseTextureID,null);
		support.popMatrix();
		support.popMatrix3D();
		if(intoCache) {
			support.get_projectionMatrix().copyFrom(projMatrix);
			support.get_projectionMatrix3D().copyFrom(projMatrix3D);
			support.set_renderTarget(previousRenderTarget);
			support.popClipRect();
			var quadBatch = new starling_display_QuadBatch();
			var image = new starling_display_Image(cacheTexture);
			object.getTransformationMatrix(targetSpace,starling_filters_FragmentFilter.sTransformationMatrix).invert();
			starling_utils_MatrixUtil.prependTranslation(starling_filters_FragmentFilter.sTransformationMatrix,bounds.x + this.mOffsetX,bounds.y + this.mOffsetY);
			quadBatch.addImage(image,1.0,starling_filters_FragmentFilter.sTransformationMatrix);
			quadBatch.set_ownsTexture(true);
			return quadBatch;
		} else return null;
	}
	,updateBuffers: function(context,bounds) {
		this.mVertexData.setPosition(0,bounds.x,bounds.y);
		this.mVertexData.setPosition(1,bounds.get_right(),bounds.y);
		this.mVertexData.setPosition(2,bounds.x,bounds.get_bottom());
		this.mVertexData.setPosition(3,bounds.get_right(),bounds.get_bottom());
		if(this.mVertexBuffer == null) {
			this.mVertexBuffer = context.createVertexBuffer(4,8);
			this.mIndexBuffer = context.createIndexBuffer(6);
			this.mIndexBuffer.uploadFromVector(this.mIndexData,0,6);
		}
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,4);
	}
	,updatePassTextures: function(width,height,scale) {
		var numPassTextures;
		if(this.mNumPasses > 1) numPassTextures = 2; else numPassTextures = 1;
		var needsUpdate = this.mPassTextures.data.get_length() != numPassTextures || Math.abs(this.mPassTextures.data.get(0).get_nativeWidth() - width * scale) > 0.1 || Math.abs(this.mPassTextures.data.get(0).get_nativeHeight() - height * scale) > 0.1;
		if(needsUpdate) {
			this.disposePassTextures();
			var _g = 0;
			while(_g < numPassTextures) {
				var i = _g++;
				var value = starling_textures_Texture.empty(width,height,true,false,true,scale);
				this.mPassTextures.data.set(i,value);
			}
		}
	}
	,getPassTexture: function(pass) {
		return this.mPassTextures.data.get(pass % 2);
	}
	,calculateBounds: function(object,targetSpace,scale,intersectWithStage,resultRect,resultPotRect) {
		var stage;
		var marginX = this.mMarginX;
		var marginY = this.mMarginY;
		if(js_Boot.__instanceof(targetSpace,starling_display_Stage)) {
			stage = targetSpace;
			if(object == stage || object == object.get_root()) {
				marginX = marginY = 0;
				resultRect.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
			} else object.getBounds(stage,resultRect);
			if(intersectWithStage) {
				starling_filters_FragmentFilter.sStageBounds.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
				starling_utils_RectangleUtil.intersect(resultRect,starling_filters_FragmentFilter.sStageBounds,resultRect);
			}
		} else object.getBounds(targetSpace,resultRect);
		if(!resultRect.isEmpty()) {
			resultRect.inflate(marginX,marginY);
			var minSize = 64 / scale | 0;
			var minWidth;
			if(resultRect.width > minSize) minWidth = resultRect.width; else minWidth = minSize;
			var minHeight;
			if(resultRect.height > minSize) minHeight = resultRect.height; else minHeight = minSize;
			resultPotRect.setTo(resultRect.x,resultRect.y,starling_utils_PowerOfTwo.getNextPowerOfTwo(minWidth * scale | 0) / scale,starling_utils_PowerOfTwo.getNextPowerOfTwo(minHeight * scale | 0) / scale);
		}
	}
	,disposePassTextures: function() {
		var _g = 0;
		var _g1 = this.mPassTextures;
		while(_g < _g1.data.get_length()) {
			var texture = _g1.data.get(_g);
			++_g;
			texture.dispose();
		}
		this.mPassTextures.data.set_length(0);
	}
	,disposeCache: function() {
		if(this.mCache != null) {
			this.mCache.dispose();
			this.mCache = null;
		}
	}
	,createPrograms: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Method has to be implemented in subclass!"));
	}
	,activate: function(pass,context,texture) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Method has to be implemented in subclass!"));
	}
	,deactivate: function(pass,context,texture) {
	}
	,assembleAgal: function(fragmentShader,vertexShader) {
		if(fragmentShader == null) fragmentShader = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
		if(vertexShader == null) vertexShader = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
		return starling_core_RenderSupport.assembleAgal(vertexShader,fragmentShader);
	}
	,cache: function() {
		this.mCacheRequested = true;
		this.disposeCache();
	}
	,clearCache: function() {
		this.mCacheRequested = false;
		this.disposeCache();
	}
	,compile: function(object) {
		var support;
		var stage = object.get_stage();
		var quadBatch;
		support = new starling_core_RenderSupport();
		object.getTransformationMatrix(stage,support.get_modelViewMatrix());
		quadBatch = this.renderPasses(object,support,1.0,true);
		support.dispose();
		return quadBatch;
	}
	,get_isCached: function() {
		return this.mCache != null || this.mCacheRequested;
	}
	,get_resolution: function() {
		return this.mResolution;
	}
	,set_resolution: function(value) {
		if(value <= 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Resolution must be > 0")); else this.mResolution = value;
		return this.mResolution;
	}
	,get_mode: function() {
		return this.mMode;
	}
	,set_mode: function(value) {
		return this.mMode = value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		return this.mOffsetX = value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		return this.mOffsetY = value;
	}
	,get_marginX: function() {
		return this.mMarginX;
	}
	,set_marginX: function(value) {
		return this.mMarginX = value;
	}
	,get_marginY: function() {
		return this.mMarginY;
	}
	,set_marginY: function(value) {
		return this.mMarginY = value;
	}
	,set_numPasses: function(value) {
		return this.mNumPasses = value;
	}
	,get_numPasses: function() {
		return this.mNumPasses;
	}
	,get_vertexPosAtID: function() {
		return this.mVertexPosAtID;
	}
	,set_vertexPosAtID: function(value) {
		return this.mVertexPosAtID = value;
	}
	,get_texCoordsAtID: function() {
		return this.mTexCoordsAtID;
	}
	,set_texCoordsAtID: function(value) {
		return this.mTexCoordsAtID = value;
	}
	,get_baseTextureID: function() {
		return this.mBaseTextureID;
	}
	,set_baseTextureID: function(value) {
		return this.mBaseTextureID = value;
	}
	,get_mvpConstantID: function() {
		return this.mMvpConstantID;
	}
	,set_mvpConstantID: function(value) {
		return this.mMvpConstantID = value;
	}
	,__class__: starling_filters_FragmentFilter
	,__properties__: {set_mvpConstantID:"set_mvpConstantID",get_mvpConstantID:"get_mvpConstantID",set_baseTextureID:"set_baseTextureID",get_baseTextureID:"get_baseTextureID",set_texCoordsAtID:"set_texCoordsAtID",get_texCoordsAtID:"get_texCoordsAtID",set_vertexPosAtID:"set_vertexPosAtID",get_vertexPosAtID:"get_vertexPosAtID",set_numPasses:"set_numPasses",get_numPasses:"get_numPasses",set_marginY:"set_marginY",get_marginY:"get_marginY",set_marginX:"set_marginX",get_marginX:"get_marginX",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_mode:"set_mode",get_mode:"get_mode",set_resolution:"set_resolution",get_resolution:"get_resolution",get_isCached:"get_isCached"}
};
var haxegon_filters_BaseFilter = function() {
	starling_filters_FragmentFilter.call(this,1,1.0);
};
$hxClasses["haxegon.filters.BaseFilter"] = haxegon_filters_BaseFilter;
haxegon_filters_BaseFilter.__name__ = ["haxegon","filters","BaseFilter"];
haxegon_filters_BaseFilter.__super__ = starling_filters_FragmentFilter;
haxegon_filters_BaseFilter.prototype = $extend(starling_filters_FragmentFilter.prototype,{
	FRAGMENT_SHADER: null
	,VERTEX_SHADER: null
	,program: null
	,dispose: function() {
		if(this.program != null) this.program.dispose();
		starling_filters_FragmentFilter.prototype.dispose.call(this);
	}
	,createPrograms: function() {
		this.setAgal();
		this.program = this.assembleAgal(this.FRAGMENT_SHADER,this.VERTEX_SHADER);
	}
	,setAgal: function() {
	}
	,activate: function(pass,context,texture) {
		context.setProgram(this.program);
	}
	,__class__: haxegon_filters_BaseFilter
});
var haxegon_filters_BloomFilter = function(_blur,_red,_green,_blue,numPasses) {
	if(numPasses == null) numPasses = 1;
	if(_blue == null) _blue = 1;
	if(_green == null) _green = 1;
	if(_red == null) _red = 1;
	if(_blur == null) _blur = 2;
	haxegon_filters_BaseFilter.call(this);
	this.blur = _blur;
	this.red = _red;
	this.green = _green;
	this.blue = _blue;
	this.set_numPasses(numPasses);
	var a = [0,0,0,2.5];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	this.fc0 = vector;
	var a1 = [-1.0,0.0,1.0,9.0];
	var vector1 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 0;
	var _g2 = a1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vector1.data.set(i1,a1[i1]);
	}
	this.fc1 = vector1;
	var a2 = [1.0,1.0,1.0,1.0];
	var vector2 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g12 = 0;
	var _g3 = a2.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		vector2.data.set(i2,a2[i2]);
	}
	this._color = vector2;
};
$hxClasses["haxegon.filters.BloomFilter"] = haxegon_filters_BloomFilter;
haxegon_filters_BloomFilter.__name__ = ["haxegon","filters","BloomFilter"];
haxegon_filters_BloomFilter.__super__ = haxegon_filters_BaseFilter;
haxegon_filters_BloomFilter.prototype = $extend(haxegon_filters_BaseFilter.prototype,{
	fc0: null
	,fc1: null
	,_color: null
	,red: null
	,green: null
	,blue: null
	,blur: null
	,setAgal: function() {
		this.FRAGMENT_SHADER = "tex ft0, v0, fs0<2d, clamp, linear, mipnone>  \n" + "mov ft1, fc0.xxxx  \n" + "mov ft2.x, fc0.y  \n" + "mul ft2.x, ft2.x, fc0.w  \n" + "div ft2.x, fc1.z, ft2.x  \n" + "mov ft2.y, fc0.z  \n" + "mul ft2.y, ft2.y, fc0.w  \n" + "div ft2.y, fc1.z, ft2.y  \n" + "mov ft3.xy, fc1.xx  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.xy  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.xz  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.yx  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.yy  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.yz  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.zx  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.zy  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "mov ft3.xy, fc1.zz  \n" + "mul ft3.xy, ft3.xy, ft2.xy  \n" + "add ft3.xy, ft3.xy, v0.xy  \n" + "tex ft4, ft3.xy, fs0<2d, clamp, linear, mipnone>  \n" + "add ft1, ft1, ft4  \n" + "div ft1, ft1, fc1.wwww  \n" + "add ft1, ft1, ft0  \n" + "mul oc, ft1, fc2";
	}
	,activate: function(pass,context,texture) {
		var value = texture.get_width();
		this.fc0.data.set(1,value);
		var value1 = texture.get_height();
		this.fc0.data.set(2,value1);
		this.fc0.data.set(3,1 / this.blur);
		this._color.data.set(0,this.red);
		this._color.data.set(1,this.green);
		this._color.data.set(2,this.blue);
		context.setProgramConstantsFromVector(0,0,this.fc0,1);
		context.setProgramConstantsFromVector(0,1,this.fc1,1);
		context.setProgramConstantsFromVector(0,2,this._color,1);
		haxegon_filters_BaseFilter.prototype.activate.call(this,pass,context,texture);
	}
	,__class__: haxegon_filters_BloomFilter
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) return;
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null) this.parent.buffer.__srcHowl.pause(this.id);
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null) this.parent.buffer.__srcHowl.stop(this.id);
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else this.parent.buffer.__srcHowl.stop(this.id);
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) return 0;
		if(this.completed) return this.getLength(); else if(this.parent.buffer != null) {
			var time = Std["int"](this.parent.buffer.__srcHowl.seek(this.id) * 1000) - this.parent.offset;
			if(time < 0) return 0;
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) pos = 0;
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null) this.parent.buffer.__srcHowl.volume(value,this.id);
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) return this.length;
		if(this.parent.buffer != null) return Std["int"](this.parent.buffer.__srcHowl.duration() * 1000);
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5GLRenderContext = function(context) {
	this.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
	this.TIMEOUT_IGNORED = -1;
	this.INVALID_INDEX = -1;
	this.DEPTH32F_STENCIL8 = 36013;
	this.DEPTH_COMPONENT32F = 36012;
	this.DYNAMIC_COPY = 35050;
	this.DYNAMIC_READ = 35049;
	this.STATIC_COPY = 35046;
	this.STATIC_READ = 35045;
	this.STREAM_COPY = 35042;
	this.STREAM_READ = 35041;
	this.DEPTH_COMPONENT24 = 33190;
	this.MAX = 32776;
	this.MIN = 32775;
	this.STENCIL = 6146;
	this.DEPTH = 6145;
	this.COLOR = 6144;
	this.SYNC_FLUSH_COMMANDS_BIT = 1;
	this.WAIT_FAILED = 37149;
	this.CONDITION_SATISFIED = 37148;
	this.TIMEOUT_EXPIRED = 37147;
	this.ALREADY_SIGNALED = 37146;
	this.SIGNALED = 37145;
	this.UNSIGNALED = 37144;
	this.SYNC_GPU_COMMANDS_COMPLETE = 37143;
	this.SYNC_FENCE = 37142;
	this.SYNC_FLAGS = 37141;
	this.SYNC_STATUS = 37140;
	this.SYNC_CONDITION = 37139;
	this.OBJECT_TYPE = 37138;
	this.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
	this.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
	this.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
	this.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
	this.UNIFORM_BLOCK_DATA_SIZE = 35392;
	this.UNIFORM_BLOCK_BINDING = 35391;
	this.UNIFORM_IS_ROW_MAJOR = 35390;
	this.UNIFORM_MATRIX_STRIDE = 35389;
	this.UNIFORM_ARRAY_STRIDE = 35388;
	this.UNIFORM_OFFSET = 35387;
	this.UNIFORM_BLOCK_INDEX = 35386;
	this.UNIFORM_SIZE = 35384;
	this.UNIFORM_TYPE = 35383;
	this.ACTIVE_UNIFORM_BLOCKS = 35382;
	this.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
	this.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
	this.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
	this.MAX_UNIFORM_BLOCK_SIZE = 35376;
	this.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
	this.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
	this.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
	this.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
	this.UNIFORM_BUFFER_SIZE = 35370;
	this.UNIFORM_BUFFER_START = 35369;
	this.UNIFORM_BUFFER_BINDING = 35368;
	this.UNIFORM_BUFFER = 35345;
	this.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
	this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
	this.RENDERBUFFER_SAMPLES = 36011;
	this.READ_FRAMEBUFFER_BINDING = 36010;
	this.DRAW_FRAMEBUFFER = 36009;
	this.READ_FRAMEBUFFER = 36008;
	this.DRAW_FRAMEBUFFER_BINDING = 36006;
	this.DEPTH24_STENCIL8 = 35056;
	this.FRAMEBUFFER_DEFAULT = 33304;
	this.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
	this.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
	this.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
	this.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
	this.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
	this.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
	this.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
	this.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
	this.TRANSFORM_FEEDBACK_BINDING = 36389;
	this.TRANSFORM_FEEDBACK_ACTIVE = 36388;
	this.TRANSFORM_FEEDBACK_PAUSED = 36387;
	this.TRANSFORM_FEEDBACK = 36386;
	this.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
	this.TRANSFORM_FEEDBACK_BUFFER = 35982;
	this.SEPARATE_ATTRIBS = 35981;
	this.INTERLEAVED_ATTRIBS = 35980;
	this.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
	this.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
	this.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
	this.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
	this.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
	this.TRANSFORM_FEEDBACK_VARYINGS = 35971;
	this.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
	this.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
	this.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
	this.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
	this.SIGNED_NORMALIZED = 36764;
	this.UNSIGNED_NORMALIZED = 35863;
	this.UNSIGNED_INT_VEC4 = 36296;
	this.UNSIGNED_INT_VEC3 = 36295;
	this.UNSIGNED_INT_VEC2 = 36294;
	this.FLOAT_MAT4x3 = 35690;
	this.FLOAT_MAT4x2 = 35689;
	this.FLOAT_MAT3x4 = 35688;
	this.FLOAT_MAT3x2 = 35687;
	this.FLOAT_MAT2x4 = 35686;
	this.FLOAT_MAT2x3 = 35685;
	this.COPY_WRITE_BUFFER_BINDING = 36663;
	this.COPY_READ_BUFFER_BINDING = 36662;
	this.COPY_WRITE_BUFFER = 36663;
	this.COPY_READ_BUFFER = 36662;
	this.PIXEL_UNPACK_BUFFER_BINDING = 35055;
	this.PIXEL_PACK_BUFFER_BINDING = 35053;
	this.PIXEL_UNPACK_BUFFER = 35052;
	this.PIXEL_PACK_BUFFER = 35051;
	this.SAMPLER_BINDING = 35097;
	this.MAX_SAMPLES = 36183;
	this.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
	this.UNSIGNED_INT_SAMPLER_CUBE = 36308;
	this.UNSIGNED_INT_SAMPLER_3D = 36307;
	this.UNSIGNED_INT_SAMPLER_2D = 36306;
	this.INT_SAMPLER_2D_ARRAY = 36303;
	this.INT_SAMPLER_CUBE = 36300;
	this.INT_SAMPLER_3D = 36299;
	this.INT_SAMPLER_2D = 36298;
	this.SAMPLER_CUBE_SHADOW = 36293;
	this.SAMPLER_2D_ARRAY_SHADOW = 36292;
	this.SAMPLER_2D_ARRAY = 36289;
	this.SAMPLER_2D_SHADOW = 35682;
	this.SAMPLER_3D = 35679;
	this.COLOR_ATTACHMENT15 = 36079;
	this.COLOR_ATTACHMENT14 = 36078;
	this.COLOR_ATTACHMENT13 = 36077;
	this.COLOR_ATTACHMENT12 = 36076;
	this.COLOR_ATTACHMENT11 = 36075;
	this.COLOR_ATTACHMENT10 = 36074;
	this.COLOR_ATTACHMENT9 = 36073;
	this.COLOR_ATTACHMENT8 = 36072;
	this.COLOR_ATTACHMENT7 = 36071;
	this.COLOR_ATTACHMENT6 = 36070;
	this.COLOR_ATTACHMENT5 = 36069;
	this.COLOR_ATTACHMENT4 = 36068;
	this.COLOR_ATTACHMENT3 = 36067;
	this.COLOR_ATTACHMENT2 = 36066;
	this.COLOR_ATTACHMENT1 = 36065;
	this.MAX_COLOR_ATTACHMENTS = 36063;
	this.DRAW_BUFFER15 = 34868;
	this.DRAW_BUFFER14 = 34867;
	this.DRAW_BUFFER13 = 34866;
	this.DRAW_BUFFER12 = 34865;
	this.DRAW_BUFFER11 = 34864;
	this.DRAW_BUFFER10 = 34863;
	this.DRAW_BUFFER9 = 34862;
	this.DRAW_BUFFER8 = 34861;
	this.DRAW_BUFFER7 = 34860;
	this.DRAW_BUFFER6 = 34859;
	this.DRAW_BUFFER5 = 34858;
	this.DRAW_BUFFER4 = 34857;
	this.DRAW_BUFFER3 = 34856;
	this.DRAW_BUFFER2 = 34855;
	this.DRAW_BUFFER1 = 34854;
	this.DRAW_BUFFER0 = 34853;
	this.MAX_DRAW_BUFFERS = 34852;
	this.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
	this.ANY_SAMPLES_PASSED = 35887;
	this.QUERY_RESULT_AVAILABLE = 34919;
	this.QUERY_RESULT = 34918;
	this.CURRENT_QUERY = 34917;
	this.INT_2_10_10_10_REV = 36255;
	this.RG_INTEGER = 33320;
	this.RG = 33319;
	this.HALF_FLOAT = 5131;
	this.UNSIGNED_INT_24_8 = 34042;
	this.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
	this.UNSIGNED_INT_5_9_9_9_REV = 35902;
	this.UNSIGNED_INT_10F_11F_11F_REV = 35899;
	this.UNSIGNED_INT_2_10_10_10_REV = 33640;
	this.TEXTURE_IMMUTABLE_LEVELS = 33503;
	this.TEXTURE_IMMUTABLE_FORMAT = 37167;
	this.RGB10_A2UI = 36975;
	this.RGBA8_SNORM = 36759;
	this.RGB8_SNORM = 36758;
	this.RG8_SNORM = 36757;
	this.R8_SNORM = 36756;
	this.RG32UI = 33340;
	this.RG32I = 33339;
	this.RG16UI = 33338;
	this.RG16I = 33337;
	this.RG8UI = 33336;
	this.RG8I = 33335;
	this.R32UI = 33334;
	this.R32I = 33333;
	this.R16UI = 33332;
	this.R16I = 33331;
	this.R8UI = 33330;
	this.R8I = 33329;
	this.RG32F = 33328;
	this.RG16F = 33327;
	this.R32F = 33326;
	this.R16F = 33325;
	this.RG8 = 33323;
	this.R8 = 33321;
	this.RGBA_INTEGER = 36249;
	this.RGB_INTEGER = 36248;
	this.RED_INTEGER = 36244;
	this.RGB8I = 36239;
	this.RGBA8I = 36238;
	this.RGB16I = 36233;
	this.RGBA16I = 36232;
	this.RGB32I = 36227;
	this.RGBA32I = 36226;
	this.RGB8UI = 36221;
	this.RGBA8UI = 36220;
	this.RGB16UI = 36215;
	this.RGBA16UI = 36214;
	this.RGB32UI = 36209;
	this.RGBA32UI = 36208;
	this.RGB9_E5 = 35901;
	this.R11F_G11F_B10F = 35898;
	this.TEXTURE_BINDING_2D_ARRAY = 35869;
	this.TEXTURE_2D_ARRAY = 35866;
	this.RGB16F = 34843;
	this.RGBA16F = 34842;
	this.RGB32F = 34837;
	this.RGBA32F = 34836;
	this.COMPARE_REF_TO_TEXTURE = 34894;
	this.SRGB8_ALPHA8 = 35907;
	this.SRGB8 = 35905;
	this.SRGB = 35904;
	this.TEXTURE_COMPARE_FUNC = 34893;
	this.TEXTURE_COMPARE_MODE = 34892;
	this.TEXTURE_MAX_LEVEL = 33085;
	this.TEXTURE_BASE_LEVEL = 33084;
	this.TEXTURE_MAX_LOD = 33083;
	this.TEXTURE_MIN_LOD = 33082;
	this.TEXTURE_WRAP_R = 32882;
	this.TEXTURE_3D = 32879;
	this.RGB10_A2 = 32857;
	this.RGBA8 = 32856;
	this.RGB8 = 32849;
	this.RED = 6403;
	this.MAX_ELEMENT_INDEX = 36203;
	this.MAX_SERVER_WAIT_TIMEOUT = 37137;
	this.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
	this.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
	this.VERTEX_ARRAY_BINDING = 34229;
	this.RASTERIZER_DISCARD = 35977;
	this.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
	this.MAX_VARYING_COMPONENTS = 35659;
	this.MAX_PROGRAM_TEXEL_OFFSET = 35077;
	this.MIN_PROGRAM_TEXEL_OFFSET = 35076;
	this.MAX_ARRAY_TEXTURE_LAYERS = 35071;
	this.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
	this.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
	this.MAX_TEXTURE_LOD_BIAS = 34045;
	this.MAX_ELEMENTS_INDICES = 33001;
	this.MAX_ELEMENTS_VERTICES = 33000;
	this.MAX_3D_TEXTURE_SIZE = 32883;
	this.UNPACK_IMAGE_HEIGHT = 32878;
	this.UNPACK_SKIP_IMAGES = 32877;
	this.TEXTURE_BINDING_3D = 32874;
	this.PACK_SKIP_PIXELS = 3332;
	this.PACK_SKIP_ROWS = 3331;
	this.PACK_ROW_LENGTH = 3330;
	this.UNPACK_SKIP_PIXELS = 3316;
	this.UNPACK_SKIP_ROWS = 3315;
	this.UNPACK_ROW_LENGTH = 3314;
	this.READ_BUFFER = 3074;
	this.BROWSER_DEFAULT_WEBGL = 37444;
	this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
	this.CONTEXT_LOST_WEBGL = 37442;
	this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
	this.UNPACK_FLIP_Y_WEBGL = 37440;
	this.INVALID_FRAMEBUFFER_OPERATION = 1286;
	this.MAX_RENDERBUFFER_SIZE = 34024;
	this.RENDERBUFFER_BINDING = 36007;
	this.FRAMEBUFFER_BINDING = 36006;
	this.FRAMEBUFFER_UNSUPPORTED = 36061;
	this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
	this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
	this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
	this.FRAMEBUFFER_COMPLETE = 36053;
	this.NONE = 0;
	this.DEPTH_STENCIL_ATTACHMENT = 33306;
	this.STENCIL_ATTACHMENT = 36128;
	this.DEPTH_ATTACHMENT = 36096;
	this.COLOR_ATTACHMENT0 = 36064;
	this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
	this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
	this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
	this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
	this.RENDERBUFFER_STENCIL_SIZE = 36181;
	this.RENDERBUFFER_DEPTH_SIZE = 36180;
	this.RENDERBUFFER_ALPHA_SIZE = 36179;
	this.RENDERBUFFER_BLUE_SIZE = 36178;
	this.RENDERBUFFER_GREEN_SIZE = 36177;
	this.RENDERBUFFER_RED_SIZE = 36176;
	this.RENDERBUFFER_INTERNAL_FORMAT = 36164;
	this.RENDERBUFFER_HEIGHT = 36163;
	this.RENDERBUFFER_WIDTH = 36162;
	this.DEPTH_STENCIL = 34041;
	this.STENCIL_INDEX8 = 36168;
	this.STENCIL_INDEX = 6401;
	this.DEPTH_COMPONENT16 = 33189;
	this.RGB565 = 36194;
	this.RGB5_A1 = 32855;
	this.RGBA4 = 32854;
	this.RENDERBUFFER = 36161;
	this.FRAMEBUFFER = 36160;
	this.HIGH_INT = 36341;
	this.MEDIUM_INT = 36340;
	this.LOW_INT = 36339;
	this.HIGH_FLOAT = 36338;
	this.MEDIUM_FLOAT = 36337;
	this.LOW_FLOAT = 36336;
	this.COMPILE_STATUS = 35713;
	this.POINT_SPRITE = 34913;
	this.VERTEX_PROGRAM_POINT_SIZE = 34370;
	this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
	this.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
	this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
	this.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
	this.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
	this.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
	this.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
	this.SAMPLER_CUBE = 35680;
	this.SAMPLER_2D = 35678;
	this.FLOAT_MAT4 = 35676;
	this.FLOAT_MAT3 = 35675;
	this.FLOAT_MAT2 = 35674;
	this.BOOL_VEC4 = 35673;
	this.BOOL_VEC3 = 35672;
	this.BOOL_VEC2 = 35671;
	this.BOOL = 35670;
	this.INT_VEC4 = 35669;
	this.INT_VEC3 = 35668;
	this.INT_VEC2 = 35667;
	this.FLOAT_VEC4 = 35666;
	this.FLOAT_VEC3 = 35665;
	this.FLOAT_VEC2 = 35664;
	this.MIRRORED_REPEAT = 33648;
	this.CLAMP_TO_EDGE = 33071;
	this.REPEAT = 10497;
	this.ACTIVE_TEXTURE = 34016;
	this.TEXTURE31 = 34015;
	this.TEXTURE30 = 34014;
	this.TEXTURE29 = 34013;
	this.TEXTURE28 = 34012;
	this.TEXTURE27 = 34011;
	this.TEXTURE26 = 34010;
	this.TEXTURE25 = 34009;
	this.TEXTURE24 = 34008;
	this.TEXTURE23 = 34007;
	this.TEXTURE22 = 34006;
	this.TEXTURE21 = 34005;
	this.TEXTURE20 = 34004;
	this.TEXTURE19 = 34003;
	this.TEXTURE18 = 34002;
	this.TEXTURE17 = 34001;
	this.TEXTURE16 = 34000;
	this.TEXTURE15 = 33999;
	this.TEXTURE14 = 33998;
	this.TEXTURE13 = 33997;
	this.TEXTURE12 = 33996;
	this.TEXTURE11 = 33995;
	this.TEXTURE10 = 33994;
	this.TEXTURE9 = 33993;
	this.TEXTURE8 = 33992;
	this.TEXTURE7 = 33991;
	this.TEXTURE6 = 33990;
	this.TEXTURE5 = 33989;
	this.TEXTURE4 = 33988;
	this.TEXTURE3 = 33987;
	this.TEXTURE2 = 33986;
	this.TEXTURE1 = 33985;
	this.TEXTURE0 = 33984;
	this.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
	this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
	this.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
	this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
	this.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
	this.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
	this.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
	this.TEXTURE_BINDING_CUBE_MAP = 34068;
	this.TEXTURE_CUBE_MAP = 34067;
	this.TEXTURE = 5890;
	this.TEXTURE_2D = 3553;
	this.TEXTURE_WRAP_T = 10243;
	this.TEXTURE_WRAP_S = 10242;
	this.TEXTURE_MIN_FILTER = 10241;
	this.TEXTURE_MAG_FILTER = 10240;
	this.LINEAR_MIPMAP_LINEAR = 9987;
	this.NEAREST_MIPMAP_LINEAR = 9986;
	this.LINEAR_MIPMAP_NEAREST = 9985;
	this.NEAREST_MIPMAP_NEAREST = 9984;
	this.LINEAR = 9729;
	this.NEAREST = 9728;
	this.VERSION = 7938;
	this.RENDERER = 7937;
	this.VENDOR = 7936;
	this.DECR_WRAP = 34056;
	this.INCR_WRAP = 34055;
	this.INVERT = 5386;
	this.DECR = 7683;
	this.INCR = 7682;
	this.REPLACE = 7681;
	this.KEEP = 7680;
	this.ALWAYS = 519;
	this.GEQUAL = 518;
	this.NOTEQUAL = 517;
	this.GREATER = 516;
	this.LEQUAL = 515;
	this.EQUAL = 514;
	this.LESS = 513;
	this.NEVER = 512;
	this.CURRENT_PROGRAM = 35725;
	this.SHADING_LANGUAGE_VERSION = 35724;
	this.ACTIVE_ATTRIBUTES = 35721;
	this.ACTIVE_UNIFORMS = 35718;
	this.ATTACHED_SHADERS = 35717;
	this.VALIDATE_STATUS = 35715;
	this.LINK_STATUS = 35714;
	this.DELETE_STATUS = 35712;
	this.SHADER_TYPE = 35663;
	this.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
	this.MAX_TEXTURE_IMAGE_UNITS = 34930;
	this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
	this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
	this.MAX_VARYING_VECTORS = 36348;
	this.MAX_VERTEX_UNIFORM_VECTORS = 36347;
	this.MAX_VERTEX_ATTRIBS = 34921;
	this.VERTEX_SHADER = 35633;
	this.FRAGMENT_SHADER = 35632;
	this.UNSIGNED_SHORT_5_6_5 = 33635;
	this.UNSIGNED_SHORT_5_5_5_1 = 32820;
	this.UNSIGNED_SHORT_4_4_4_4 = 32819;
	this.LUMINANCE_ALPHA = 6410;
	this.LUMINANCE = 6409;
	this.RGBA = 6408;
	this.RGB = 6407;
	this.ALPHA = 6406;
	this.DEPTH_COMPONENT = 6402;
	this.FLOAT = 5126;
	this.UNSIGNED_INT = 5125;
	this.INT = 5124;
	this.UNSIGNED_SHORT = 5123;
	this.SHORT = 5122;
	this.UNSIGNED_BYTE = 5121;
	this.BYTE = 5120;
	this.GENERATE_MIPMAP_HINT = 33170;
	this.NICEST = 4354;
	this.FASTEST = 4353;
	this.DONT_CARE = 4352;
	this.COMPRESSED_TEXTURE_FORMATS = 34467;
	this.SAMPLE_COVERAGE_INVERT = 32939;
	this.SAMPLE_COVERAGE_VALUE = 32938;
	this.SAMPLES = 32937;
	this.SAMPLE_BUFFERS = 32936;
	this.TEXTURE_BINDING_2D = 32873;
	this.POLYGON_OFFSET_FACTOR = 32824;
	this.POLYGON_OFFSET_UNITS = 10752;
	this.STENCIL_BITS = 3415;
	this.DEPTH_BITS = 3414;
	this.ALPHA_BITS = 3413;
	this.BLUE_BITS = 3412;
	this.GREEN_BITS = 3411;
	this.RED_BITS = 3410;
	this.SUBPIXEL_BITS = 3408;
	this.MAX_VIEWPORT_DIMS = 3386;
	this.MAX_TEXTURE_SIZE = 3379;
	this.PACK_ALIGNMENT = 3333;
	this.UNPACK_ALIGNMENT = 3317;
	this.COLOR_WRITEMASK = 3107;
	this.COLOR_CLEAR_VALUE = 3106;
	this.SCISSOR_BOX = 3088;
	this.VIEWPORT = 2978;
	this.STENCIL_BACK_WRITEMASK = 36005;
	this.STENCIL_BACK_VALUE_MASK = 36004;
	this.STENCIL_BACK_REF = 36003;
	this.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
	this.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
	this.STENCIL_BACK_FAIL = 34817;
	this.STENCIL_BACK_FUNC = 34816;
	this.STENCIL_WRITEMASK = 2968;
	this.STENCIL_VALUE_MASK = 2963;
	this.STENCIL_REF = 2967;
	this.STENCIL_PASS_DEPTH_PASS = 2966;
	this.STENCIL_PASS_DEPTH_FAIL = 2965;
	this.STENCIL_FAIL = 2964;
	this.STENCIL_FUNC = 2962;
	this.STENCIL_CLEAR_VALUE = 2961;
	this.DEPTH_FUNC = 2932;
	this.DEPTH_CLEAR_VALUE = 2931;
	this.DEPTH_WRITEMASK = 2930;
	this.DEPTH_RANGE = 2928;
	this.FRONT_FACE = 2886;
	this.CULL_FACE_MODE = 2885;
	this.ALIASED_LINE_WIDTH_RANGE = 33902;
	this.ALIASED_POINT_SIZE_RANGE = 33901;
	this.LINE_WIDTH = 2849;
	this.CCW = 2305;
	this.CW = 2304;
	this.OUT_OF_MEMORY = 1285;
	this.INVALID_OPERATION = 1282;
	this.INVALID_VALUE = 1281;
	this.INVALID_ENUM = 1280;
	this.NO_ERROR = 0;
	this.SAMPLE_COVERAGE = 32928;
	this.SAMPLE_ALPHA_TO_COVERAGE = 32926;
	this.POLYGON_OFFSET_FILL = 32823;
	this.SCISSOR_TEST = 3089;
	this.DEPTH_TEST = 2929;
	this.STENCIL_TEST = 2960;
	this.DITHER = 3024;
	this.BLEND = 3042;
	this.CULL_FACE = 2884;
	this.FRONT_AND_BACK = 1032;
	this.BACK = 1029;
	this.FRONT = 1028;
	this.CURRENT_VERTEX_ATTRIB = 34342;
	this.BUFFER_USAGE = 34661;
	this.BUFFER_SIZE = 34660;
	this.DYNAMIC_DRAW = 35048;
	this.STATIC_DRAW = 35044;
	this.STREAM_DRAW = 35040;
	this.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
	this.ARRAY_BUFFER_BINDING = 34964;
	this.ELEMENT_ARRAY_BUFFER = 34963;
	this.ARRAY_BUFFER = 34962;
	this.BLEND_COLOR = 32773;
	this.ONE_MINUS_CONSTANT_ALPHA = 32772;
	this.CONSTANT_ALPHA = 32771;
	this.ONE_MINUS_CONSTANT_COLOR = 32770;
	this.CONSTANT_COLOR = 32769;
	this.BLEND_SRC_ALPHA = 32971;
	this.BLEND_DST_ALPHA = 32970;
	this.BLEND_SRC_RGB = 32969;
	this.BLEND_DST_RGB = 32968;
	this.FUNC_REVERSE_SUBTRACT = 32779;
	this.FUNC_SUBTRACT = 32778;
	this.BLEND_EQUATION_ALPHA = 34877;
	this.BLEND_EQUATION_RGB = 32777;
	this.BLEND_EQUATION = 32777;
	this.FUNC_ADD = 32774;
	this.SRC_ALPHA_SATURATE = 776;
	this.ONE_MINUS_DST_COLOR = 775;
	this.DST_COLOR = 774;
	this.ONE_MINUS_DST_ALPHA = 773;
	this.DST_ALPHA = 772;
	this.ONE_MINUS_SRC_ALPHA = 771;
	this.SRC_ALPHA = 770;
	this.ONE_MINUS_SRC_COLOR = 769;
	this.SRC_COLOR = 768;
	this.ONE = 1;
	this.ZERO = 0;
	this.TRIANGLE_FAN = 6;
	this.TRIANGLE_STRIP = 5;
	this.TRIANGLES = 4;
	this.LINE_STRIP = 3;
	this.LINE_LOOP = 2;
	this.LINES = 1;
	this.POINTS = 0;
	this.COLOR_BUFFER_BIT = 16384;
	this.STENCIL_BUFFER_BIT = 1024;
	this.DEPTH_BUFFER_BIT = 256;
	this.__context = context;
	this.version = 1;
	this.type = lime_graphics_opengl_GLContextType.WEBGL;
	if(context != null) {
		var gl = context;
		if(Object.prototype.hasOwnProperty.call(gl,"rawgl")) gl = Reflect.field(context,"rawgl");
		if(Reflect.hasField(window,"WebGL2RenderingContext") && js_Boot.__instanceof(gl,WebGL2RenderingContext)) this.version = 2;
	}
};
$hxClasses["lime._backend.html5.HTML5GLRenderContext"] = lime__$backend_html5_HTML5GLRenderContext;
lime__$backend_html5_HTML5GLRenderContext.__name__ = ["lime","_backend","html5","HTML5GLRenderContext"];
lime__$backend_html5_HTML5GLRenderContext.prototype = {
	DEPTH_BUFFER_BIT: null
	,STENCIL_BUFFER_BIT: null
	,COLOR_BUFFER_BIT: null
	,POINTS: null
	,LINES: null
	,LINE_LOOP: null
	,LINE_STRIP: null
	,TRIANGLES: null
	,TRIANGLE_STRIP: null
	,TRIANGLE_FAN: null
	,ZERO: null
	,ONE: null
	,SRC_COLOR: null
	,ONE_MINUS_SRC_COLOR: null
	,SRC_ALPHA: null
	,ONE_MINUS_SRC_ALPHA: null
	,DST_ALPHA: null
	,ONE_MINUS_DST_ALPHA: null
	,DST_COLOR: null
	,ONE_MINUS_DST_COLOR: null
	,SRC_ALPHA_SATURATE: null
	,FUNC_ADD: null
	,BLEND_EQUATION: null
	,BLEND_EQUATION_RGB: null
	,BLEND_EQUATION_ALPHA: null
	,FUNC_SUBTRACT: null
	,FUNC_REVERSE_SUBTRACT: null
	,BLEND_DST_RGB: null
	,BLEND_SRC_RGB: null
	,BLEND_DST_ALPHA: null
	,BLEND_SRC_ALPHA: null
	,CONSTANT_COLOR: null
	,ONE_MINUS_CONSTANT_COLOR: null
	,CONSTANT_ALPHA: null
	,ONE_MINUS_CONSTANT_ALPHA: null
	,BLEND_COLOR: null
	,ARRAY_BUFFER: null
	,ELEMENT_ARRAY_BUFFER: null
	,ARRAY_BUFFER_BINDING: null
	,ELEMENT_ARRAY_BUFFER_BINDING: null
	,STREAM_DRAW: null
	,STATIC_DRAW: null
	,DYNAMIC_DRAW: null
	,BUFFER_SIZE: null
	,BUFFER_USAGE: null
	,CURRENT_VERTEX_ATTRIB: null
	,FRONT: null
	,BACK: null
	,FRONT_AND_BACK: null
	,CULL_FACE: null
	,BLEND: null
	,DITHER: null
	,STENCIL_TEST: null
	,DEPTH_TEST: null
	,SCISSOR_TEST: null
	,POLYGON_OFFSET_FILL: null
	,SAMPLE_ALPHA_TO_COVERAGE: null
	,SAMPLE_COVERAGE: null
	,NO_ERROR: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,CW: null
	,CCW: null
	,LINE_WIDTH: null
	,ALIASED_POINT_SIZE_RANGE: null
	,ALIASED_LINE_WIDTH_RANGE: null
	,CULL_FACE_MODE: null
	,FRONT_FACE: null
	,DEPTH_RANGE: null
	,DEPTH_WRITEMASK: null
	,DEPTH_CLEAR_VALUE: null
	,DEPTH_FUNC: null
	,STENCIL_CLEAR_VALUE: null
	,STENCIL_FUNC: null
	,STENCIL_FAIL: null
	,STENCIL_PASS_DEPTH_FAIL: null
	,STENCIL_PASS_DEPTH_PASS: null
	,STENCIL_REF: null
	,STENCIL_VALUE_MASK: null
	,STENCIL_WRITEMASK: null
	,STENCIL_BACK_FUNC: null
	,STENCIL_BACK_FAIL: null
	,STENCIL_BACK_PASS_DEPTH_FAIL: null
	,STENCIL_BACK_PASS_DEPTH_PASS: null
	,STENCIL_BACK_REF: null
	,STENCIL_BACK_VALUE_MASK: null
	,STENCIL_BACK_WRITEMASK: null
	,VIEWPORT: null
	,SCISSOR_BOX: null
	,COLOR_CLEAR_VALUE: null
	,COLOR_WRITEMASK: null
	,UNPACK_ALIGNMENT: null
	,PACK_ALIGNMENT: null
	,MAX_TEXTURE_SIZE: null
	,MAX_VIEWPORT_DIMS: null
	,SUBPIXEL_BITS: null
	,RED_BITS: null
	,GREEN_BITS: null
	,BLUE_BITS: null
	,ALPHA_BITS: null
	,DEPTH_BITS: null
	,STENCIL_BITS: null
	,POLYGON_OFFSET_UNITS: null
	,POLYGON_OFFSET_FACTOR: null
	,TEXTURE_BINDING_2D: null
	,SAMPLE_BUFFERS: null
	,SAMPLES: null
	,SAMPLE_COVERAGE_VALUE: null
	,SAMPLE_COVERAGE_INVERT: null
	,COMPRESSED_TEXTURE_FORMATS: null
	,DONT_CARE: null
	,FASTEST: null
	,NICEST: null
	,GENERATE_MIPMAP_HINT: null
	,BYTE: null
	,UNSIGNED_BYTE: null
	,SHORT: null
	,UNSIGNED_SHORT: null
	,INT: null
	,UNSIGNED_INT: null
	,FLOAT: null
	,DEPTH_COMPONENT: null
	,ALPHA: null
	,RGB: null
	,RGBA: null
	,LUMINANCE: null
	,LUMINANCE_ALPHA: null
	,UNSIGNED_SHORT_4_4_4_4: null
	,UNSIGNED_SHORT_5_5_5_1: null
	,UNSIGNED_SHORT_5_6_5: null
	,FRAGMENT_SHADER: null
	,VERTEX_SHADER: null
	,MAX_VERTEX_ATTRIBS: null
	,MAX_VERTEX_UNIFORM_VECTORS: null
	,MAX_VARYING_VECTORS: null
	,MAX_COMBINED_TEXTURE_IMAGE_UNITS: null
	,MAX_VERTEX_TEXTURE_IMAGE_UNITS: null
	,MAX_TEXTURE_IMAGE_UNITS: null
	,MAX_FRAGMENT_UNIFORM_VECTORS: null
	,SHADER_TYPE: null
	,DELETE_STATUS: null
	,LINK_STATUS: null
	,VALIDATE_STATUS: null
	,ATTACHED_SHADERS: null
	,ACTIVE_UNIFORMS: null
	,ACTIVE_ATTRIBUTES: null
	,SHADING_LANGUAGE_VERSION: null
	,CURRENT_PROGRAM: null
	,NEVER: null
	,LESS: null
	,EQUAL: null
	,LEQUAL: null
	,GREATER: null
	,NOTEQUAL: null
	,GEQUAL: null
	,ALWAYS: null
	,KEEP: null
	,REPLACE: null
	,INCR: null
	,DECR: null
	,INVERT: null
	,INCR_WRAP: null
	,DECR_WRAP: null
	,VENDOR: null
	,RENDERER: null
	,VERSION: null
	,NEAREST: null
	,LINEAR: null
	,NEAREST_MIPMAP_NEAREST: null
	,LINEAR_MIPMAP_NEAREST: null
	,NEAREST_MIPMAP_LINEAR: null
	,LINEAR_MIPMAP_LINEAR: null
	,TEXTURE_MAG_FILTER: null
	,TEXTURE_MIN_FILTER: null
	,TEXTURE_WRAP_S: null
	,TEXTURE_WRAP_T: null
	,TEXTURE_2D: null
	,TEXTURE: null
	,TEXTURE_CUBE_MAP: null
	,TEXTURE_BINDING_CUBE_MAP: null
	,TEXTURE_CUBE_MAP_POSITIVE_X: null
	,TEXTURE_CUBE_MAP_NEGATIVE_X: null
	,TEXTURE_CUBE_MAP_POSITIVE_Y: null
	,TEXTURE_CUBE_MAP_NEGATIVE_Y: null
	,TEXTURE_CUBE_MAP_POSITIVE_Z: null
	,TEXTURE_CUBE_MAP_NEGATIVE_Z: null
	,MAX_CUBE_MAP_TEXTURE_SIZE: null
	,TEXTURE0: null
	,TEXTURE1: null
	,TEXTURE2: null
	,TEXTURE3: null
	,TEXTURE4: null
	,TEXTURE5: null
	,TEXTURE6: null
	,TEXTURE7: null
	,TEXTURE8: null
	,TEXTURE9: null
	,TEXTURE10: null
	,TEXTURE11: null
	,TEXTURE12: null
	,TEXTURE13: null
	,TEXTURE14: null
	,TEXTURE15: null
	,TEXTURE16: null
	,TEXTURE17: null
	,TEXTURE18: null
	,TEXTURE19: null
	,TEXTURE20: null
	,TEXTURE21: null
	,TEXTURE22: null
	,TEXTURE23: null
	,TEXTURE24: null
	,TEXTURE25: null
	,TEXTURE26: null
	,TEXTURE27: null
	,TEXTURE28: null
	,TEXTURE29: null
	,TEXTURE30: null
	,TEXTURE31: null
	,ACTIVE_TEXTURE: null
	,REPEAT: null
	,CLAMP_TO_EDGE: null
	,MIRRORED_REPEAT: null
	,FLOAT_VEC2: null
	,FLOAT_VEC3: null
	,FLOAT_VEC4: null
	,INT_VEC2: null
	,INT_VEC3: null
	,INT_VEC4: null
	,BOOL: null
	,BOOL_VEC2: null
	,BOOL_VEC3: null
	,BOOL_VEC4: null
	,FLOAT_MAT2: null
	,FLOAT_MAT3: null
	,FLOAT_MAT4: null
	,SAMPLER_2D: null
	,SAMPLER_CUBE: null
	,VERTEX_ATTRIB_ARRAY_ENABLED: null
	,VERTEX_ATTRIB_ARRAY_SIZE: null
	,VERTEX_ATTRIB_ARRAY_STRIDE: null
	,VERTEX_ATTRIB_ARRAY_TYPE: null
	,VERTEX_ATTRIB_ARRAY_NORMALIZED: null
	,VERTEX_ATTRIB_ARRAY_POINTER: null
	,VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: null
	,VERTEX_PROGRAM_POINT_SIZE: null
	,POINT_SPRITE: null
	,COMPILE_STATUS: null
	,LOW_FLOAT: null
	,MEDIUM_FLOAT: null
	,HIGH_FLOAT: null
	,LOW_INT: null
	,MEDIUM_INT: null
	,HIGH_INT: null
	,FRAMEBUFFER: null
	,RENDERBUFFER: null
	,RGBA4: null
	,RGB5_A1: null
	,RGB565: null
	,DEPTH_COMPONENT16: null
	,STENCIL_INDEX: null
	,STENCIL_INDEX8: null
	,DEPTH_STENCIL: null
	,RENDERBUFFER_WIDTH: null
	,RENDERBUFFER_HEIGHT: null
	,RENDERBUFFER_INTERNAL_FORMAT: null
	,RENDERBUFFER_RED_SIZE: null
	,RENDERBUFFER_GREEN_SIZE: null
	,RENDERBUFFER_BLUE_SIZE: null
	,RENDERBUFFER_ALPHA_SIZE: null
	,RENDERBUFFER_DEPTH_SIZE: null
	,RENDERBUFFER_STENCIL_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: null
	,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: null
	,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: null
	,FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: null
	,COLOR_ATTACHMENT0: null
	,DEPTH_ATTACHMENT: null
	,STENCIL_ATTACHMENT: null
	,DEPTH_STENCIL_ATTACHMENT: null
	,NONE: null
	,FRAMEBUFFER_COMPLETE: null
	,FRAMEBUFFER_INCOMPLETE_ATTACHMENT: null
	,FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: null
	,FRAMEBUFFER_INCOMPLETE_DIMENSIONS: null
	,FRAMEBUFFER_UNSUPPORTED: null
	,FRAMEBUFFER_BINDING: null
	,RENDERBUFFER_BINDING: null
	,MAX_RENDERBUFFER_SIZE: null
	,INVALID_FRAMEBUFFER_OPERATION: null
	,UNPACK_FLIP_Y_WEBGL: null
	,UNPACK_PREMULTIPLY_ALPHA_WEBGL: null
	,CONTEXT_LOST_WEBGL: null
	,UNPACK_COLORSPACE_CONVERSION_WEBGL: null
	,BROWSER_DEFAULT_WEBGL: null
	,READ_BUFFER: null
	,UNPACK_ROW_LENGTH: null
	,UNPACK_SKIP_ROWS: null
	,UNPACK_SKIP_PIXELS: null
	,PACK_ROW_LENGTH: null
	,PACK_SKIP_ROWS: null
	,PACK_SKIP_PIXELS: null
	,TEXTURE_BINDING_3D: null
	,UNPACK_SKIP_IMAGES: null
	,UNPACK_IMAGE_HEIGHT: null
	,MAX_3D_TEXTURE_SIZE: null
	,MAX_ELEMENTS_VERTICES: null
	,MAX_ELEMENTS_INDICES: null
	,MAX_TEXTURE_LOD_BIAS: null
	,MAX_FRAGMENT_UNIFORM_COMPONENTS: null
	,MAX_VERTEX_UNIFORM_COMPONENTS: null
	,MAX_ARRAY_TEXTURE_LAYERS: null
	,MIN_PROGRAM_TEXEL_OFFSET: null
	,MAX_PROGRAM_TEXEL_OFFSET: null
	,MAX_VARYING_COMPONENTS: null
	,FRAGMENT_SHADER_DERIVATIVE_HINT: null
	,RASTERIZER_DISCARD: null
	,VERTEX_ARRAY_BINDING: null
	,MAX_VERTEX_OUTPUT_COMPONENTS: null
	,MAX_FRAGMENT_INPUT_COMPONENTS: null
	,MAX_SERVER_WAIT_TIMEOUT: null
	,MAX_ELEMENT_INDEX: null
	,RED: null
	,RGB8: null
	,RGBA8: null
	,RGB10_A2: null
	,TEXTURE_3D: null
	,TEXTURE_WRAP_R: null
	,TEXTURE_MIN_LOD: null
	,TEXTURE_MAX_LOD: null
	,TEXTURE_BASE_LEVEL: null
	,TEXTURE_MAX_LEVEL: null
	,TEXTURE_COMPARE_MODE: null
	,TEXTURE_COMPARE_FUNC: null
	,SRGB: null
	,SRGB8: null
	,SRGB8_ALPHA8: null
	,COMPARE_REF_TO_TEXTURE: null
	,RGBA32F: null
	,RGB32F: null
	,RGBA16F: null
	,RGB16F: null
	,TEXTURE_2D_ARRAY: null
	,TEXTURE_BINDING_2D_ARRAY: null
	,R11F_G11F_B10F: null
	,RGB9_E5: null
	,RGBA32UI: null
	,RGB32UI: null
	,RGBA16UI: null
	,RGB16UI: null
	,RGBA8UI: null
	,RGB8UI: null
	,RGBA32I: null
	,RGB32I: null
	,RGBA16I: null
	,RGB16I: null
	,RGBA8I: null
	,RGB8I: null
	,RED_INTEGER: null
	,RGB_INTEGER: null
	,RGBA_INTEGER: null
	,R8: null
	,RG8: null
	,R16F: null
	,R32F: null
	,RG16F: null
	,RG32F: null
	,R8I: null
	,R8UI: null
	,R16I: null
	,R16UI: null
	,R32I: null
	,R32UI: null
	,RG8I: null
	,RG8UI: null
	,RG16I: null
	,RG16UI: null
	,RG32I: null
	,RG32UI: null
	,R8_SNORM: null
	,RG8_SNORM: null
	,RGB8_SNORM: null
	,RGBA8_SNORM: null
	,RGB10_A2UI: null
	,TEXTURE_IMMUTABLE_FORMAT: null
	,TEXTURE_IMMUTABLE_LEVELS: null
	,UNSIGNED_INT_2_10_10_10_REV: null
	,UNSIGNED_INT_10F_11F_11F_REV: null
	,UNSIGNED_INT_5_9_9_9_REV: null
	,FLOAT_32_UNSIGNED_INT_24_8_REV: null
	,UNSIGNED_INT_24_8: null
	,HALF_FLOAT: null
	,RG: null
	,RG_INTEGER: null
	,INT_2_10_10_10_REV: null
	,CURRENT_QUERY: null
	,QUERY_RESULT: null
	,QUERY_RESULT_AVAILABLE: null
	,ANY_SAMPLES_PASSED: null
	,ANY_SAMPLES_PASSED_CONSERVATIVE: null
	,MAX_DRAW_BUFFERS: null
	,DRAW_BUFFER0: null
	,DRAW_BUFFER1: null
	,DRAW_BUFFER2: null
	,DRAW_BUFFER3: null
	,DRAW_BUFFER4: null
	,DRAW_BUFFER5: null
	,DRAW_BUFFER6: null
	,DRAW_BUFFER7: null
	,DRAW_BUFFER8: null
	,DRAW_BUFFER9: null
	,DRAW_BUFFER10: null
	,DRAW_BUFFER11: null
	,DRAW_BUFFER12: null
	,DRAW_BUFFER13: null
	,DRAW_BUFFER14: null
	,DRAW_BUFFER15: null
	,MAX_COLOR_ATTACHMENTS: null
	,COLOR_ATTACHMENT1: null
	,COLOR_ATTACHMENT2: null
	,COLOR_ATTACHMENT3: null
	,COLOR_ATTACHMENT4: null
	,COLOR_ATTACHMENT5: null
	,COLOR_ATTACHMENT6: null
	,COLOR_ATTACHMENT7: null
	,COLOR_ATTACHMENT8: null
	,COLOR_ATTACHMENT9: null
	,COLOR_ATTACHMENT10: null
	,COLOR_ATTACHMENT11: null
	,COLOR_ATTACHMENT12: null
	,COLOR_ATTACHMENT13: null
	,COLOR_ATTACHMENT14: null
	,COLOR_ATTACHMENT15: null
	,SAMPLER_3D: null
	,SAMPLER_2D_SHADOW: null
	,SAMPLER_2D_ARRAY: null
	,SAMPLER_2D_ARRAY_SHADOW: null
	,SAMPLER_CUBE_SHADOW: null
	,INT_SAMPLER_2D: null
	,INT_SAMPLER_3D: null
	,INT_SAMPLER_CUBE: null
	,INT_SAMPLER_2D_ARRAY: null
	,UNSIGNED_INT_SAMPLER_2D: null
	,UNSIGNED_INT_SAMPLER_3D: null
	,UNSIGNED_INT_SAMPLER_CUBE: null
	,UNSIGNED_INT_SAMPLER_2D_ARRAY: null
	,MAX_SAMPLES: null
	,SAMPLER_BINDING: null
	,PIXEL_PACK_BUFFER: null
	,PIXEL_UNPACK_BUFFER: null
	,PIXEL_PACK_BUFFER_BINDING: null
	,PIXEL_UNPACK_BUFFER_BINDING: null
	,COPY_READ_BUFFER: null
	,COPY_WRITE_BUFFER: null
	,COPY_READ_BUFFER_BINDING: null
	,COPY_WRITE_BUFFER_BINDING: null
	,FLOAT_MAT2x3: null
	,FLOAT_MAT2x4: null
	,FLOAT_MAT3x2: null
	,FLOAT_MAT3x4: null
	,FLOAT_MAT4x2: null
	,FLOAT_MAT4x3: null
	,UNSIGNED_INT_VEC2: null
	,UNSIGNED_INT_VEC3: null
	,UNSIGNED_INT_VEC4: null
	,UNSIGNED_NORMALIZED: null
	,SIGNED_NORMALIZED: null
	,VERTEX_ATTRIB_ARRAY_INTEGER: null
	,VERTEX_ATTRIB_ARRAY_DIVISOR: null
	,TRANSFORM_FEEDBACK_BUFFER_MODE: null
	,MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: null
	,TRANSFORM_FEEDBACK_VARYINGS: null
	,TRANSFORM_FEEDBACK_BUFFER_START: null
	,TRANSFORM_FEEDBACK_BUFFER_SIZE: null
	,TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: null
	,MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: null
	,MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: null
	,INTERLEAVED_ATTRIBS: null
	,SEPARATE_ATTRIBS: null
	,TRANSFORM_FEEDBACK_BUFFER: null
	,TRANSFORM_FEEDBACK_BUFFER_BINDING: null
	,TRANSFORM_FEEDBACK: null
	,TRANSFORM_FEEDBACK_PAUSED: null
	,TRANSFORM_FEEDBACK_ACTIVE: null
	,TRANSFORM_FEEDBACK_BINDING: null
	,FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: null
	,FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: null
	,FRAMEBUFFER_ATTACHMENT_RED_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: null
	,FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: null
	,FRAMEBUFFER_DEFAULT: null
	,DEPTH24_STENCIL8: null
	,DRAW_FRAMEBUFFER_BINDING: null
	,READ_FRAMEBUFFER: null
	,DRAW_FRAMEBUFFER: null
	,READ_FRAMEBUFFER_BINDING: null
	,RENDERBUFFER_SAMPLES: null
	,FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: null
	,FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: null
	,UNIFORM_BUFFER: null
	,UNIFORM_BUFFER_BINDING: null
	,UNIFORM_BUFFER_START: null
	,UNIFORM_BUFFER_SIZE: null
	,MAX_VERTEX_UNIFORM_BLOCKS: null
	,MAX_FRAGMENT_UNIFORM_BLOCKS: null
	,MAX_COMBINED_UNIFORM_BLOCKS: null
	,MAX_UNIFORM_BUFFER_BINDINGS: null
	,MAX_UNIFORM_BLOCK_SIZE: null
	,MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: null
	,MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: null
	,UNIFORM_BUFFER_OFFSET_ALIGNMENT: null
	,ACTIVE_UNIFORM_BLOCKS: null
	,UNIFORM_TYPE: null
	,UNIFORM_SIZE: null
	,UNIFORM_BLOCK_INDEX: null
	,UNIFORM_OFFSET: null
	,UNIFORM_ARRAY_STRIDE: null
	,UNIFORM_MATRIX_STRIDE: null
	,UNIFORM_IS_ROW_MAJOR: null
	,UNIFORM_BLOCK_BINDING: null
	,UNIFORM_BLOCK_DATA_SIZE: null
	,UNIFORM_BLOCK_ACTIVE_UNIFORMS: null
	,UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: null
	,UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: null
	,UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: null
	,OBJECT_TYPE: null
	,SYNC_CONDITION: null
	,SYNC_STATUS: null
	,SYNC_FLAGS: null
	,SYNC_FENCE: null
	,SYNC_GPU_COMMANDS_COMPLETE: null
	,UNSIGNALED: null
	,SIGNALED: null
	,ALREADY_SIGNALED: null
	,TIMEOUT_EXPIRED: null
	,CONDITION_SATISFIED: null
	,WAIT_FAILED: null
	,SYNC_FLUSH_COMMANDS_BIT: null
	,COLOR: null
	,DEPTH: null
	,STENCIL: null
	,MIN: null
	,MAX: null
	,DEPTH_COMPONENT24: null
	,STREAM_READ: null
	,STREAM_COPY: null
	,STATIC_READ: null
	,STATIC_COPY: null
	,DYNAMIC_READ: null
	,DYNAMIC_COPY: null
	,DEPTH_COMPONENT32F: null
	,DEPTH32F_STENCIL8: null
	,INVALID_INDEX: null
	,TIMEOUT_IGNORED: null
	,MAX_CLIENT_WAIT_TIMEOUT_WEBGL: null
	,type: null
	,version: null
	,__context: null
	,__contextLost: null
	,activeTexture: function(texture) {
		this.__context.activeTexture(texture);
	}
	,attachShader: function(program,shader) {
		this.__context.attachShader(program,shader);
	}
	,beginQuery: function(target,query) {
		this.__context.beginQuery(target,query);
	}
	,beginTransformFeedback: function(primitiveNode) {
		this.__context.beginTransformFeedback(primitiveNode);
	}
	,bindAttribLocation: function(program,index,name) {
		this.__context.bindAttribLocation(program,index,name);
	}
	,bindBuffer: function(target,buffer) {
		this.__context.bindBuffer(target,buffer);
	}
	,bindBufferBase: function(target,index,buffer) {
		this.__context.bindBufferBase(target,index,buffer);
	}
	,bindBufferRange: function(target,index,buffer,offset,size) {
		this.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
	}
	,bindFramebuffer: function(target,framebuffer) {
		this.__context.bindFramebuffer(target,framebuffer);
	}
	,bindRenderbuffer: function(target,renderbuffer) {
		this.__context.bindRenderbuffer(target,renderbuffer);
	}
	,bindSampler: function(unit,sampler) {
		this.__context.bindSampler(unit,sampler);
	}
	,bindTexture: function(target,texture) {
		this.__context.bindTexture(target,texture);
	}
	,bindTransformFeedback: function(target,transformFeedback) {
		this.__context.bindTransformFeedback(target,transformFeedback);
	}
	,bindVertexArray: function(vertexArray) {
		this.__context.bindVertexArray(vertexArray);
	}
	,blendColor: function(red,green,blue,alpha) {
		this.__context.blendColor(red,green,blue,alpha);
	}
	,blendEquation: function(mode) {
		this.__context.blendEquation(mode);
	}
	,blendEquationSeparate: function(modeRGB,modeAlpha) {
		this.__context.blendEquationSeparate(modeRGB,modeAlpha);
	}
	,blendFunc: function(sfactor,dfactor) {
		this.__context.blendFunc(sfactor,dfactor);
	}
	,blendFuncSeparate: function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
		this.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
	}
	,blitFramebuffer: function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
		this.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	}
	,bufferData: function(target,size,data,usage) {
		this.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size),usage);
	}
	,bufferDataWEBGL: function(target,srcData,usage,srcOffset,length) {
		if(srcOffset != null) this.__context.bufferData(target,srcData,usage,srcOffset,length); else this.__context.bufferData(target,srcData,usage);
	}
	,bufferSubData: function(target,dstByteOffset,size,data) {
		this.__context.bufferSubData(target,dstByteOffset,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
	}
	,bufferSubDataWEBGL: function(target,dstByteOffset,srcData,srcOffset,length) {
		if(srcOffset != null) this.__context.bufferSubData(target,dstByteOffset,srcData,srcOffset,length); else this.__context.bufferSubData(target,dstByteOffset,srcData);
	}
	,checkFramebufferStatus: function(target) {
		return this.__context.checkFramebufferStatus(target);
	}
	,clear: function(mask) {
		this.__context.clear(mask);
	}
	,clearBufferfi: function(buffer,drawbuffer,depth,stencil) {
		this.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
	}
	,clearBufferfv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferfv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
	}
	,clearBufferfvWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
	}
	,clearBufferiv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(values));
	}
	,clearBufferivWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
	}
	,clearBufferuiv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferuiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(values));
	}
	,clearBufferuivWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
	}
	,clearColor: function(red,green,blue,alpha) {
		this.__context.clearColor(red,green,blue,alpha);
	}
	,clearDepth: function(depth) {
		this.__context.clearDepth(depth);
	}
	,clearDepthf: function(depth) {
		this.__context.clearDepth(depth);
	}
	,clearStencil: function(s) {
		this.__context.clearStencil(s);
	}
	,clientWaitSync: function(sync,flags,timeout) {
		return this.__context.clientWaitSync(sync,flags,timeout);
	}
	,copyBufferSubData: function(readTarget,writeTarget,readOffset,writeOffset,size) {
	}
	,colorMask: function(red,green,blue,alpha) {
		this.__context.colorMask(red,green,blue,alpha);
	}
	,compileShader: function(shader) {
		this.__context.compileShader(shader);
	}
	,compressedTexImage2D: function(target,level,internalformat,width,height,border,imageSize,data) {
		this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexImage2DWEBGL: function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
		if(srcOffset != null) this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride); else this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
	,compressedTexImage3D: function(target,level,internalformat,width,height,depth,border,imageSize,data) {
		this.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexImage3DWEBGL: function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
		this.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
	}
	,compressedTexSubImage2D: function(target,level,xoffset,yoffset,width,height,format,imageSize,data) {
		this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexSubImage2DWEBGL: function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
		if(srcOffset != null) this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride); else this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
	,compressedTexSubImage3D: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
		this.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
	}
	,compressedTexSubImage3DWEBGL: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
		this.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
	}
	,copySubBufferData: function(readTarget,writeTarget,readOffset,writeOffset,size) {
		this.__context.copySubBufferData(readTarget,writeTarget,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(readOffset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(writeOffset)),size);
	}
	,copyTexImage2D: function(target,level,internalformat,x,y,width,height,border) {
		this.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
	}
	,copyTexSubImage2D: function(target,level,xoffset,yoffset,x,y,width,height) {
		this.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
	}
	,copyTexSubImage3D: function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
		this.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
	}
	,createBuffer: function() {
		return this.__context.createBuffer();
	}
	,createFramebuffer: function() {
		return this.__context.createFramebuffer();
	}
	,createProgram: function() {
		return this.__context.createProgram();
	}
	,createQuery: function() {
		return this.__context.createQuery();
	}
	,createRenderbuffer: function() {
		return this.__context.createRenderbuffer();
	}
	,createSampler: function() {
		return this.__context.createSampler();
	}
	,createShader: function(type) {
		return this.__context.createShader(type);
	}
	,createTexture: function() {
		return this.__context.createTexture();
	}
	,createTransformFeedback: function() {
		return this.__context.createTransformFeedback();
	}
	,createVertexArray: function() {
		return this.__context.createVertexArray();
	}
	,cullFace: function(mode) {
		this.__context.cullFace(mode);
	}
	,deleteBuffer: function(buffer) {
		this.__context.deleteBuffer(buffer);
	}
	,deleteFramebuffer: function(framebuffer) {
		this.__context.deleteFramebuffer(framebuffer);
	}
	,deleteProgram: function(program) {
		this.__context.deleteProgram(program);
	}
	,deleteQuery: function(query) {
		this.__context.deleteQuery(query);
	}
	,deleteRenderbuffer: function(renderbuffer) {
		this.__context.deleteRenderbuffer(renderbuffer);
	}
	,deleteSampler: function(sampler) {
		this.__context.deleteSampler(sampler);
	}
	,deleteShader: function(shader) {
		this.__context.deleteShader(shader);
	}
	,deleteSync: function(sync) {
		this.__context.deleteSync(sync);
	}
	,deleteTexture: function(texture) {
		this.__context.deleteTexture(texture);
	}
	,deleteTransformFeedback: function(transformFeedback) {
		this.__context.deleteTransformFeedback(transformFeedback);
	}
	,deleteVertexArray: function(vertexArray) {
		this.__context.deleteVertexArray(vertexArray);
	}
	,depthFunc: function(func) {
		this.__context.depthFunc(func);
	}
	,depthMask: function(flag) {
		this.__context.depthMask(flag);
	}
	,depthRange: function(zNear,zFar) {
		this.__context.depthRange(zNear,zFar);
	}
	,depthRangef: function(zNear,zFar) {
		this.__context.depthRange(zNear,zFar);
	}
	,detachShader: function(program,shader) {
		this.__context.detachShader(program,shader);
	}
	,disable: function(cap) {
		this.__context.disable(cap);
	}
	,disableVertexAttribArray: function(index) {
		this.__context.disableVertexAttribArray(index);
	}
	,drawArrays: function(mode,first,count) {
		this.__context.drawArrays(mode,first,count);
	}
	,drawArraysInstanced: function(mode,first,count,instanceCount) {
		this.__context.drawArraysInstanced(mode,first,count,instanceCount);
	}
	,drawBuffers: function(buffers) {
		this.__context.drawBuffers(buffers);
	}
	,drawElements: function(mode,count,type,offset) {
		this.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
	}
	,drawElementsInstanced: function(mode,count,type,offset,instanceCount) {
		this.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
	}
	,drawRangeElements: function(mode,start,end,count,type,offset) {
		this.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
	}
	,enable: function(cap) {
		this.__context.enable(cap);
	}
	,enableVertexAttribArray: function(index) {
		this.__context.enableVertexAttribArray(index);
	}
	,endQuery: function(target) {
		this.__context.endQuery(target);
	}
	,endTransformFeedback: function() {
		this.__context.endTransformFeedback();
	}
	,fenceSync: function(condition,flags) {
		return this.__context.fenceSync(condition,flags);
	}
	,finish: function() {
		this.__context.finish();
	}
	,flush: function() {
		this.__context.flush();
	}
	,framebufferRenderbuffer: function(target,attachment,renderbuffertarget,renderbuffer) {
		this.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
	}
	,framebufferTexture2D: function(target,attachment,textarget,texture,level) {
		this.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
	}
	,framebufferTextureLayer: function(target,attachment,texture,level,layer) {
		this.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
	}
	,frontFace: function(mode) {
		this.__context.frontFace(mode);
	}
	,generateMipmap: function(target) {
		this.__context.generateMipmap(target);
	}
	,getActiveAttrib: function(program,index) {
		return this.__context.getActiveAttrib(program,index);
	}
	,getActiveUniform: function(program,index) {
		return this.__context.getActiveUniform(program,index);
	}
	,getActiveUniformBlocki: function(program,uniformBlockIndex,pname) {
		return this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniformBlockiv: function(program,uniformBlockIndex,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var val = this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
		view[0] = val;
	}
	,getActiveUniformBlockName: function(program,uniformBlockIndex) {
		return this.__context.getActiveUniformBlockName(program,uniformBlockIndex);
	}
	,getActiveUniformBlockParameter: function(program,uniformBlockIndex,pname) {
		return this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniforms: function(program,uniformIndices,pname) {
		return this.__context.getActiveUniforms(program,uniformIndices,pname);
	}
	,getActiveUniformsiv: function(program,uniformIndices,pname,params) {
	}
	,getAttachedShaders: function(program) {
		return this.__context.getAttachedShaders(program);
	}
	,getAttribLocation: function(program,name) {
		return this.__context.getAttribLocation(program,name);
	}
	,getBoolean: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getBooleanv: function(pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt8Array(params);
		var result = this.__context.getParameter(pname);
		if((result instanceof Array) && result.__enum__ == null) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(data[i]) view[i] = 1; else view[i] = 0;
			}
		} else {
			var val;
			if(js_Boot.__cast(result , Bool)) val = 1; else val = 0;
			view[0] = val;
		}
	}
	,getBufferParameter: function(target,pname) {
		return this.__context.getBufferParameter(target,pname);
	}
	,getBufferParameteri: function(target,pname) {
		return this.__context.getBufferParameter(target,pname);
	}
	,getBufferParameteri64v: function(target,pname,params) {
	}
	,getBufferParameteriv: function(target,pname,data) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(data);
		var val = this.__context.getBufferParameter(target,pname);
		view[0] = val;
	}
	,getBufferPointerv: function(target,pname) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
	}
	,getBufferSubData: function(target,offset,size,data) {
		this.__context.getBufferSubData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
	}
	,getBufferSubDataWEBGL: function(target,srcByteOffset,dstData,srcOffset,length) {
		if(srcOffset != null) this.__context.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length); else this.__context.getBufferSubData(target,srcByteOffset,dstData);
	}
	,getContextAttributes: function() {
		return this.__context.getContextAttributes();
	}
	,getError: function() {
		return this.__context.getError();
	}
	,getExtension: function(name) {
		return this.__context.getExtension(name);
	}
	,getFloat: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getFloatv: function(pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
		var result = this.__context.getParameter(pname);
		if(js_Boot.__instanceof(result,ArrayBufferView)) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i];
			}
		} else {
			var val;
			val = js_Boot.__cast(result , Float);
			view[0] = val;
		}
	}
	,getFragDataLocation: function(program,name) {
		return this.__context.getFragDataLocation(program,name);
	}
	,getFramebufferAttachmentParameter: function(target,attachment,pname) {
		return this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
	}
	,getFramebufferAttachmentParameteri: function(target,attachment,pname) {
		return this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
	}
	,getFramebufferAttachmentParameteriv: function(target,attachment,pname,params) {
		var value = this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = value;
	}
	,getIndexedParameter: function(target,index) {
		return this.__context.getIndexedParameter(target,index);
	}
	,getInteger: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getInteger64: function(pname) {
		var x = new haxe__$Int64__$_$_$Int64(0,0);
		return x;
	}
	,getInteger64i: function(pname) {
		var x = new haxe__$Int64__$_$_$Int64(0,0);
		return x;
	}
	,getInteger64i_v: function(pname,index,params) {
	}
	,getInteger64v: function(pname,params) {
	}
	,getIntegeri: function(pname) {
		return 0;
	}
	,getIntegeri_v: function(pname,index,params) {
	}
	,getIntegerv: function(pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var result = this.__context.getParameter(pname);
		if(js_Boot.__instanceof(result,ArrayBufferView)) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i];
			}
		} else {
			var val;
			val = js_Boot.__cast(result , Int);
			view[0] = val;
		}
	}
	,getInternalformati: function(target,internalformat,pname) {
		return 0;
	}
	,getInternalformativ: function(target,internalformat,pname,bufSize,params) {
	}
	,getInternalformatParameter: function(target,internalformat,pname) {
		return this.__context.getInternalformatParameter(target,internalformat,pname);
	}
	,getParameter: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getProgramBinary: function(program,binaryFormat) {
		return null;
	}
	,getProgrami: function(program,pname) {
		return this.__context.getProgramParameter(program,pname);
	}
	,getProgramiv: function(program,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var val = this.__context.getProgramParameter(program,pname);
		view[0] = val;
	}
	,getProgramInfoLog: function(program) {
		return this.__context.getProgramInfoLog(program);
	}
	,getProgramParameter: function(program,pname) {
		return this.__context.getProgramParameter(program,pname);
	}
	,getQuery: function(target,pname) {
		return this.__context.getQuery(target,pname);
	}
	,getQueryi: function(target,pname) {
		return 0;
	}
	,getQueryiv: function(target,pname,params) {
	}
	,getQueryObjectui: function(query,pname) {
		return 0;
	}
	,getQueryObjectuiv: function(query,pname,params) {
	}
	,getQueryParameter: function(query,pname) {
		return this.__context.getQueryParameter(query,pname);
	}
	,getRenderbufferParameter: function(target,pname) {
		return this.__context.getRenderbufferParameter(target,pname);
	}
	,getRenderbufferParameteri: function(target,pname) {
		return this.__context.getRenderbufferParameter(target,pname);
	}
	,getRenderbufferParameteriv: function(target,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var val = this.__context.getRenderbufferParameter(target,pname);
		view[0] = val;
	}
	,getSamplerParameter: function(sampler,pname) {
		return this.__context.getSamplerParameter(sampler,pname);
	}
	,getSamplerParameterf: function(sampler,pname) {
		return 0;
	}
	,getSamplerParameterfv: function(sampler,pname,params) {
	}
	,getSamplerParameteri: function(sampler,pname) {
		return 0;
	}
	,getSamplerParameteriv: function(sampler,pname,params) {
	}
	,getShaderi: function(shader,pname) {
		return this.__context.getShaderParameter(shader,pname);
	}
	,getShaderiv: function(shader,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var val = this.__context.getShaderParameter(shader,pname);
		view[0] = val;
	}
	,getShaderInfoLog: function(shader) {
		return this.__context.getShaderInfoLog(shader);
	}
	,getShaderParameter: function(shader,pname) {
		return this.__context.getShaderParameter(shader,pname);
	}
	,getShaderPrecisionFormat: function(shadertype,precisiontype) {
		return this.__context.getShaderPrecisionFormat(shadertype,precisiontype);
	}
	,getShaderSource: function(shader) {
		return this.__context.getShaderSource(shader);
	}
	,getString: function(pname) {
		if(pname == 7939) return this.__context.getSupportedExtensions().join(" "); else return this.__context.getParameter(pname);
	}
	,getStringi: function(name,index) {
		return null;
	}
	,getSupportedExtensions: function() {
		return this.__context.getSupportedExtensions();
	}
	,getSyncParameter: function(sync,pname) {
		return this.__context.getSyncParameter(sync,pname);
	}
	,getSyncParameteri: function(sync,pname) {
		return 0;
	}
	,getSyncParameteriv: function(sync,pname,params) {
	}
	,getTexParameter: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameterf: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameterfv: function(target,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
		var val = this.__context.getTexParameter(target,pname);
		view[0] = val;
	}
	,getTexParameteri: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameteriv: function(target,pname,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		var val = this.__context.getTexParameter(target,pname);
		view[0] = val;
	}
	,getTransformFeedbackVarying: function(program,index) {
		return this.__context.getTransformFeedbackVarying(program,index);
	}
	,getUniform: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformf: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformfv: function(program,location,params) {
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
		var val = this.__context.getUniform(program,location);
		view[0] = val;
	}
	,getUniformi: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformiv: function(program,location,params) {
		var value = this.__context.getUniform(program,location);
		var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
		view[0] = value;
	}
	,getUniformui: function(program,location) {
		return 0;
	}
	,getUniformuiv: function(program,location,params) {
	}
	,getUniformBlockIndex: function(program,uniformBlockName) {
		return this.__context.getUniformBlockIndex(program,uniformBlockName);
	}
	,getUniformIndices: function(program,uniformNames) {
		return this.__context.getUniformIndices(program,uniformNames);
	}
	,getUniformLocation: function(program,name) {
		return this.__context.getUniformLocation(program,name);
	}
	,getVertexAttrib: function(index,pname) {
		return this.__context.getVertexAttrib(index,pname);
	}
	,getVertexAttribf: function(index,pname) {
		return 0;
	}
	,getVertexAttribfv: function(index,pname,params) {
	}
	,getVertexAttribi: function(index,pname) {
		return 0;
	}
	,getVertexAttribIi: function(index,pname) {
		return 0;
	}
	,getVertexAttribIiv: function(index,pname,params) {
	}
	,getVertexAttribIui: function(index,pname) {
		return 0;
	}
	,getVertexAttribIuiv: function(index,pname,params) {
	}
	,getVertexAttribiv: function(index,pname,params) {
	}
	,getVertexAttribOffset: function(index,pname) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this.__context.getVertexAttribOffset(index,pname));
	}
	,getVertexAttribPointerv: function(index,pname) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this.__context.getVertexAttribOffset(index,pname));
	}
	,hint: function(target,mode) {
		this.__context.hint(target,mode);
	}
	,invalidateFramebuffer: function(target,attachments) {
		this.__context.invalidateFramebuffer(target,attachments);
	}
	,invalidateSubFramebuffer: function(target,attachments,x,y,width,height) {
		this.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
	}
	,isBuffer: function(buffer) {
		return this.__context.isBuffer(buffer);
	}
	,isContextLost: function() {
		return this.__contextLost || this.__context.isContextLost();
	}
	,isEnabled: function(cap) {
		return this.__context.isEnabled(cap);
	}
	,isFramebuffer: function(framebuffer) {
		return this.__context.isFramebuffer(framebuffer);
	}
	,isProgram: function(program) {
		return this.__context.isProgram(program);
	}
	,isQuery: function(query) {
		return this.__context.isQuery(query);
	}
	,isRenderbuffer: function(renderbuffer) {
		return this.__context.isRenderbuffer(renderbuffer);
	}
	,isSampler: function(sampler) {
		return this.__context.isSampler(sampler);
	}
	,isShader: function(shader) {
		return this.__context.isShader(shader);
	}
	,isSync: function(sync) {
		return this.__context.isSync(sync);
	}
	,isTexture: function(texture) {
		return this.__context.isTexture(texture);
	}
	,isTransformFeedback: function(transformFeedback) {
		return this.__context.isTransformFeedback(transformFeedback);
	}
	,isVertexArray: function(vertexArray) {
		return this.__context.isVertexArray(vertexArray);
	}
	,lineWidth: function(width) {
		this.__context.lineWidth(width);
	}
	,linkProgram: function(program) {
		this.__context.linkProgram(program);
	}
	,mapBufferRange: function(target,offset,length,access) {
		return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
	}
	,pauseTransformFeedback: function() {
		this.__context.pauseTransformFeedback();
	}
	,pixelStorei: function(pname,param) {
		this.__context.pixelStorei(pname,param);
	}
	,polygonOffset: function(factor,units) {
		this.__context.polygonOffset(factor,units);
	}
	,programBinary: function(program,binaryFormat,binary,length) {
	}
	,programParameteri: function(program,pname,value) {
	}
	,readBuffer: function(src) {
		this.__context.readBuffer(src);
	}
	,readPixels: function(x,y,width,height,format,type,pixels) {
		this.__context.readPixels(x,y,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(pixels));
	}
	,readPixelsWEBGL: function(x,y,width,height,format,type,pixels,dstOffset) {
		if(dstOffset != null) this.__context.readPixels(x,y,width,height,format,type,pixels,dstOffset); else this.__context.readPixels(x,y,width,height,format,type,pixels);
	}
	,releaseShaderCompiler: function() {
	}
	,renderbufferStorage: function(target,internalformat,width,height) {
		this.__context.renderbufferStorage(target,internalformat,width,height);
	}
	,renderbufferStorageMultisample: function(target,samples,internalFormat,width,height) {
		this.__context.renderbufferStorageMultisample(target,samples,internalFormat,width,height);
	}
	,resumeTransformFeedback: function() {
		this.__context.resumeTransformFeedback();
	}
	,sampleCoverage: function(value,invert) {
		this.__context.sampleCoverage(value,invert);
	}
	,samplerParameterf: function(sampler,pname,param) {
		this.__context.samplerParameterf(sampler,pname,param);
	}
	,samplerParameteri: function(sampler,pname,param) {
		this.__context.samplerParameteri(sampler,pname,param);
	}
	,scissor: function(x,y,width,height) {
		this.__context.scissor(x,y,width,height);
	}
	,shaderBinary: function(shaders,binaryformat,binary,length) {
	}
	,shaderSource: function(shader,source) {
		this.__context.shaderSource(shader,source);
	}
	,stencilFunc: function(func,ref,mask) {
		this.__context.stencilFunc(func,ref,mask);
	}
	,stencilFuncSeparate: function(face,func,ref,mask) {
		this.__context.stencilFuncSeparate(face,func,ref,mask);
	}
	,stencilMask: function(mask) {
		this.__context.stencilMask(mask);
	}
	,stencilMaskSeparate: function(face,mask) {
		this.__context.stencilMaskSeparate(face,mask);
	}
	,stencilOp: function(fail,zfail,zpass) {
		this.__context.stencilOp(fail,zfail,zpass);
	}
	,stencilOpSeparate: function(face,fail,zfail,zpass) {
		this.__context.stencilOpSeparate(face,fail,zfail,zpass);
	}
	,texImage2D: function(target,level,internalformat,width,height,border,format,type,data) {
		this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texImage2DWEBGL: function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
		if(srcOffset != null) this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset); else if(format != null) this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData); else this.__context.texImage2D(target,level,internalformat,width,height,border);
	}
	,texImage3D: function(target,level,internalformat,width,height,depth,border,format,type,data) {
		this.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texImage3DWEBGL: function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
		this.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
	}
	,texStorage2D: function(target,level,internalformat,width,height) {
		this.__context.texStorage2D(target,level,internalformat,width,height);
	}
	,texStorage3D: function(target,level,internalformat,width,height,depth) {
		this.__context.texStorage3D(target,level,internalformat,width,height,depth);
	}
	,texParameterf: function(target,pname,param) {
		this.__context.texParameterf(target,pname,param);
	}
	,texParameteri: function(target,pname,param) {
		this.__context.texParameteri(target,pname,param);
	}
	,texSubImage2D: function(target,level,xoffset,yoffset,width,height,format,type,data) {
		this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texSubImage2DWEBGL: function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
		if(srcOffset != null) this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset); else if(type != null) this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData); else this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
	,texSubImage3D: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
		this.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	}
	,texSubImage3DWEBGL: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
		this.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
	}
	,transformFeedbackVaryings: function(program,varyings,bufferMode) {
		this.__context.transformFeedbackVaryings(program,varyings,bufferMode);
	}
	,uniform1f: function(location,v0) {
		this.__context.uniform1f(location,v0);
	}
	,uniform1fv: function(location,count,v) {
		this.__context.uniform1fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4));
	}
	,uniform1fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform1fv(location,data,srcOffset,srcLength); else this.__context.uniform1fv(location,data);
	}
	,uniform1i: function(location,v0) {
		this.__context.uniform1i(location,v0);
	}
	,uniform1iv: function(location,count,v) {
		this.__context.uniform1iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4));
	}
	,uniform1ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform1iv(location,data,srcOffset,srcLength); else this.__context.uniform1iv(location,data);
	}
	,uniform1ui: function(location,v0) {
		this.__context.uniform1ui(location,v0);
		return;
	}
	,uniform1uiv: function(location,count,v) {
		this.__context.uniform1uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4));
	}
	,uniform1uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform1uiv(location,data,srcOffset,srcLength);
	}
	,uniform2f: function(location,v0,v1) {
		this.__context.uniform2f(location,v0,v1);
	}
	,uniform2fv: function(location,count,v) {
		this.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
	}
	,uniform2fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform2fv(location,data,srcOffset,srcLength); else this.__context.uniform2fv(location,data);
	}
	,uniform2i: function(location,x,y) {
		this.__context.uniform2i(location,x,y);
	}
	,uniform2iv: function(location,count,v) {
		this.__context.uniform2iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 2));
	}
	,uniform2ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform2iv(location,data,srcOffset,srcLength); else this.__context.uniform2iv(location,data);
	}
	,uniform2ui: function(location,v0,v1) {
		this.__context.uniform2ui(location,v0,v1);
	}
	,uniform2uiv: function(location,count,v) {
		this.__context.uniform2uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 2));
	}
	,uniform2uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform2uiv(location,data,srcOffset,srcLength);
	}
	,uniform3f: function(location,v0,v1,v2) {
		this.__context.uniform3f(location,v0,v1,v2);
	}
	,uniform3fv: function(location,count,v) {
		this.__context.uniform3fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 3));
	}
	,uniform3fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform3fv(location,data,srcOffset,srcLength); else this.__context.uniform3fv(location,data);
	}
	,uniform3i: function(location,x,y,z) {
		this.__context.uniform3i(location,x,y,z);
	}
	,uniform3iv: function(location,count,v) {
		this.__context.uniform3iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 3));
	}
	,uniform3ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform3iv(location,data,srcOffset,srcLength); else this.__context.uniform3iv(location,data);
	}
	,uniform3ui: function(location,v0,v1,v2) {
		this.__context.uniform3ui(location,v0,v1,v2);
	}
	,uniform3uiv: function(location,count,v) {
		this.__context.uniform3uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 3));
	}
	,uniform3uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform3uiv(location,data,srcOffset,srcLength);
	}
	,uniform4f: function(location,v0,v1,v2,v3) {
		this.__context.uniform4f(location,v0,v1,v2,v3);
	}
	,uniform4fv: function(location,count,v) {
		this.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
	}
	,uniform4fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform4fv(location,data,srcOffset,srcLength); else this.__context.uniform4fv(location,data);
	}
	,uniform4i: function(location,v0,v1,v2,v3) {
		this.__context.uniform4i(location,v0,v1,v2,v3);
	}
	,uniform4iv: function(location,count,v) {
		this.__context.uniform4iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 4));
	}
	,uniform4ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniform4iv(location,data,srcOffset,srcLength); else this.__context.uniform4iv(location,data);
	}
	,uniform4ui: function(location,v0,v1,v2,v3) {
		this.__context.uniform4ui(location,v0,v1,v2,v3);
	}
	,uniform4uiv: function(location,count,v) {
		this.__context.uniform4uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 4));
	}
	,uniform4uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform4uiv(location,data,srcOffset,srcLength);
	}
	,uniformBlockBinding: function(program,uniformBlockIndex,uniformBlockBinding) {
		this.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
	}
	,uniformMatrix2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
	}
	,uniformMatrix2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength); else this.__context.uniformMatrix2fv(location,transpose,data);
	}
	,uniformMatrix2x3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
	}
	,uniformMatrix2x3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix2x3fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix2x4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
	}
	,uniformMatrix2x4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix2x4fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 9));
	}
	,uniformMatrix3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength); else this.__context.uniformMatrix3fv(location,transpose,data);
	}
	,uniformMatrix3x2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
	}
	,uniformMatrix3x2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix3x2fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix3x4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
	}
	,uniformMatrix3x4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix3x4fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 16));
	}
	,uniformMatrix4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength); else this.__context.uniformMatrix4fv(location,transpose,data);
	}
	,uniformMatrix4x2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
	}
	,uniformMatrix4x2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) this.__context.uniformMatrix4x2fv(location,transpose,data,srcOffset,srcLength); else this.__context.uniformMatrix4x2fv(location,transpose,data);
	}
	,uniformMatrix4x3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
	}
	,uniformMatrix4x3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix4x3fv(location,transpose,data,srcOffset,srcLength);
	}
	,unmapBuffer: function(target) {
		return false;
	}
	,useProgram: function(program) {
		this.__context.useProgram(program);
	}
	,validateProgram: function(program) {
		this.__context.validateProgram(program);
	}
	,vertexAttrib1f: function(index,v0) {
		this.__context.vertexAttrib1f(index,v0);
	}
	,vertexAttrib1fv: function(index,v) {
		this.__context.vertexAttrib1fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib1fvWEBGL: function(index,v) {
		this.__context.vertexAttrib1fv(index,v);
	}
	,vertexAttrib2f: function(index,v0,v1) {
		this.__context.vertexAttrib2f(index,v0,v1);
	}
	,vertexAttrib2fv: function(index,v) {
		this.__context.vertexAttrib2fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib2fvWEBGL: function(index,v) {
		this.__context.vertexAttrib2fv(index,v);
	}
	,vertexAttrib3f: function(index,v0,v1,v2) {
		this.__context.vertexAttrib3f(index,v0,v1,v2);
	}
	,vertexAttrib3fv: function(index,v) {
		this.__context.vertexAttrib3fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib3fvWEBGL: function(index,v) {
		this.__context.vertexAttrib3fv(index,v);
	}
	,vertexAttrib4f: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttrib4f(index,v0,v1,v2,v3);
	}
	,vertexAttrib4fv: function(index,v) {
		this.__context.vertexAttrib4fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
	}
	,vertexAttrib4fvWEBGL: function(index,v) {
		this.__context.vertexAttrib4fv(index,v);
	}
	,vertexAttribDivisor: function(index,divisor) {
		this.__context.vertexAttribDivisor(index,divisor);
	}
	,vertexAttribI4i: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttribI4i(index,v0,v1,v2,v3);
	}
	,vertexAttribI4iv: function(index,v) {
		this.__context.vertexAttribI4iv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v));
	}
	,vertexAttribI4ivWEBGL: function(index,v) {
		this.__context.vertexAttribI4iv(index,v);
	}
	,vertexAttribI4ui: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttribI4ui(index,v0,v1,v2,v3);
	}
	,vertexAttribI4uiv: function(index,v) {
		this.__context.vertexAttribI4uiv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v));
	}
	,vertexAttribI4uivWEBGL: function(index,v) {
		this.__context.vertexAttribI4uiv(index,v);
	}
	,vertexAttribIPointer: function(index,size,type,stride,offset) {
		this.__context.vertexAttribIPointer(index,size,type,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
	}
	,vertexAttribPointer: function(index,size,type,normalized,stride,offset) {
		this.__context.vertexAttribPointer(index,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
	}
	,viewport: function(x,y,width,height) {
		this.__context.viewport(x,y,width,height);
	}
	,waitSync: function(sync,flags,timeout) {
		this.__context.waitSync(sync,flags,timeout);
	}
	,get_canvas: function() {
		return this.__context.canvas;
	}
	,get_drawingBufferHeight: function() {
		return this.__context.drawingBufferHeight;
	}
	,get_drawingBufferWidth: function() {
		return this.__context.drawingBufferWidth;
	}
	,__class__: lime__$backend_html5_HTML5GLRenderContext
	,__properties__: {get_drawingBufferWidth:"get_drawingBufferWidth",get_drawingBufferHeight:"get_drawingBufferHeight",get_canvas:"get_canvas"}
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	return promise.future;
};
lime__$backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit && lime__$backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$backend_html5_HTML5HTTPRequest.requestQueue.pop();
		var _g = queueItem.type;
		switch(_g) {
		case "IMAGE":
			lime__$backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) return ""; else return hostname;
};
lime__$backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") switch(protocol) {
	case "ftp:":
		return "21";
	case "gopher:":
		return "70";
	case "http:":
		return "80";
	case "https:":
		return "443";
	case "ws:":
		return "80";
	case "wss:":
		return "443";
	default:
		return "";
	}
	return port;
};
lime__$backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") return "http:"; else return protocol;
};
lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$backend_html5_HTML5HTTPRequest.originElement == null) {
		var _this = window.document;
		lime__$backend_html5_HTML5HTTPRequest.originElement = _this.createElement("a");
		lime__$backend_html5_HTML5HTTPRequest.originHostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$backend_html5_HTML5HTTPRequest.originProtocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$backend_html5_HTML5HTTPRequest.originPort = lime__$backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") a.href = a.href;
	var hostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$backend_html5_HTML5HTTPRequest.originPort;
	return protocol != "file:" && sameHost && samePort;
};
lime__$backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) image.crossOrigin = "Anonymous";
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress == null) lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) promise.progress(event4.loaded,event4.total);
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) this.request.abort();
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") this.request.upload.addEventListener("progress",progress,false); else this.request.addEventListener("progress",progress,false);
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var $it0 = this.parent.formData.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(query.length > 0) query += "&";
				query += encodeURIComponent(key) + "=" + StringTools.urlEncode(Std.string(this.parent.formData.get(key)));
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) uri += "&" + query; else uri += "?" + query;
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) this.request.timeout = this.parent.timeout;
		if(this.binary) this.request.responseType = "arraybuffer";
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") contentType = header.value; else this.request.setRequestHeader(header.name,header.value);
		}
		if(this.parent.contentType != null) contentType = this.parent.contentType;
		if(contentType == null) {
			if(this.parent.data != null) contentType = "application/octet-stream"; else if(query != "") contentType = "application/x-www-form-urlencoded";
		}
		if(contentType != null) this.request.setRequestHeader("Content-Type",contentType);
		if(this.parent.withCredentials) this.request.withCredentials = true;
		if(this.parent.data != null) this.request.send(this.parent.data.b.bufferValue); else this.request.send(query);
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim((function($this) {
					var $r;
					var len = line.indexOf(":");
					$r = HxOverrides.substr(line,0,len);
					return $r;
				}(this)));
				value = StringTools.trim((function($this) {
					var $r;
					var pos = line.indexOf(":") + 1;
					$r = HxOverrides.substr(line,pos,null);
					return $r;
				}(this)));
				if(name != "") this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _g = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_g.request.readyState != 4) return;
			if(_g.request.status != null && (_g.request.status >= 200 && _g.request.status < 400 || _g.validStatus0 && _g.request.status == 0)) {
				var bytes;
				if(_g.request.responseType == "") bytes = haxe_io_Bytes.ofString(_g.request.responseText); else bytes = haxe_io_Bytes.ofData(_g.request.response);
				_g.processResponse();
				promise.complete(bytes);
			} else {
				_g.processResponse();
				promise.error(_g.request.status);
			}
			_g.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _g = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_g.request.readyState != 4) return;
			if(_g.request.status != null && (_g.request.status >= 200 && _g.request.status <= 400 || _g.validStatus0 && _g.request.status == 0)) {
				_g.processResponse();
				promise.complete(_g.request.responseText);
			} else {
				_g.processResponse();
				promise.error(_g.request.status);
			}
			_g.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(!Object.prototype.hasOwnProperty.call(this.parent.window.config,"hardware") || this.parent.window.config.hardware) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null;
				var colorDepth;
				if(Object.prototype.hasOwnProperty.call(this.parent.window.config,"colorDepth")) colorDepth = this.parent.window.config.colorDepth; else colorDepth = 16;
				var options = { alpha : transparentBackground || colorDepth > 16?true:false, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing")?this.parent.window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer")?this.parent.window.config.stencilBuffer:false, preserveDrawingBuffer : false};
				var _g = 0;
				var _g1 = ["webgl2","webgl","experimental-webgl"];
				while(_g < _g1.length) {
					var name = _g1[_g];
					++_g;
					webgl = this.parent.window.backend.canvas.getContext(name,options);
					if(webgl != null) break;
				}
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = new lime__$backend_html5_HTML5GLRenderContext(webgl);
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			if(lime_graphics_opengl_GL.context != null) lime_graphics_opengl_GL.context.__contextLost = true;
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height); else rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI) this.scale = window.devicePixelRatio;
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.cacheElementWidth = this.parent.__width;
			this.cacheElementHeight = this.parent.__height;
			this.resizeElement = true;
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.updateSize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) event.preventDefault();
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g1 = 0;
			var _g = changeEvents.length;
			while(_g1 < _g) {
				var i = _g1++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			if(lime__$backend_html5_HTML5Window.textInput.value.charAt(0) == lime__$backend_html5_HTML5Window.dummyCharacter) this.parent.onTextInput.dispatch(HxOverrides.substr(lime__$backend_html5_HTML5Window.textInput.value,1,null)); else this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) event.preventDefault();
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) event.preventDefault();
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) event.preventDefault();
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) event.preventDefault();
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) event.preventDefault();
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.enableTextEvents) this.parent.onTextInput.dispatch(text);
			event.preventDefault();
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					var _g2 = event.type;
					switch(_g2) {
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) this.primaryTouch = null;
						break;
					default:
					}
				}
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		var inputEnabled = this.enableTextEvents;
		this.setEnableTextEvents(true);
		var cacheText = lime__$backend_html5_HTML5Window.textInput.value;
		lime__$backend_html5_HTML5Window.textInput.value = value;
		lime__$backend_html5_HTML5Window.textInput.select();
		if(window.document.queryCommandEnabled("copy")) window.document.execCommand("copy");
		lime__$backend_html5_HTML5Window.textInput.value = cacheText;
		this.setEnableTextEvents(inputEnabled);
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.requestFullscreen();
				} else if(this.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.mozRequestFullScreen();
				} else if(this.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.webkitRequestFullscreen();
				} else if(this.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) document.exitFullscreen(); else if(document.mozCancelFullScreen) document.mozCancelFullScreen(); else if(document.webkitExitFullscreen) document.webkitExitFullscreen(); else if(document.msExitFullscreen) document.msExitFullscreen();
		}
		return value;
	}
	,setIcon: function(image) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) link = window.document.createElement("link");
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		if(value != null) window.document.title = value;
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) return;
		var elementWidth;
		var elementHeight;
		if(this.element != null) {
			elementWidth = this.element.clientWidth;
			elementHeight = this.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.set_width(elementWidth);
						this.parent.set_height(elementHeight);
						if(this.canvas != null) {
							if(this.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX;
					if(this.setWidth != 0) scaleX = elementWidth / this.setWidth; else scaleX = 1;
					var scaleY;
					if(this.setHeight != 0) scaleY = elementHeight / this.setHeight; else scaleY = 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime__$backend_native_NativeCFFI = function() { };
$hxClasses["lime._backend.native.NativeCFFI"] = lime__$backend_native_NativeCFFI;
lime__$backend_native_NativeCFFI.__name__ = ["lime","_backend","native","NativeCFFI"];
var lime__$macros_AssetsMacro = function() { };
$hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
lime__$macros_AssetsMacro.__name__ = ["lime","_macros","AssetsMacro"];
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) async = false;
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else try {
			this.value = work();
			this.isComplete = true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.error = e;
			this.isError = true;
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) onError.add(function(error) {
		promise.error(error);
	},true);
	if(onProgress != null) onProgress.add(function(progress,total) {
		promise.progress(progress,total);
	},true);
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) listener(this.value); else if(!this.isError) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) listener(this.error); else if(!this.isComplete) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) waitTime = -1;
		if(this.isComplete || this.isError) return this; else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 157, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) waitTime = -1;
		this.ready(waitTime);
		if(this.isComplete) return this.value; else return null;
	}
	,then: function(next) {
		if(this.isComplete) return next(this.value); else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,loadedStage: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(HxOverrides.indexOf(this.libraryNames,name,0) == -1) this.libraryNames.push(name);
	}
	,create: function(config) {
	}
	,load: function() {
		var _g2 = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g3 = 0;
		var _g11 = this.libraries;
		while(_g3 < _g11.length) {
			var library1 = [_g11[_g3]];
			++_g3;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 153, className : "lime.app.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library1) {
				return function(loaded,total) {
					if(!(_g2.bytesLoadedCache.h.__keys__[library1[0].__id__] != null)) _g2.bytesLoaded += loaded; else _g2.bytesLoaded += loaded - _g2.bytesLoadedCache.h[library1[0].__id__];
					_g2.bytesLoadedCache.set(library1[0],loaded);
					if(!_g2.simulateProgress) _g2.onProgress.dispatch(_g2.bytesLoaded,_g2.bytesTotal);
				};
			})(library1)).onComplete((function(library1) {
				return function(_) {
					if(!(_g2.bytesLoadedCache.h.__keys__[library1[0].__id__] != null)) _g2.bytesLoaded += library1[0].bytesTotal; else _g2.bytesLoaded += library1[0].bytesTotal - _g2.bytesLoadedCache.h[library1[0].__id__];
					_g2.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 191, className : "lime.app.Preloader", methodName : "load"});
				};
			})());
		}
		var _g4 = 0;
		var _g12 = this.libraryNames;
		while(_g4 < _g12.length) {
			var name = _g12[_g4];
			++_g4;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) current++;
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 223, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"}); else lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 227, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		this.updateProgress();
	}
	,start: function() {
		if(this.complete) return;
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _g2 = this;
		if(!this.simulateProgress) this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 276, className : "lime.app.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!_g2.bytesTotalCache.exists(name[0])) {
								_g2.bytesTotalCache.set(name[0],total);
								_g2.bytesTotal += total - 200;
							}
							if(loaded > total) loaded = total;
							if(!_g2.bytesLoadedCache2.exists(name[0])) _g2.bytesLoaded += loaded; else _g2.bytesLoaded += loaded - _g2.bytesLoadedCache2.get(name[0]);
							_g2.bytesLoadedCache2.set(name[0],loaded);
							if(!_g2.simulateProgress) _g2.onProgress.dispatch(_g2.bytesLoaded,_g2.bytesTotal);
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total1 = 200;
						if(_g2.bytesTotalCache.exists(name[0])) total1 = _g2.bytesTotalCache.get(name[0]);
						if(!_g2.bytesLoadedCache2.exists(name[0])) _g2.bytesLoaded += total1; else _g2.bytesLoaded += total1 - _g2.bytesLoadedCache2.get(name[0]);
						_g2.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 335, className : "lime.app.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 349, className : "lime.app.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) type = lime_graphics_ImageType.CANVAS;
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null && color != 0) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) return null;
	var image = new lime_graphics_Image();
	image.__fromFile(path);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) return lime_app_Future.withValue(null);
	return lime__$backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) return lime_app_Future.withValue(null);
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else if(lime_graphics_Image.__isWebP(bytes)) type = "image/webp"; else return lime_app_Future.withValue(null);
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) return lime_app_Future.withValue(null);
	return lime__$backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) return false;
	var header = bytes.getString(0,6);
	return header == "GIF87a" || header == "GIF89a";
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) return false;
	return bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255 && bytes.b[bytes.length - 1] == 217;
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) return false;
	return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10;
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) return false;
	return bytes.getString(0,4) == "RIFF" && bytes.getString(8,4) == "WEBP";
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this); else lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) sourceImage = this.clone();
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		if(endian == null) endian = lime_system_Endian.BIG_ENDIAN;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(this.buffer == null || sourceImage == null || sourceRect == null) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format != null) switch(format) {
			case 1:
				_color = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb = 0;
					argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					_color = argb;
				}
				break;
			default:
				{
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					_color = argb1;
				}
			} else {
				var rgba1 = color;
				var argb2 = 0;
				argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				_color = argb2;
			}
			var _mask;
			if(format != null) switch(format) {
			case 1:
				_mask = mask;
				break;
			case 2:
				{
					var bgra1 = mask;
					var argb3 = 0;
					argb3 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
					_mask = argb3;
				}
				break;
			default:
				{
					var rgba2 = mask;
					var argb4 = 0;
					argb4 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
					_mask = argb4;
				}
			} else {
				var rgba3 = mask;
				var argb5 = 0;
				argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
				_mask = argb5;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else return;
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.set(position++,66);
		data.set(position++,77);
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.set(position++,32);
		data.set(position++,110);
		data.set(position++,105);
		data.set(position++,87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.set(position++,0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			readPosition = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
			}
		}
		break;
	case 2:
		var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
		var maskPosition = 0;
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			readPosition = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
				andMask.set(maskPosition++,0);
			}
		}
		data.blit(position,andMask,0,image.width * image.height);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			readPosition = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.set(position++,0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version",get_type:"get_type"}
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.__context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.__context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.__context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.__context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.__context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.__context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.__context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.__context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.__context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.__context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.__context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.__context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.__context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.__context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.__context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.__context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,size,srcData,usage) {
	lime_graphics_opengl_GL.context.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size),usage);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	lime_graphics_opengl_GL.context.bufferDataWEBGL(target,srcData,usage,srcOffset,length);
};
lime_graphics_opengl_GL.bufferSubData = function(target,dstByteOffset,size,srcData) {
	lime_graphics_opengl_GL.context.__context.bufferSubData(target,dstByteOffset,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData,size));
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	lime_graphics_opengl_GL.context.bufferSubDataWEBGL(target,dstByteOffset,srcData,srcOffset,length);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.__context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.__context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfv = function(buffer,drawbuffer,value) {
	lime_graphics_opengl_GL.context.__context.clearBufferfv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(value));
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferiv = function(buffer,drawbuffer,value) {
	lime_graphics_opengl_GL.context.__context.clearBufferiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(value));
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuiv = function(buffer,drawbuffer,value) {
	lime_graphics_opengl_GL.context.__context.clearBufferuiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(value));
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.__context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.__context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearDepthf = function(depth) {
	lime_graphics_opengl_GL.context.__context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.__context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.__context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.__context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.__context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexImage2D(target,level,internalformat,width,height,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexImage3D = function(target,level,internalformat,width,height,depth,border,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
	lime_graphics_opengl_GL.context.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3DWEBGL(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyBufferSubData = function(readTarget,writeTarget,readOffset,writeOffset,size) {
	null;
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.__context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.__context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.__context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.__context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.__context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.__context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.__context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.__context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.__context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.__context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.__context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.__context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.__context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.__context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.__context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.__context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.__context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.__context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.__context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.__context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.__context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.__context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.__context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.__context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.depthRangef = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.__context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.__context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.__context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.__context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.__context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset));
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.__context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.__context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.__context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.__context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.__context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.__context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.__context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.__context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.__context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlocki = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniformBlockiv = function(program,uniformBlockIndex,pname,params) {
	lime_graphics_opengl_GL.context.getActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.__context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getActiveUniformsiv = function(program,uniformIndices,pname,params) {
	null;
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.__context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.__context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBoolean = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getBooleanv = function(pname,params) {
	lime_graphics_opengl_GL.context.getBooleanv(pname,params);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferParameteri = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferParameteri64v = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getBufferParameteri64v(target,pname,params);
	return;
};
lime_graphics_opengl_GL.getBufferParameteriv = function(target,pname,data) {
	lime_graphics_opengl_GL.context.getBufferParameteriv(target,pname,data);
	return;
};
lime_graphics_opengl_GL.getBufferPointerv = function(target,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl_GL.getBufferSubData = function(target,offset,size,data) {
	lime_graphics_opengl_GL.context.__context.getBufferSubData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	lime_graphics_opengl_GL.context.getBufferSubDataWEBGL(target,srcByteOffset,dstData,srcOffset,length);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.__context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.__context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.__context.getExtension(name);
};
lime_graphics_opengl_GL.getFloat = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getFloatv = function(pname,params) {
	lime_graphics_opengl_GL.context.getFloatv(pname,params);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.__context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameteri = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameteriv = function(target,attachment,pname,params) {
	lime_graphics_opengl_GL.context.getFramebufferAttachmentParameteriv(target,attachment,pname,params);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.__context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInteger = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getInteger64 = function(pname) {
	return lime_graphics_opengl_GL.context.getInteger64(pname);
};
lime_graphics_opengl_GL.getInteger64i = function(pname) {
	return lime_graphics_opengl_GL.context.getInteger64i(pname);
};
lime_graphics_opengl_GL.getInteger64i_v = function(pname,index,params) {
	return null;
};
lime_graphics_opengl_GL.getInteger64v = function(pname,params) {
	lime_graphics_opengl_GL.context.getInteger64v(pname,params);
	return;
};
lime_graphics_opengl_GL.getIntegeri_v = function(pname,index,params) {
	return null;
};
lime_graphics_opengl_GL.getIntegerv = function(pname,params) {
	lime_graphics_opengl_GL.context.getIntegerv(pname,params);
};
lime_graphics_opengl_GL.getInternalformati = function(target,internalformat,pname) {
	return 0;
};
lime_graphics_opengl_GL.getInternalformativ = function(target,internalformat,pname,bufSize,params) {
	lime_graphics_opengl_GL.context.getInternalformativ(target,internalformat,pname,bufSize,params);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.__context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.__context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgrami = function(program,pname) {
	return lime_graphics_opengl_GL.context.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getProgramiv = function(program,pname,params) {
	lime_graphics_opengl_GL.context.getProgramiv(program,pname,params);
};
lime_graphics_opengl_GL.getProgramBinary = function(program,binaryFormat) {
	return null;
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryi = function(target,pname) {
	return 0;
};
lime_graphics_opengl_GL.getQueryiv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getQueryiv(target,pname,params);
};
lime_graphics_opengl_GL.getQueryObjectui = function(query,pname) {
	return 0;
};
lime_graphics_opengl_GL.getQueryObjectuiv = function(query,pname,params) {
	lime_graphics_opengl_GL.context.getQueryObjectuiv(query,pname,params);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.__context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameteri = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameteriv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getRenderbufferParameteriv(target,pname,params);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.__context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getSamplerParameterf = function(sampler,pname) {
	return 0;
};
lime_graphics_opengl_GL.getSamplerParameterfv = function(sampler,pname,params) {
	lime_graphics_opengl_GL.context.getSamplerParameterfv(sampler,pname,params);
};
lime_graphics_opengl_GL.getSamplerParameteri = function(sampler,pname) {
	return 0;
};
lime_graphics_opengl_GL.getSamplerParameteriv = function(sampler,pname,params) {
	lime_graphics_opengl_GL.context.getSamplerParameteriv(sampler,pname,params);
};
lime_graphics_opengl_GL.getShaderi = function(shader,pname) {
	return lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderiv = function(shader,pname,params) {
	lime_graphics_opengl_GL.context.getShaderiv(shader,pname,params);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.__context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.__context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getString = function(name) {
	return lime_graphics_opengl_GL.context.getString(name);
};
lime_graphics_opengl_GL.getStringi = function(name,index) {
	return null;
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.__context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.__context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getSyncParameteri = function(sync,pname) {
	return 0;
};
lime_graphics_opengl_GL.getSyncParameteriv = function(sync,pname,params) {
	lime_graphics_opengl_GL.context.getSyncParameteriv(sync,pname,params);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTexParameterf = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTexParameterfv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getTexParameterfv(target,pname,params);
};
lime_graphics_opengl_GL.getTexParameteri = function(target,pname) {
	return lime_graphics_opengl_GL.context.__context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTexParameteriv = function(target,pname,params) {
	lime_graphics_opengl_GL.context.getTexParameteriv(target,pname,params);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.__context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.__context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformf = function(program,location) {
	return lime_graphics_opengl_GL.context.__context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformfv = function(program,location,params) {
	lime_graphics_opengl_GL.context.getUniformfv(program,location,params);
};
lime_graphics_opengl_GL.getUniformi = function(program,location) {
	return lime_graphics_opengl_GL.context.__context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformiv = function(program,location,params) {
	lime_graphics_opengl_GL.context.getUniformiv(program,location,params);
};
lime_graphics_opengl_GL.getUniformui = function(program,location) {
	return 0;
};
lime_graphics_opengl_GL.getUniformuiv = function(program,location,params) {
	lime_graphics_opengl_GL.context.getUniformuiv(program,location,params);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.__context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.__context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.__context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.__context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribf = function(index,pname) {
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribfv = function(index,pname,params) {
	lime_graphics_opengl_GL.context.getVertexAttribfv(index,pname,params);
};
lime_graphics_opengl_GL.getVertexAttribi = function(index,pname) {
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribIi = function(index,pname) {
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribIiv = function(index,pname,params) {
	null;
};
lime_graphics_opengl_GL.getVertexAttribIui = function(index,pname) {
	return 0;
};
lime_graphics_opengl_GL.getVertexAttribIuiv = function(index,pname,params) {
	null;
};
lime_graphics_opengl_GL.getVertexAttribiv = function(index,pname,params) {
	lime_graphics_opengl_GL.context.getVertexAttribiv(index,pname,params);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.getVertexAttribPointerv = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.__context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.__context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.__context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.__context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.__context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.__context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.__context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.__context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.__context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.__context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.__context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.__context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.__context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.__context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.__context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.__context.linkProgram(program);
};
lime_graphics_opengl_GL.mapBufferRange = function(target,offset,length,access) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.__context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.__context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.__context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.programBinary = function(program,binaryFormat,binary,length) {
	null;
};
lime_graphics_opengl_GL.programParameteri = function(program,pname,value) {
	null;
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.__context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer(pixels));
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	lime_graphics_opengl_GL.context.readPixelsWEBGL(x,y,width,height,format,type,pixels,dstOffset);
};
lime_graphics_opengl_GL.releaseShaderCompiler = function() {
	null;
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.__context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.__context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.__context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.__context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.__context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.__context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderBinary = function(shaders,binaryformat,binary,length) {
	null;
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.__context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.__context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.__context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.__context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.__context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	lime_graphics_opengl_GL.context.__context.texImage2D(target,level,internalformat,width,height,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texImage3D = function(target,level,internalformat,width,height,depth,border,format,type,data) {
	lime_graphics_opengl_GL.context.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.__context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.__context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.__context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.__context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(pixels));
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texSubImage3D = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
	lime_graphics_opengl_GL.context.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.__context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.__context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform1fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4));
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.__context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform1iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4));
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.__context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform1uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4));
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.__context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.__context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform2iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.__context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform2uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform3fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 3));
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform3iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform3uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4fvWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4iv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform4iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4ivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uiv = function(location,count,v) {
	lime_graphics_opengl_GL.context.__context.uniform4uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uivWEBGL(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x3fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix2x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 9));
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x2fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix3x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 16));
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x2fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fv = function(location,count,transpose,v) {
	lime_graphics_opengl_GL.context.__context.uniformMatrix4x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.unmapBuffer = function(target) {
	return false;
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.__currentProgram = program;
	lime_graphics_opengl_GL.context.__context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.__context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib1fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib2fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib3fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttrib4fv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v));
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.__context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4iv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v));
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.__context.vertexAttribI4uiv(index,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v));
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.__context.vertexAttribIPointer(index,size,type,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.__context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.__context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.get_type = function() {
	return lime_graphics_opengl_GL.context.type;
};
lime_graphics_opengl_GL.get_version = function() {
	return lime_graphics_opengl_GL.context.version;
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) return 0; else return object.id;
};
var lime_graphics_opengl_GLContextType = $hxClasses["lime.graphics.opengl.GLContextType"] = { __ename__ : ["lime","graphics","opengl","GLContextType"], __constructs__ : ["OPENGL","GLES","WEBGL"] };
lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL",0];
lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
lime_graphics_opengl_GLContextType.OPENGL.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.GLES = ["GLES",1];
lime_graphics_opengl_GLContextType.GLES.toString = $estr;
lime_graphics_opengl_GLContextType.GLES.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL",2];
lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
lime_graphics_opengl_GLContextType.WEBGL.__enum__ = lime_graphics_opengl_GLContextType;
var lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLES2Context.GLES2Context_Impl_"] = lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$;
lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$.__name__ = ["lime","graphics","opengl","_GLES2Context","GLES2Context_Impl_"];
lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLES3Context.GLES3Context_Impl_"] = lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$;
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.__name__ = ["lime","graphics","opengl","_GLES3Context","GLES3Context_Impl_"];
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.__properties__ = {get_version:"get_version",get_type:"get_type",get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL:"get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",get_TIMEOUT_IGNORED:"get_TIMEOUT_IGNORED",get_INVALID_INDEX:"get_INVALID_INDEX",get_DEPTH32F_STENCIL8:"get_DEPTH32F_STENCIL8",get_DEPTH_COMPONENT32F:"get_DEPTH_COMPONENT32F",get_DYNAMIC_COPY:"get_DYNAMIC_COPY",get_DYNAMIC_READ:"get_DYNAMIC_READ",get_STATIC_COPY:"get_STATIC_COPY",get_STATIC_READ:"get_STATIC_READ",get_STREAM_COPY:"get_STREAM_COPY",get_STREAM_READ:"get_STREAM_READ",get_DEPTH_COMPONENT24:"get_DEPTH_COMPONENT24",get_MAX:"get_MAX",get_MIN:"get_MIN",get_STENCIL:"get_STENCIL",get_DEPTH:"get_DEPTH",get_COLOR:"get_COLOR",get_SYNC_FLUSH_COMMANDS_BIT:"get_SYNC_FLUSH_COMMANDS_BIT",get_WAIT_FAILED:"get_WAIT_FAILED",get_CONDITION_SATISFIED:"get_CONDITION_SATISFIED",get_TIMEOUT_EXPIRED:"get_TIMEOUT_EXPIRED",get_ALREADY_SIGNALED:"get_ALREADY_SIGNALED",get_SIGNALED:"get_SIGNALED",get_UNSIGNALED:"get_UNSIGNALED",get_SYNC_GPU_COMMANDS_COMPLETE:"get_SYNC_GPU_COMMANDS_COMPLETE",get_SYNC_FENCE:"get_SYNC_FENCE",get_SYNC_FLAGS:"get_SYNC_FLAGS",get_SYNC_STATUS:"get_SYNC_STATUS",get_SYNC_CONDITION:"get_SYNC_CONDITION",get_OBJECT_TYPE:"get_OBJECT_TYPE",get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:"get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",get_UNIFORM_BLOCK_ACTIVE_UNIFORMS:"get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",get_UNIFORM_BLOCK_DATA_SIZE:"get_UNIFORM_BLOCK_DATA_SIZE",get_UNIFORM_BLOCK_BINDING:"get_UNIFORM_BLOCK_BINDING",get_UNIFORM_IS_ROW_MAJOR:"get_UNIFORM_IS_ROW_MAJOR",get_UNIFORM_MATRIX_STRIDE:"get_UNIFORM_MATRIX_STRIDE",get_UNIFORM_ARRAY_STRIDE:"get_UNIFORM_ARRAY_STRIDE",get_UNIFORM_OFFSET:"get_UNIFORM_OFFSET",get_UNIFORM_BLOCK_INDEX:"get_UNIFORM_BLOCK_INDEX",get_UNIFORM_SIZE:"get_UNIFORM_SIZE",get_UNIFORM_TYPE:"get_UNIFORM_TYPE",get_ACTIVE_UNIFORM_BLOCKS:"get_ACTIVE_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_OFFSET_ALIGNMENT:"get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:"get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",get_MAX_UNIFORM_BLOCK_SIZE:"get_MAX_UNIFORM_BLOCK_SIZE",get_MAX_UNIFORM_BUFFER_BINDINGS:"get_MAX_UNIFORM_BUFFER_BINDINGS",get_MAX_COMBINED_UNIFORM_BLOCKS:"get_MAX_COMBINED_UNIFORM_BLOCKS",get_MAX_FRAGMENT_UNIFORM_BLOCKS:"get_MAX_FRAGMENT_UNIFORM_BLOCKS",get_MAX_VERTEX_UNIFORM_BLOCKS:"get_MAX_VERTEX_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_SIZE:"get_UNIFORM_BUFFER_SIZE",get_UNIFORM_BUFFER_START:"get_UNIFORM_BUFFER_START",get_UNIFORM_BUFFER_BINDING:"get_UNIFORM_BUFFER_BINDING",get_UNIFORM_BUFFER:"get_UNIFORM_BUFFER",get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:"get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",get_RENDERBUFFER_SAMPLES:"get_RENDERBUFFER_SAMPLES",get_READ_FRAMEBUFFER_BINDING:"get_READ_FRAMEBUFFER_BINDING",get_DRAW_FRAMEBUFFER:"get_DRAW_FRAMEBUFFER",get_READ_FRAMEBUFFER:"get_READ_FRAMEBUFFER",get_DRAW_FRAMEBUFFER_BINDING:"get_DRAW_FRAMEBUFFER_BINDING",get_DEPTH24_STENCIL8:"get_DEPTH24_STENCIL8",get_FRAMEBUFFER_DEFAULT:"get_FRAMEBUFFER_DEFAULT",get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:"get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:"get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:"get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:"get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:"get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",get_FRAMEBUFFER_ATTACHMENT_RED_SIZE:"get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:"get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",get_TRANSFORM_FEEDBACK_BINDING:"get_TRANSFORM_FEEDBACK_BINDING",get_TRANSFORM_FEEDBACK_ACTIVE:"get_TRANSFORM_FEEDBACK_ACTIVE",get_TRANSFORM_FEEDBACK_PAUSED:"get_TRANSFORM_FEEDBACK_PAUSED",get_TRANSFORM_FEEDBACK:"get_TRANSFORM_FEEDBACK",get_TRANSFORM_FEEDBACK_BUFFER_BINDING:"get_TRANSFORM_FEEDBACK_BUFFER_BINDING",get_TRANSFORM_FEEDBACK_BUFFER:"get_TRANSFORM_FEEDBACK_BUFFER",get_SEPARATE_ATTRIBS:"get_SEPARATE_ATTRIBS",get_INTERLEAVED_ATTRIBS:"get_INTERLEAVED_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:"get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",get_TRANSFORM_FEEDBACK_BUFFER_SIZE:"get_TRANSFORM_FEEDBACK_BUFFER_SIZE",get_TRANSFORM_FEEDBACK_BUFFER_START:"get_TRANSFORM_FEEDBACK_BUFFER_START",get_TRANSFORM_FEEDBACK_VARYINGS:"get_TRANSFORM_FEEDBACK_VARYINGS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",get_TRANSFORM_FEEDBACK_BUFFER_MODE:"get_TRANSFORM_FEEDBACK_BUFFER_MODE",get_VERTEX_ATTRIB_ARRAY_DIVISOR:"get_VERTEX_ATTRIB_ARRAY_DIVISOR",get_VERTEX_ATTRIB_ARRAY_INTEGER:"get_VERTEX_ATTRIB_ARRAY_INTEGER",get_SIGNED_NORMALIZED:"get_SIGNED_NORMALIZED",get_UNSIGNED_NORMALIZED:"get_UNSIGNED_NORMALIZED",get_UNSIGNED_INT_VEC4:"get_UNSIGNED_INT_VEC4",get_UNSIGNED_INT_VEC3:"get_UNSIGNED_INT_VEC3",get_UNSIGNED_INT_VEC2:"get_UNSIGNED_INT_VEC2",get_FLOAT_MAT4x3:"get_FLOAT_MAT4x3",get_FLOAT_MAT4x2:"get_FLOAT_MAT4x2",get_FLOAT_MAT3x4:"get_FLOAT_MAT3x4",get_FLOAT_MAT3x2:"get_FLOAT_MAT3x2",get_FLOAT_MAT2x4:"get_FLOAT_MAT2x4",get_FLOAT_MAT2x3:"get_FLOAT_MAT2x3",get_COPY_WRITE_BUFFER_BINDING:"get_COPY_WRITE_BUFFER_BINDING",get_COPY_READ_BUFFER_BINDING:"get_COPY_READ_BUFFER_BINDING",get_COPY_WRITE_BUFFER:"get_COPY_WRITE_BUFFER",get_COPY_READ_BUFFER:"get_COPY_READ_BUFFER",get_PIXEL_UNPACK_BUFFER_BINDING:"get_PIXEL_UNPACK_BUFFER_BINDING",get_PIXEL_PACK_BUFFER_BINDING:"get_PIXEL_PACK_BUFFER_BINDING",get_PIXEL_UNPACK_BUFFER:"get_PIXEL_UNPACK_BUFFER",get_PIXEL_PACK_BUFFER:"get_PIXEL_PACK_BUFFER",get_SAMPLER_BINDING:"get_SAMPLER_BINDING",get_MAX_SAMPLES:"get_MAX_SAMPLES",get_UNSIGNED_INT_SAMPLER_2D_ARRAY:"get_UNSIGNED_INT_SAMPLER_2D_ARRAY",get_UNSIGNED_INT_SAMPLER_CUBE:"get_UNSIGNED_INT_SAMPLER_CUBE",get_UNSIGNED_INT_SAMPLER_3D:"get_UNSIGNED_INT_SAMPLER_3D",get_UNSIGNED_INT_SAMPLER_2D:"get_UNSIGNED_INT_SAMPLER_2D",get_INT_SAMPLER_2D_ARRAY:"get_INT_SAMPLER_2D_ARRAY",get_INT_SAMPLER_CUBE:"get_INT_SAMPLER_CUBE",get_INT_SAMPLER_3D:"get_INT_SAMPLER_3D",get_INT_SAMPLER_2D:"get_INT_SAMPLER_2D",get_SAMPLER_CUBE_SHADOW:"get_SAMPLER_CUBE_SHADOW",get_SAMPLER_2D_ARRAY_SHADOW:"get_SAMPLER_2D_ARRAY_SHADOW",get_SAMPLER_2D_ARRAY:"get_SAMPLER_2D_ARRAY",get_SAMPLER_2D_SHADOW:"get_SAMPLER_2D_SHADOW",get_SAMPLER_3D:"get_SAMPLER_3D",get_COLOR_ATTACHMENT15:"get_COLOR_ATTACHMENT15",get_COLOR_ATTACHMENT14:"get_COLOR_ATTACHMENT14",get_COLOR_ATTACHMENT13:"get_COLOR_ATTACHMENT13",get_COLOR_ATTACHMENT12:"get_COLOR_ATTACHMENT12",get_COLOR_ATTACHMENT11:"get_COLOR_ATTACHMENT11",get_COLOR_ATTACHMENT10:"get_COLOR_ATTACHMENT10",get_COLOR_ATTACHMENT9:"get_COLOR_ATTACHMENT9",get_COLOR_ATTACHMENT8:"get_COLOR_ATTACHMENT8",get_COLOR_ATTACHMENT7:"get_COLOR_ATTACHMENT7",get_COLOR_ATTACHMENT6:"get_COLOR_ATTACHMENT6",get_COLOR_ATTACHMENT5:"get_COLOR_ATTACHMENT5",get_COLOR_ATTACHMENT4:"get_COLOR_ATTACHMENT4",get_COLOR_ATTACHMENT3:"get_COLOR_ATTACHMENT3",get_COLOR_ATTACHMENT2:"get_COLOR_ATTACHMENT2",get_COLOR_ATTACHMENT1:"get_COLOR_ATTACHMENT1",get_MAX_COLOR_ATTACHMENTS:"get_MAX_COLOR_ATTACHMENTS",get_DRAW_BUFFER15:"get_DRAW_BUFFER15",get_DRAW_BUFFER14:"get_DRAW_BUFFER14",get_DRAW_BUFFER13:"get_DRAW_BUFFER13",get_DRAW_BUFFER12:"get_DRAW_BUFFER12",get_DRAW_BUFFER11:"get_DRAW_BUFFER11",get_DRAW_BUFFER10:"get_DRAW_BUFFER10",get_DRAW_BUFFER9:"get_DRAW_BUFFER9",get_DRAW_BUFFER8:"get_DRAW_BUFFER8",get_DRAW_BUFFER7:"get_DRAW_BUFFER7",get_DRAW_BUFFER6:"get_DRAW_BUFFER6",get_DRAW_BUFFER5:"get_DRAW_BUFFER5",get_DRAW_BUFFER4:"get_DRAW_BUFFER4",get_DRAW_BUFFER3:"get_DRAW_BUFFER3",get_DRAW_BUFFER2:"get_DRAW_BUFFER2",get_DRAW_BUFFER1:"get_DRAW_BUFFER1",get_DRAW_BUFFER0:"get_DRAW_BUFFER0",get_MAX_DRAW_BUFFERS:"get_MAX_DRAW_BUFFERS",get_ANY_SAMPLES_PASSED_CONSERVATIVE:"get_ANY_SAMPLES_PASSED_CONSERVATIVE",get_ANY_SAMPLES_PASSED:"get_ANY_SAMPLES_PASSED",get_QUERY_RESULT_AVAILABLE:"get_QUERY_RESULT_AVAILABLE",get_QUERY_RESULT:"get_QUERY_RESULT",get_CURRENT_QUERY:"get_CURRENT_QUERY",get_INT_2_10_10_10_REV:"get_INT_2_10_10_10_REV",get_RG_INTEGER:"get_RG_INTEGER",get_RG:"get_RG",get_HALF_FLOAT:"get_HALF_FLOAT",get_UNSIGNED_INT_24_8:"get_UNSIGNED_INT_24_8",get_FLOAT_32_UNSIGNED_INT_24_8_REV:"get_FLOAT_32_UNSIGNED_INT_24_8_REV",get_UNSIGNED_INT_5_9_9_9_REV:"get_UNSIGNED_INT_5_9_9_9_REV",get_UNSIGNED_INT_10F_11F_11F_REV:"get_UNSIGNED_INT_10F_11F_11F_REV",get_UNSIGNED_INT_2_10_10_10_REV:"get_UNSIGNED_INT_2_10_10_10_REV",get_TEXTURE_IMMUTABLE_LEVELS:"get_TEXTURE_IMMUTABLE_LEVELS",get_TEXTURE_IMMUTABLE_FORMAT:"get_TEXTURE_IMMUTABLE_FORMAT",get_RGB10_A2UI:"get_RGB10_A2UI",get_RGBA8_SNORM:"get_RGBA8_SNORM",get_RGB8_SNORM:"get_RGB8_SNORM",get_RG8_SNORM:"get_RG8_SNORM",get_R8_SNORM:"get_R8_SNORM",get_RG32UI:"get_RG32UI",get_RG32I:"get_RG32I",get_RG16UI:"get_RG16UI",get_RG16I:"get_RG16I",get_RG8UI:"get_RG8UI",get_RG8I:"get_RG8I",get_R32UI:"get_R32UI",get_R32I:"get_R32I",get_R16UI:"get_R16UI",get_R16I:"get_R16I",get_R8UI:"get_R8UI",get_R8I:"get_R8I",get_RG32F:"get_RG32F",get_RG16F:"get_RG16F",get_R32F:"get_R32F",get_R16F:"get_R16F",get_RG8:"get_RG8",get_R8:"get_R8",get_RGBA_INTEGER:"get_RGBA_INTEGER",get_RGB_INTEGER:"get_RGB_INTEGER",get_RED_INTEGER:"get_RED_INTEGER",get_RGB8I:"get_RGB8I",get_RGBA8I:"get_RGBA8I",get_RGB16I:"get_RGB16I",get_RGBA16I:"get_RGBA16I",get_RGB32I:"get_RGB32I",get_RGBA32I:"get_RGBA32I",get_RGB8UI:"get_RGB8UI",get_RGBA8UI:"get_RGBA8UI",get_RGB16UI:"get_RGB16UI",get_RGBA16UI:"get_RGBA16UI",get_RGB32UI:"get_RGB32UI",get_RGBA32UI:"get_RGBA32UI",get_RGB9_E5:"get_RGB9_E5",get_R11F_G11F_B10F:"get_R11F_G11F_B10F",get_TEXTURE_BINDING_2D_ARRAY:"get_TEXTURE_BINDING_2D_ARRAY",get_TEXTURE_2D_ARRAY:"get_TEXTURE_2D_ARRAY",get_RGB16F:"get_RGB16F",get_RGBA16F:"get_RGBA16F",get_RGB32F:"get_RGB32F",get_RGBA32F:"get_RGBA32F",get_COMPARE_REF_TO_TEXTURE:"get_COMPARE_REF_TO_TEXTURE",get_SRGB8_ALPHA8:"get_SRGB8_ALPHA8",get_SRGB8:"get_SRGB8",get_SRGB:"get_SRGB",get_TEXTURE_COMPARE_FUNC:"get_TEXTURE_COMPARE_FUNC",get_TEXTURE_COMPARE_MODE:"get_TEXTURE_COMPARE_MODE",get_TEXTURE_MAX_LEVEL:"get_TEXTURE_MAX_LEVEL",get_TEXTURE_BASE_LEVEL:"get_TEXTURE_BASE_LEVEL",get_TEXTURE_MAX_LOD:"get_TEXTURE_MAX_LOD",get_TEXTURE_MIN_LOD:"get_TEXTURE_MIN_LOD",get_TEXTURE_WRAP_R:"get_TEXTURE_WRAP_R",get_TEXTURE_3D:"get_TEXTURE_3D",get_RGB10_A2:"get_RGB10_A2",get_RGBA8:"get_RGBA8",get_RGB8:"get_RGB8",get_RED:"get_RED",get_MAX_ELEMENT_INDEX:"get_MAX_ELEMENT_INDEX",get_MAX_SERVER_WAIT_TIMEOUT:"get_MAX_SERVER_WAIT_TIMEOUT",get_MAX_FRAGMENT_INPUT_COMPONENTS:"get_MAX_FRAGMENT_INPUT_COMPONENTS",get_MAX_VERTEX_OUTPUT_COMPONENTS:"get_MAX_VERTEX_OUTPUT_COMPONENTS",get_VERTEX_ARRAY_BINDING:"get_VERTEX_ARRAY_BINDING",get_RASTERIZER_DISCARD:"get_RASTERIZER_DISCARD",get_FRAGMENT_SHADER_DERIVATIVE_HINT:"get_FRAGMENT_SHADER_DERIVATIVE_HINT",get_MAX_VARYING_COMPONENTS:"get_MAX_VARYING_COMPONENTS",get_MAX_PROGRAM_TEXEL_OFFSET:"get_MAX_PROGRAM_TEXEL_OFFSET",get_MIN_PROGRAM_TEXEL_OFFSET:"get_MIN_PROGRAM_TEXEL_OFFSET",get_MAX_ARRAY_TEXTURE_LAYERS:"get_MAX_ARRAY_TEXTURE_LAYERS",get_MAX_VERTEX_UNIFORM_COMPONENTS:"get_MAX_VERTEX_UNIFORM_COMPONENTS",get_MAX_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_TEXTURE_LOD_BIAS:"get_MAX_TEXTURE_LOD_BIAS",get_MAX_ELEMENTS_INDICES:"get_MAX_ELEMENTS_INDICES",get_MAX_ELEMENTS_VERTICES:"get_MAX_ELEMENTS_VERTICES",get_MAX_3D_TEXTURE_SIZE:"get_MAX_3D_TEXTURE_SIZE",get_UNPACK_IMAGE_HEIGHT:"get_UNPACK_IMAGE_HEIGHT",get_UNPACK_SKIP_IMAGES:"get_UNPACK_SKIP_IMAGES",get_TEXTURE_BINDING_3D:"get_TEXTURE_BINDING_3D",get_PACK_SKIP_PIXELS:"get_PACK_SKIP_PIXELS",get_PACK_SKIP_ROWS:"get_PACK_SKIP_ROWS",get_PACK_ROW_LENGTH:"get_PACK_ROW_LENGTH",get_UNPACK_SKIP_PIXELS:"get_UNPACK_SKIP_PIXELS",get_UNPACK_SKIP_ROWS:"get_UNPACK_SKIP_ROWS",get_UNPACK_ROW_LENGTH:"get_UNPACK_ROW_LENGTH",get_READ_BUFFER:"get_READ_BUFFER",get_BROWSER_DEFAULT_WEBGL:"get_BROWSER_DEFAULT_WEBGL",get_UNPACK_COLORSPACE_CONVERSION_WEBGL:"get_UNPACK_COLORSPACE_CONVERSION_WEBGL",get_CONTEXT_LOST_WEBGL:"get_CONTEXT_LOST_WEBGL",get_UNPACK_PREMULTIPLY_ALPHA_WEBGL:"get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",get_UNPACK_FLIP_Y_WEBGL:"get_UNPACK_FLIP_Y_WEBGL",get_INVALID_FRAMEBUFFER_OPERATION:"get_INVALID_FRAMEBUFFER_OPERATION",get_MAX_RENDERBUFFER_SIZE:"get_MAX_RENDERBUFFER_SIZE",get_RENDERBUFFER_BINDING:"get_RENDERBUFFER_BINDING",get_FRAMEBUFFER_BINDING:"get_FRAMEBUFFER_BINDING",get_FRAMEBUFFER_UNSUPPORTED:"get_FRAMEBUFFER_UNSUPPORTED",get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:"get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",get_FRAMEBUFFER_COMPLETE:"get_FRAMEBUFFER_COMPLETE",get_NONE:"get_NONE",get_DEPTH_STENCIL_ATTACHMENT:"get_DEPTH_STENCIL_ATTACHMENT",get_STENCIL_ATTACHMENT:"get_STENCIL_ATTACHMENT",get_DEPTH_ATTACHMENT:"get_DEPTH_ATTACHMENT",get_COLOR_ATTACHMENT0:"get_COLOR_ATTACHMENT0",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",get_RENDERBUFFER_STENCIL_SIZE:"get_RENDERBUFFER_STENCIL_SIZE",get_RENDERBUFFER_DEPTH_SIZE:"get_RENDERBUFFER_DEPTH_SIZE",get_RENDERBUFFER_ALPHA_SIZE:"get_RENDERBUFFER_ALPHA_SIZE",get_RENDERBUFFER_BLUE_SIZE:"get_RENDERBUFFER_BLUE_SIZE",get_RENDERBUFFER_GREEN_SIZE:"get_RENDERBUFFER_GREEN_SIZE",get_RENDERBUFFER_RED_SIZE:"get_RENDERBUFFER_RED_SIZE",get_RENDERBUFFER_INTERNAL_FORMAT:"get_RENDERBUFFER_INTERNAL_FORMAT",get_RENDERBUFFER_HEIGHT:"get_RENDERBUFFER_HEIGHT",get_RENDERBUFFER_WIDTH:"get_RENDERBUFFER_WIDTH",get_DEPTH_STENCIL:"get_DEPTH_STENCIL",get_STENCIL_INDEX8:"get_STENCIL_INDEX8",get_STENCIL_INDEX:"get_STENCIL_INDEX",get_DEPTH_COMPONENT16:"get_DEPTH_COMPONENT16",get_RGB565:"get_RGB565",get_RGB5_A1:"get_RGB5_A1",get_RGBA4:"get_RGBA4",get_RENDERBUFFER:"get_RENDERBUFFER",get_FRAMEBUFFER:"get_FRAMEBUFFER",get_HIGH_INT:"get_HIGH_INT",get_MEDIUM_INT:"get_MEDIUM_INT",get_LOW_INT:"get_LOW_INT",get_HIGH_FLOAT:"get_HIGH_FLOAT",get_MEDIUM_FLOAT:"get_MEDIUM_FLOAT",get_LOW_FLOAT:"get_LOW_FLOAT",get_COMPILE_STATUS:"get_COMPILE_STATUS",get_POINT_SPRITE:"get_POINT_SPRITE",get_VERTEX_PROGRAM_POINT_SIZE:"get_VERTEX_PROGRAM_POINT_SIZE",get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:"get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",get_VERTEX_ATTRIB_ARRAY_POINTER:"get_VERTEX_ATTRIB_ARRAY_POINTER",get_VERTEX_ATTRIB_ARRAY_NORMALIZED:"get_VERTEX_ATTRIB_ARRAY_NORMALIZED",get_VERTEX_ATTRIB_ARRAY_TYPE:"get_VERTEX_ATTRIB_ARRAY_TYPE",get_VERTEX_ATTRIB_ARRAY_STRIDE:"get_VERTEX_ATTRIB_ARRAY_STRIDE",get_VERTEX_ATTRIB_ARRAY_SIZE:"get_VERTEX_ATTRIB_ARRAY_SIZE",get_VERTEX_ATTRIB_ARRAY_ENABLED:"get_VERTEX_ATTRIB_ARRAY_ENABLED",get_SAMPLER_CUBE:"get_SAMPLER_CUBE",get_SAMPLER_2D:"get_SAMPLER_2D",get_FLOAT_MAT4:"get_FLOAT_MAT4",get_FLOAT_MAT3:"get_FLOAT_MAT3",get_FLOAT_MAT2:"get_FLOAT_MAT2",get_BOOL_VEC4:"get_BOOL_VEC4",get_BOOL_VEC3:"get_BOOL_VEC3",get_BOOL_VEC2:"get_BOOL_VEC2",get_BOOL:"get_BOOL",get_INT_VEC4:"get_INT_VEC4",get_INT_VEC3:"get_INT_VEC3",get_INT_VEC2:"get_INT_VEC2",get_FLOAT_VEC4:"get_FLOAT_VEC4",get_FLOAT_VEC3:"get_FLOAT_VEC3",get_FLOAT_VEC2:"get_FLOAT_VEC2",get_MIRRORED_REPEAT:"get_MIRRORED_REPEAT",get_CLAMP_TO_EDGE:"get_CLAMP_TO_EDGE",get_REPEAT:"get_REPEAT",get_ACTIVE_TEXTURE:"get_ACTIVE_TEXTURE",get_TEXTURE31:"get_TEXTURE31",get_TEXTURE30:"get_TEXTURE30",get_TEXTURE29:"get_TEXTURE29",get_TEXTURE28:"get_TEXTURE28",get_TEXTURE27:"get_TEXTURE27",get_TEXTURE26:"get_TEXTURE26",get_TEXTURE25:"get_TEXTURE25",get_TEXTURE24:"get_TEXTURE24",get_TEXTURE23:"get_TEXTURE23",get_TEXTURE22:"get_TEXTURE22",get_TEXTURE21:"get_TEXTURE21",get_TEXTURE20:"get_TEXTURE20",get_TEXTURE19:"get_TEXTURE19",get_TEXTURE18:"get_TEXTURE18",get_TEXTURE17:"get_TEXTURE17",get_TEXTURE16:"get_TEXTURE16",get_TEXTURE15:"get_TEXTURE15",get_TEXTURE14:"get_TEXTURE14",get_TEXTURE13:"get_TEXTURE13",get_TEXTURE12:"get_TEXTURE12",get_TEXTURE11:"get_TEXTURE11",get_TEXTURE10:"get_TEXTURE10",get_TEXTURE9:"get_TEXTURE9",get_TEXTURE8:"get_TEXTURE8",get_TEXTURE7:"get_TEXTURE7",get_TEXTURE6:"get_TEXTURE6",get_TEXTURE5:"get_TEXTURE5",get_TEXTURE4:"get_TEXTURE4",get_TEXTURE3:"get_TEXTURE3",get_TEXTURE2:"get_TEXTURE2",get_TEXTURE1:"get_TEXTURE1",get_TEXTURE0:"get_TEXTURE0",get_MAX_CUBE_MAP_TEXTURE_SIZE:"get_MAX_CUBE_MAP_TEXTURE_SIZE",get_TEXTURE_CUBE_MAP_NEGATIVE_Z:"get_TEXTURE_CUBE_MAP_NEGATIVE_Z",get_TEXTURE_CUBE_MAP_POSITIVE_Z:"get_TEXTURE_CUBE_MAP_POSITIVE_Z",get_TEXTURE_CUBE_MAP_NEGATIVE_Y:"get_TEXTURE_CUBE_MAP_NEGATIVE_Y",get_TEXTURE_CUBE_MAP_POSITIVE_Y:"get_TEXTURE_CUBE_MAP_POSITIVE_Y",get_TEXTURE_CUBE_MAP_NEGATIVE_X:"get_TEXTURE_CUBE_MAP_NEGATIVE_X",get_TEXTURE_CUBE_MAP_POSITIVE_X:"get_TEXTURE_CUBE_MAP_POSITIVE_X",get_TEXTURE_BINDING_CUBE_MAP:"get_TEXTURE_BINDING_CUBE_MAP",get_TEXTURE_CUBE_MAP:"get_TEXTURE_CUBE_MAP",get_TEXTURE:"get_TEXTURE",get_TEXTURE_2D:"get_TEXTURE_2D",get_TEXTURE_WRAP_T:"get_TEXTURE_WRAP_T",get_TEXTURE_WRAP_S:"get_TEXTURE_WRAP_S",get_TEXTURE_MIN_FILTER:"get_TEXTURE_MIN_FILTER",get_TEXTURE_MAG_FILTER:"get_TEXTURE_MAG_FILTER",get_LINEAR_MIPMAP_LINEAR:"get_LINEAR_MIPMAP_LINEAR",get_NEAREST_MIPMAP_LINEAR:"get_NEAREST_MIPMAP_LINEAR",get_LINEAR_MIPMAP_NEAREST:"get_LINEAR_MIPMAP_NEAREST",get_NEAREST_MIPMAP_NEAREST:"get_NEAREST_MIPMAP_NEAREST",get_LINEAR:"get_LINEAR",get_NEAREST:"get_NEAREST",get_VERSION:"get_VERSION",get_RENDERER:"get_RENDERER",get_VENDOR:"get_VENDOR",get_DECR_WRAP:"get_DECR_WRAP",get_INCR_WRAP:"get_INCR_WRAP",get_INVERT:"get_INVERT",get_DECR:"get_DECR",get_INCR:"get_INCR",get_REPLACE:"get_REPLACE",get_KEEP:"get_KEEP",get_ALWAYS:"get_ALWAYS",get_GEQUAL:"get_GEQUAL",get_NOTEQUAL:"get_NOTEQUAL",get_GREATER:"get_GREATER",get_LEQUAL:"get_LEQUAL",get_EQUAL:"get_EQUAL",get_LESS:"get_LESS",get_NEVER:"get_NEVER",get_CURRENT_PROGRAM:"get_CURRENT_PROGRAM",get_SHADING_LANGUAGE_VERSION:"get_SHADING_LANGUAGE_VERSION",get_ACTIVE_ATTRIBUTES:"get_ACTIVE_ATTRIBUTES",get_ACTIVE_UNIFORMS:"get_ACTIVE_UNIFORMS",get_ATTACHED_SHADERS:"get_ATTACHED_SHADERS",get_VALIDATE_STATUS:"get_VALIDATE_STATUS",get_LINK_STATUS:"get_LINK_STATUS",get_DELETE_STATUS:"get_DELETE_STATUS",get_SHADER_TYPE:"get_SHADER_TYPE",get_MAX_FRAGMENT_UNIFORM_VECTORS:"get_MAX_FRAGMENT_UNIFORM_VECTORS",get_MAX_TEXTURE_IMAGE_UNITS:"get_MAX_TEXTURE_IMAGE_UNITS",get_MAX_VERTEX_TEXTURE_IMAGE_UNITS:"get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",get_MAX_COMBINED_TEXTURE_IMAGE_UNITS:"get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",get_MAX_VARYING_VECTORS:"get_MAX_VARYING_VECTORS",get_MAX_VERTEX_UNIFORM_VECTORS:"get_MAX_VERTEX_UNIFORM_VECTORS",get_MAX_VERTEX_ATTRIBS:"get_MAX_VERTEX_ATTRIBS",get_VERTEX_SHADER:"get_VERTEX_SHADER",get_FRAGMENT_SHADER:"get_FRAGMENT_SHADER",get_UNSIGNED_SHORT_5_6_5:"get_UNSIGNED_SHORT_5_6_5",get_UNSIGNED_SHORT_5_5_5_1:"get_UNSIGNED_SHORT_5_5_5_1",get_UNSIGNED_SHORT_4_4_4_4:"get_UNSIGNED_SHORT_4_4_4_4",get_LUMINANCE_ALPHA:"get_LUMINANCE_ALPHA",get_LUMINANCE:"get_LUMINANCE",get_RGBA:"get_RGBA",get_RGB:"get_RGB",get_ALPHA:"get_ALPHA",get_DEPTH_COMPONENT:"get_DEPTH_COMPONENT",get_FLOAT:"get_FLOAT",get_UNSIGNED_INT:"get_UNSIGNED_INT",get_INT:"get_INT",get_UNSIGNED_SHORT:"get_UNSIGNED_SHORT",get_SHORT:"get_SHORT",get_UNSIGNED_BYTE:"get_UNSIGNED_BYTE",get_BYTE:"get_BYTE",get_GENERATE_MIPMAP_HINT:"get_GENERATE_MIPMAP_HINT",get_NICEST:"get_NICEST",get_FASTEST:"get_FASTEST",get_DONT_CARE:"get_DONT_CARE",get_COMPRESSED_TEXTURE_FORMATS:"get_COMPRESSED_TEXTURE_FORMATS",get_SAMPLE_COVERAGE_INVERT:"get_SAMPLE_COVERAGE_INVERT",get_SAMPLE_COVERAGE_VALUE:"get_SAMPLE_COVERAGE_VALUE",get_SAMPLES:"get_SAMPLES",get_SAMPLE_BUFFERS:"get_SAMPLE_BUFFERS",get_TEXTURE_BINDING_2D:"get_TEXTURE_BINDING_2D",get_POLYGON_OFFSET_FACTOR:"get_POLYGON_OFFSET_FACTOR",get_POLYGON_OFFSET_UNITS:"get_POLYGON_OFFSET_UNITS",get_STENCIL_BITS:"get_STENCIL_BITS",get_DEPTH_BITS:"get_DEPTH_BITS",get_ALPHA_BITS:"get_ALPHA_BITS",get_BLUE_BITS:"get_BLUE_BITS",get_GREEN_BITS:"get_GREEN_BITS",get_RED_BITS:"get_RED_BITS",get_SUBPIXEL_BITS:"get_SUBPIXEL_BITS",get_MAX_VIEWPORT_DIMS:"get_MAX_VIEWPORT_DIMS",get_MAX_TEXTURE_SIZE:"get_MAX_TEXTURE_SIZE",get_PACK_ALIGNMENT:"get_PACK_ALIGNMENT",get_UNPACK_ALIGNMENT:"get_UNPACK_ALIGNMENT",get_COLOR_WRITEMASK:"get_COLOR_WRITEMASK",get_COLOR_CLEAR_VALUE:"get_COLOR_CLEAR_VALUE",get_SCISSOR_BOX:"get_SCISSOR_BOX",get_VIEWPORT:"get_VIEWPORT",get_STENCIL_BACK_WRITEMASK:"get_STENCIL_BACK_WRITEMASK",get_STENCIL_BACK_VALUE_MASK:"get_STENCIL_BACK_VALUE_MASK",get_STENCIL_BACK_REF:"get_STENCIL_BACK_REF",get_STENCIL_BACK_PASS_DEPTH_PASS:"get_STENCIL_BACK_PASS_DEPTH_PASS",get_STENCIL_BACK_PASS_DEPTH_FAIL:"get_STENCIL_BACK_PASS_DEPTH_FAIL",get_STENCIL_BACK_FAIL:"get_STENCIL_BACK_FAIL",get_STENCIL_BACK_FUNC:"get_STENCIL_BACK_FUNC",get_STENCIL_WRITEMASK:"get_STENCIL_WRITEMASK",get_STENCIL_VALUE_MASK:"get_STENCIL_VALUE_MASK",get_STENCIL_REF:"get_STENCIL_REF",get_STENCIL_PASS_DEPTH_PASS:"get_STENCIL_PASS_DEPTH_PASS",get_STENCIL_PASS_DEPTH_FAIL:"get_STENCIL_PASS_DEPTH_FAIL",get_STENCIL_FAIL:"get_STENCIL_FAIL",get_STENCIL_FUNC:"get_STENCIL_FUNC",get_STENCIL_CLEAR_VALUE:"get_STENCIL_CLEAR_VALUE",get_DEPTH_FUNC:"get_DEPTH_FUNC",get_DEPTH_CLEAR_VALUE:"get_DEPTH_CLEAR_VALUE",get_DEPTH_WRITEMASK:"get_DEPTH_WRITEMASK",get_DEPTH_RANGE:"get_DEPTH_RANGE",get_FRONT_FACE:"get_FRONT_FACE",get_CULL_FACE_MODE:"get_CULL_FACE_MODE",get_ALIASED_LINE_WIDTH_RANGE:"get_ALIASED_LINE_WIDTH_RANGE",get_ALIASED_POINT_SIZE_RANGE:"get_ALIASED_POINT_SIZE_RANGE",get_LINE_WIDTH:"get_LINE_WIDTH",get_CCW:"get_CCW",get_CW:"get_CW",get_OUT_OF_MEMORY:"get_OUT_OF_MEMORY",get_INVALID_OPERATION:"get_INVALID_OPERATION",get_INVALID_VALUE:"get_INVALID_VALUE",get_INVALID_ENUM:"get_INVALID_ENUM",get_NO_ERROR:"get_NO_ERROR",get_SAMPLE_COVERAGE:"get_SAMPLE_COVERAGE",get_SAMPLE_ALPHA_TO_COVERAGE:"get_SAMPLE_ALPHA_TO_COVERAGE",get_POLYGON_OFFSET_FILL:"get_POLYGON_OFFSET_FILL",get_SCISSOR_TEST:"get_SCISSOR_TEST",get_DEPTH_TEST:"get_DEPTH_TEST",get_STENCIL_TEST:"get_STENCIL_TEST",get_DITHER:"get_DITHER",get_BLEND:"get_BLEND",get_CULL_FACE:"get_CULL_FACE",get_FRONT_AND_BACK:"get_FRONT_AND_BACK",get_BACK:"get_BACK",get_FRONT:"get_FRONT",get_CURRENT_VERTEX_ATTRIB:"get_CURRENT_VERTEX_ATTRIB",get_BUFFER_USAGE:"get_BUFFER_USAGE",get_BUFFER_SIZE:"get_BUFFER_SIZE",get_DYNAMIC_DRAW:"get_DYNAMIC_DRAW",get_STATIC_DRAW:"get_STATIC_DRAW",get_STREAM_DRAW:"get_STREAM_DRAW",get_ELEMENT_ARRAY_BUFFER_BINDING:"get_ELEMENT_ARRAY_BUFFER_BINDING",get_ARRAY_BUFFER_BINDING:"get_ARRAY_BUFFER_BINDING",get_ELEMENT_ARRAY_BUFFER:"get_ELEMENT_ARRAY_BUFFER",get_ARRAY_BUFFER:"get_ARRAY_BUFFER",get_BLEND_COLOR:"get_BLEND_COLOR",get_ONE_MINUS_CONSTANT_ALPHA:"get_ONE_MINUS_CONSTANT_ALPHA",get_CONSTANT_ALPHA:"get_CONSTANT_ALPHA",get_ONE_MINUS_CONSTANT_COLOR:"get_ONE_MINUS_CONSTANT_COLOR",get_CONSTANT_COLOR:"get_CONSTANT_COLOR",get_BLEND_SRC_ALPHA:"get_BLEND_SRC_ALPHA",get_BLEND_DST_ALPHA:"get_BLEND_DST_ALPHA",get_BLEND_SRC_RGB:"get_BLEND_SRC_RGB",get_BLEND_DST_RGB:"get_BLEND_DST_RGB",get_FUNC_REVERSE_SUBTRACT:"get_FUNC_REVERSE_SUBTRACT",get_FUNC_SUBTRACT:"get_FUNC_SUBTRACT",get_BLEND_EQUATION_ALPHA:"get_BLEND_EQUATION_ALPHA",get_BLEND_EQUATION_RGB:"get_BLEND_EQUATION_RGB",get_BLEND_EQUATION:"get_BLEND_EQUATION",get_FUNC_ADD:"get_FUNC_ADD",get_SRC_ALPHA_SATURATE:"get_SRC_ALPHA_SATURATE",get_ONE_MINUS_DST_COLOR:"get_ONE_MINUS_DST_COLOR",get_DST_COLOR:"get_DST_COLOR",get_ONE_MINUS_DST_ALPHA:"get_ONE_MINUS_DST_ALPHA",get_DST_ALPHA:"get_DST_ALPHA",get_ONE_MINUS_SRC_ALPHA:"get_ONE_MINUS_SRC_ALPHA",get_SRC_ALPHA:"get_SRC_ALPHA",get_ONE_MINUS_SRC_COLOR:"get_ONE_MINUS_SRC_COLOR",get_SRC_COLOR:"get_SRC_COLOR",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_TRIANGLE_FAN:"get_TRIANGLE_FAN",get_TRIANGLE_STRIP:"get_TRIANGLE_STRIP",get_TRIANGLES:"get_TRIANGLES",get_LINE_STRIP:"get_LINE_STRIP",get_LINE_LOOP:"get_LINE_LOOP",get_LINES:"get_LINES",get_POINTS:"get_POINTS",get_COLOR_BUFFER_BIT:"get_COLOR_BUFFER_BIT",get_STENCIL_BUFFER_BIT:"get_STENCIL_BUFFER_BIT",get_DEPTH_BUFFER_BIT:"get_DEPTH_BUFFER_BIT",get_EXTENSIONS:"get_EXTENSIONS"}
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_EXTENSIONS = function(this1) {
	return 7939;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_BUFFER_BIT = function(this1) {
	return this1.DEPTH_BUFFER_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BUFFER_BIT = function(this1) {
	return this1.STENCIL_BUFFER_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_BUFFER_BIT = function(this1) {
	return this1.COLOR_BUFFER_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POINTS = function(this1) {
	return this1.POINTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINES = function(this1) {
	return this1.LINES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_LOOP = function(this1) {
	return this1.LINE_LOOP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_STRIP = function(this1) {
	return this1.LINE_STRIP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLES = function(this1) {
	return this1.TRIANGLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLE_STRIP = function(this1) {
	return this1.TRIANGLE_STRIP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLE_FAN = function(this1) {
	return this1.TRIANGLE_FAN;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ZERO = function(this1) {
	return this1.ZERO;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE = function(this1) {
	return this1.ONE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_COLOR = function(this1) {
	return this1.SRC_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_SRC_COLOR = function(this1) {
	return this1.ONE_MINUS_SRC_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_ALPHA = function(this1) {
	return this1.SRC_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_SRC_ALPHA = function(this1) {
	return this1.ONE_MINUS_SRC_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DST_ALPHA = function(this1) {
	return this1.DST_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_DST_ALPHA = function(this1) {
	return this1.ONE_MINUS_DST_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DST_COLOR = function(this1) {
	return this1.DST_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_DST_COLOR = function(this1) {
	return this1.ONE_MINUS_DST_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_ALPHA_SATURATE = function(this1) {
	return this1.SRC_ALPHA_SATURATE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_ADD = function(this1) {
	return this1.FUNC_ADD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION = function(this1) {
	return this1.BLEND_EQUATION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION_RGB = function(this1) {
	return this1.BLEND_EQUATION_RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION_ALPHA = function(this1) {
	return this1.BLEND_EQUATION_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_SUBTRACT = function(this1) {
	return this1.FUNC_SUBTRACT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_REVERSE_SUBTRACT = function(this1) {
	return this1.FUNC_REVERSE_SUBTRACT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_DST_RGB = function(this1) {
	return this1.BLEND_DST_RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_SRC_RGB = function(this1) {
	return this1.BLEND_SRC_RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_DST_ALPHA = function(this1) {
	return this1.BLEND_DST_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_SRC_ALPHA = function(this1) {
	return this1.BLEND_SRC_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONSTANT_COLOR = function(this1) {
	return this1.CONSTANT_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
	return this1.ONE_MINUS_CONSTANT_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONSTANT_ALPHA = function(this1) {
	return this1.CONSTANT_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
	return this1.ONE_MINUS_CONSTANT_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_COLOR = function(this1) {
	return this1.BLEND_COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ARRAY_BUFFER = function(this1) {
	return this1.ARRAY_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_DRAW = function(this1) {
	return this1.STREAM_DRAW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_DRAW = function(this1) {
	return this1.STATIC_DRAW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_DRAW = function(this1) {
	return this1.DYNAMIC_DRAW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BUFFER_SIZE = function(this1) {
	return this1.BUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BUFFER_USAGE = function(this1) {
	return this1.BUFFER_USAGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_VERTEX_ATTRIB = function(this1) {
	return this1.CURRENT_VERTEX_ATTRIB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT = function(this1) {
	return this1.FRONT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BACK = function(this1) {
	return this1.BACK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT_AND_BACK = function(this1) {
	return this1.FRONT_AND_BACK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CULL_FACE = function(this1) {
	return this1.CULL_FACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND = function(this1) {
	return this1.BLEND;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DITHER = function(this1) {
	return this1.DITHER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_TEST = function(this1) {
	return this1.STENCIL_TEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_TEST = function(this1) {
	return this1.DEPTH_TEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SCISSOR_TEST = function(this1) {
	return this1.SCISSOR_TEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_FILL = function(this1) {
	return this1.POLYGON_OFFSET_FILL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
	return this1.SAMPLE_ALPHA_TO_COVERAGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE = function(this1) {
	return this1.SAMPLE_COVERAGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NO_ERROR = function(this1) {
	return this1.NO_ERROR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_ENUM = function(this1) {
	return this1.INVALID_ENUM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_VALUE = function(this1) {
	return this1.INVALID_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_OPERATION = function(this1) {
	return this1.INVALID_OPERATION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_OUT_OF_MEMORY = function(this1) {
	return this1.OUT_OF_MEMORY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CW = function(this1) {
	return this1.CW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CCW = function(this1) {
	return this1.CCW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_WIDTH = function(this1) {
	return this1.LINE_WIDTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
	return this1.ALIASED_POINT_SIZE_RANGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
	return this1.ALIASED_LINE_WIDTH_RANGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CULL_FACE_MODE = function(this1) {
	return this1.CULL_FACE_MODE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT_FACE = function(this1) {
	return this1.FRONT_FACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_RANGE = function(this1) {
	return this1.DEPTH_RANGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_WRITEMASK = function(this1) {
	return this1.DEPTH_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_CLEAR_VALUE = function(this1) {
	return this1.DEPTH_CLEAR_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_FUNC = function(this1) {
	return this1.DEPTH_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_CLEAR_VALUE = function(this1) {
	return this1.STENCIL_CLEAR_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_FUNC = function(this1) {
	return this1.STENCIL_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_FAIL = function(this1) {
	return this1.STENCIL_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_REF = function(this1) {
	return this1.STENCIL_REF;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_VALUE_MASK = function(this1) {
	return this1.STENCIL_VALUE_MASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_WRITEMASK = function(this1) {
	return this1.STENCIL_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_FUNC = function(this1) {
	return this1.STENCIL_BACK_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_FAIL = function(this1) {
	return this1.STENCIL_BACK_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_REF = function(this1) {
	return this1.STENCIL_BACK_REF;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_VALUE_MASK = function(this1) {
	return this1.STENCIL_BACK_VALUE_MASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_WRITEMASK = function(this1) {
	return this1.STENCIL_BACK_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VIEWPORT = function(this1) {
	return this1.VIEWPORT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SCISSOR_BOX = function(this1) {
	return this1.SCISSOR_BOX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_CLEAR_VALUE = function(this1) {
	return this1.COLOR_CLEAR_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_WRITEMASK = function(this1) {
	return this1.COLOR_WRITEMASK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_ALIGNMENT = function(this1) {
	return this1.UNPACK_ALIGNMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_ALIGNMENT = function(this1) {
	return this1.PACK_ALIGNMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_SIZE = function(this1) {
	return this1.MAX_TEXTURE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VIEWPORT_DIMS = function(this1) {
	return this1.MAX_VIEWPORT_DIMS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SUBPIXEL_BITS = function(this1) {
	return this1.SUBPIXEL_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED_BITS = function(this1) {
	return this1.RED_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GREEN_BITS = function(this1) {
	return this1.GREEN_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLUE_BITS = function(this1) {
	return this1.BLUE_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALPHA_BITS = function(this1) {
	return this1.ALPHA_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_BITS = function(this1) {
	return this1.DEPTH_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BITS = function(this1) {
	return this1.STENCIL_BITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_UNITS = function(this1) {
	return this1.POLYGON_OFFSET_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_FACTOR = function(this1) {
	return this1.POLYGON_OFFSET_FACTOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_2D = function(this1) {
	return this1.TEXTURE_BINDING_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_BUFFERS = function(this1) {
	return this1.SAMPLE_BUFFERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLES = function(this1) {
	return this1.SAMPLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE_VALUE = function(this1) {
	return this1.SAMPLE_COVERAGE_VALUE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE_INVERT = function(this1) {
	return this1.SAMPLE_COVERAGE_INVERT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
	return this1.COMPRESSED_TEXTURE_FORMATS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DONT_CARE = function(this1) {
	return this1.DONT_CARE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FASTEST = function(this1) {
	return this1.FASTEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NICEST = function(this1) {
	return this1.NICEST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GENERATE_MIPMAP_HINT = function(this1) {
	return this1.GENERATE_MIPMAP_HINT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BYTE = function(this1) {
	return this1.BYTE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_BYTE = function(this1) {
	return this1.UNSIGNED_BYTE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHORT = function(this1) {
	return this1.SHORT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT = function(this1) {
	return this1.UNSIGNED_SHORT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT = function(this1) {
	return this1.INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT = function(this1) {
	return this1.UNSIGNED_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT = function(this1) {
	return this1.FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT = function(this1) {
	return this1.DEPTH_COMPONENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALPHA = function(this1) {
	return this1.ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB = function(this1) {
	return this1.RGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA = function(this1) {
	return this1.RGBA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LUMINANCE = function(this1) {
	return this1.LUMINANCE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LUMINANCE_ALPHA = function(this1) {
	return this1.LUMINANCE_ALPHA;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
	return this1.UNSIGNED_SHORT_4_4_4_4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
	return this1.UNSIGNED_SHORT_5_5_5_1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
	return this1.UNSIGNED_SHORT_5_6_5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAGMENT_SHADER = function(this1) {
	return this1.FRAGMENT_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_SHADER = function(this1) {
	return this1.VERTEX_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_ATTRIBS = function(this1) {
	return this1.MAX_VERTEX_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_VECTORS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VARYING_VECTORS = function(this1) {
	return this1.MAX_VARYING_VECTORS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_VECTORS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHADER_TYPE = function(this1) {
	return this1.SHADER_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DELETE_STATUS = function(this1) {
	return this1.DELETE_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINK_STATUS = function(this1) {
	return this1.LINK_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VALIDATE_STATUS = function(this1) {
	return this1.VALIDATE_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ATTACHED_SHADERS = function(this1) {
	return this1.ATTACHED_SHADERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_UNIFORMS = function(this1) {
	return this1.ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_ATTRIBUTES = function(this1) {
	return this1.ACTIVE_ATTRIBUTES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHADING_LANGUAGE_VERSION = function(this1) {
	return this1.SHADING_LANGUAGE_VERSION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_PROGRAM = function(this1) {
	return this1.CURRENT_PROGRAM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEVER = function(this1) {
	return this1.NEVER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LESS = function(this1) {
	return this1.LESS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_EQUAL = function(this1) {
	return this1.EQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LEQUAL = function(this1) {
	return this1.LEQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GREATER = function(this1) {
	return this1.GREATER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NOTEQUAL = function(this1) {
	return this1.NOTEQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GEQUAL = function(this1) {
	return this1.GEQUAL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALWAYS = function(this1) {
	return this1.ALWAYS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_KEEP = function(this1) {
	return this1.KEEP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_REPLACE = function(this1) {
	return this1.REPLACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INCR = function(this1) {
	return this1.INCR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DECR = function(this1) {
	return this1.DECR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVERT = function(this1) {
	return this1.INVERT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INCR_WRAP = function(this1) {
	return this1.INCR_WRAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DECR_WRAP = function(this1) {
	return this1.DECR_WRAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VENDOR = function(this1) {
	return this1.VENDOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERER = function(this1) {
	return this1.RENDERER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERSION = function(this1) {
	return this1.VERSION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST = function(this1) {
	return this1.NEAREST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR = function(this1) {
	return this1.LINEAR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST_MIPMAP_NEAREST = function(this1) {
	return this1.NEAREST_MIPMAP_NEAREST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR_MIPMAP_NEAREST = function(this1) {
	return this1.LINEAR_MIPMAP_NEAREST;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST_MIPMAP_LINEAR = function(this1) {
	return this1.NEAREST_MIPMAP_LINEAR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR_MIPMAP_LINEAR = function(this1) {
	return this1.LINEAR_MIPMAP_LINEAR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAG_FILTER = function(this1) {
	return this1.TEXTURE_MAG_FILTER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MIN_FILTER = function(this1) {
	return this1.TEXTURE_MIN_FILTER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_S = function(this1) {
	return this1.TEXTURE_WRAP_S;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_T = function(this1) {
	return this1.TEXTURE_WRAP_T;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_2D = function(this1) {
	return this1.TEXTURE_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE = function(this1) {
	return this1.TEXTURE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP = function(this1) {
	return this1.TEXTURE_CUBE_MAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
	return this1.TEXTURE_BINDING_CUBE_MAP;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_X;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_X;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Y;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Z;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
	return this1.MAX_CUBE_MAP_TEXTURE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE0 = function(this1) {
	return this1.TEXTURE0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE1 = function(this1) {
	return this1.TEXTURE1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE2 = function(this1) {
	return this1.TEXTURE2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE3 = function(this1) {
	return this1.TEXTURE3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE4 = function(this1) {
	return this1.TEXTURE4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE5 = function(this1) {
	return this1.TEXTURE5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE6 = function(this1) {
	return this1.TEXTURE6;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE7 = function(this1) {
	return this1.TEXTURE7;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE8 = function(this1) {
	return this1.TEXTURE8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE9 = function(this1) {
	return this1.TEXTURE9;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE10 = function(this1) {
	return this1.TEXTURE10;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE11 = function(this1) {
	return this1.TEXTURE11;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE12 = function(this1) {
	return this1.TEXTURE12;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE13 = function(this1) {
	return this1.TEXTURE13;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE14 = function(this1) {
	return this1.TEXTURE14;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE15 = function(this1) {
	return this1.TEXTURE15;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE16 = function(this1) {
	return this1.TEXTURE16;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE17 = function(this1) {
	return this1.TEXTURE17;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE18 = function(this1) {
	return this1.TEXTURE18;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE19 = function(this1) {
	return this1.TEXTURE19;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE20 = function(this1) {
	return this1.TEXTURE20;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE21 = function(this1) {
	return this1.TEXTURE21;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE22 = function(this1) {
	return this1.TEXTURE22;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE23 = function(this1) {
	return this1.TEXTURE23;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE24 = function(this1) {
	return this1.TEXTURE24;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE25 = function(this1) {
	return this1.TEXTURE25;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE26 = function(this1) {
	return this1.TEXTURE26;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE27 = function(this1) {
	return this1.TEXTURE27;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE28 = function(this1) {
	return this1.TEXTURE28;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE29 = function(this1) {
	return this1.TEXTURE29;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE30 = function(this1) {
	return this1.TEXTURE30;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE31 = function(this1) {
	return this1.TEXTURE31;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_TEXTURE = function(this1) {
	return this1.ACTIVE_TEXTURE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_REPEAT = function(this1) {
	return this1.REPEAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CLAMP_TO_EDGE = function(this1) {
	return this1.CLAMP_TO_EDGE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIRRORED_REPEAT = function(this1) {
	return this1.MIRRORED_REPEAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC2 = function(this1) {
	return this1.FLOAT_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC3 = function(this1) {
	return this1.FLOAT_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC4 = function(this1) {
	return this1.FLOAT_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC2 = function(this1) {
	return this1.INT_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC3 = function(this1) {
	return this1.INT_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC4 = function(this1) {
	return this1.INT_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL = function(this1) {
	return this1.BOOL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC2 = function(this1) {
	return this1.BOOL_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC3 = function(this1) {
	return this1.BOOL_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC4 = function(this1) {
	return this1.BOOL_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2 = function(this1) {
	return this1.FLOAT_MAT2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3 = function(this1) {
	return this1.FLOAT_MAT3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4 = function(this1) {
	return this1.FLOAT_MAT4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D = function(this1) {
	return this1.SAMPLER_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_CUBE = function(this1) {
	return this1.SAMPLER_CUBE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_ENABLED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_STRIDE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_POINTER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_PROGRAM_POINT_SIZE = function(this1) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POINT_SPRITE = function(this1) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPILE_STATUS = function(this1) {
	return this1.COMPILE_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LOW_FLOAT = function(this1) {
	return this1.LOW_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MEDIUM_FLOAT = function(this1) {
	return this1.MEDIUM_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HIGH_FLOAT = function(this1) {
	return this1.HIGH_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LOW_INT = function(this1) {
	return this1.LOW_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MEDIUM_INT = function(this1) {
	return this1.MEDIUM_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HIGH_INT = function(this1) {
	return this1.HIGH_INT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER = function(this1) {
	return this1.FRAMEBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER = function(this1) {
	return this1.RENDERBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA4 = function(this1) {
	return this1.RGBA4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB5_A1 = function(this1) {
	return this1.RGB5_A1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB565 = function(this1) {
	return this1.RGB565;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT16 = function(this1) {
	return this1.DEPTH_COMPONENT16;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_INDEX = function(this1) {
	return this1.STENCIL_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_INDEX8 = function(this1) {
	return this1.STENCIL_INDEX8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_STENCIL = function(this1) {
	return this1.DEPTH_STENCIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_WIDTH = function(this1) {
	return this1.RENDERBUFFER_WIDTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_HEIGHT = function(this1) {
	return this1.RENDERBUFFER_HEIGHT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
	return this1.RENDERBUFFER_INTERNAL_FORMAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_RED_SIZE = function(this1) {
	return this1.RENDERBUFFER_RED_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
	return this1.RENDERBUFFER_GREEN_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
	return this1.RENDERBUFFER_BLUE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
	return this1.RENDERBUFFER_ALPHA_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
	return this1.RENDERBUFFER_DEPTH_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
	return this1.RENDERBUFFER_STENCIL_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT0 = function(this1) {
	return this1.COLOR_ATTACHMENT0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_ATTACHMENT = function(this1) {
	return this1.DEPTH_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_ATTACHMENT = function(this1) {
	return this1.STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
	return this1.DEPTH_STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NONE = function(this1) {
	return this1.NONE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_COMPLETE = function(this1) {
	return this1.FRAMEBUFFER_COMPLETE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
	return this1.FRAMEBUFFER_UNSUPPORTED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_BINDING = function(this1) {
	return this1.FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_BINDING = function(this1) {
	return this1.RENDERBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_RENDERBUFFER_SIZE = function(this1) {
	return this1.MAX_RENDERBUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
	return this1.INVALID_FRAMEBUFFER_OPERATION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
	return this1.UNPACK_FLIP_Y_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
	return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONTEXT_LOST_WEBGL = function(this1) {
	return this1.CONTEXT_LOST_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
	return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BROWSER_DEFAULT_WEBGL = function(this1) {
	return this1.BROWSER_DEFAULT_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_type = function(this1) {
	return this1.type;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_version = function(this1) {
	return this1.version;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_BUFFER = function(this1) {
	return this1.READ_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_ROW_LENGTH = function(this1) {
	return this1.UNPACK_ROW_LENGTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_ROWS = function(this1) {
	return this1.UNPACK_SKIP_ROWS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_PIXELS = function(this1) {
	return this1.UNPACK_SKIP_PIXELS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_ROW_LENGTH = function(this1) {
	return this1.PACK_ROW_LENGTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_SKIP_ROWS = function(this1) {
	return this1.PACK_SKIP_ROWS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_SKIP_PIXELS = function(this1) {
	return this1.PACK_SKIP_PIXELS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_3D = function(this1) {
	return this1.TEXTURE_BINDING_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_IMAGES = function(this1) {
	return this1.UNPACK_SKIP_IMAGES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_IMAGE_HEIGHT = function(this1) {
	return this1.UNPACK_IMAGE_HEIGHT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_3D_TEXTURE_SIZE = function(this1) {
	return this1.MAX_3D_TEXTURE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENTS_VERTICES = function(this1) {
	return this1.MAX_ELEMENTS_VERTICES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENTS_INDICES = function(this1) {
	return this1.MAX_ELEMENTS_INDICES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
	return this1.MAX_TEXTURE_LOD_BIAS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
	return this1.MAX_ARRAY_TEXTURE_LAYERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MIN_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MAX_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VARYING_COMPONENTS = function(this1) {
	return this1.MAX_VARYING_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
	return this1.FRAGMENT_SHADER_DERIVATIVE_HINT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RASTERIZER_DISCARD = function(this1) {
	return this1.RASTERIZER_DISCARD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ARRAY_BINDING = function(this1) {
	return this1.VERTEX_ARRAY_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_OUTPUT_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_INPUT_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
	return this1.MAX_SERVER_WAIT_TIMEOUT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENT_INDEX = function(this1) {
	return this1.MAX_ELEMENT_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED = function(this1) {
	return this1.RED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8 = function(this1) {
	return this1.RGB8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8 = function(this1) {
	return this1.RGBA8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB10_A2 = function(this1) {
	return this1.RGB10_A2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_3D = function(this1) {
	return this1.TEXTURE_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_R = function(this1) {
	return this1.TEXTURE_WRAP_R;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MIN_LOD = function(this1) {
	return this1.TEXTURE_MIN_LOD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAX_LOD = function(this1) {
	return this1.TEXTURE_MAX_LOD;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BASE_LEVEL = function(this1) {
	return this1.TEXTURE_BASE_LEVEL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAX_LEVEL = function(this1) {
	return this1.TEXTURE_MAX_LEVEL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_COMPARE_MODE = function(this1) {
	return this1.TEXTURE_COMPARE_MODE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_COMPARE_FUNC = function(this1) {
	return this1.TEXTURE_COMPARE_FUNC;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB = function(this1) {
	return this1.SRGB;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB8 = function(this1) {
	return this1.SRGB8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB8_ALPHA8 = function(this1) {
	return this1.SRGB8_ALPHA8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPARE_REF_TO_TEXTURE = function(this1) {
	return this1.COMPARE_REF_TO_TEXTURE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32F = function(this1) {
	return this1.RGBA32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32F = function(this1) {
	return this1.RGB32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16F = function(this1) {
	return this1.RGBA16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16F = function(this1) {
	return this1.RGB16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_2D_ARRAY = function(this1) {
	return this1.TEXTURE_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
	return this1.TEXTURE_BINDING_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R11F_G11F_B10F = function(this1) {
	return this1.R11F_G11F_B10F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB9_E5 = function(this1) {
	return this1.RGB9_E5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32UI = function(this1) {
	return this1.RGBA32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32UI = function(this1) {
	return this1.RGB32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16UI = function(this1) {
	return this1.RGBA16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16UI = function(this1) {
	return this1.RGB16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8UI = function(this1) {
	return this1.RGBA8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8UI = function(this1) {
	return this1.RGB8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32I = function(this1) {
	return this1.RGBA32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32I = function(this1) {
	return this1.RGB32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16I = function(this1) {
	return this1.RGBA16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16I = function(this1) {
	return this1.RGB16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8I = function(this1) {
	return this1.RGBA8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8I = function(this1) {
	return this1.RGB8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED_INTEGER = function(this1) {
	return this1.RED_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB_INTEGER = function(this1) {
	return this1.RGB_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA_INTEGER = function(this1) {
	return this1.RGBA_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8 = function(this1) {
	return this1.R8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8 = function(this1) {
	return this1.RG8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16F = function(this1) {
	return this1.R16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32F = function(this1) {
	return this1.R32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16F = function(this1) {
	return this1.RG16F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32F = function(this1) {
	return this1.RG32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8I = function(this1) {
	return this1.R8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8UI = function(this1) {
	return this1.R8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16I = function(this1) {
	return this1.R16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16UI = function(this1) {
	return this1.R16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32I = function(this1) {
	return this1.R32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32UI = function(this1) {
	return this1.R32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8I = function(this1) {
	return this1.RG8I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8UI = function(this1) {
	return this1.RG8UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16I = function(this1) {
	return this1.RG16I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16UI = function(this1) {
	return this1.RG16UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32I = function(this1) {
	return this1.RG32I;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32UI = function(this1) {
	return this1.RG32UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8_SNORM = function(this1) {
	return this1.R8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8_SNORM = function(this1) {
	return this1.RG8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8_SNORM = function(this1) {
	return this1.RGB8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8_SNORM = function(this1) {
	return this1.RGBA8_SNORM;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB10_A2UI = function(this1) {
	return this1.RGB10_A2UI;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
	return this1.TEXTURE_IMMUTABLE_FORMAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
	return this1.TEXTURE_IMMUTABLE_LEVELS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
	return this1.UNSIGNED_INT_2_10_10_10_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
	return this1.UNSIGNED_INT_10F_11F_11F_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
	return this1.UNSIGNED_INT_5_9_9_9_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
	return this1.FLOAT_32_UNSIGNED_INT_24_8_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_24_8 = function(this1) {
	return this1.UNSIGNED_INT_24_8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HALF_FLOAT = function(this1) {
	return this1.HALF_FLOAT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG = function(this1) {
	return this1.RG;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG_INTEGER = function(this1) {
	return this1.RG_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_2_10_10_10_REV = function(this1) {
	return this1.INT_2_10_10_10_REV;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_QUERY = function(this1) {
	return this1.CURRENT_QUERY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_QUERY_RESULT = function(this1) {
	return this1.QUERY_RESULT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_QUERY_RESULT_AVAILABLE = function(this1) {
	return this1.QUERY_RESULT_AVAILABLE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ANY_SAMPLES_PASSED = function(this1) {
	return this1.ANY_SAMPLES_PASSED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
	return this1.ANY_SAMPLES_PASSED_CONSERVATIVE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_DRAW_BUFFERS = function(this1) {
	return this1.MAX_DRAW_BUFFERS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER0 = function(this1) {
	return this1.DRAW_BUFFER0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER1 = function(this1) {
	return this1.DRAW_BUFFER1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER2 = function(this1) {
	return this1.DRAW_BUFFER2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER3 = function(this1) {
	return this1.DRAW_BUFFER3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER4 = function(this1) {
	return this1.DRAW_BUFFER4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER5 = function(this1) {
	return this1.DRAW_BUFFER5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER6 = function(this1) {
	return this1.DRAW_BUFFER6;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER7 = function(this1) {
	return this1.DRAW_BUFFER7;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER8 = function(this1) {
	return this1.DRAW_BUFFER8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER9 = function(this1) {
	return this1.DRAW_BUFFER9;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER10 = function(this1) {
	return this1.DRAW_BUFFER10;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER11 = function(this1) {
	return this1.DRAW_BUFFER11;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER12 = function(this1) {
	return this1.DRAW_BUFFER12;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER13 = function(this1) {
	return this1.DRAW_BUFFER13;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER14 = function(this1) {
	return this1.DRAW_BUFFER14;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER15 = function(this1) {
	return this1.DRAW_BUFFER15;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COLOR_ATTACHMENTS = function(this1) {
	return this1.MAX_COLOR_ATTACHMENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT1 = function(this1) {
	return this1.COLOR_ATTACHMENT1;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT2 = function(this1) {
	return this1.COLOR_ATTACHMENT2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT3 = function(this1) {
	return this1.COLOR_ATTACHMENT3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT4 = function(this1) {
	return this1.COLOR_ATTACHMENT4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT5 = function(this1) {
	return this1.COLOR_ATTACHMENT5;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT6 = function(this1) {
	return this1.COLOR_ATTACHMENT6;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT7 = function(this1) {
	return this1.COLOR_ATTACHMENT7;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT8 = function(this1) {
	return this1.COLOR_ATTACHMENT8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT9 = function(this1) {
	return this1.COLOR_ATTACHMENT9;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT10 = function(this1) {
	return this1.COLOR_ATTACHMENT10;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT11 = function(this1) {
	return this1.COLOR_ATTACHMENT11;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT12 = function(this1) {
	return this1.COLOR_ATTACHMENT12;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT13 = function(this1) {
	return this1.COLOR_ATTACHMENT13;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT14 = function(this1) {
	return this1.COLOR_ATTACHMENT14;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT15 = function(this1) {
	return this1.COLOR_ATTACHMENT15;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_3D = function(this1) {
	return this1.SAMPLER_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_SHADOW = function(this1) {
	return this1.SAMPLER_2D_SHADOW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_ARRAY = function(this1) {
	return this1.SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
	return this1.SAMPLER_2D_ARRAY_SHADOW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_CUBE_SHADOW = function(this1) {
	return this1.SAMPLER_CUBE_SHADOW;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_2D = function(this1) {
	return this1.INT_SAMPLER_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_3D = function(this1) {
	return this1.INT_SAMPLER_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_CUBE = function(this1) {
	return this1.INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_3D;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_SAMPLES = function(this1) {
	return this1.MAX_SAMPLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_BINDING = function(this1) {
	return this1.SAMPLER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_PACK_BUFFER = function(this1) {
	return this1.PIXEL_PACK_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_UNPACK_BUFFER = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_PACK_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_READ_BUFFER = function(this1) {
	return this1.COPY_READ_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_WRITE_BUFFER = function(this1) {
	return this1.COPY_WRITE_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_READ_BUFFER_BINDING = function(this1) {
	return this1.COPY_READ_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
	return this1.COPY_WRITE_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2x3 = function(this1) {
	return this1.FLOAT_MAT2x3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2x4 = function(this1) {
	return this1.FLOAT_MAT2x4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3x2 = function(this1) {
	return this1.FLOAT_MAT3x2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3x4 = function(this1) {
	return this1.FLOAT_MAT3x4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4x2 = function(this1) {
	return this1.FLOAT_MAT4x2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4x3 = function(this1) {
	return this1.FLOAT_MAT4x3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC2 = function(this1) {
	return this1.UNSIGNED_INT_VEC2;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC3 = function(this1) {
	return this1.UNSIGNED_INT_VEC3;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC4 = function(this1) {
	return this1.UNSIGNED_INT_VEC4;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_NORMALIZED = function(this1) {
	return this1.UNSIGNED_NORMALIZED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SIGNED_NORMALIZED = function(this1) {
	return this1.SIGNED_NORMALIZED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_INTEGER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_DIVISOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_MODE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
	return this1.TRANSFORM_FEEDBACK_VARYINGS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_START;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INTERLEAVED_ATTRIBS = function(this1) {
	return this1.INTERLEAVED_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SEPARATE_ATTRIBS = function(this1) {
	return this1.SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK = function(this1) {
	return this1.TRANSFORM_FEEDBACK;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PAUSED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_ACTIVE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_DEFAULT = function(this1) {
	return this1.FRAMEBUFFER_DEFAULT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH24_STENCIL8 = function(this1) {
	return this1.DEPTH24_STENCIL8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
	return this1.DRAW_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_FRAMEBUFFER = function(this1) {
	return this1.READ_FRAMEBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_FRAMEBUFFER = function(this1) {
	return this1.DRAW_FRAMEBUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_FRAMEBUFFER_BINDING = function(this1) {
	return this1.READ_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_SAMPLES = function(this1) {
	return this1.RENDERBUFFER_SAMPLES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER = function(this1) {
	return this1.UNIFORM_BUFFER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_BINDING = function(this1) {
	return this1.UNIFORM_BUFFER_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_START = function(this1) {
	return this1.UNIFORM_BUFFER_START;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_SIZE = function(this1) {
	return this1.UNIFORM_BUFFER_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_COMBINED_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
	return this1.MAX_UNIFORM_BUFFER_BINDINGS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
	return this1.MAX_UNIFORM_BLOCK_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
	return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
	return this1.ACTIVE_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_TYPE = function(this1) {
	return this1.UNIFORM_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_SIZE = function(this1) {
	return this1.UNIFORM_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_INDEX = function(this1) {
	return this1.UNIFORM_BLOCK_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_OFFSET = function(this1) {
	return this1.UNIFORM_OFFSET;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_ARRAY_STRIDE = function(this1) {
	return this1.UNIFORM_ARRAY_STRIDE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_MATRIX_STRIDE = function(this1) {
	return this1.UNIFORM_MATRIX_STRIDE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
	return this1.UNIFORM_IS_ROW_MAJOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_BINDING = function(this1) {
	return this1.UNIFORM_BLOCK_BINDING;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
	return this1.UNIFORM_BLOCK_DATA_SIZE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_OBJECT_TYPE = function(this1) {
	return this1.OBJECT_TYPE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_CONDITION = function(this1) {
	return this1.SYNC_CONDITION;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_STATUS = function(this1) {
	return this1.SYNC_STATUS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FLAGS = function(this1) {
	return this1.SYNC_FLAGS;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FENCE = function(this1) {
	return this1.SYNC_FENCE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
	return this1.SYNC_GPU_COMMANDS_COMPLETE;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNALED = function(this1) {
	return this1.UNSIGNALED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SIGNALED = function(this1) {
	return this1.SIGNALED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALREADY_SIGNALED = function(this1) {
	return this1.ALREADY_SIGNALED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TIMEOUT_EXPIRED = function(this1) {
	return this1.TIMEOUT_EXPIRED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONDITION_SATISFIED = function(this1) {
	return this1.CONDITION_SATISFIED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_WAIT_FAILED = function(this1) {
	return this1.WAIT_FAILED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
	return this1.SYNC_FLUSH_COMMANDS_BIT;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR = function(this1) {
	return this1.COLOR;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH = function(this1) {
	return this1.DEPTH;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL = function(this1) {
	return this1.STENCIL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIN = function(this1) {
	return this1.MIN;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX = function(this1) {
	return this1.MAX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT24 = function(this1) {
	return this1.DEPTH_COMPONENT24;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_READ = function(this1) {
	return this1.STREAM_READ;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_COPY = function(this1) {
	return this1.STREAM_COPY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_READ = function(this1) {
	return this1.STATIC_READ;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_COPY = function(this1) {
	return this1.STATIC_COPY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_READ = function(this1) {
	return this1.DYNAMIC_READ;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_COPY = function(this1) {
	return this1.DYNAMIC_COPY;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT32F = function(this1) {
	return this1.DEPTH_COMPONENT32F;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH32F_STENCIL8 = function(this1) {
	return this1.DEPTH32F_STENCIL8;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_INDEX = function(this1) {
	return this1.INVALID_INDEX;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TIMEOUT_IGNORED = function(this1) {
	return this1.TIMEOUT_IGNORED;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
	return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.activeTexture = function(this1,texture) {
	this1.__context.activeTexture(texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.attachShader = function(this1,program,shader) {
	this1.__context.attachShader(program,shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.beginQuery = function(this1,target,query) {
	this1.__context.beginQuery(target,query);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.beginTransformFeedback = function(this1,primitiveNode) {
	this1.__context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindAttribLocation = function(this1,program,index,name) {
	this1.__context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBuffer = function(this1,target,buffer) {
	this1.__context.bindBuffer(target,buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBufferBase = function(this1,target,index,buffer) {
	this1.__context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBufferRange = function(this1,target,index,buffer,offset,size) {
	this1.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindFramebuffer = function(this1,target,framebuffer) {
	this1.__context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindRenderbuffer = function(this1,target,renderbuffer) {
	this1.__context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindSampler = function(this1,unit,sampler) {
	this1.__context.bindSampler(unit,sampler);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindTexture = function(this1,target,texture) {
	this1.__context.bindTexture(target,texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindTransformFeedback = function(this1,target,transformFeedback) {
	this1.__context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindVertexArray = function(this1,vertexArray) {
	this1.__context.bindVertexArray(vertexArray);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendColor = function(this1,red,green,blue,alpha) {
	this1.__context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendEquation = function(this1,mode) {
	this1.__context.blendEquation(mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendEquationSeparate = function(this1,modeRGB,modeAlpha) {
	this1.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendFunc = function(this1,sfactor,dfactor) {
	this1.__context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendFuncSeparate = function(this1,srcRGB,dstRGB,srcAlpha,dstAlpha) {
	this1.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blitFramebuffer = function(this1,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	this1.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bufferData = function(this1,target,size,data,usage) {
	this1.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size),usage);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bufferSubData = function(this1,target,offset,size,data) {
	this1.__context.bufferSubData(target,offset,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.checkFramebufferStatus = function(this1,target) {
	return this1.__context.checkFramebufferStatus(target);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clear = function(this1,mask) {
	this1.__context.clear(mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferfi = function(this1,buffer,drawbuffer,depth,stencil) {
	this1.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferfv = function(this1,buffer,drawbuffer,value) {
	this1.__context.clearBufferfv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(value));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferiv = function(this1,buffer,drawbuffer,value) {
	this1.__context.clearBufferiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(value));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferuiv = function(this1,buffer,drawbuffer,value) {
	this1.__context.clearBufferuiv(buffer,drawbuffer,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(value));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearColor = function(this1,red,green,blue,alpha) {
	this1.__context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearDepthf = function(this1,depth) {
	this1.__context.clearDepth(depth);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearStencil = function(this1,s) {
	this1.__context.clearStencil(s);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clientWaitSync = function(this1,sync,flags,timeout) {
	return this1.__context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.colorMask = function(this1,red,green,blue,alpha) {
	this1.__context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compileShader = function(this1,shader) {
	this1.__context.compileShader(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,imageSize,data) {
	this1.__context.compressedTexImage2D(target,level,internalformat,width,height,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexImage3D = function(this1,target,level,internalformat,width,height,depth,border,imageSize,data) {
	this1.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,imageSize,data) {
	this1.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
	this1.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,imageSize));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyBufferSubData = function(this1,readTarget,writeTarget,readOffset,writeOffset,size) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexImage2D = function(this1,target,level,internalformat,x,y,width,height,border) {
	this1.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexSubImage2D = function(this1,target,level,xoffset,yoffset,x,y,width,height) {
	this1.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	this1.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createBuffer = function(this1) {
	return this1.__context.createBuffer();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createFramebuffer = function(this1) {
	return this1.__context.createFramebuffer();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createProgram = function(this1) {
	return this1.__context.createProgram();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createQuery = function(this1) {
	return this1.__context.createQuery();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createRenderbuffer = function(this1) {
	return this1.__context.createRenderbuffer();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createSampler = function(this1) {
	return this1.__context.createSampler();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createShader = function(this1,type) {
	return this1.__context.createShader(type);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createTexture = function(this1) {
	return this1.__context.createTexture();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createTransformFeedback = function(this1) {
	return this1.__context.createTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createVertexArray = function(this1) {
	return this1.__context.createVertexArray();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.cullFace = function(this1,mode) {
	this1.__context.cullFace(mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteBuffer = function(this1,buffer) {
	this1.__context.deleteBuffer(buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteFramebuffer = function(this1,framebuffer) {
	this1.__context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteProgram = function(this1,program) {
	this1.__context.deleteProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteQuery = function(this1,query) {
	this1.__context.deleteQuery(query);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteRenderbuffer = function(this1,renderbuffer) {
	this1.__context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteSampler = function(this1,sampler) {
	this1.__context.deleteSampler(sampler);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteShader = function(this1,shader) {
	this1.__context.deleteShader(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteSync = function(this1,sync) {
	this1.__context.deleteSync(sync);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteTexture = function(this1,texture) {
	this1.__context.deleteTexture(texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteTransformFeedback = function(this1,transformFeedback) {
	this1.__context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteVertexArray = function(this1,vertexArray) {
	this1.__context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthFunc = function(this1,func) {
	this1.__context.depthFunc(func);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthMask = function(this1,flag) {
	this1.__context.depthMask(flag);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthRangef = function(this1,zNear,zFar) {
	this1.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.detachShader = function(this1,program,shader) {
	this1.__context.detachShader(program,shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.disable = function(this1,cap) {
	this1.__context.disable(cap);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.disableVertexAttribArray = function(this1,index) {
	this1.__context.disableVertexAttribArray(index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawArrays = function(this1,mode,first,count) {
	this1.__context.drawArrays(mode,first,count);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawArraysInstanced = function(this1,mode,first,count,instanceCount) {
	this1.__context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawBuffers = function(this1,buffers) {
	this1.__context.drawBuffers(buffers);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawElements = function(this1,mode,count,type,offset) {
	this1.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawElementsInstanced = function(this1,mode,count,type,offset,instanceCount) {
	this1.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawRangeElements = function(this1,mode,start,end,count,type,offset) {
	this1.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.enable = function(this1,cap) {
	this1.__context.enable(cap);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.enableVertexAttribArray = function(this1,index) {
	this1.__context.enableVertexAttribArray(index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.endQuery = function(this1,target) {
	this1.__context.endQuery(target);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.endTransformFeedback = function(this1) {
	this1.__context.endTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.fenceSync = function(this1,condition,flags) {
	return this1.__context.fenceSync(condition,flags);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.finish = function(this1) {
	this1.__context.finish();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.flush = function(this1) {
	this1.__context.flush();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferRenderbuffer = function(this1,target,attachment,renderbuffertarget,renderbuffer) {
	this1.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferTexture2D = function(this1,target,attachment,textarget,texture,level) {
	this1.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferTextureLayer = function(this1,target,attachment,texture,level,layer) {
	this1.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.frontFace = function(this1,mode) {
	this1.__context.frontFace(mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genBuffers = function(this1,n,buffers) {
	if(buffers == null) buffers = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		buffers[i] = this1.__context.createBuffer();
	}
	return buffers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.generateMipmap = function(this1,target) {
	this1.__context.generateMipmap(target);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genFramebuffers = function(this1,n,framebuffers) {
	if(framebuffers == null) framebuffers = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		framebuffers[i] = this1.__context.createFramebuffer();
	}
	return framebuffers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genQueries = function(this1,n,queries) {
	if(queries == null) queries = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		queries[i] = this1.__context.createQuery();
	}
	return queries;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genRenderbuffers = function(this1,n,renderbuffers) {
	if(renderbuffers == null) renderbuffers = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		renderbuffers[i] = this1.__context.createRenderbuffer();
	}
	return renderbuffers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genSamplers = function(this1,n,samplers) {
	if(samplers == null) samplers = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		samplers[i] = this1.__context.createSampler();
	}
	return samplers;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genTextures = function(this1,n,textures) {
	if(textures == null) textures = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		textures[i] = this1.__context.createTexture();
	}
	return textures;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genTransformFeedbacks = function(this1,n,transformFeedbacks) {
	if(transformFeedbacks == null) transformFeedbacks = [];
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		transformFeedbacks[i] = this1.__context.createTransformFeedback();
	}
	return transformFeedbacks;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveAttrib = function(this1,program,index) {
	return this1.__context.getActiveAttrib(program,index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniform = function(this1,program,index) {
	return this1.__context.getActiveUniform(program,index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlocki = function(this1,program,uniformBlockIndex,pname) {
	return this1.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlockiv = function(this1,program,uniformBlockIndex,pname,params) {
	this1.getActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlockName = function(this1,program,uniformBlockIndex) {
	return this1.__context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformsiv = function(this1,program,uniformIndices,pname,params) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getAttachedShaders = function(this1,program) {
	return this1.__context.getAttachedShaders(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getAttribLocation = function(this1,program,name) {
	return this1.__context.getAttribLocation(program,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBoolean = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBooleanv = function(this1,pname,params) {
	this1.getBooleanv(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteri = function(this1,target,pname) {
	return this1.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteri64v = function(this1,target,pname,params) {
	this1.getBufferParameteri64v(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteriv = function(this1,target,pname,params) {
	this1.getBufferParameteriv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferPointerv = function(this1,target,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getError = function(this1) {
	return this1.__context.getError();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFloat = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFloatv = function(this1,pname,params) {
	this1.getFloatv(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getExtension = function(this1,name) {
	return this1.__context.getExtension(name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFragDataLocation = function(this1,program,name) {
	return this1.__context.getFragDataLocation(program,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFramebufferAttachmentParameteri = function(this1,target,attachment,pname) {
	return this1.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFramebufferAttachmentParameteriv = function(this1,target,attachment,pname,params) {
	this1.getFramebufferAttachmentParameteriv(target,attachment,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64 = function(this1,pname) {
	return this1.getInteger64(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64i = function(this1,pname) {
	return this1.getInteger64(pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64i_v = function(this1,pname,index,params) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64v = function(this1,pname,params) {
	this1.getInteger64v(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegeri_v = function(this1,pname,index,params) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegerv = function(this1,pname,params) {
	this1.getIntegerv(pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInternalformati = function(this1,target,internalformat,pname) {
	return this1.__context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInternalformativ = function(this1,target,internalformat,pname,bufSize,params) {
	this1.getInternalformativ(target,internalformat,pname,bufSize,params);
	return;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramBinary = function(this1,program,binaryFormat) {
	return null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgrami = function(this1,program,pname) {
	return this1.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramInfoLog = function(this1,program) {
	return this1.__context.getProgramInfoLog(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramiv = function(this1,program,pname,params) {
	this1.getProgramiv(program,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryi = function(this1,target,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryiv = function(this1,target,pname,params) {
	this1.getQueryiv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryObjectui = function(this1,query,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryObjectuiv = function(this1,query,pname,params) {
	this1.getQueryObjectuiv(query,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getRenderbufferParameteri = function(this1,target,pname) {
	return this1.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getRenderbufferParameteriv = function(this1,target,pname,params) {
	this1.getRenderbufferParameteriv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameteri = function(this1,sampler,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameteriv = function(this1,sampler,pname,params) {
	this1.getSamplerParameteriv(sampler,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameterf = function(this1,sampler,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameterfv = function(this1,sampler,pname,params) {
	this1.getSamplerParameterfv(sampler,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderInfoLog = function(this1,shader) {
	return this1.__context.getShaderInfoLog(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderi = function(this1,shader,pname) {
	return this1.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderiv = function(this1,shader,pname,params) {
	this1.getShaderiv(shader,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderPrecisionFormat = function(this1,shadertype,precisiontype) {
	return this1.__context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderSource = function(this1,shader) {
	return this1.__context.getShaderSource(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getString = function(this1,name) {
	return this1.getString(name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getStringi = function(this1,name,index) {
	return null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSyncParameteri = function(this1,sync,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSyncParameteriv = function(this1,sync,pname,params) {
	this1.getSyncParameteriv(sync,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameterf = function(this1,target,pname) {
	return this1.__context.getTexParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameterfv = function(this1,target,pname,params) {
	this1.getTexParameterfv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameteri = function(this1,target,pname) {
	return this1.__context.getTexParameter(target,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameteriv = function(this1,target,pname,params) {
	this1.getTexParameteriv(target,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTransformFeedbackVarying = function(this1,program,index) {
	return this1.__context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformf = function(this1,program,location) {
	return this1.__context.getUniform(program,location);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformfv = function(this1,program,location,params) {
	this1.getUniformfv(program,location,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformi = function(this1,program,location) {
	return this1.__context.getUniform(program,location);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformiv = function(this1,program,location,params) {
	this1.getUniformiv(program,location,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformui = function(this1,program,location) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformuiv = function(this1,program,location,params) {
	this1.getUniformuiv(program,location,params);
	return;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformBlockIndex = function(this1,program,uniformBlockName) {
	return this1.__context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformIndices = function(this1,program,uniformNames) {
	return this1.__context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformLocation = function(this1,program,name) {
	return this1.__context.getUniformLocation(program,name);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribf = function(this1,index,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribfv = function(this1,index,pname,params) {
	this1.getVertexAttribfv(index,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribi = function(this1,index,pname) {
	return this1.__context.getVertexAttrib(index,pname);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIi = function(this1,index,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIiv = function(this1,index,pname,params) {
	return null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIui = function(this1,index,pname) {
	return 0;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIuiv = function(this1,index,pname,params) {
	return null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribiv = function(this1,index,pname,params) {
	this1.getVertexAttribiv(index,pname,params);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribPointerv = function(this1,index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this1.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.hint = function(this1,target,mode) {
	this1.__context.hint(target,mode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.invalidateFramebuffer = function(this1,target,attachments) {
	this1.__context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.invalidateSubFramebuffer = function(this1,target,attachments,x,y,width,height) {
	this1.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isBuffer = function(this1,buffer) {
	return this1.__context.isBuffer(buffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isEnabled = function(this1,cap) {
	return this1.__context.isEnabled(cap);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isFramebuffer = function(this1,framebuffer) {
	return this1.__context.isFramebuffer(framebuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isProgram = function(this1,program) {
	return this1.__context.isProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isQuery = function(this1,query) {
	return this1.__context.isQuery(query);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isRenderbuffer = function(this1,renderbuffer) {
	return this1.__context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isSampler = function(this1,sampler) {
	return this1.__context.isSampler(sampler);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isShader = function(this1,shader) {
	return this1.__context.isShader(shader);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isTexture = function(this1,texture) {
	return this1.__context.isTexture(texture);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isTransformFeedback = function(this1,transformFeedback) {
	return this1.__context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isVertexArray = function(this1,vertexArray) {
	return this1.__context.isVertexArray(vertexArray);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.lineWidth = function(this1,width) {
	this1.__context.lineWidth(width);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.linkProgram = function(this1,program) {
	this1.__context.linkProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.mapBufferRange = function(this1,target,offset,length,access) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.pauseTransformFeedback = function(this1) {
	this1.__context.pauseTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.pixelStorei = function(this1,pname,param) {
	this1.__context.pixelStorei(pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.polygonOffset = function(this1,factor,units) {
	this1.__context.polygonOffset(factor,units);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.programBinary = function(this1,program,binaryFormat,binary,length) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.programParameteri = function(this1,program,pname,value) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.readBuffer = function(this1,src) {
	this1.__context.readBuffer(src);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,data) {
	this1.__context.readPixels(x,y,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.releaseShaderCompiler = function(this1) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.renderbufferStorage = function(this1,target,internalformat,width,height) {
	this1.__context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.renderbufferStorageMultisample = function(this1,target,samples,internalformat,width,height) {
	this1.__context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.resumeTransformFeedback = function(this1) {
	this1.__context.resumeTransformFeedback();
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.sampleCoverage = function(this1,value,invert) {
	this1.__context.sampleCoverage(value,invert);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.samplerParameterf = function(this1,sampler,pname,param) {
	this1.__context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.samplerParameteri = function(this1,sampler,pname,param) {
	this1.__context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.scissor = function(this1,x,y,width,height) {
	this1.__context.scissor(x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.shaderBinary = function(this1,shaders,binaryformat,binary,length) {
	null;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.shaderSource = function(this1,shader,source) {
	this1.__context.shaderSource(shader,source);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilFunc = function(this1,func,ref,mask) {
	this1.__context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilFuncSeparate = function(this1,face,func,ref,mask) {
	this1.__context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilMask = function(this1,mask) {
	this1.__context.stencilMask(mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilMaskSeparate = function(this1,face,mask) {
	this1.__context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilOp = function(this1,fail,zfail,zpass) {
	this1.__context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilOpSeparate = function(this1,face,fail,zfail,zpass) {
	this1.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,data) {
	this1.__context.texImage2D(target,level,internalformat,width,height,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texImage3D = function(this1,target,level,internalformat,width,height,depth,border,format,type,data) {
	this1.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texStorage2D = function(this1,target,level,internalformat,width,height) {
	this1.__context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texStorage3D = function(this1,target,level,internalformat,width,height,depth) {
	this1.__context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texParameterf = function(this1,target,pname,param) {
	this1.__context.texParameterf(target,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texParameteri = function(this1,target,pname,param) {
	this1.__context.texParameteri(target,pname,param);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,data) {
	this1.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
	this1.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.transformFeedbackVaryings = function(this1,program,varyings,bufferMode) {
	this1.__context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1f = function(this1,location,v0) {
	this1.__context.uniform1f(location,v0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1fv = function(this1,location,count,v) {
	this1.__context.uniform1fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1i = function(this1,location,v0) {
	this1.__context.uniform1i(location,v0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1iv = function(this1,location,count,v) {
	this1.__context.uniform1iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1ui = function(this1,location,v0) {
	this1.__context.uniform1ui(location,v0);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1uiv = function(this1,location,count,v) {
	this1.__context.uniform1uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2f = function(this1,location,v0,v1) {
	this1.__context.uniform2f(location,v0,v1);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2fv = function(this1,location,count,v) {
	this1.__context.uniform2fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 2));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2i = function(this1,location,v0,v1) {
	this1.__context.uniform2i(location,v0,v1);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2iv = function(this1,location,count,v) {
	this1.__context.uniform2iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2ui = function(this1,location,v0,v1) {
	this1.__context.uniform2ui(location,v0,v1);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2uiv = function(this1,location,count,v) {
	this1.__context.uniform2uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 2));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3f = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3fv = function(this1,location,count,v) {
	this1.__context.uniform3fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 3));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3i = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3iv = function(this1,location,count,v) {
	this1.__context.uniform3iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3ui = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3uiv = function(this1,location,count,v) {
	this1.__context.uniform3uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 3));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4f = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4fv = function(this1,location,count,v) {
	this1.__context.uniform4fv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4i = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4iv = function(this1,location,count,v) {
	this1.__context.uniform4iv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4ui = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4uiv = function(this1,location,count,v) {
	this1.__context.uniform4uiv(location,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformBlockBinding = function(this1,program,uniformBlockIndex,uniformBlockBinding) {
	this1.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 4));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2x3fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix2x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2x4fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix2x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 9));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3x2fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix3x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 6));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3x4fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix3x4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix4fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 16));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4x2fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix4x2fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 8));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4x3fv = function(this1,location,count,transpose,v) {
	this1.__context.uniformMatrix4x3fv(location,transpose,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,count * 4 * 12));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.unmapBuffer = function(this1,target) {
	return false;
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.useProgram = function(this1,program) {
	this1.__context.useProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.validateProgram = function(this1,program) {
	this1.__context.validateProgram(program);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib1f = function(this1,indx,x) {
	this1.__context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib1fv = function(this1,indx,values) {
	this1.__context.vertexAttrib1fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib2f = function(this1,indx,x,y) {
	this1.__context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib2fv = function(this1,indx,values) {
	this1.__context.vertexAttrib2fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib3f = function(this1,indx,x,y,z) {
	this1.__context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib3fv = function(this1,indx,values) {
	this1.__context.vertexAttrib3fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib4f = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib4fv = function(this1,indx,values) {
	this1.__context.vertexAttrib4fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribDivisor = function(this1,index,divisor) {
	this1.__context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4i = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4i(indx,x,y,z,w);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4iv = function(this1,indx,values) {
	this1.__context.vertexAttribI4iv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4ui = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4ui(indx,x,y,z,w);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4uiv = function(this1,indx,values) {
	this1.__context.vertexAttribI4uiv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(values));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribIPointer = function(this1,indx,size,type,stride,pointer) {
	this1.__context.vertexAttribIPointer(indx,size,type,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(pointer)));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribPointer = function(this1,indx,size,type,normalized,stride,pointer) {
	this1.__context.vertexAttribPointer(indx,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(pointer));
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.viewport = function(this1,x,y,width,height) {
	this1.__context.viewport(x,y,width,height);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.waitSync = function(this1,sync,flags,timeout) {
	this1.__context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = ["lime","utils","BytePointerData"];
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._WebGL2Context.WebGL2Context_Impl_"] = lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$;
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__name__ = ["lime","graphics","opengl","_WebGL2Context","WebGL2Context_Impl_"];
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__properties__ = {get_version:"get_version",get_type:"get_type",get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL:"get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",get_TIMEOUT_IGNORED:"get_TIMEOUT_IGNORED",get_INVALID_INDEX:"get_INVALID_INDEX",get_DEPTH32F_STENCIL8:"get_DEPTH32F_STENCIL8",get_DEPTH_COMPONENT32F:"get_DEPTH_COMPONENT32F",get_DYNAMIC_COPY:"get_DYNAMIC_COPY",get_DYNAMIC_READ:"get_DYNAMIC_READ",get_STATIC_COPY:"get_STATIC_COPY",get_STATIC_READ:"get_STATIC_READ",get_STREAM_COPY:"get_STREAM_COPY",get_STREAM_READ:"get_STREAM_READ",get_DEPTH_COMPONENT24:"get_DEPTH_COMPONENT24",get_MAX:"get_MAX",get_MIN:"get_MIN",get_STENCIL:"get_STENCIL",get_DEPTH:"get_DEPTH",get_COLOR:"get_COLOR",get_SYNC_FLUSH_COMMANDS_BIT:"get_SYNC_FLUSH_COMMANDS_BIT",get_WAIT_FAILED:"get_WAIT_FAILED",get_CONDITION_SATISFIED:"get_CONDITION_SATISFIED",get_TIMEOUT_EXPIRED:"get_TIMEOUT_EXPIRED",get_ALREADY_SIGNALED:"get_ALREADY_SIGNALED",get_SIGNALED:"get_SIGNALED",get_UNSIGNALED:"get_UNSIGNALED",get_SYNC_GPU_COMMANDS_COMPLETE:"get_SYNC_GPU_COMMANDS_COMPLETE",get_SYNC_FENCE:"get_SYNC_FENCE",get_SYNC_FLAGS:"get_SYNC_FLAGS",get_SYNC_STATUS:"get_SYNC_STATUS",get_SYNC_CONDITION:"get_SYNC_CONDITION",get_OBJECT_TYPE:"get_OBJECT_TYPE",get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:"get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:"get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",get_UNIFORM_BLOCK_ACTIVE_UNIFORMS:"get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",get_UNIFORM_BLOCK_DATA_SIZE:"get_UNIFORM_BLOCK_DATA_SIZE",get_UNIFORM_BLOCK_BINDING:"get_UNIFORM_BLOCK_BINDING",get_UNIFORM_IS_ROW_MAJOR:"get_UNIFORM_IS_ROW_MAJOR",get_UNIFORM_MATRIX_STRIDE:"get_UNIFORM_MATRIX_STRIDE",get_UNIFORM_ARRAY_STRIDE:"get_UNIFORM_ARRAY_STRIDE",get_UNIFORM_OFFSET:"get_UNIFORM_OFFSET",get_UNIFORM_BLOCK_INDEX:"get_UNIFORM_BLOCK_INDEX",get_UNIFORM_SIZE:"get_UNIFORM_SIZE",get_UNIFORM_TYPE:"get_UNIFORM_TYPE",get_ACTIVE_UNIFORM_BLOCKS:"get_ACTIVE_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_OFFSET_ALIGNMENT:"get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:"get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",get_MAX_UNIFORM_BLOCK_SIZE:"get_MAX_UNIFORM_BLOCK_SIZE",get_MAX_UNIFORM_BUFFER_BINDINGS:"get_MAX_UNIFORM_BUFFER_BINDINGS",get_MAX_COMBINED_UNIFORM_BLOCKS:"get_MAX_COMBINED_UNIFORM_BLOCKS",get_MAX_FRAGMENT_UNIFORM_BLOCKS:"get_MAX_FRAGMENT_UNIFORM_BLOCKS",get_MAX_VERTEX_UNIFORM_BLOCKS:"get_MAX_VERTEX_UNIFORM_BLOCKS",get_UNIFORM_BUFFER_SIZE:"get_UNIFORM_BUFFER_SIZE",get_UNIFORM_BUFFER_START:"get_UNIFORM_BUFFER_START",get_UNIFORM_BUFFER_BINDING:"get_UNIFORM_BUFFER_BINDING",get_UNIFORM_BUFFER:"get_UNIFORM_BUFFER",get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:"get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",get_RENDERBUFFER_SAMPLES:"get_RENDERBUFFER_SAMPLES",get_READ_FRAMEBUFFER_BINDING:"get_READ_FRAMEBUFFER_BINDING",get_DRAW_FRAMEBUFFER:"get_DRAW_FRAMEBUFFER",get_READ_FRAMEBUFFER:"get_READ_FRAMEBUFFER",get_DRAW_FRAMEBUFFER_BINDING:"get_DRAW_FRAMEBUFFER_BINDING",get_DEPTH24_STENCIL8:"get_DEPTH24_STENCIL8",get_FRAMEBUFFER_DEFAULT:"get_FRAMEBUFFER_DEFAULT",get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:"get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:"get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:"get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:"get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:"get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",get_FRAMEBUFFER_ATTACHMENT_RED_SIZE:"get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:"get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",get_TRANSFORM_FEEDBACK_BINDING:"get_TRANSFORM_FEEDBACK_BINDING",get_TRANSFORM_FEEDBACK_ACTIVE:"get_TRANSFORM_FEEDBACK_ACTIVE",get_TRANSFORM_FEEDBACK_PAUSED:"get_TRANSFORM_FEEDBACK_PAUSED",get_TRANSFORM_FEEDBACK:"get_TRANSFORM_FEEDBACK",get_TRANSFORM_FEEDBACK_BUFFER_BINDING:"get_TRANSFORM_FEEDBACK_BUFFER_BINDING",get_TRANSFORM_FEEDBACK_BUFFER:"get_TRANSFORM_FEEDBACK_BUFFER",get_SEPARATE_ATTRIBS:"get_SEPARATE_ATTRIBS",get_INTERLEAVED_ATTRIBS:"get_INTERLEAVED_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:"get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",get_TRANSFORM_FEEDBACK_BUFFER_SIZE:"get_TRANSFORM_FEEDBACK_BUFFER_SIZE",get_TRANSFORM_FEEDBACK_BUFFER_START:"get_TRANSFORM_FEEDBACK_BUFFER_START",get_TRANSFORM_FEEDBACK_VARYINGS:"get_TRANSFORM_FEEDBACK_VARYINGS",get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:"get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",get_TRANSFORM_FEEDBACK_BUFFER_MODE:"get_TRANSFORM_FEEDBACK_BUFFER_MODE",get_VERTEX_ATTRIB_ARRAY_DIVISOR:"get_VERTEX_ATTRIB_ARRAY_DIVISOR",get_VERTEX_ATTRIB_ARRAY_INTEGER:"get_VERTEX_ATTRIB_ARRAY_INTEGER",get_SIGNED_NORMALIZED:"get_SIGNED_NORMALIZED",get_UNSIGNED_NORMALIZED:"get_UNSIGNED_NORMALIZED",get_UNSIGNED_INT_VEC4:"get_UNSIGNED_INT_VEC4",get_UNSIGNED_INT_VEC3:"get_UNSIGNED_INT_VEC3",get_UNSIGNED_INT_VEC2:"get_UNSIGNED_INT_VEC2",get_FLOAT_MAT4x3:"get_FLOAT_MAT4x3",get_FLOAT_MAT4x2:"get_FLOAT_MAT4x2",get_FLOAT_MAT3x4:"get_FLOAT_MAT3x4",get_FLOAT_MAT3x2:"get_FLOAT_MAT3x2",get_FLOAT_MAT2x4:"get_FLOAT_MAT2x4",get_FLOAT_MAT2x3:"get_FLOAT_MAT2x3",get_COPY_WRITE_BUFFER_BINDING:"get_COPY_WRITE_BUFFER_BINDING",get_COPY_READ_BUFFER_BINDING:"get_COPY_READ_BUFFER_BINDING",get_COPY_WRITE_BUFFER:"get_COPY_WRITE_BUFFER",get_COPY_READ_BUFFER:"get_COPY_READ_BUFFER",get_PIXEL_UNPACK_BUFFER_BINDING:"get_PIXEL_UNPACK_BUFFER_BINDING",get_PIXEL_PACK_BUFFER_BINDING:"get_PIXEL_PACK_BUFFER_BINDING",get_PIXEL_UNPACK_BUFFER:"get_PIXEL_UNPACK_BUFFER",get_PIXEL_PACK_BUFFER:"get_PIXEL_PACK_BUFFER",get_SAMPLER_BINDING:"get_SAMPLER_BINDING",get_MAX_SAMPLES:"get_MAX_SAMPLES",get_UNSIGNED_INT_SAMPLER_2D_ARRAY:"get_UNSIGNED_INT_SAMPLER_2D_ARRAY",get_UNSIGNED_INT_SAMPLER_CUBE:"get_UNSIGNED_INT_SAMPLER_CUBE",get_UNSIGNED_INT_SAMPLER_3D:"get_UNSIGNED_INT_SAMPLER_3D",get_UNSIGNED_INT_SAMPLER_2D:"get_UNSIGNED_INT_SAMPLER_2D",get_INT_SAMPLER_2D_ARRAY:"get_INT_SAMPLER_2D_ARRAY",get_INT_SAMPLER_CUBE:"get_INT_SAMPLER_CUBE",get_INT_SAMPLER_3D:"get_INT_SAMPLER_3D",get_INT_SAMPLER_2D:"get_INT_SAMPLER_2D",get_SAMPLER_CUBE_SHADOW:"get_SAMPLER_CUBE_SHADOW",get_SAMPLER_2D_ARRAY_SHADOW:"get_SAMPLER_2D_ARRAY_SHADOW",get_SAMPLER_2D_ARRAY:"get_SAMPLER_2D_ARRAY",get_SAMPLER_2D_SHADOW:"get_SAMPLER_2D_SHADOW",get_SAMPLER_3D:"get_SAMPLER_3D",get_COLOR_ATTACHMENT15:"get_COLOR_ATTACHMENT15",get_COLOR_ATTACHMENT14:"get_COLOR_ATTACHMENT14",get_COLOR_ATTACHMENT13:"get_COLOR_ATTACHMENT13",get_COLOR_ATTACHMENT12:"get_COLOR_ATTACHMENT12",get_COLOR_ATTACHMENT11:"get_COLOR_ATTACHMENT11",get_COLOR_ATTACHMENT10:"get_COLOR_ATTACHMENT10",get_COLOR_ATTACHMENT9:"get_COLOR_ATTACHMENT9",get_COLOR_ATTACHMENT8:"get_COLOR_ATTACHMENT8",get_COLOR_ATTACHMENT7:"get_COLOR_ATTACHMENT7",get_COLOR_ATTACHMENT6:"get_COLOR_ATTACHMENT6",get_COLOR_ATTACHMENT5:"get_COLOR_ATTACHMENT5",get_COLOR_ATTACHMENT4:"get_COLOR_ATTACHMENT4",get_COLOR_ATTACHMENT3:"get_COLOR_ATTACHMENT3",get_COLOR_ATTACHMENT2:"get_COLOR_ATTACHMENT2",get_COLOR_ATTACHMENT1:"get_COLOR_ATTACHMENT1",get_MAX_COLOR_ATTACHMENTS:"get_MAX_COLOR_ATTACHMENTS",get_DRAW_BUFFER15:"get_DRAW_BUFFER15",get_DRAW_BUFFER14:"get_DRAW_BUFFER14",get_DRAW_BUFFER13:"get_DRAW_BUFFER13",get_DRAW_BUFFER12:"get_DRAW_BUFFER12",get_DRAW_BUFFER11:"get_DRAW_BUFFER11",get_DRAW_BUFFER10:"get_DRAW_BUFFER10",get_DRAW_BUFFER9:"get_DRAW_BUFFER9",get_DRAW_BUFFER8:"get_DRAW_BUFFER8",get_DRAW_BUFFER7:"get_DRAW_BUFFER7",get_DRAW_BUFFER6:"get_DRAW_BUFFER6",get_DRAW_BUFFER5:"get_DRAW_BUFFER5",get_DRAW_BUFFER4:"get_DRAW_BUFFER4",get_DRAW_BUFFER3:"get_DRAW_BUFFER3",get_DRAW_BUFFER2:"get_DRAW_BUFFER2",get_DRAW_BUFFER1:"get_DRAW_BUFFER1",get_DRAW_BUFFER0:"get_DRAW_BUFFER0",get_MAX_DRAW_BUFFERS:"get_MAX_DRAW_BUFFERS",get_ANY_SAMPLES_PASSED_CONSERVATIVE:"get_ANY_SAMPLES_PASSED_CONSERVATIVE",get_ANY_SAMPLES_PASSED:"get_ANY_SAMPLES_PASSED",get_QUERY_RESULT_AVAILABLE:"get_QUERY_RESULT_AVAILABLE",get_QUERY_RESULT:"get_QUERY_RESULT",get_CURRENT_QUERY:"get_CURRENT_QUERY",get_INT_2_10_10_10_REV:"get_INT_2_10_10_10_REV",get_RG_INTEGER:"get_RG_INTEGER",get_RG:"get_RG",get_HALF_FLOAT:"get_HALF_FLOAT",get_UNSIGNED_INT_24_8:"get_UNSIGNED_INT_24_8",get_FLOAT_32_UNSIGNED_INT_24_8_REV:"get_FLOAT_32_UNSIGNED_INT_24_8_REV",get_UNSIGNED_INT_5_9_9_9_REV:"get_UNSIGNED_INT_5_9_9_9_REV",get_UNSIGNED_INT_10F_11F_11F_REV:"get_UNSIGNED_INT_10F_11F_11F_REV",get_UNSIGNED_INT_2_10_10_10_REV:"get_UNSIGNED_INT_2_10_10_10_REV",get_TEXTURE_IMMUTABLE_LEVELS:"get_TEXTURE_IMMUTABLE_LEVELS",get_TEXTURE_IMMUTABLE_FORMAT:"get_TEXTURE_IMMUTABLE_FORMAT",get_RGB10_A2UI:"get_RGB10_A2UI",get_RGBA8_SNORM:"get_RGBA8_SNORM",get_RGB8_SNORM:"get_RGB8_SNORM",get_RG8_SNORM:"get_RG8_SNORM",get_R8_SNORM:"get_R8_SNORM",get_RG32UI:"get_RG32UI",get_RG32I:"get_RG32I",get_RG16UI:"get_RG16UI",get_RG16I:"get_RG16I",get_RG8UI:"get_RG8UI",get_RG8I:"get_RG8I",get_R32UI:"get_R32UI",get_R32I:"get_R32I",get_R16UI:"get_R16UI",get_R16I:"get_R16I",get_R8UI:"get_R8UI",get_R8I:"get_R8I",get_RG32F:"get_RG32F",get_RG16F:"get_RG16F",get_R32F:"get_R32F",get_R16F:"get_R16F",get_RG8:"get_RG8",get_R8:"get_R8",get_RGBA_INTEGER:"get_RGBA_INTEGER",get_RGB_INTEGER:"get_RGB_INTEGER",get_RED_INTEGER:"get_RED_INTEGER",get_RGB8I:"get_RGB8I",get_RGBA8I:"get_RGBA8I",get_RGB16I:"get_RGB16I",get_RGBA16I:"get_RGBA16I",get_RGB32I:"get_RGB32I",get_RGBA32I:"get_RGBA32I",get_RGB8UI:"get_RGB8UI",get_RGBA8UI:"get_RGBA8UI",get_RGB16UI:"get_RGB16UI",get_RGBA16UI:"get_RGBA16UI",get_RGB32UI:"get_RGB32UI",get_RGBA32UI:"get_RGBA32UI",get_RGB9_E5:"get_RGB9_E5",get_R11F_G11F_B10F:"get_R11F_G11F_B10F",get_TEXTURE_BINDING_2D_ARRAY:"get_TEXTURE_BINDING_2D_ARRAY",get_TEXTURE_2D_ARRAY:"get_TEXTURE_2D_ARRAY",get_RGB16F:"get_RGB16F",get_RGBA16F:"get_RGBA16F",get_RGB32F:"get_RGB32F",get_RGBA32F:"get_RGBA32F",get_COMPARE_REF_TO_TEXTURE:"get_COMPARE_REF_TO_TEXTURE",get_SRGB8_ALPHA8:"get_SRGB8_ALPHA8",get_SRGB8:"get_SRGB8",get_SRGB:"get_SRGB",get_TEXTURE_COMPARE_FUNC:"get_TEXTURE_COMPARE_FUNC",get_TEXTURE_COMPARE_MODE:"get_TEXTURE_COMPARE_MODE",get_TEXTURE_MAX_LEVEL:"get_TEXTURE_MAX_LEVEL",get_TEXTURE_BASE_LEVEL:"get_TEXTURE_BASE_LEVEL",get_TEXTURE_MAX_LOD:"get_TEXTURE_MAX_LOD",get_TEXTURE_MIN_LOD:"get_TEXTURE_MIN_LOD",get_TEXTURE_WRAP_R:"get_TEXTURE_WRAP_R",get_TEXTURE_3D:"get_TEXTURE_3D",get_RGB10_A2:"get_RGB10_A2",get_RGBA8:"get_RGBA8",get_RGB8:"get_RGB8",get_RED:"get_RED",get_MAX_ELEMENT_INDEX:"get_MAX_ELEMENT_INDEX",get_MAX_SERVER_WAIT_TIMEOUT:"get_MAX_SERVER_WAIT_TIMEOUT",get_MAX_FRAGMENT_INPUT_COMPONENTS:"get_MAX_FRAGMENT_INPUT_COMPONENTS",get_MAX_VERTEX_OUTPUT_COMPONENTS:"get_MAX_VERTEX_OUTPUT_COMPONENTS",get_VERTEX_ARRAY_BINDING:"get_VERTEX_ARRAY_BINDING",get_RASTERIZER_DISCARD:"get_RASTERIZER_DISCARD",get_FRAGMENT_SHADER_DERIVATIVE_HINT:"get_FRAGMENT_SHADER_DERIVATIVE_HINT",get_MAX_VARYING_COMPONENTS:"get_MAX_VARYING_COMPONENTS",get_MAX_PROGRAM_TEXEL_OFFSET:"get_MAX_PROGRAM_TEXEL_OFFSET",get_MIN_PROGRAM_TEXEL_OFFSET:"get_MIN_PROGRAM_TEXEL_OFFSET",get_MAX_ARRAY_TEXTURE_LAYERS:"get_MAX_ARRAY_TEXTURE_LAYERS",get_MAX_VERTEX_UNIFORM_COMPONENTS:"get_MAX_VERTEX_UNIFORM_COMPONENTS",get_MAX_FRAGMENT_UNIFORM_COMPONENTS:"get_MAX_FRAGMENT_UNIFORM_COMPONENTS",get_MAX_TEXTURE_LOD_BIAS:"get_MAX_TEXTURE_LOD_BIAS",get_MAX_ELEMENTS_INDICES:"get_MAX_ELEMENTS_INDICES",get_MAX_ELEMENTS_VERTICES:"get_MAX_ELEMENTS_VERTICES",get_MAX_3D_TEXTURE_SIZE:"get_MAX_3D_TEXTURE_SIZE",get_UNPACK_IMAGE_HEIGHT:"get_UNPACK_IMAGE_HEIGHT",get_UNPACK_SKIP_IMAGES:"get_UNPACK_SKIP_IMAGES",get_TEXTURE_BINDING_3D:"get_TEXTURE_BINDING_3D",get_PACK_SKIP_PIXELS:"get_PACK_SKIP_PIXELS",get_PACK_SKIP_ROWS:"get_PACK_SKIP_ROWS",get_PACK_ROW_LENGTH:"get_PACK_ROW_LENGTH",get_UNPACK_SKIP_PIXELS:"get_UNPACK_SKIP_PIXELS",get_UNPACK_SKIP_ROWS:"get_UNPACK_SKIP_ROWS",get_UNPACK_ROW_LENGTH:"get_UNPACK_ROW_LENGTH",get_READ_BUFFER:"get_READ_BUFFER",get_BROWSER_DEFAULT_WEBGL:"get_BROWSER_DEFAULT_WEBGL",get_UNPACK_COLORSPACE_CONVERSION_WEBGL:"get_UNPACK_COLORSPACE_CONVERSION_WEBGL",get_CONTEXT_LOST_WEBGL:"get_CONTEXT_LOST_WEBGL",get_UNPACK_PREMULTIPLY_ALPHA_WEBGL:"get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",get_UNPACK_FLIP_Y_WEBGL:"get_UNPACK_FLIP_Y_WEBGL",get_INVALID_FRAMEBUFFER_OPERATION:"get_INVALID_FRAMEBUFFER_OPERATION",get_MAX_RENDERBUFFER_SIZE:"get_MAX_RENDERBUFFER_SIZE",get_RENDERBUFFER_BINDING:"get_RENDERBUFFER_BINDING",get_FRAMEBUFFER_BINDING:"get_FRAMEBUFFER_BINDING",get_FRAMEBUFFER_UNSUPPORTED:"get_FRAMEBUFFER_UNSUPPORTED",get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:"get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:"get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",get_FRAMEBUFFER_COMPLETE:"get_FRAMEBUFFER_COMPLETE",get_NONE:"get_NONE",get_DEPTH_STENCIL_ATTACHMENT:"get_DEPTH_STENCIL_ATTACHMENT",get_STENCIL_ATTACHMENT:"get_STENCIL_ATTACHMENT",get_DEPTH_ATTACHMENT:"get_DEPTH_ATTACHMENT",get_COLOR_ATTACHMENT0:"get_COLOR_ATTACHMENT0",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:"get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:"get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",get_RENDERBUFFER_STENCIL_SIZE:"get_RENDERBUFFER_STENCIL_SIZE",get_RENDERBUFFER_DEPTH_SIZE:"get_RENDERBUFFER_DEPTH_SIZE",get_RENDERBUFFER_ALPHA_SIZE:"get_RENDERBUFFER_ALPHA_SIZE",get_RENDERBUFFER_BLUE_SIZE:"get_RENDERBUFFER_BLUE_SIZE",get_RENDERBUFFER_GREEN_SIZE:"get_RENDERBUFFER_GREEN_SIZE",get_RENDERBUFFER_RED_SIZE:"get_RENDERBUFFER_RED_SIZE",get_RENDERBUFFER_INTERNAL_FORMAT:"get_RENDERBUFFER_INTERNAL_FORMAT",get_RENDERBUFFER_HEIGHT:"get_RENDERBUFFER_HEIGHT",get_RENDERBUFFER_WIDTH:"get_RENDERBUFFER_WIDTH",get_DEPTH_STENCIL:"get_DEPTH_STENCIL",get_STENCIL_INDEX8:"get_STENCIL_INDEX8",get_STENCIL_INDEX:"get_STENCIL_INDEX",get_DEPTH_COMPONENT16:"get_DEPTH_COMPONENT16",get_RGB565:"get_RGB565",get_RGB5_A1:"get_RGB5_A1",get_RGBA4:"get_RGBA4",get_RENDERBUFFER:"get_RENDERBUFFER",get_FRAMEBUFFER:"get_FRAMEBUFFER",get_HIGH_INT:"get_HIGH_INT",get_MEDIUM_INT:"get_MEDIUM_INT",get_LOW_INT:"get_LOW_INT",get_HIGH_FLOAT:"get_HIGH_FLOAT",get_MEDIUM_FLOAT:"get_MEDIUM_FLOAT",get_LOW_FLOAT:"get_LOW_FLOAT",get_COMPILE_STATUS:"get_COMPILE_STATUS",get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:"get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",get_VERTEX_ATTRIB_ARRAY_POINTER:"get_VERTEX_ATTRIB_ARRAY_POINTER",get_VERTEX_ATTRIB_ARRAY_NORMALIZED:"get_VERTEX_ATTRIB_ARRAY_NORMALIZED",get_VERTEX_ATTRIB_ARRAY_TYPE:"get_VERTEX_ATTRIB_ARRAY_TYPE",get_VERTEX_ATTRIB_ARRAY_STRIDE:"get_VERTEX_ATTRIB_ARRAY_STRIDE",get_VERTEX_ATTRIB_ARRAY_SIZE:"get_VERTEX_ATTRIB_ARRAY_SIZE",get_VERTEX_ATTRIB_ARRAY_ENABLED:"get_VERTEX_ATTRIB_ARRAY_ENABLED",get_SAMPLER_CUBE:"get_SAMPLER_CUBE",get_SAMPLER_2D:"get_SAMPLER_2D",get_FLOAT_MAT4:"get_FLOAT_MAT4",get_FLOAT_MAT3:"get_FLOAT_MAT3",get_FLOAT_MAT2:"get_FLOAT_MAT2",get_BOOL_VEC4:"get_BOOL_VEC4",get_BOOL_VEC3:"get_BOOL_VEC3",get_BOOL_VEC2:"get_BOOL_VEC2",get_BOOL:"get_BOOL",get_INT_VEC4:"get_INT_VEC4",get_INT_VEC3:"get_INT_VEC3",get_INT_VEC2:"get_INT_VEC2",get_FLOAT_VEC4:"get_FLOAT_VEC4",get_FLOAT_VEC3:"get_FLOAT_VEC3",get_FLOAT_VEC2:"get_FLOAT_VEC2",get_MIRRORED_REPEAT:"get_MIRRORED_REPEAT",get_CLAMP_TO_EDGE:"get_CLAMP_TO_EDGE",get_REPEAT:"get_REPEAT",get_ACTIVE_TEXTURE:"get_ACTIVE_TEXTURE",get_TEXTURE31:"get_TEXTURE31",get_TEXTURE30:"get_TEXTURE30",get_TEXTURE29:"get_TEXTURE29",get_TEXTURE28:"get_TEXTURE28",get_TEXTURE27:"get_TEXTURE27",get_TEXTURE26:"get_TEXTURE26",get_TEXTURE25:"get_TEXTURE25",get_TEXTURE24:"get_TEXTURE24",get_TEXTURE23:"get_TEXTURE23",get_TEXTURE22:"get_TEXTURE22",get_TEXTURE21:"get_TEXTURE21",get_TEXTURE20:"get_TEXTURE20",get_TEXTURE19:"get_TEXTURE19",get_TEXTURE18:"get_TEXTURE18",get_TEXTURE17:"get_TEXTURE17",get_TEXTURE16:"get_TEXTURE16",get_TEXTURE15:"get_TEXTURE15",get_TEXTURE14:"get_TEXTURE14",get_TEXTURE13:"get_TEXTURE13",get_TEXTURE12:"get_TEXTURE12",get_TEXTURE11:"get_TEXTURE11",get_TEXTURE10:"get_TEXTURE10",get_TEXTURE9:"get_TEXTURE9",get_TEXTURE8:"get_TEXTURE8",get_TEXTURE7:"get_TEXTURE7",get_TEXTURE6:"get_TEXTURE6",get_TEXTURE5:"get_TEXTURE5",get_TEXTURE4:"get_TEXTURE4",get_TEXTURE3:"get_TEXTURE3",get_TEXTURE2:"get_TEXTURE2",get_TEXTURE1:"get_TEXTURE1",get_TEXTURE0:"get_TEXTURE0",get_MAX_CUBE_MAP_TEXTURE_SIZE:"get_MAX_CUBE_MAP_TEXTURE_SIZE",get_TEXTURE_CUBE_MAP_NEGATIVE_Z:"get_TEXTURE_CUBE_MAP_NEGATIVE_Z",get_TEXTURE_CUBE_MAP_POSITIVE_Z:"get_TEXTURE_CUBE_MAP_POSITIVE_Z",get_TEXTURE_CUBE_MAP_NEGATIVE_Y:"get_TEXTURE_CUBE_MAP_NEGATIVE_Y",get_TEXTURE_CUBE_MAP_POSITIVE_Y:"get_TEXTURE_CUBE_MAP_POSITIVE_Y",get_TEXTURE_CUBE_MAP_NEGATIVE_X:"get_TEXTURE_CUBE_MAP_NEGATIVE_X",get_TEXTURE_CUBE_MAP_POSITIVE_X:"get_TEXTURE_CUBE_MAP_POSITIVE_X",get_TEXTURE_BINDING_CUBE_MAP:"get_TEXTURE_BINDING_CUBE_MAP",get_TEXTURE_CUBE_MAP:"get_TEXTURE_CUBE_MAP",get_TEXTURE:"get_TEXTURE",get_TEXTURE_2D:"get_TEXTURE_2D",get_TEXTURE_WRAP_T:"get_TEXTURE_WRAP_T",get_TEXTURE_WRAP_S:"get_TEXTURE_WRAP_S",get_TEXTURE_MIN_FILTER:"get_TEXTURE_MIN_FILTER",get_TEXTURE_MAG_FILTER:"get_TEXTURE_MAG_FILTER",get_LINEAR_MIPMAP_LINEAR:"get_LINEAR_MIPMAP_LINEAR",get_NEAREST_MIPMAP_LINEAR:"get_NEAREST_MIPMAP_LINEAR",get_LINEAR_MIPMAP_NEAREST:"get_LINEAR_MIPMAP_NEAREST",get_NEAREST_MIPMAP_NEAREST:"get_NEAREST_MIPMAP_NEAREST",get_LINEAR:"get_LINEAR",get_NEAREST:"get_NEAREST",get_VERSION:"get_VERSION",get_RENDERER:"get_RENDERER",get_VENDOR:"get_VENDOR",get_DECR_WRAP:"get_DECR_WRAP",get_INCR_WRAP:"get_INCR_WRAP",get_INVERT:"get_INVERT",get_DECR:"get_DECR",get_INCR:"get_INCR",get_REPLACE:"get_REPLACE",get_KEEP:"get_KEEP",get_ALWAYS:"get_ALWAYS",get_GEQUAL:"get_GEQUAL",get_NOTEQUAL:"get_NOTEQUAL",get_GREATER:"get_GREATER",get_LEQUAL:"get_LEQUAL",get_EQUAL:"get_EQUAL",get_LESS:"get_LESS",get_NEVER:"get_NEVER",get_CURRENT_PROGRAM:"get_CURRENT_PROGRAM",get_SHADING_LANGUAGE_VERSION:"get_SHADING_LANGUAGE_VERSION",get_ACTIVE_ATTRIBUTES:"get_ACTIVE_ATTRIBUTES",get_ACTIVE_UNIFORMS:"get_ACTIVE_UNIFORMS",get_ATTACHED_SHADERS:"get_ATTACHED_SHADERS",get_VALIDATE_STATUS:"get_VALIDATE_STATUS",get_LINK_STATUS:"get_LINK_STATUS",get_DELETE_STATUS:"get_DELETE_STATUS",get_SHADER_TYPE:"get_SHADER_TYPE",get_MAX_FRAGMENT_UNIFORM_VECTORS:"get_MAX_FRAGMENT_UNIFORM_VECTORS",get_MAX_TEXTURE_IMAGE_UNITS:"get_MAX_TEXTURE_IMAGE_UNITS",get_MAX_VERTEX_TEXTURE_IMAGE_UNITS:"get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",get_MAX_COMBINED_TEXTURE_IMAGE_UNITS:"get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",get_MAX_VARYING_VECTORS:"get_MAX_VARYING_VECTORS",get_MAX_VERTEX_UNIFORM_VECTORS:"get_MAX_VERTEX_UNIFORM_VECTORS",get_MAX_VERTEX_ATTRIBS:"get_MAX_VERTEX_ATTRIBS",get_VERTEX_SHADER:"get_VERTEX_SHADER",get_FRAGMENT_SHADER:"get_FRAGMENT_SHADER",get_UNSIGNED_SHORT_5_6_5:"get_UNSIGNED_SHORT_5_6_5",get_UNSIGNED_SHORT_5_5_5_1:"get_UNSIGNED_SHORT_5_5_5_1",get_UNSIGNED_SHORT_4_4_4_4:"get_UNSIGNED_SHORT_4_4_4_4",get_LUMINANCE_ALPHA:"get_LUMINANCE_ALPHA",get_LUMINANCE:"get_LUMINANCE",get_RGBA:"get_RGBA",get_RGB:"get_RGB",get_ALPHA:"get_ALPHA",get_DEPTH_COMPONENT:"get_DEPTH_COMPONENT",get_FLOAT:"get_FLOAT",get_UNSIGNED_INT:"get_UNSIGNED_INT",get_INT:"get_INT",get_UNSIGNED_SHORT:"get_UNSIGNED_SHORT",get_SHORT:"get_SHORT",get_UNSIGNED_BYTE:"get_UNSIGNED_BYTE",get_BYTE:"get_BYTE",get_GENERATE_MIPMAP_HINT:"get_GENERATE_MIPMAP_HINT",get_NICEST:"get_NICEST",get_FASTEST:"get_FASTEST",get_DONT_CARE:"get_DONT_CARE",get_COMPRESSED_TEXTURE_FORMATS:"get_COMPRESSED_TEXTURE_FORMATS",get_SAMPLE_COVERAGE_INVERT:"get_SAMPLE_COVERAGE_INVERT",get_SAMPLE_COVERAGE_VALUE:"get_SAMPLE_COVERAGE_VALUE",get_SAMPLES:"get_SAMPLES",get_SAMPLE_BUFFERS:"get_SAMPLE_BUFFERS",get_TEXTURE_BINDING_2D:"get_TEXTURE_BINDING_2D",get_POLYGON_OFFSET_FACTOR:"get_POLYGON_OFFSET_FACTOR",get_POLYGON_OFFSET_UNITS:"get_POLYGON_OFFSET_UNITS",get_STENCIL_BITS:"get_STENCIL_BITS",get_DEPTH_BITS:"get_DEPTH_BITS",get_ALPHA_BITS:"get_ALPHA_BITS",get_BLUE_BITS:"get_BLUE_BITS",get_GREEN_BITS:"get_GREEN_BITS",get_RED_BITS:"get_RED_BITS",get_SUBPIXEL_BITS:"get_SUBPIXEL_BITS",get_MAX_VIEWPORT_DIMS:"get_MAX_VIEWPORT_DIMS",get_MAX_TEXTURE_SIZE:"get_MAX_TEXTURE_SIZE",get_PACK_ALIGNMENT:"get_PACK_ALIGNMENT",get_UNPACK_ALIGNMENT:"get_UNPACK_ALIGNMENT",get_COLOR_WRITEMASK:"get_COLOR_WRITEMASK",get_COLOR_CLEAR_VALUE:"get_COLOR_CLEAR_VALUE",get_SCISSOR_BOX:"get_SCISSOR_BOX",get_VIEWPORT:"get_VIEWPORT",get_STENCIL_BACK_WRITEMASK:"get_STENCIL_BACK_WRITEMASK",get_STENCIL_BACK_VALUE_MASK:"get_STENCIL_BACK_VALUE_MASK",get_STENCIL_BACK_REF:"get_STENCIL_BACK_REF",get_STENCIL_BACK_PASS_DEPTH_PASS:"get_STENCIL_BACK_PASS_DEPTH_PASS",get_STENCIL_BACK_PASS_DEPTH_FAIL:"get_STENCIL_BACK_PASS_DEPTH_FAIL",get_STENCIL_BACK_FAIL:"get_STENCIL_BACK_FAIL",get_STENCIL_BACK_FUNC:"get_STENCIL_BACK_FUNC",get_STENCIL_WRITEMASK:"get_STENCIL_WRITEMASK",get_STENCIL_VALUE_MASK:"get_STENCIL_VALUE_MASK",get_STENCIL_REF:"get_STENCIL_REF",get_STENCIL_PASS_DEPTH_PASS:"get_STENCIL_PASS_DEPTH_PASS",get_STENCIL_PASS_DEPTH_FAIL:"get_STENCIL_PASS_DEPTH_FAIL",get_STENCIL_FAIL:"get_STENCIL_FAIL",get_STENCIL_FUNC:"get_STENCIL_FUNC",get_STENCIL_CLEAR_VALUE:"get_STENCIL_CLEAR_VALUE",get_DEPTH_FUNC:"get_DEPTH_FUNC",get_DEPTH_CLEAR_VALUE:"get_DEPTH_CLEAR_VALUE",get_DEPTH_WRITEMASK:"get_DEPTH_WRITEMASK",get_DEPTH_RANGE:"get_DEPTH_RANGE",get_FRONT_FACE:"get_FRONT_FACE",get_CULL_FACE_MODE:"get_CULL_FACE_MODE",get_ALIASED_LINE_WIDTH_RANGE:"get_ALIASED_LINE_WIDTH_RANGE",get_ALIASED_POINT_SIZE_RANGE:"get_ALIASED_POINT_SIZE_RANGE",get_LINE_WIDTH:"get_LINE_WIDTH",get_CCW:"get_CCW",get_CW:"get_CW",get_OUT_OF_MEMORY:"get_OUT_OF_MEMORY",get_INVALID_OPERATION:"get_INVALID_OPERATION",get_INVALID_VALUE:"get_INVALID_VALUE",get_INVALID_ENUM:"get_INVALID_ENUM",get_NO_ERROR:"get_NO_ERROR",get_SAMPLE_COVERAGE:"get_SAMPLE_COVERAGE",get_SAMPLE_ALPHA_TO_COVERAGE:"get_SAMPLE_ALPHA_TO_COVERAGE",get_POLYGON_OFFSET_FILL:"get_POLYGON_OFFSET_FILL",get_SCISSOR_TEST:"get_SCISSOR_TEST",get_DEPTH_TEST:"get_DEPTH_TEST",get_STENCIL_TEST:"get_STENCIL_TEST",get_DITHER:"get_DITHER",get_BLEND:"get_BLEND",get_CULL_FACE:"get_CULL_FACE",get_FRONT_AND_BACK:"get_FRONT_AND_BACK",get_BACK:"get_BACK",get_FRONT:"get_FRONT",get_CURRENT_VERTEX_ATTRIB:"get_CURRENT_VERTEX_ATTRIB",get_BUFFER_USAGE:"get_BUFFER_USAGE",get_BUFFER_SIZE:"get_BUFFER_SIZE",get_DYNAMIC_DRAW:"get_DYNAMIC_DRAW",get_STATIC_DRAW:"get_STATIC_DRAW",get_STREAM_DRAW:"get_STREAM_DRAW",get_ELEMENT_ARRAY_BUFFER_BINDING:"get_ELEMENT_ARRAY_BUFFER_BINDING",get_ARRAY_BUFFER_BINDING:"get_ARRAY_BUFFER_BINDING",get_ELEMENT_ARRAY_BUFFER:"get_ELEMENT_ARRAY_BUFFER",get_ARRAY_BUFFER:"get_ARRAY_BUFFER",get_BLEND_COLOR:"get_BLEND_COLOR",get_ONE_MINUS_CONSTANT_ALPHA:"get_ONE_MINUS_CONSTANT_ALPHA",get_CONSTANT_ALPHA:"get_CONSTANT_ALPHA",get_ONE_MINUS_CONSTANT_COLOR:"get_ONE_MINUS_CONSTANT_COLOR",get_CONSTANT_COLOR:"get_CONSTANT_COLOR",get_BLEND_SRC_ALPHA:"get_BLEND_SRC_ALPHA",get_BLEND_DST_ALPHA:"get_BLEND_DST_ALPHA",get_BLEND_SRC_RGB:"get_BLEND_SRC_RGB",get_BLEND_DST_RGB:"get_BLEND_DST_RGB",get_FUNC_REVERSE_SUBTRACT:"get_FUNC_REVERSE_SUBTRACT",get_FUNC_SUBTRACT:"get_FUNC_SUBTRACT",get_BLEND_EQUATION_ALPHA:"get_BLEND_EQUATION_ALPHA",get_BLEND_EQUATION_RGB:"get_BLEND_EQUATION_RGB",get_BLEND_EQUATION:"get_BLEND_EQUATION",get_FUNC_ADD:"get_FUNC_ADD",get_SRC_ALPHA_SATURATE:"get_SRC_ALPHA_SATURATE",get_ONE_MINUS_DST_COLOR:"get_ONE_MINUS_DST_COLOR",get_DST_COLOR:"get_DST_COLOR",get_ONE_MINUS_DST_ALPHA:"get_ONE_MINUS_DST_ALPHA",get_DST_ALPHA:"get_DST_ALPHA",get_ONE_MINUS_SRC_ALPHA:"get_ONE_MINUS_SRC_ALPHA",get_SRC_ALPHA:"get_SRC_ALPHA",get_ONE_MINUS_SRC_COLOR:"get_ONE_MINUS_SRC_COLOR",get_SRC_COLOR:"get_SRC_COLOR",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_TRIANGLE_FAN:"get_TRIANGLE_FAN",get_TRIANGLE_STRIP:"get_TRIANGLE_STRIP",get_TRIANGLES:"get_TRIANGLES",get_LINE_STRIP:"get_LINE_STRIP",get_LINE_LOOP:"get_LINE_LOOP",get_LINES:"get_LINES",get_POINTS:"get_POINTS",get_COLOR_BUFFER_BIT:"get_COLOR_BUFFER_BIT",get_STENCIL_BUFFER_BIT:"get_STENCIL_BUFFER_BIT",get_DEPTH_BUFFER_BIT:"get_DEPTH_BUFFER_BIT"}
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_BUFFER_BIT = function(this1) {
	return this1.DEPTH_BUFFER_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BUFFER_BIT = function(this1) {
	return this1.STENCIL_BUFFER_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_BUFFER_BIT = function(this1) {
	return this1.COLOR_BUFFER_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POINTS = function(this1) {
	return this1.POINTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINES = function(this1) {
	return this1.LINES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_LOOP = function(this1) {
	return this1.LINE_LOOP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_STRIP = function(this1) {
	return this1.LINE_STRIP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLES = function(this1) {
	return this1.TRIANGLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLE_STRIP = function(this1) {
	return this1.TRIANGLE_STRIP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLE_FAN = function(this1) {
	return this1.TRIANGLE_FAN;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ZERO = function(this1) {
	return this1.ZERO;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE = function(this1) {
	return this1.ONE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_COLOR = function(this1) {
	return this1.SRC_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_SRC_COLOR = function(this1) {
	return this1.ONE_MINUS_SRC_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_ALPHA = function(this1) {
	return this1.SRC_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_SRC_ALPHA = function(this1) {
	return this1.ONE_MINUS_SRC_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DST_ALPHA = function(this1) {
	return this1.DST_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_DST_ALPHA = function(this1) {
	return this1.ONE_MINUS_DST_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DST_COLOR = function(this1) {
	return this1.DST_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_DST_COLOR = function(this1) {
	return this1.ONE_MINUS_DST_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_ALPHA_SATURATE = function(this1) {
	return this1.SRC_ALPHA_SATURATE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_ADD = function(this1) {
	return this1.FUNC_ADD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION = function(this1) {
	return this1.BLEND_EQUATION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION_RGB = function(this1) {
	return this1.BLEND_EQUATION_RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION_ALPHA = function(this1) {
	return this1.BLEND_EQUATION_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_SUBTRACT = function(this1) {
	return this1.FUNC_SUBTRACT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_REVERSE_SUBTRACT = function(this1) {
	return this1.FUNC_REVERSE_SUBTRACT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_DST_RGB = function(this1) {
	return this1.BLEND_DST_RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_SRC_RGB = function(this1) {
	return this1.BLEND_SRC_RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_DST_ALPHA = function(this1) {
	return this1.BLEND_DST_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_SRC_ALPHA = function(this1) {
	return this1.BLEND_SRC_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONSTANT_COLOR = function(this1) {
	return this1.CONSTANT_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
	return this1.ONE_MINUS_CONSTANT_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONSTANT_ALPHA = function(this1) {
	return this1.CONSTANT_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
	return this1.ONE_MINUS_CONSTANT_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_COLOR = function(this1) {
	return this1.BLEND_COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ARRAY_BUFFER = function(this1) {
	return this1.ARRAY_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.ELEMENT_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_DRAW = function(this1) {
	return this1.STREAM_DRAW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_DRAW = function(this1) {
	return this1.STATIC_DRAW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_DRAW = function(this1) {
	return this1.DYNAMIC_DRAW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BUFFER_SIZE = function(this1) {
	return this1.BUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BUFFER_USAGE = function(this1) {
	return this1.BUFFER_USAGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_VERTEX_ATTRIB = function(this1) {
	return this1.CURRENT_VERTEX_ATTRIB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT = function(this1) {
	return this1.FRONT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BACK = function(this1) {
	return this1.BACK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT_AND_BACK = function(this1) {
	return this1.FRONT_AND_BACK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CULL_FACE = function(this1) {
	return this1.CULL_FACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND = function(this1) {
	return this1.BLEND;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DITHER = function(this1) {
	return this1.DITHER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_TEST = function(this1) {
	return this1.STENCIL_TEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_TEST = function(this1) {
	return this1.DEPTH_TEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SCISSOR_TEST = function(this1) {
	return this1.SCISSOR_TEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_FILL = function(this1) {
	return this1.POLYGON_OFFSET_FILL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
	return this1.SAMPLE_ALPHA_TO_COVERAGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE = function(this1) {
	return this1.SAMPLE_COVERAGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NO_ERROR = function(this1) {
	return this1.NO_ERROR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_ENUM = function(this1) {
	return this1.INVALID_ENUM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_VALUE = function(this1) {
	return this1.INVALID_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_OPERATION = function(this1) {
	return this1.INVALID_OPERATION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_OUT_OF_MEMORY = function(this1) {
	return this1.OUT_OF_MEMORY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CW = function(this1) {
	return this1.CW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CCW = function(this1) {
	return this1.CCW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_WIDTH = function(this1) {
	return this1.LINE_WIDTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
	return this1.ALIASED_POINT_SIZE_RANGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
	return this1.ALIASED_LINE_WIDTH_RANGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CULL_FACE_MODE = function(this1) {
	return this1.CULL_FACE_MODE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT_FACE = function(this1) {
	return this1.FRONT_FACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_RANGE = function(this1) {
	return this1.DEPTH_RANGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_WRITEMASK = function(this1) {
	return this1.DEPTH_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_CLEAR_VALUE = function(this1) {
	return this1.DEPTH_CLEAR_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_FUNC = function(this1) {
	return this1.DEPTH_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_CLEAR_VALUE = function(this1) {
	return this1.STENCIL_CLEAR_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_FUNC = function(this1) {
	return this1.STENCIL_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_FAIL = function(this1) {
	return this1.STENCIL_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_REF = function(this1) {
	return this1.STENCIL_REF;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_VALUE_MASK = function(this1) {
	return this1.STENCIL_VALUE_MASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_WRITEMASK = function(this1) {
	return this1.STENCIL_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_FUNC = function(this1) {
	return this1.STENCIL_BACK_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_FAIL = function(this1) {
	return this1.STENCIL_BACK_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_FAIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
	return this1.STENCIL_BACK_PASS_DEPTH_PASS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_REF = function(this1) {
	return this1.STENCIL_BACK_REF;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_VALUE_MASK = function(this1) {
	return this1.STENCIL_BACK_VALUE_MASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_WRITEMASK = function(this1) {
	return this1.STENCIL_BACK_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VIEWPORT = function(this1) {
	return this1.VIEWPORT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SCISSOR_BOX = function(this1) {
	return this1.SCISSOR_BOX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_CLEAR_VALUE = function(this1) {
	return this1.COLOR_CLEAR_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_WRITEMASK = function(this1) {
	return this1.COLOR_WRITEMASK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_ALIGNMENT = function(this1) {
	return this1.UNPACK_ALIGNMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_ALIGNMENT = function(this1) {
	return this1.PACK_ALIGNMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_SIZE = function(this1) {
	return this1.MAX_TEXTURE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VIEWPORT_DIMS = function(this1) {
	return this1.MAX_VIEWPORT_DIMS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SUBPIXEL_BITS = function(this1) {
	return this1.SUBPIXEL_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED_BITS = function(this1) {
	return this1.RED_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GREEN_BITS = function(this1) {
	return this1.GREEN_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLUE_BITS = function(this1) {
	return this1.BLUE_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALPHA_BITS = function(this1) {
	return this1.ALPHA_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_BITS = function(this1) {
	return this1.DEPTH_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BITS = function(this1) {
	return this1.STENCIL_BITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_UNITS = function(this1) {
	return this1.POLYGON_OFFSET_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_FACTOR = function(this1) {
	return this1.POLYGON_OFFSET_FACTOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_2D = function(this1) {
	return this1.TEXTURE_BINDING_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_BUFFERS = function(this1) {
	return this1.SAMPLE_BUFFERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLES = function(this1) {
	return this1.SAMPLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE_VALUE = function(this1) {
	return this1.SAMPLE_COVERAGE_VALUE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE_INVERT = function(this1) {
	return this1.SAMPLE_COVERAGE_INVERT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
	return this1.COMPRESSED_TEXTURE_FORMATS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DONT_CARE = function(this1) {
	return this1.DONT_CARE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FASTEST = function(this1) {
	return this1.FASTEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NICEST = function(this1) {
	return this1.NICEST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GENERATE_MIPMAP_HINT = function(this1) {
	return this1.GENERATE_MIPMAP_HINT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BYTE = function(this1) {
	return this1.BYTE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_BYTE = function(this1) {
	return this1.UNSIGNED_BYTE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHORT = function(this1) {
	return this1.SHORT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT = function(this1) {
	return this1.UNSIGNED_SHORT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT = function(this1) {
	return this1.INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT = function(this1) {
	return this1.UNSIGNED_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT = function(this1) {
	return this1.FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT = function(this1) {
	return this1.DEPTH_COMPONENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALPHA = function(this1) {
	return this1.ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB = function(this1) {
	return this1.RGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA = function(this1) {
	return this1.RGBA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LUMINANCE = function(this1) {
	return this1.LUMINANCE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LUMINANCE_ALPHA = function(this1) {
	return this1.LUMINANCE_ALPHA;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
	return this1.UNSIGNED_SHORT_4_4_4_4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
	return this1.UNSIGNED_SHORT_5_5_5_1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
	return this1.UNSIGNED_SHORT_5_6_5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAGMENT_SHADER = function(this1) {
	return this1.FRAGMENT_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_SHADER = function(this1) {
	return this1.VERTEX_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_ATTRIBS = function(this1) {
	return this1.MAX_VERTEX_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_VECTORS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VARYING_VECTORS = function(this1) {
	return this1.MAX_VARYING_VECTORS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
	return this1.MAX_TEXTURE_IMAGE_UNITS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_VECTORS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHADER_TYPE = function(this1) {
	return this1.SHADER_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DELETE_STATUS = function(this1) {
	return this1.DELETE_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINK_STATUS = function(this1) {
	return this1.LINK_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VALIDATE_STATUS = function(this1) {
	return this1.VALIDATE_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ATTACHED_SHADERS = function(this1) {
	return this1.ATTACHED_SHADERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_UNIFORMS = function(this1) {
	return this1.ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_ATTRIBUTES = function(this1) {
	return this1.ACTIVE_ATTRIBUTES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHADING_LANGUAGE_VERSION = function(this1) {
	return this1.SHADING_LANGUAGE_VERSION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_PROGRAM = function(this1) {
	return this1.CURRENT_PROGRAM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEVER = function(this1) {
	return this1.NEVER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LESS = function(this1) {
	return this1.LESS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_EQUAL = function(this1) {
	return this1.EQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LEQUAL = function(this1) {
	return this1.LEQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GREATER = function(this1) {
	return this1.GREATER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NOTEQUAL = function(this1) {
	return this1.NOTEQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GEQUAL = function(this1) {
	return this1.GEQUAL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALWAYS = function(this1) {
	return this1.ALWAYS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_KEEP = function(this1) {
	return this1.KEEP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_REPLACE = function(this1) {
	return this1.REPLACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INCR = function(this1) {
	return this1.INCR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DECR = function(this1) {
	return this1.DECR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVERT = function(this1) {
	return this1.INVERT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INCR_WRAP = function(this1) {
	return this1.INCR_WRAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DECR_WRAP = function(this1) {
	return this1.DECR_WRAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VENDOR = function(this1) {
	return this1.VENDOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERER = function(this1) {
	return this1.RENDERER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERSION = function(this1) {
	return this1.VERSION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST = function(this1) {
	return this1.NEAREST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR = function(this1) {
	return this1.LINEAR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST_MIPMAP_NEAREST = function(this1) {
	return this1.NEAREST_MIPMAP_NEAREST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR_MIPMAP_NEAREST = function(this1) {
	return this1.LINEAR_MIPMAP_NEAREST;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST_MIPMAP_LINEAR = function(this1) {
	return this1.NEAREST_MIPMAP_LINEAR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR_MIPMAP_LINEAR = function(this1) {
	return this1.LINEAR_MIPMAP_LINEAR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAG_FILTER = function(this1) {
	return this1.TEXTURE_MAG_FILTER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MIN_FILTER = function(this1) {
	return this1.TEXTURE_MIN_FILTER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_S = function(this1) {
	return this1.TEXTURE_WRAP_S;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_T = function(this1) {
	return this1.TEXTURE_WRAP_T;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_2D = function(this1) {
	return this1.TEXTURE_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE = function(this1) {
	return this1.TEXTURE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP = function(this1) {
	return this1.TEXTURE_CUBE_MAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
	return this1.TEXTURE_BINDING_CUBE_MAP;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_X;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_X;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Y;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_POSITIVE_Z;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
	return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
	return this1.MAX_CUBE_MAP_TEXTURE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE0 = function(this1) {
	return this1.TEXTURE0;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE1 = function(this1) {
	return this1.TEXTURE1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE2 = function(this1) {
	return this1.TEXTURE2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE3 = function(this1) {
	return this1.TEXTURE3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE4 = function(this1) {
	return this1.TEXTURE4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE5 = function(this1) {
	return this1.TEXTURE5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE6 = function(this1) {
	return this1.TEXTURE6;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE7 = function(this1) {
	return this1.TEXTURE7;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE8 = function(this1) {
	return this1.TEXTURE8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE9 = function(this1) {
	return this1.TEXTURE9;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE10 = function(this1) {
	return this1.TEXTURE10;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE11 = function(this1) {
	return this1.TEXTURE11;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE12 = function(this1) {
	return this1.TEXTURE12;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE13 = function(this1) {
	return this1.TEXTURE13;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE14 = function(this1) {
	return this1.TEXTURE14;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE15 = function(this1) {
	return this1.TEXTURE15;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE16 = function(this1) {
	return this1.TEXTURE16;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE17 = function(this1) {
	return this1.TEXTURE17;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE18 = function(this1) {
	return this1.TEXTURE18;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE19 = function(this1) {
	return this1.TEXTURE19;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE20 = function(this1) {
	return this1.TEXTURE20;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE21 = function(this1) {
	return this1.TEXTURE21;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE22 = function(this1) {
	return this1.TEXTURE22;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE23 = function(this1) {
	return this1.TEXTURE23;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE24 = function(this1) {
	return this1.TEXTURE24;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE25 = function(this1) {
	return this1.TEXTURE25;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE26 = function(this1) {
	return this1.TEXTURE26;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE27 = function(this1) {
	return this1.TEXTURE27;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE28 = function(this1) {
	return this1.TEXTURE28;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE29 = function(this1) {
	return this1.TEXTURE29;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE30 = function(this1) {
	return this1.TEXTURE30;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE31 = function(this1) {
	return this1.TEXTURE31;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_TEXTURE = function(this1) {
	return this1.ACTIVE_TEXTURE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_REPEAT = function(this1) {
	return this1.REPEAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CLAMP_TO_EDGE = function(this1) {
	return this1.CLAMP_TO_EDGE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIRRORED_REPEAT = function(this1) {
	return this1.MIRRORED_REPEAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC2 = function(this1) {
	return this1.FLOAT_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC3 = function(this1) {
	return this1.FLOAT_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC4 = function(this1) {
	return this1.FLOAT_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC2 = function(this1) {
	return this1.INT_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC3 = function(this1) {
	return this1.INT_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC4 = function(this1) {
	return this1.INT_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL = function(this1) {
	return this1.BOOL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC2 = function(this1) {
	return this1.BOOL_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC3 = function(this1) {
	return this1.BOOL_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC4 = function(this1) {
	return this1.BOOL_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2 = function(this1) {
	return this1.FLOAT_MAT2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3 = function(this1) {
	return this1.FLOAT_MAT3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4 = function(this1) {
	return this1.FLOAT_MAT4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D = function(this1) {
	return this1.SAMPLER_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_CUBE = function(this1) {
	return this1.SAMPLER_CUBE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_ENABLED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_STRIDE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_POINTER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPILE_STATUS = function(this1) {
	return this1.COMPILE_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LOW_FLOAT = function(this1) {
	return this1.LOW_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MEDIUM_FLOAT = function(this1) {
	return this1.MEDIUM_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HIGH_FLOAT = function(this1) {
	return this1.HIGH_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LOW_INT = function(this1) {
	return this1.LOW_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MEDIUM_INT = function(this1) {
	return this1.MEDIUM_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HIGH_INT = function(this1) {
	return this1.HIGH_INT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER = function(this1) {
	return this1.FRAMEBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER = function(this1) {
	return this1.RENDERBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA4 = function(this1) {
	return this1.RGBA4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB5_A1 = function(this1) {
	return this1.RGB5_A1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB565 = function(this1) {
	return this1.RGB565;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT16 = function(this1) {
	return this1.DEPTH_COMPONENT16;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_INDEX = function(this1) {
	return this1.STENCIL_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_INDEX8 = function(this1) {
	return this1.STENCIL_INDEX8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_STENCIL = function(this1) {
	return this1.DEPTH_STENCIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_WIDTH = function(this1) {
	return this1.RENDERBUFFER_WIDTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_HEIGHT = function(this1) {
	return this1.RENDERBUFFER_HEIGHT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
	return this1.RENDERBUFFER_INTERNAL_FORMAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_RED_SIZE = function(this1) {
	return this1.RENDERBUFFER_RED_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
	return this1.RENDERBUFFER_GREEN_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
	return this1.RENDERBUFFER_BLUE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
	return this1.RENDERBUFFER_ALPHA_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
	return this1.RENDERBUFFER_DEPTH_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
	return this1.RENDERBUFFER_STENCIL_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT0 = function(this1) {
	return this1.COLOR_ATTACHMENT0;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_ATTACHMENT = function(this1) {
	return this1.DEPTH_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_ATTACHMENT = function(this1) {
	return this1.STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
	return this1.DEPTH_STENCIL_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NONE = function(this1) {
	return this1.NONE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_COMPLETE = function(this1) {
	return this1.FRAMEBUFFER_COMPLETE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
	return this1.FRAMEBUFFER_UNSUPPORTED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_BINDING = function(this1) {
	return this1.FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_BINDING = function(this1) {
	return this1.RENDERBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_RENDERBUFFER_SIZE = function(this1) {
	return this1.MAX_RENDERBUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
	return this1.INVALID_FRAMEBUFFER_OPERATION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
	return this1.UNPACK_FLIP_Y_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
	return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONTEXT_LOST_WEBGL = function(this1) {
	return this1.CONTEXT_LOST_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
	return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BROWSER_DEFAULT_WEBGL = function(this1) {
	return this1.BROWSER_DEFAULT_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_type = function(this1) {
	return this1.type;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_version = function(this1) {
	return this1.version;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_BUFFER = function(this1) {
	return this1.READ_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_ROW_LENGTH = function(this1) {
	return this1.UNPACK_ROW_LENGTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_ROWS = function(this1) {
	return this1.UNPACK_SKIP_ROWS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_PIXELS = function(this1) {
	return this1.UNPACK_SKIP_PIXELS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_ROW_LENGTH = function(this1) {
	return this1.PACK_ROW_LENGTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_SKIP_ROWS = function(this1) {
	return this1.PACK_SKIP_ROWS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_SKIP_PIXELS = function(this1) {
	return this1.PACK_SKIP_PIXELS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_3D = function(this1) {
	return this1.TEXTURE_BINDING_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_IMAGES = function(this1) {
	return this1.UNPACK_SKIP_IMAGES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_IMAGE_HEIGHT = function(this1) {
	return this1.UNPACK_IMAGE_HEIGHT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_3D_TEXTURE_SIZE = function(this1) {
	return this1.MAX_3D_TEXTURE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENTS_VERTICES = function(this1) {
	return this1.MAX_ELEMENTS_VERTICES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENTS_INDICES = function(this1) {
	return this1.MAX_ELEMENTS_INDICES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
	return this1.MAX_TEXTURE_LOD_BIAS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
	return this1.MAX_ARRAY_TEXTURE_LAYERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MIN_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
	return this1.MAX_PROGRAM_TEXEL_OFFSET;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VARYING_COMPONENTS = function(this1) {
	return this1.MAX_VARYING_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
	return this1.FRAGMENT_SHADER_DERIVATIVE_HINT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RASTERIZER_DISCARD = function(this1) {
	return this1.RASTERIZER_DISCARD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ARRAY_BINDING = function(this1) {
	return this1.VERTEX_ARRAY_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
	return this1.MAX_VERTEX_OUTPUT_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
	return this1.MAX_FRAGMENT_INPUT_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
	return this1.MAX_SERVER_WAIT_TIMEOUT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENT_INDEX = function(this1) {
	return this1.MAX_ELEMENT_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED = function(this1) {
	return this1.RED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8 = function(this1) {
	return this1.RGB8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8 = function(this1) {
	return this1.RGBA8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB10_A2 = function(this1) {
	return this1.RGB10_A2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_3D = function(this1) {
	return this1.TEXTURE_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_R = function(this1) {
	return this1.TEXTURE_WRAP_R;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MIN_LOD = function(this1) {
	return this1.TEXTURE_MIN_LOD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAX_LOD = function(this1) {
	return this1.TEXTURE_MAX_LOD;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BASE_LEVEL = function(this1) {
	return this1.TEXTURE_BASE_LEVEL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAX_LEVEL = function(this1) {
	return this1.TEXTURE_MAX_LEVEL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_COMPARE_MODE = function(this1) {
	return this1.TEXTURE_COMPARE_MODE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_COMPARE_FUNC = function(this1) {
	return this1.TEXTURE_COMPARE_FUNC;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB = function(this1) {
	return this1.SRGB;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB8 = function(this1) {
	return this1.SRGB8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB8_ALPHA8 = function(this1) {
	return this1.SRGB8_ALPHA8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPARE_REF_TO_TEXTURE = function(this1) {
	return this1.COMPARE_REF_TO_TEXTURE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32F = function(this1) {
	return this1.RGBA32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32F = function(this1) {
	return this1.RGB32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16F = function(this1) {
	return this1.RGBA16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16F = function(this1) {
	return this1.RGB16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_2D_ARRAY = function(this1) {
	return this1.TEXTURE_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
	return this1.TEXTURE_BINDING_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R11F_G11F_B10F = function(this1) {
	return this1.R11F_G11F_B10F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB9_E5 = function(this1) {
	return this1.RGB9_E5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32UI = function(this1) {
	return this1.RGBA32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32UI = function(this1) {
	return this1.RGB32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16UI = function(this1) {
	return this1.RGBA16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16UI = function(this1) {
	return this1.RGB16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8UI = function(this1) {
	return this1.RGBA8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8UI = function(this1) {
	return this1.RGB8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32I = function(this1) {
	return this1.RGBA32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32I = function(this1) {
	return this1.RGB32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16I = function(this1) {
	return this1.RGBA16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16I = function(this1) {
	return this1.RGB16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8I = function(this1) {
	return this1.RGBA8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8I = function(this1) {
	return this1.RGB8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED_INTEGER = function(this1) {
	return this1.RED_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB_INTEGER = function(this1) {
	return this1.RGB_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA_INTEGER = function(this1) {
	return this1.RGBA_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8 = function(this1) {
	return this1.R8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8 = function(this1) {
	return this1.RG8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16F = function(this1) {
	return this1.R16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32F = function(this1) {
	return this1.R32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16F = function(this1) {
	return this1.RG16F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32F = function(this1) {
	return this1.RG32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8I = function(this1) {
	return this1.R8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8UI = function(this1) {
	return this1.R8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16I = function(this1) {
	return this1.R16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16UI = function(this1) {
	return this1.R16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32I = function(this1) {
	return this1.R32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32UI = function(this1) {
	return this1.R32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8I = function(this1) {
	return this1.RG8I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8UI = function(this1) {
	return this1.RG8UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16I = function(this1) {
	return this1.RG16I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16UI = function(this1) {
	return this1.RG16UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32I = function(this1) {
	return this1.RG32I;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32UI = function(this1) {
	return this1.RG32UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8_SNORM = function(this1) {
	return this1.R8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8_SNORM = function(this1) {
	return this1.RG8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8_SNORM = function(this1) {
	return this1.RGB8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8_SNORM = function(this1) {
	return this1.RGBA8_SNORM;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB10_A2UI = function(this1) {
	return this1.RGB10_A2UI;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
	return this1.TEXTURE_IMMUTABLE_FORMAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
	return this1.TEXTURE_IMMUTABLE_LEVELS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
	return this1.UNSIGNED_INT_2_10_10_10_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
	return this1.UNSIGNED_INT_10F_11F_11F_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
	return this1.UNSIGNED_INT_5_9_9_9_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
	return this1.FLOAT_32_UNSIGNED_INT_24_8_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_24_8 = function(this1) {
	return this1.UNSIGNED_INT_24_8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HALF_FLOAT = function(this1) {
	return this1.HALF_FLOAT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG = function(this1) {
	return this1.RG;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG_INTEGER = function(this1) {
	return this1.RG_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_2_10_10_10_REV = function(this1) {
	return this1.INT_2_10_10_10_REV;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_QUERY = function(this1) {
	return this1.CURRENT_QUERY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_QUERY_RESULT = function(this1) {
	return this1.QUERY_RESULT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_QUERY_RESULT_AVAILABLE = function(this1) {
	return this1.QUERY_RESULT_AVAILABLE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ANY_SAMPLES_PASSED = function(this1) {
	return this1.ANY_SAMPLES_PASSED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
	return this1.ANY_SAMPLES_PASSED_CONSERVATIVE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_DRAW_BUFFERS = function(this1) {
	return this1.MAX_DRAW_BUFFERS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER0 = function(this1) {
	return this1.DRAW_BUFFER0;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER1 = function(this1) {
	return this1.DRAW_BUFFER1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER2 = function(this1) {
	return this1.DRAW_BUFFER2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER3 = function(this1) {
	return this1.DRAW_BUFFER3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER4 = function(this1) {
	return this1.DRAW_BUFFER4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER5 = function(this1) {
	return this1.DRAW_BUFFER5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER6 = function(this1) {
	return this1.DRAW_BUFFER6;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER7 = function(this1) {
	return this1.DRAW_BUFFER7;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER8 = function(this1) {
	return this1.DRAW_BUFFER8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER9 = function(this1) {
	return this1.DRAW_BUFFER9;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER10 = function(this1) {
	return this1.DRAW_BUFFER10;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER11 = function(this1) {
	return this1.DRAW_BUFFER11;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER12 = function(this1) {
	return this1.DRAW_BUFFER12;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER13 = function(this1) {
	return this1.DRAW_BUFFER13;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER14 = function(this1) {
	return this1.DRAW_BUFFER14;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER15 = function(this1) {
	return this1.DRAW_BUFFER15;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COLOR_ATTACHMENTS = function(this1) {
	return this1.MAX_COLOR_ATTACHMENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT1 = function(this1) {
	return this1.COLOR_ATTACHMENT1;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT2 = function(this1) {
	return this1.COLOR_ATTACHMENT2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT3 = function(this1) {
	return this1.COLOR_ATTACHMENT3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT4 = function(this1) {
	return this1.COLOR_ATTACHMENT4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT5 = function(this1) {
	return this1.COLOR_ATTACHMENT5;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT6 = function(this1) {
	return this1.COLOR_ATTACHMENT6;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT7 = function(this1) {
	return this1.COLOR_ATTACHMENT7;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT8 = function(this1) {
	return this1.COLOR_ATTACHMENT8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT9 = function(this1) {
	return this1.COLOR_ATTACHMENT9;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT10 = function(this1) {
	return this1.COLOR_ATTACHMENT10;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT11 = function(this1) {
	return this1.COLOR_ATTACHMENT11;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT12 = function(this1) {
	return this1.COLOR_ATTACHMENT12;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT13 = function(this1) {
	return this1.COLOR_ATTACHMENT13;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT14 = function(this1) {
	return this1.COLOR_ATTACHMENT14;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT15 = function(this1) {
	return this1.COLOR_ATTACHMENT15;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_3D = function(this1) {
	return this1.SAMPLER_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_SHADOW = function(this1) {
	return this1.SAMPLER_2D_SHADOW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_ARRAY = function(this1) {
	return this1.SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
	return this1.SAMPLER_2D_ARRAY_SHADOW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_CUBE_SHADOW = function(this1) {
	return this1.SAMPLER_CUBE_SHADOW;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_2D = function(this1) {
	return this1.INT_SAMPLER_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_3D = function(this1) {
	return this1.INT_SAMPLER_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_CUBE = function(this1) {
	return this1.INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_3D;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_CUBE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
	return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_SAMPLES = function(this1) {
	return this1.MAX_SAMPLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_BINDING = function(this1) {
	return this1.SAMPLER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_PACK_BUFFER = function(this1) {
	return this1.PIXEL_PACK_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_UNPACK_BUFFER = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_PACK_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
	return this1.PIXEL_UNPACK_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_READ_BUFFER = function(this1) {
	return this1.COPY_READ_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_WRITE_BUFFER = function(this1) {
	return this1.COPY_WRITE_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_READ_BUFFER_BINDING = function(this1) {
	return this1.COPY_READ_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
	return this1.COPY_WRITE_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2x3 = function(this1) {
	return this1.FLOAT_MAT2x3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2x4 = function(this1) {
	return this1.FLOAT_MAT2x4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3x2 = function(this1) {
	return this1.FLOAT_MAT3x2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3x4 = function(this1) {
	return this1.FLOAT_MAT3x4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4x2 = function(this1) {
	return this1.FLOAT_MAT4x2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4x3 = function(this1) {
	return this1.FLOAT_MAT4x3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC2 = function(this1) {
	return this1.UNSIGNED_INT_VEC2;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC3 = function(this1) {
	return this1.UNSIGNED_INT_VEC3;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC4 = function(this1) {
	return this1.UNSIGNED_INT_VEC4;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_NORMALIZED = function(this1) {
	return this1.UNSIGNED_NORMALIZED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SIGNED_NORMALIZED = function(this1) {
	return this1.SIGNED_NORMALIZED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_INTEGER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
	return this1.VERTEX_ATTRIB_ARRAY_DIVISOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_MODE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
	return this1.TRANSFORM_FEEDBACK_VARYINGS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_START;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
	return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INTERLEAVED_ATTRIBS = function(this1) {
	return this1.INTERLEAVED_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SEPARATE_ATTRIBS = function(this1) {
	return this1.SEPARATE_ATTRIBS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK = function(this1) {
	return this1.TRANSFORM_FEEDBACK;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
	return this1.TRANSFORM_FEEDBACK_PAUSED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
	return this1.TRANSFORM_FEEDBACK_ACTIVE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
	return this1.TRANSFORM_FEEDBACK_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_DEFAULT = function(this1) {
	return this1.FRAMEBUFFER_DEFAULT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH24_STENCIL8 = function(this1) {
	return this1.DEPTH24_STENCIL8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
	return this1.DRAW_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_FRAMEBUFFER = function(this1) {
	return this1.READ_FRAMEBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_FRAMEBUFFER = function(this1) {
	return this1.DRAW_FRAMEBUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_FRAMEBUFFER_BINDING = function(this1) {
	return this1.READ_FRAMEBUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_SAMPLES = function(this1) {
	return this1.RENDERBUFFER_SAMPLES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
	return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
	return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER = function(this1) {
	return this1.UNIFORM_BUFFER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_BINDING = function(this1) {
	return this1.UNIFORM_BUFFER_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_START = function(this1) {
	return this1.UNIFORM_BUFFER_START;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_SIZE = function(this1) {
	return this1.UNIFORM_BUFFER_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_VERTEX_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_FRAGMENT_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
	return this1.MAX_COMBINED_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
	return this1.MAX_UNIFORM_BUFFER_BINDINGS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
	return this1.MAX_UNIFORM_BLOCK_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
	return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
	return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
	return this1.ACTIVE_UNIFORM_BLOCKS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_TYPE = function(this1) {
	return this1.UNIFORM_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_SIZE = function(this1) {
	return this1.UNIFORM_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_INDEX = function(this1) {
	return this1.UNIFORM_BLOCK_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_OFFSET = function(this1) {
	return this1.UNIFORM_OFFSET;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_ARRAY_STRIDE = function(this1) {
	return this1.UNIFORM_ARRAY_STRIDE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_MATRIX_STRIDE = function(this1) {
	return this1.UNIFORM_MATRIX_STRIDE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
	return this1.UNIFORM_IS_ROW_MAJOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_BINDING = function(this1) {
	return this1.UNIFORM_BLOCK_BINDING;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
	return this1.UNIFORM_BLOCK_DATA_SIZE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
	return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
	return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_OBJECT_TYPE = function(this1) {
	return this1.OBJECT_TYPE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_CONDITION = function(this1) {
	return this1.SYNC_CONDITION;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_STATUS = function(this1) {
	return this1.SYNC_STATUS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FLAGS = function(this1) {
	return this1.SYNC_FLAGS;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FENCE = function(this1) {
	return this1.SYNC_FENCE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
	return this1.SYNC_GPU_COMMANDS_COMPLETE;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNALED = function(this1) {
	return this1.UNSIGNALED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SIGNALED = function(this1) {
	return this1.SIGNALED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALREADY_SIGNALED = function(this1) {
	return this1.ALREADY_SIGNALED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TIMEOUT_EXPIRED = function(this1) {
	return this1.TIMEOUT_EXPIRED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONDITION_SATISFIED = function(this1) {
	return this1.CONDITION_SATISFIED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_WAIT_FAILED = function(this1) {
	return this1.WAIT_FAILED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
	return this1.SYNC_FLUSH_COMMANDS_BIT;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR = function(this1) {
	return this1.COLOR;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH = function(this1) {
	return this1.DEPTH;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL = function(this1) {
	return this1.STENCIL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIN = function(this1) {
	return this1.MIN;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX = function(this1) {
	return this1.MAX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT24 = function(this1) {
	return this1.DEPTH_COMPONENT24;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_READ = function(this1) {
	return this1.STREAM_READ;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_COPY = function(this1) {
	return this1.STREAM_COPY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_READ = function(this1) {
	return this1.STATIC_READ;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_COPY = function(this1) {
	return this1.STATIC_COPY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_READ = function(this1) {
	return this1.DYNAMIC_READ;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_COPY = function(this1) {
	return this1.DYNAMIC_COPY;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT32F = function(this1) {
	return this1.DEPTH_COMPONENT32F;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH32F_STENCIL8 = function(this1) {
	return this1.DEPTH32F_STENCIL8;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_INDEX = function(this1) {
	return this1.INVALID_INDEX;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TIMEOUT_IGNORED = function(this1) {
	return this1.TIMEOUT_IGNORED;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
	return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.activeTexture = function(this1,texture) {
	this1.__context.activeTexture(texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.attachShader = function(this1,program,shader) {
	this1.__context.attachShader(program,shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.beginQuery = function(this1,target,query) {
	this1.__context.beginQuery(target,query);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.beginTransformFeedback = function(this1,primitiveNode) {
	this1.__context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindAttribLocation = function(this1,program,index,name) {
	this1.__context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBuffer = function(this1,target,buffer) {
	this1.__context.bindBuffer(target,buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBufferBase = function(this1,target,index,buffer) {
	this1.__context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBufferRange = function(this1,target,index,buffer,offset,size) {
	this1.__context.bindBufferRange(target,index,buffer,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindFramebuffer = function(this1,target,framebuffer) {
	this1.__context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindRenderbuffer = function(this1,target,renderbuffer) {
	this1.__context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindSampler = function(this1,unit,sampler) {
	this1.__context.bindSampler(unit,sampler);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindTexture = function(this1,target,texture) {
	this1.__context.bindTexture(target,texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindTransformFeedback = function(this1,target,transformFeedback) {
	this1.__context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindVertexArray = function(this1,vertexArray) {
	this1.__context.bindVertexArray(vertexArray);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendColor = function(this1,red,green,blue,alpha) {
	this1.__context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendEquation = function(this1,mode) {
	this1.__context.blendEquation(mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendEquationSeparate = function(this1,modeRGB,modeAlpha) {
	this1.__context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendFunc = function(this1,sfactor,dfactor) {
	this1.__context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendFuncSeparate = function(this1,srcRGB,dstRGB,srcAlpha,dstAlpha) {
	this1.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blitFramebuffer = function(this1,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	this1.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	this1.bufferDataWEBGL(target,srcData,usage,srcOffset,length);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bufferSubData = function(this1,target,offset,srcData,srcOffset,length) {
	this1.bufferSubDataWEBGL(target,offset,srcData,srcOffset,length);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.checkFramebufferStatus = function(this1,target) {
	return this1.__context.checkFramebufferStatus(target);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clear = function(this1,mask) {
	this1.__context.clear(mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferfi = function(this1,buffer,drawbuffer,depth,stencil) {
	this1.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferfv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferiv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferuiv = function(this1,buffer,drawbuffer,values,srcOffset) {
	this1.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearColor = function(this1,red,green,blue,alpha) {
	this1.__context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearDepth = function(this1,depth) {
	this1.__context.clearDepth(depth);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearStencil = function(this1,s) {
	this1.__context.clearStencil(s);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clientWaitSync = function(this1,sync,flags,timeout) {
	return this1.__context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.colorMask = function(this1,red,green,blue,alpha) {
	this1.__context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compileShader = function(this1,shader) {
	this1.__context.compileShader(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexImage3D = function(this1,target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	this1.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	this1.compressedTexSubImage3DWEBGL(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyBufferSubData = function(this1,readTarget,writeTarget,readOffset,writeOffset,size) {
	null;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexImage2D = function(this1,target,level,internalformat,x,y,width,height,border) {
	this1.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexSubImage2D = function(this1,target,level,xoffset,yoffset,x,y,width,height) {
	this1.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	this1.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createBuffer = function(this1) {
	return this1.__context.createBuffer();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createFramebuffer = function(this1) {
	return this1.__context.createFramebuffer();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createProgram = function(this1) {
	return this1.__context.createProgram();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createQuery = function(this1) {
	return this1.__context.createQuery();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createRenderbuffer = function(this1) {
	return this1.__context.createRenderbuffer();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createSampler = function(this1) {
	return this1.__context.createSampler();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createShader = function(this1,type) {
	return this1.__context.createShader(type);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createTexture = function(this1) {
	return this1.__context.createTexture();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createTransformFeedback = function(this1) {
	return this1.__context.createTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createVertexArray = function(this1) {
	return this1.__context.createVertexArray();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.cullFace = function(this1,mode) {
	this1.__context.cullFace(mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteBuffer = function(this1,buffer) {
	this1.__context.deleteBuffer(buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteFramebuffer = function(this1,framebuffer) {
	this1.__context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteProgram = function(this1,program) {
	this1.__context.deleteProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteQuery = function(this1,query) {
	this1.__context.deleteQuery(query);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteRenderbuffer = function(this1,renderbuffer) {
	this1.__context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteSampler = function(this1,sampler) {
	this1.__context.deleteSampler(sampler);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteShader = function(this1,shader) {
	this1.__context.deleteShader(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteSync = function(this1,sync) {
	this1.__context.deleteSync(sync);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteTexture = function(this1,texture) {
	this1.__context.deleteTexture(texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteTransformFeedback = function(this1,transformFeedback) {
	this1.__context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteVertexArray = function(this1,vertexArray) {
	this1.__context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthFunc = function(this1,func) {
	this1.__context.depthFunc(func);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthMask = function(this1,flag) {
	this1.__context.depthMask(flag);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthRange = function(this1,zNear,zFar) {
	this1.__context.depthRange(zNear,zFar);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.detachShader = function(this1,program,shader) {
	this1.__context.detachShader(program,shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.disable = function(this1,cap) {
	this1.__context.disable(cap);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.disableVertexAttribArray = function(this1,index) {
	this1.__context.disableVertexAttribArray(index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawArrays = function(this1,mode,first,count) {
	this1.__context.drawArrays(mode,first,count);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawArraysInstanced = function(this1,mode,first,count,instanceCount) {
	this1.__context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawBuffers = function(this1,buffers) {
	this1.__context.drawBuffers(buffers);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawElements = function(this1,mode,count,type,offset) {
	this1.__context.drawElements(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawElementsInstanced = function(this1,mode,count,type,offset,instanceCount) {
	this1.__context.drawElementsInstanced(mode,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)),instanceCount);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawRangeElements = function(this1,mode,start,end,count,type,offset) {
	this1.__context.drawRangeElements(mode,start,end,count,type,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.enable = function(this1,cap) {
	this1.__context.enable(cap);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.enableVertexAttribArray = function(this1,index) {
	this1.__context.enableVertexAttribArray(index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.endQuery = function(this1,target) {
	this1.__context.endQuery(target);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.endTransformFeedback = function(this1) {
	this1.__context.endTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fenceSync = function(this1,condition,flags) {
	return this1.__context.fenceSync(condition,flags);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.finish = function(this1) {
	this1.__context.finish();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.flush = function(this1) {
	this1.__context.flush();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferRenderbuffer = function(this1,target,attachment,renderbuffertarget,renderbuffer) {
	this1.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferTexture2D = function(this1,target,attachment,textarget,texture,level) {
	this1.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferTextureLayer = function(this1,target,attachment,texture,level,layer) {
	this1.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.frontFace = function(this1,mode) {
	this1.__context.frontFace(mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.generateMipmap = function(this1,target) {
	this1.__context.generateMipmap(target);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveAttrib = function(this1,program,index) {
	return this1.__context.getActiveAttrib(program,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniform = function(this1,program,index) {
	return this1.__context.getActiveUniform(program,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniformBlockName = function(this1,program,uniformBlockIndex) {
	return this1.__context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniformBlockParameter = function(this1,program,uniformBlockIndex,pname) {
	return this1.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniforms = function(this1,program,uniformIndices,pname) {
	return this1.__context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getAttachedShaders = function(this1,program) {
	return this1.__context.getAttachedShaders(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getAttribLocation = function(this1,program,name) {
	return this1.__context.getAttribLocation(program,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getBufferParameter = function(this1,target,pname) {
	return this1.__context.getBufferParameter(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	this1.getBufferSubDataWEBGL(target,srcByteOffset,dstData,srcOffset,length);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getContextAttributes = function(this1) {
	return this1.__context.getContextAttributes();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getError = function(this1) {
	return this1.__context.getError();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getExtension = function(this1,name) {
	return this1.__context.getExtension(name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getFragDataLocation = function(this1,program,name) {
	return this1.__context.getFragDataLocation(program,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getFramebufferAttachmentParameter = function(this1,target,attachment,pname) {
	return this1.__context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getIndexedParameter = function(this1,target,index) {
	return this1.__context.getIndexedParameter(target,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getInternalformatParameter = function(this1,target,internalformat,pname) {
	return this1.__context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getParameter = function(this1,pname) {
	return this1.__context.getParameter(pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getProgramInfoLog = function(this1,program) {
	return this1.__context.getProgramInfoLog(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getProgramParameter = function(this1,program,pname) {
	return this1.__context.getProgramParameter(program,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getQuery = function(this1,target,pname) {
	return this1.__context.getQuery(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getQueryParameter = function(this1,query,pname) {
	return this1.__context.getQueryParameter(query,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getRenderbufferParameter = function(this1,target,pname) {
	return this1.__context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSamplerParameter = function(this1,sampler,pname) {
	return this1.__context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderInfoLog = function(this1,shader) {
	return this1.__context.getShaderInfoLog(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderParameter = function(this1,shader,pname) {
	return this1.__context.getShaderParameter(shader,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderPrecisionFormat = function(this1,shadertype,precisiontype) {
	return this1.__context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderSource = function(this1,shader) {
	return this1.__context.getShaderSource(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSupportedExtensions = function(this1) {
	return this1.__context.getSupportedExtensions();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSyncParameter = function(this1,sync,pname) {
	return this1.__context.getSyncParameter(sync,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getTexParameter = function(this1,target,pname) {
	return this1.__context.getTexParameter(target,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getTransformFeedbackVarying = function(this1,program,index) {
	return this1.__context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniform = function(this1,program,location) {
	return this1.__context.getUniform(program,location);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformBlockIndex = function(this1,program,uniformBlockName) {
	return this1.__context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformIndices = function(this1,program,uniformNames) {
	return this1.__context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformLocation = function(this1,program,name) {
	return this1.__context.getUniformLocation(program,name);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getVertexAttrib = function(this1,index,pname) {
	return this1.__context.getVertexAttrib(index,pname);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getVertexAttribOffset = function(this1,index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this1.__context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.hint = function(this1,target,mode) {
	this1.__context.hint(target,mode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.invalidateFramebuffer = function(this1,target,attachments) {
	this1.__context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.invalidateSubFramebuffer = function(this1,target,attachments,x,y,width,height) {
	this1.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isBuffer = function(this1,buffer) {
	return this1.__context.isBuffer(buffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isContextLost = function(this1) {
	return this1.__contextLost || this1.__context.isContextLost();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isEnabled = function(this1,cap) {
	return this1.__context.isEnabled(cap);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isFramebuffer = function(this1,framebuffer) {
	return this1.__context.isFramebuffer(framebuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isProgram = function(this1,program) {
	return this1.__context.isProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isQuery = function(this1,query) {
	return this1.__context.isQuery(query);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isRenderbuffer = function(this1,renderbuffer) {
	return this1.__context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isSampler = function(this1,sampler) {
	return this1.__context.isSampler(sampler);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isShader = function(this1,shader) {
	return this1.__context.isShader(shader);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isTexture = function(this1,texture) {
	return this1.__context.isTexture(texture);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isTransformFeedback = function(this1,transformFeedback) {
	return this1.__context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isVertexArray = function(this1,vertexArray) {
	return this1.__context.isVertexArray(vertexArray);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.lineWidth = function(this1,width) {
	this1.__context.lineWidth(width);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.linkProgram = function(this1,program) {
	this1.__context.linkProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.pauseTransformFeedback = function(this1) {
	this1.__context.pauseTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.pixelStorei = function(this1,pname,param) {
	this1.__context.pixelStorei(pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.polygonOffset = function(this1,factor,units) {
	this1.__context.polygonOffset(factor,units);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.readBuffer = function(this1,src) {
	this1.__context.readBuffer(src);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	this1.readPixelsWEBGL(x,y,width,height,format,type,pixels,dstOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.renderbufferStorage = function(this1,target,internalformat,width,height) {
	this1.__context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.renderbufferStorageMultisample = function(this1,target,samples,internalformat,width,height) {
	this1.__context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.resumeTransformFeedback = function(this1) {
	this1.__context.resumeTransformFeedback();
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.sampleCoverage = function(this1,value,invert) {
	this1.__context.sampleCoverage(value,invert);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.samplerParameterf = function(this1,sampler,pname,param) {
	this1.__context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.samplerParameteri = function(this1,sampler,pname,param) {
	this1.__context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.scissor = function(this1,x,y,width,height) {
	this1.__context.scissor(x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.shaderSource = function(this1,shader,source) {
	this1.__context.shaderSource(shader,source);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilFunc = function(this1,func,ref,mask) {
	this1.__context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilFuncSeparate = function(this1,face,func,ref,mask) {
	this1.__context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilMask = function(this1,mask) {
	this1.__context.stencilMask(mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilMaskSeparate = function(this1,face,mask) {
	this1.__context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilOp = function(this1,fail,zfail,zpass) {
	this1.__context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilOpSeparate = function(this1,face,fail,zfail,zpass) {
	this1.__context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texImage3D = function(this1,target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	this1.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texStorage2D = function(this1,target,level,internalformat,width,height) {
	this1.__context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texStorage3D = function(this1,target,level,internalformat,width,height,depth) {
	this1.__context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texParameterf = function(this1,target,pname,param) {
	this1.__context.texParameterf(target,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texParameteri = function(this1,target,pname,param) {
	this1.__context.texParameteri(target,pname,param);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	this1.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texSubImage3D = function(this1,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,srcData,srcOffset) {
	this1.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,srcData,srcOffset);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.transformFeedbackVaryings = function(this1,program,varyings,bufferMode) {
	this1.__context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1f = function(this1,location,v0) {
	this1.__context.uniform1f(location,v0);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1fv = function(this1,location,v) {
	this1.uniform1fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1i = function(this1,location,v0) {
	this1.__context.uniform1i(location,v0);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1iv = function(this1,location,v) {
	this1.uniform1ivWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1ui = function(this1,location,v0) {
	this1.__context.uniform1ui(location,v0);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1uiv = function(this1,location,v) {
	this1.uniform1uivWEBGL(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2f = function(this1,location,v0,v1) {
	this1.__context.uniform2f(location,v0,v1);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2fv = function(this1,location,v) {
	this1.uniform2fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2i = function(this1,location,v0,v1) {
	this1.__context.uniform2i(location,v0,v1);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2iv = function(this1,location,v) {
	this1.uniform2fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2ui = function(this1,location,v0,v1) {
	this1.__context.uniform2ui(location,v0,v1);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2uiv = function(this1,location,v) {
	this1.uniform2uivWEBGL(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3f = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3fv = function(this1,location,v) {
	this1.uniform3fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3i = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3iv = function(this1,location,v) {
	this1.uniform3ivWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3ui = function(this1,location,v0,v1,v2) {
	this1.__context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3uiv = function(this1,location,v) {
	this1.__context.uniform3uiv(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4f = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4fv = function(this1,location,v) {
	this1.uniform4fvWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4i = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4iv = function(this1,location,v) {
	this1.uniform4ivWEBGL(location,v);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4ui = function(this1,location,v0,v1,v2,v3) {
	this1.__context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4uiv = function(this1,location,v) {
	this1.__context.uniform4uiv(location,v,null,null);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformBlockBinding = function(this1,program,uniformBlockIndex,uniformBlockBinding) {
	this1.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2x3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2x4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix3fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3x2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3x4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4x2fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.uniformMatrix4x2fvWEBGL(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4x3fv = function(this1,location,transpose,v,srcOffset,srcLength) {
	this1.__context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.useProgram = function(this1,program) {
	this1.__context.useProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.validateProgram = function(this1,program) {
	this1.__context.validateProgram(program);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib1f = function(this1,indx,x) {
	this1.__context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib1fv = function(this1,indx,values) {
	this1.vertexAttrib1fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib2f = function(this1,indx,x,y) {
	this1.__context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib2fv = function(this1,indx,values) {
	this1.vertexAttrib2fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib3f = function(this1,indx,x,y,z) {
	this1.__context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib3fv = function(this1,indx,values) {
	this1.vertexAttrib3fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib4f = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib4fv = function(this1,indx,values) {
	this1.vertexAttrib4fv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribDivisor = function(this1,index,divisor) {
	this1.__context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4i = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4i(indx,x,y,z,w);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4iv = function(this1,indx,values) {
	this1.vertexAttribI4iv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4ui = function(this1,indx,x,y,z,w) {
	this1.__context.vertexAttribI4ui(indx,x,y,z,w);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4uiv = function(this1,indx,values) {
	this1.vertexAttribI4uiv(indx,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribPointer = function(this1,indx,size,type,normalized,stride,offset) {
	this1.__context.vertexAttribPointer(indx,size,type,normalized,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.viewport = function(this1,x,y,width,height) {
	this1.__context.viewport(x,y,width,height);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.waitSync = function(this1,sync,flags,timeout) {
	this1.__context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fromGLES3Context = function(gl) {
	return gl;
};
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.toWebGLContext = function(gl) {
	return gl;
};
var lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._WebGLContext.WebGLContext_Impl_"] = lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$;
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.__name__ = ["lime","graphics","opengl","_WebGLContext","WebGLContext_Impl_"];
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferDataWEBGL(target,srcData,usage,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferSubData = function(this1,target,offset,srcData) {
	this1.bufferSubDataWEBGL(target,offset,srcData,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	this1.compressedTexImage2DWEBGL(target,level,internalformat,width,height,border,srcData,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	this1.compressedTexSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format,srcData,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	this1.readPixelsWEBGL(x,y,width,height,format,type,pixels,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var border1 = border;
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border1,format,type,srcData,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var format1 = format;
	this1.texSubImage2DWEBGL(target,level,xoffset,yoffset,width,height,format1,type,srcData,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v) {
	this1.uniformMatrix2fvWEBGL(location,transpose,v,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v) {
	this1.uniformMatrix3fvWEBGL(location,transpose,v,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	this1.uniformMatrix4fvWEBGL(location,transpose,v,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGLES2Context = function(gl) {
	return gl;
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGLES3Context = function(gl) {
	return gl;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) clear = false;
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) clear = false;
	var buffer = image.buffer;
	if(buffer.__srcImage != null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) image.dirty = false;
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) lime_graphics_utils_ImageCanvasUtil.createImageData(image); else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	var copy = image.clone();
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) return;
	if(image.type == lime_graphics_ImageType.CANVAS) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear); else lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) image.buffer.data.set(sourceImage.buffer.data); else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) return;
		var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g1 = 0;
				var _g = destView.height;
				while(_g1 < _g) {
					var y = _g1++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g3 = 0;
					var _g2 = destView.width;
					while(_g3 < _g2) {
						var x = _g3++;
						switch(sourceFormat) {
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								var r;
								var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
								var g;
								var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
								var b;
								var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
								sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								var r1;
								var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
								var g1;
								var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
								var b1;
								var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
								destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) destPixel = 0; else {
							var value;
							var idx6 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value;
							var value1;
							var idx7 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value1;
							var value2;
							var idx8 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							value2;
							var value3;
							var idx9 = Math.round(blendAlpha * 255.0);
							value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
							value3;
						}
						if(destPremultiplied) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) destPixel = 0;
							} else if((destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 2:
							destData[destPosition] = destPixel >> 8 & 255;
							destData[destPosition + 1] = destPixel >> 16 & 255;
							destData[destPosition + 2] = destPixel >> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 0:
							destData[destPosition] = destPixel >> 24 & 255;
							destData[destPosition + 1] = destPixel >> 16 & 255;
							destData[destPosition + 2] = destPixel >> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >> 24 & 255;
							destData[destPosition + 2] = destPixel >> 16 & 255;
							destData[destPosition + 3] = destPixel >> 8 & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g11 = 0;
				var _g4 = destView.height;
				while(_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g12 = 0;
				var _g5 = destView.height;
				while(_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g31 = 0;
					var _g21 = destView.width;
					while(_g31 < _g21) {
						var x1 = _g31++;
						switch(sourceFormat) {
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								var r2;
								var idx10 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
								var g2;
								var idx11 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
								var b2;
								var idx12 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
								sourcePixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) sourcePixel = 0;
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 2:
							destData[destPosition] = sourcePixel >> 8 & 255;
							destData[destPosition + 1] = sourcePixel >> 16 & 255;
							destData[destPosition + 2] = sourcePixel >> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 0:
							destData[destPosition] = sourcePixel >> 24 & 255;
							destData[destPosition + 1] = sourcePixel >> 16 & 255;
							destData[destPosition + 2] = sourcePixel >> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >> 24 & 255;
							destData[destPosition + 2] = sourcePixel >> 16 & 255;
							destData[destPosition + 3] = sourcePixel >> 8 & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g13 = 0;
				var _g6 = destView.height;
				while(_g13 < _g6) {
					var y3 = _g13++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g32 = 0;
					var _g22 = destView.width;
					while(_g32 < _g22) {
						var x2 = _g32++;
						switch(sourceFormat) {
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								var r3;
								var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
								var g3;
								var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
								var b3;
								var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
								sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								var r4;
								var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
								var g4;
								var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
								var b4;
								var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
								destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4;
							var idx19 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value4;
							var value5;
							var idx20 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							value5;
							var value6;
							var idx21 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
							value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							value6;
							var value7;
							var idx22 = Math.round(blendAlpha * 255.0);
							value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
							destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
							value7;
							if(destPremultiplied) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) destPixel = 0;
								} else if((destPixel & 255) != 255) {
									lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(destFormat) {
							case 2:
								destData[destPosition] = destPixel >> 8 & 255;
								destData[destPosition + 1] = destPixel >> 16 & 255;
								destData[destPosition + 2] = destPixel >> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 0:
								destData[destPosition] = destPixel >> 24 & 255;
								destData[destPosition + 1] = destPixel >> 16 & 255;
								destData[destPosition + 2] = destPixel >> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >> 24 & 255;
								destData[destPosition + 2] = destPixel >> 16 & 255;
								destData[destPosition + 3] = destPixel >> 8 & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g14 = 0;
				var _g7 = destView.height;
				while(_g14 < _g7) {
					var y4 = _g14++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g33 = 0;
					var _g23 = destView.width;
					while(_g33 < _g23) {
						var x3 = _g33++;
						switch(sourceFormat) {
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								var r5;
								var idx23 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
								var g5;
								var idx24 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
								var b5;
								var idx25 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
								b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
								sourcePixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >> 24 & 255 & 255) << 24 | (sourcePixel >> 16 & 255 & 255) << 16 | (sourcePixel >> 8 & 255 & 255) << 8 | value8 & 255;
						value8;
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) sourcePixel = 0;
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 2:
							destData[destPosition] = sourcePixel >> 8 & 255;
							destData[destPosition + 1] = sourcePixel >> 16 & 255;
							destData[destPosition + 2] = sourcePixel >> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 0:
							destData[destPosition] = sourcePixel >> 24 & 255;
							destData[destPosition + 1] = sourcePixel >> 16 & 255;
							destData[destPosition + 2] = sourcePixel >> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >> 24 & 255;
							destData[destPosition + 2] = sourcePixel >> 16 & 255;
							destData[destPosition + 3] = sourcePixel >> 8 & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) fillColor = 0;
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) fillColor = 0;
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength) {
	if(strength == null) strength = 1;
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	var fromPreMult;
	if(image.buffer.premultiplied || sourceImage.buffer.premultiplied) fromPreMult = function(col,alpha) {
		var col1 = col | 0;
		if(col1 < 0) return 0; else if(col1 > 255) return 255; else return col1;
	}; else fromPreMult = function(col2,alpha1) {
		var col3 = col2 / alpha1 * 255 | 0;
		if(col3 < 0) return 0; else if(col3 > 255) return 255; else return col3;
	};
	var boxesForGauss = function(sigma,n) {
		var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
		var wl = Math.floor(wIdeal);
		if(wl % 2 == 0) wl--;
		var wu = wl + 2;
		var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
		var m = Math.round(mIdeal);
		var sizes = [];
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			sizes.push(i < m?wl:wu);
		}
		return sizes;
	};
	var boxBlurH = function(imgA,imgB,w,h,r,off) {
		var iarr = 1 / (r + r + 1);
		var _g1 = 0;
		while(_g1 < h) {
			var i1 = _g1++;
			var ti = i1 * w;
			var li = ti;
			var ri = ti + r;
			var fv = imgA[ti * 4 + off];
			var lv = imgA[(ti + w - 1) * 4 + off];
			var val = (r + 1) * fv;
			var _g11 = 0;
			while(_g11 < r) {
				var j = _g11++;
				val = val + imgA[(ti + j) * 4 + off];
			}
			var _g2 = 0;
			var _g12 = r + 1;
			while(_g2 < _g12) {
				var j1 = _g2++;
				val = val + (imgA[ri * 4 + off] - fv);
				var val1 = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				imgB[ti * 4 + off] = val1;
				ri++;
				ti++;
			}
			var _g21 = r + 1;
			var _g13 = w - r;
			while(_g21 < _g13) {
				var j2 = _g21++;
				val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
				var val2 = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				imgB[ti * 4 + off] = val2;
				ri++;
				li++;
				ti++;
			}
			var _g14 = w - r;
			while(_g14 < w) {
				var j3 = _g14++;
				val = val + (lv - imgA[li * 4 + off]);
				var val3 = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				imgB[ti * 4 + off] = val3;
				li++;
				ti++;
			}
		}
	};
	var boxBlurT = function(imgA1,imgB1,w1,h1,r1,off1) {
		var iarr1 = 1 / (r1 + r1 + 1);
		var ws = w1 * 4;
		var _g3 = 0;
		while(_g3 < w1) {
			var i2 = _g3++;
			var ti1 = i2 * 4 + off1;
			var li1 = ti1;
			var ri1 = ti1 + r1 * ws;
			var fv1 = imgA1[ti1];
			var lv1 = imgA1[ti1 + ws * (h1 - 1)];
			var val4 = (r1 + 1) * fv1;
			var _g15 = 0;
			while(_g15 < r1) {
				var j4 = _g15++;
				val4 = val4 + imgA1[ti1 + j4 * ws];
			}
			var _g22 = 0;
			var _g16 = r1 + 1;
			while(_g22 < _g16) {
				var j5 = _g22++;
				val4 = val4 + (imgA1[ri1] - fv1);
				var val5 = Math.round(_$UInt_UInt_$Impl_$.toFloat(val4) * iarr1);
				imgB1[ti1] = val5;
				ri1 += ws;
				ti1 += ws;
			}
			var _g23 = r1 + 1;
			var _g17 = h1 - r1;
			while(_g23 < _g17) {
				var j6 = _g23++;
				val4 = val4 + (imgA1[ri1] - imgA1[li1]);
				var val6 = Math.round(_$UInt_UInt_$Impl_$.toFloat(val4) * iarr1);
				imgB1[ti1] = val6;
				li1 += ws;
				ri1 += ws;
				ti1 += ws;
			}
			var _g18 = h1 - r1;
			while(_g18 < h1) {
				var j7 = _g18++;
				val4 = val4 + (lv1 - imgA1[li1]);
				var val7 = Math.round(_$UInt_UInt_$Impl_$.toFloat(val4) * iarr1);
				imgB1[ti1] = val7;
				li1 += ws;
				ti1 += ws;
			}
		}
	};
	var boxBlur = function(imgA2,imgB2,w2,h2,bx,by) {
		var _g19 = 0;
		var _g4 = imgA2.length;
		while(_g19 < _g4) {
			var i3 = _g19++;
			imgB2[i3] = imgA2[i3];
		}
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,0);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,1);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,2);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,3);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,0);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,1);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,2);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,3);
	};
	var imgB3 = image.get_data();
	var imgA3 = sourceImage.get_data();
	var w3 = sourceRect.width | 0;
	var h3 = sourceRect.height | 0;
	var bx1 = blurX | 0;
	var by1 = blurY | 0;
	var oX = destPoint.x | 0;
	var oY = destPoint.y | 0;
	var n1 = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = boxesForGauss(bx1 * rng,n1);
	var bys = boxesForGauss(by1 * rng,n1);
	var offset = (w3 * oY + oX) * 4 | 0;
	boxBlur(imgA3,imgB3,w3,h3,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g110 = 0;
	var _g5 = n1 / 2 | 0;
	while(_g110 < _g5) {
		var i5 = _g110++;
		boxBlur(imgB3,imgA3,w3,h3,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		boxBlur(imgA3,imgB3,w3,h3,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var i4 = 0;
	var a;
	if(offset < 0) {
		while(i4 < imgA3.length) {
			a = Std["int"](_$UInt_UInt_$Impl_$.toFloat(imgB3[i4 + 3]) * strength);
			if(a < 0) a = 0; else if(a > 255) a = 255; else a = a;
			var val8 = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i4]),a);
			imgB3[i4] = val8;
			var val9 = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i4 + 1]),a);
			imgB3[i4 + 1] = val9;
			var val10 = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i4 + 2]),a);
			imgB3[i4 + 2] = val10;
			imgB3[i4 + 3] = a;
			i4 += 4;
		}
		var _g111 = imgA3.length - offset;
		var _g6 = imgA3.length;
		while(_g111 < _g6) {
			var i6 = _g111++;
			imgB3[i6] = 0;
		}
	} else {
		i4 = imgA3.length - 4;
		while(i4 >= 0) {
			a = Std["int"](_$UInt_UInt_$Impl_$.toFloat(imgB3[i4 + 3]) * strength);
			if(a < 0) a = 0; else if(a > 255) a = 255; else a = a;
			var val11 = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i4]),a);
			imgB3[i4 + offset] = val11;
			var val12 = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i4 + 1]),a);
			imgB3[i4 + 1 + offset] = val12;
			var val13 = fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[i4 + 2]),a);
			imgB3[i4 + 2 + offset] = val13;
			imgB3[i4 + 3 + offset] = a;
			i4 -= 4;
		}
		var _g7 = 0;
		while(_g7 < offset) {
			var i7 = _g7++;
			imgB3[i7] = 0;
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imgB3 == image.get_data()) return image;
	return sourceImage;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			bytes.set(destPosition++,pixel >> 24 & 255);
			bytes.set(destPosition++,pixel >> 16 & 255);
			bytes.set(destPosition++,pixel >> 8 & 255);
			bytes.set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			if(littleEndian) color = bytes.getInt32(dataPosition); else color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		{
			var argb2 = threshold;
			var rgba2 = 0;
			rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
			_threshold = rgba2;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba3 = 0;
			rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba3;
		}
		{
			var bgra1 = mask;
			var rgba4 = 0;
			rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba4;
		}
		{
			var bgra2 = threshold;
			var rgba5 = 0;
			rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
			_threshold = rgba5;
		}
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "==":
		_operation = 1;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) return 0;
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return 0;
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			value = lime_graphics_utils_ImageDataUtil.__pixelCompare(pixelMask,_threshold);
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) _color = 0;
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = _color >> 8 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 0:
					destData[destPosition] = _color >> 24 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >> 24 & 255;
					destData[destPosition + 2] = _color >> 16 & 255;
					destData[destPosition + 3] = _color >> 8 & 255;
					break;
				}
				hits++;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) srcPixel = 0;
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = srcPixel >> 8 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 0:
					destData[destPosition] = srcPixel >> 24 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >> 24 & 255;
					destData[destPosition + 2] = srcPixel >> 16 & 255;
					destData[destPosition + 3] = srcPixel >> 8 & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else return 0;
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.__update();
	}
	,hasRow: function(y) {
		return y >= 0 && y < this.height;
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) this.rect.x = 0;
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) this.rect.y = 0;
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 139, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 180, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 258, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty,matrix) {
	if(matrix == null) matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,0,a);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,1,b);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,2,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,3,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,4,c);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,5,d);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,6,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,7,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,8,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,9,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,10,1);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,11,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,12,tx);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,13,ty);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,14,0);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix,15,1);
	return matrix;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 360, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp1 = this1[2];
	this1[2] = this1[8];
	this1[8] = temp1;
	var temp2 = this1[3];
	this1[3] = this1[12];
	this1[12] = temp2;
	var temp3 = this1[6];
	this1[6] = this1[9];
	this1[9] = temp3;
	var temp4 = this1[7];
	this1[7] = this1[13];
	this1[13] = temp4;
	var temp5 = this1[11];
	this1[11] = this1[14];
	this1[14] = temp5;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_media_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.ALAudioContext"] = lime_media_ALAudioContext;
lime_media_ALAudioContext.__name__ = ["lime","media","ALAudioContext"];
lime_media_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_media_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_media_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_media_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,__class__: lime_media_ALAudioContext
};
var lime_media_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.media.ALCAudioContext"] = lime_media_ALCAudioContext;
lime_media_ALCAudioContext.__name__ = ["lime","media","ALCAudioContext"];
lime_media_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_media_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_media_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_media_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_media_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_media_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_ALCAudioContext
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = ["lime","media","AudioBuffer"];
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) return null;
	if(base64String.indexOf(",") == -1) base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
	return null;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) return null;
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
	return null;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) return null;
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else promise.error(null);
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else promise.error(null);
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "fLaC":
		return "audio/flac";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") return "audio/wav"; else if(bytes.getString(0,3) == "ID3" || bytes.getString(0,2) == "ÿû") return "audio/mp3";
		break;
	default:
		if(bytes.getString(0,3) == "ID3" || bytes.getString(0,2) == "ÿû") return "audio/mp3";
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 480, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcFMODSound: null
	,__srcHowl: null
	,__srcSound: null
	,__srcVorbisFile: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_media_AudioContext = $hxClasses["lime.media.AudioContext"] = { __ename__ : ["lime","media","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_media_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = ["lime","media","AudioManager"];
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_media_AudioManager.context = lime_media_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_media_AudioManager.context = lime_media_AudioContext.HTML5(new lime_media_HTML5AudioContext());
		} else lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null) {
		var _g = lime_media_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.resumeDevice(device);
				alc.processContext(currentContext);
			}
			break;
		default:
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null) {
		{
			var _g = lime_media_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				var currentContext = alc.getCurrentContext();
				if(currentContext != null) {
					var device = alc.getContextsDevice(currentContext);
					alc.makeContextCurrent(null);
					alc.destroyContext(currentContext);
					if(device != null) alc.closeDevice(device);
				}
				break;
			default:
			}
		}
		lime_media_AudioManager.context = null;
	}
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null) {
		var _g = lime_media_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.suspendContext(currentContext);
				var device = alc.getContextsDevice(currentContext);
				alc.pauseDevice(device);
			}
			break;
		default:
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) this.set_length(length);
	this.set_loops(loops);
	if(buffer != null) this.init();
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = ["lime","media","AudioSource"];
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
		this.backend.dispose();
	}
	,init: function() {
		this.backend.init();
	}
	,play: function() {
		this.backend.play();
	}
	,pause: function() {
		this.backend.pause();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,get_length: function() {
		return this.backend.getLength();
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,get_loops: function() {
		return this.backend.getLoops();
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = ["lime","media","FlashAudioContext"];
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = ["lime","media","HTML5AudioContext"];
lime_media_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.load();
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.pause();
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.volume = value;
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_codecs_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.codecs.vorbis.VorbisComment"] = lime_media_codecs_vorbis_VorbisComment;
lime_media_codecs_vorbis_VorbisComment.__name__ = ["lime","media","codecs","vorbis","VorbisComment"];
lime_media_codecs_vorbis_VorbisComment.prototype = {
	userComments: null
	,vendor: null
	,__class__: lime_media_codecs_vorbis_VorbisComment
};
var lime_media_codecs_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.codecs.vorbis.VorbisFile"] = lime_media_codecs_vorbis_VorbisFile;
lime_media_codecs_vorbis_VorbisFile.__name__ = ["lime","media","codecs","vorbis","VorbisFile"];
lime_media_codecs_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_codecs_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_codecs_vorbis_VorbisFile.prototype = {
	bitstream: null
	,handle: null
	,bitrate: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var x = new haxe__$Int64__$_$_$Int64(0,0);
		return x;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		var x = new haxe__$Int64__$_$_$Int64(0,0);
		return x;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var x = new haxe__$Int64__$_$_$Int64(0,0);
		return x;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		var x = new haxe__$Int64__$_$_$Int64(0,0);
		return x;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) signed = true;
		if(wordSize == null) wordSize = 2;
		if(bigEndianPacking == null) bigEndianPacking = false;
		if(length == null) length = 4096;
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) bitstream = -1;
		return 0;
	}
	,__class__: lime_media_codecs_vorbis_VorbisFile
};
var lime_media_codecs_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.codecs.vorbis.VorbisInfo"] = lime_media_codecs_vorbis_VorbisInfo;
lime_media_codecs_vorbis_VorbisInfo.__name__ = ["lime","media","codecs","vorbis","VorbisInfo"];
lime_media_codecs_vorbis_VorbisInfo.prototype = {
	bitrateLower: null
	,bitrateNominal: null
	,bitrateUpper: null
	,channels: null
	,rate: null
	,version: null
	,__class__: lime_media_codecs_vorbis_VorbisInfo
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = ["lime","media","openal","AL"];
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	var _g = lime_media_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] = lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","media","openal","_ALBuffer","ALBuffer_Impl_"];
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	return handle;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = ["lime","media","openal","ALC"];
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	var _g = lime_media_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] = lime_media_openal__$ALContext_ALContext_$Impl_$;
lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","media","openal","_ALContext","ALContext_Impl_"];
lime_media_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] = lime_media_openal__$ALDevice_ALDevice_$Impl_$;
lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","media","openal","_ALDevice","ALDevice_Impl_"];
lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] = lime_media_openal__$ALSource_ALSource_$Impl_$;
lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","media","openal","_ALSource","ALSource_Impl_"];
lime_media_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	return handle;
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,backend: null
	,cancel: function() {
		this.backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _g = this;
		if(uri != null) this.uri = uri;
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_g.responseData = _g.fromBytes(bytes);
			promise.complete(_g.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _g = this;
		if(uri != null) this.uri = uri;
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_g.responseData = text;
			promise.complete(_g.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) value = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = ["lime","net","_HTTPRequest_lime_text_Font"];
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	if(lime_system_Clipboard._text != cacheText) lime_system_Clipboard.onUpdate.dispatch();
};
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__windows[0];
	if($window != null) $window.backend.setClipboard(value);
	if(lime_system_Clipboard._text != cacheText) lime_system_Clipboard.onUpdate.dispatch();
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_JNI = function() { };
$hxClasses["lime.system.JNI"] = lime_system_JNI;
lime_system_JNI.__name__ = ["lime","system","JNI"];
lime_system_JNI.callMember = function(method,jobject,a) {
	var _g = a.length;
	switch(_g) {
	case 0:
		return method(jobject);
	case 1:
		return method(jobject,a[0]);
	case 2:
		return method(jobject,a[0],a[1]);
	case 3:
		return method(jobject,a[0],a[1],a[2]);
	case 4:
		return method(jobject,a[0],a[1],a[2],a[3]);
	case 5:
		return method(jobject,a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.callStatic = function(method,a) {
	var _g = a.length;
	switch(_g) {
	case 0:
		return method();
	case 1:
		return method(a[0]);
	case 2:
		return method(a[0],a[1]);
	case 3:
		return method(a[0],a[1],a[2]);
	case 4:
		return method(a[0],a[1],a[2],a[3]);
	case 5:
		return method(a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.createMemberField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createMemberMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) quietFail = false;
	if(useArray == null) useArray = false;
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) quietFail = false;
	if(useArray == null) useArray = false;
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.getEnv = function() {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.init = function() {
	if(!lime_system_JNI.initialized) lime_system_JNI.initialized = true;
};
lime_system_JNI.onCallback = function(object,method,args) {
	var field = Reflect.field(object,method);
	if(field != null) {
		if(args == null) args = [];
		return field.apply(object,args);
	}
	haxe_Log.trace("onCallback - unknown field " + method,{ fileName : "JNI.hx", lineNumber : 184, className : "lime.system.JNI", methodName : "onCallback"});
	return null;
};
lime_system_JNI.postUICallback = function(callback) {
	callback();
};
var lime_system_JNIMemberField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIMemberField"] = lime_system_JNIMemberField;
lime_system_JNIMemberField.__name__ = ["lime","system","JNIMemberField"];
lime_system_JNIMemberField.prototype = {
	field: null
	,get: function(jobject) {
		return null;
	}
	,set: function(jobject,value) {
		return value;
	}
	,__class__: lime_system_JNIMemberField
};
var lime_system_JNIStaticField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIStaticField"] = lime_system_JNIStaticField;
lime_system_JNIStaticField.__name__ = ["lime","system","JNIStaticField"];
lime_system_JNIStaticField.prototype = {
	field: null
	,get: function() {
		return null;
	}
	,set: function(value) {
		return value;
	}
	,__class__: lime_system_JNIStaticField
};
var lime_system_JNIMethod = function(method) {
	this.method = method;
};
$hxClasses["lime.system.JNIMethod"] = lime_system_JNIMethod;
lime_system_JNIMethod.__name__ = ["lime","system","JNIMethod"];
lime_system_JNIMethod.prototype = {
	method: null
	,callMember: function(args) {
		return null;
	}
	,callStatic: function(args) {
		return null;
	}
	,getMemberMethod: function(useArray) {
		if(useArray) return $bind(this,this.callMember); else return Reflect.makeVarArgs($bind(this,this.callMember));
	}
	,getStaticMethod: function(useArray) {
		if(useArray) return $bind(this,this.callStatic); else return Reflect.makeVarArgs($bind(this,this.callStatic));
	}
	,__class__: lime_system_JNIMethod
};
var lime_system__$Locale_Locale_$Impl_$ = {};
$hxClasses["lime.system._Locale.Locale_Impl_"] = lime_system__$Locale_Locale_$Impl_$;
lime_system__$Locale_Locale_$Impl_$.__name__ = ["lime","system","_Locale","Locale_Impl_"];
lime_system__$Locale_Locale_$Impl_$.__properties__ = {get_region:"get_region",get_language:"get_language",get_systemLocale:"get_systemLocale",set_currentLocale:"set_currentLocale",get_currentLocale:"get_currentLocale"}
lime_system__$Locale_Locale_$Impl_$._new = function(value) {
	return value;
};
lime_system__$Locale_Locale_$Impl_$.equals = function(a,b) {
	var language = lime_system__$Locale_Locale_$Impl_$.get_language(a);
	var region = lime_system__$Locale_Locale_$Impl_$.get_region(a);
	var language2 = lime_system__$Locale_Locale_$Impl_$.get_language(b);
	var region2 = lime_system__$Locale_Locale_$Impl_$.get_region(b);
	var languageMatch = language == language2;
	var regionMatch = region == region2;
	if(!languageMatch && language != null && language2 != null) languageMatch = language.toLowerCase() == language2.toLowerCase();
	if(!regionMatch && region != null && region2 != null) regionMatch = region.toLowerCase() == region2.toLowerCase();
	return languageMatch && regionMatch;
};
lime_system__$Locale_Locale_$Impl_$.__init = function() {
	if(lime_system__$Locale_Locale_$Impl_$.__systemLocale == null) {
		var locale = null;
		locale = navigator.language;
		if(locale != null) lime_system__$Locale_Locale_$Impl_$.__systemLocale = locale; else lime_system__$Locale_Locale_$Impl_$.__systemLocale = "en-US";
		lime_system__$Locale_Locale_$Impl_$.set_currentLocale(lime_system__$Locale_Locale_$Impl_$.__systemLocale);
	}
};
lime_system__$Locale_Locale_$Impl_$.get_language = function(this1) {
	if(this1 != null) {
		var index = this1.indexOf("_");
		if(index > -1) return this1.substring(0,index);
		index = this1.indexOf("-");
		if(index > -1) return this1.substring(0,index);
	}
	return this1;
};
lime_system__$Locale_Locale_$Impl_$.get_region = function(this1) {
	if(this1 != null) {
		var underscoreIndex = this1.indexOf("_");
		var dotIndex = this1.indexOf(".");
		var dashIndex = this1.indexOf("-");
		if(underscoreIndex > -1) {
			if(dotIndex > -1) return this1.substring(underscoreIndex + 1,dotIndex); else return this1.substring(underscoreIndex + 1);
		} else if(dashIndex > -1) {
			if(dotIndex > -1) return this1.substring(dashIndex + 1,dotIndex); else return this1.substring(dashIndex + 1);
		}
	}
	return null;
};
lime_system__$Locale_Locale_$Impl_$.get_currentLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale;
};
lime_system__$Locale_Locale_$Impl_$.set_currentLocale = function(value) {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale = value;
};
lime_system__$Locale_Locale_$Impl_$.get_systemLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.__systemLocale;
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.embed = $hx_exports.lime.embed = function(projectName,element,width,height,windowConfig) {
	if(lime_system_System.__applicationEntryPoint == null || lime_system_System.__applicationConfig == null) return;
	if(lime_system_System.__applicationEntryPoint.exists(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") htmlElement = window.document.getElementById(element); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) width = 0;
		if(height == null) height = 0;
		var defaultConfig = lime_system_System.__applicationConfig.get(projectName);
		var config = { };
		lime_system_System.__copyMissingFields(config,defaultConfig);
		if(windowConfig != null) {
			config.windows = [];
			if((windowConfig instanceof Array) && windowConfig.__enum__ == null) config.windows = windowConfig; else config.windows[0] = windowConfig;
			var _g1 = 0;
			var _g = config.windows.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i < defaultConfig.windows.length) lime_system_System.__copyMissingFields(config.windows[i],defaultConfig.windows[i]);
				lime_system_System.__copyMissingFields(config.windows[i].parameters,defaultConfig.windows[i].parameters);
				if(typeof(windowConfig.background) == "string") {
					var background = StringTools.replace(Std.string(windowConfig.background),"#","");
					if(background.indexOf("0x") > -1) windowConfig.background = Std.parseInt(background); else windowConfig.background = Std.parseInt("0x" + background);
				}
			}
		}
		if(Reflect.field(config.windows[0],"rootPath")) {
			config.rootPath = Reflect.field(config.windows[0],"rootPath");
			Reflect.deleteField(config.windows[0],"rootPath");
		}
		config.windows[0].element = htmlElement;
		config.windows[0].width = width;
		config.windows[0].height = height;
		lime_system_System.__applicationEntryPoint.get(projectName)(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return Std["int"](window.performance.now());
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) window.open(path,"_blank");
};
lime_system_System.openURL = function(url,target) {
	if(target == null) target = "_blank";
	if(url != null) window.open(url,target);
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) return;
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) Reflect.setField(target,field,Reflect.field(source,field));
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint,config) {
	if(lime_system_System.__applicationConfig == null) lime_system_System.__applicationConfig = new haxe_ds_StringMap();
	if(lime_system_System.__applicationEntryPoint == null) lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	{
		lime_system_System.__applicationEntryPoint.set(projectName,entryPoint);
		entryPoint;
	}
	{
		lime_system_System.__applicationConfig.set(projectName,config);
		config;
	}
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return lime_system_System.__getDirectory(0);
};
lime_system_System.get_applicationStorageDirectory = function() {
	return lime_system_System.__getDirectory(1);
};
lime_system_System.get_desktopDirectory = function() {
	return lime_system_System.__getDirectory(2);
};
lime_system_System.get_documentsDirectory = function() {
	return lime_system_System.__getDirectory(3);
};
lime_system_System.get_fontsDirectory = function() {
	return lime_system_System.__getDirectory(4);
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return lime_system_System.__getDirectory(5);
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var uint8Array;
		var this1;
		if(arrayBuffer != null) this1 = new Uint8Array(arrayBuffer,0); else this1 = null;
		uint8Array = this1;
		var uint16array;
		var this2;
		if(arrayBuffer != null) this2 = new Uint16Array(arrayBuffer,0); else this2 = null;
		uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) lime_system_System.endianness = lime_system_Endian.BIG_ENDIAN; else lime_system_System.endianness = lime_system_Endian.LITTLE_ENDIAN;
	}
	return lime_system_System.endianness;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onProgress = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontID != null) {
		if(lime_utils_Assets.isLocal(this.__fontID)) this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
	} else if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) return null;
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) return null;
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) return lime_app_Future.withValue(font); else return lime_app_Future.withError("");
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _g = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var ua = window.navigator.userAgent.toLowerCase();
		var isSafari = ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0;
		if(!isSafari && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) window.document.fonts.load("1em '" + name + "'").then(function(_) {
			promise.complete(_g);
		},function(_1) {
			lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 482, className : "lime.text.Font", methodName : "__loadFromName"});
			promise.complete(_g);
		}); else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount++;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 518, className : "lime.text.Font", methodName : "__loadFromName"});
					promise.complete(_g);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_text__$UTF8String_UTF8String_$Impl_$ = {};
$hxClasses["lime.text._UTF8String.UTF8String_Impl_"] = lime_text__$UTF8String_UTF8String_$Impl_$;
lime_text__$UTF8String_UTF8String_$Impl_$.__name__ = ["lime","text","_UTF8String","UTF8String_Impl_"];
lime_text__$UTF8String_UTF8String_$Impl_$.__properties__ = {get_length:"get_length"}
lime_text__$UTF8String_UTF8String_$Impl_$._new = function(str) {
	return new String(str);
};
lime_text__$UTF8String_UTF8String_$Impl_$.charAt = function(this1,index) {
	return lime_text_unifill_Unifill.uCharAt(this1,index);
};
lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt = function(this1,index) {
	if(index < 0 || index >= lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this1,0,this1.length)) return null;
	return lime_text_unifill_Unifill.uCharCodeAt(this1,index);
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromCharCode = function(code) {
	{
		var this1;
		if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
		this1 = code;
		return lime_text_unifill_InternalEncoding.fromCodePoint(this1);
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromCharCodes = function(codes) {
	var s = "";
	var _g = 0;
	while(_g < codes.length) {
		var code = codes[_g];
		++_g;
		var b;
		if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
		b = code;
		s = s + lime_text_unifill_InternalEncoding.fromCodePoint(b);
	}
	return s;
};
lime_text__$UTF8String_UTF8String_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) startIndex = 0;
	return lime_text_unifill_Unifill.uIndexOf(this1,str,startIndex);
};
lime_text__$UTF8String_UTF8String_$Impl_$.lastIndexOf = function(this1,str,startIndex) {
	return lime_text_unifill_Unifill.uLastIndexOf(this1,str,startIndex);
};
lime_text__$UTF8String_UTF8String_$Impl_$.split = function(this1,delimiter) {
	return lime_text_unifill_Unifill.uSplit(this1,delimiter);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substr = function(this1,pos,len) {
	return HxOverrides.substr(this1,pos,len);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substring = function(this1,startIndex,endIndex) {
	return lime_text_unifill_Unifill.uSubstring(this1,startIndex,endIndex);
};
lime_text__$UTF8String_UTF8String_$Impl_$.toLowerCase = function(this1) {
	return this1.toLowerCase();
};
lime_text__$UTF8String_UTF8String_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.toUpperCase = function(this1) {
	return this1.toUpperCase();
};
lime_text__$UTF8String_UTF8String_$Impl_$.equals = function(a,b) {
	if(a == null || b == null) return a == b;
	return lime_text_unifill_Unifill.uCompare(a,b) == 0;
};
lime_text__$UTF8String_UTF8String_$Impl_$.lt = function(a,b) {
	if(b == null) return false;
	if(a == null) return true;
	return lime_text_unifill_Unifill.uCompare(a,b) == -1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.gt = function(a,b) {
	if(a == null) return false;
	if(b == null) return true;
	return lime_text_unifill_Unifill.uCompare(a,b) == 1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.lteq = function(a,b) {
	if(b == null) return a == null;
	if(a == null) return true;
	return lime_text_unifill_Unifill.uCompare(a,b) != 1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.gteq = function(a,b) {
	if(a == null) return b == null;
	if(b == null) return true;
	return lime_text_unifill_Unifill.uCompare(a,b) != -1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.plus = function(a,b) {
	if(a == null && b == null) return null;
	if(a == null) return b;
	if(b == null) return a;
	var sb_b = "";
	sb_b += Std.string(lime_text__$UTF8String_UTF8String_$Impl_$.toString(a));
	sb_b += Std.string(lime_text__$UTF8String_UTF8String_$Impl_$.toString(b));
	return sb_b;
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromDynamic = function(value) {
	return Std.string(value);
};
lime_text__$UTF8String_UTF8String_$Impl_$.get_length = function(this1) {
	if(this1 == null) return 0; else return this1.length;
};
var lime_text__$UTF8String_Utf8Ext = function() { };
$hxClasses["lime.text._UTF8String.Utf8Ext"] = lime_text__$UTF8String_Utf8Ext;
lime_text__$UTF8String_Utf8Ext.__name__ = ["lime","text","_UTF8String","Utf8Ext"];
lime_text__$UTF8String_Utf8Ext.fillUpperToLowerMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 97 + i1;
		map.h[65 + i1] = v;
		v;
	}
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 224 + i2;
		map.h[192 + i2] = v1;
		v1;
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 248 + i3;
		map.h[216 + i3] = v2;
		v2;
	}
	while(i < 48) {
		var v3 = 257 + i;
		map.h[256 + i] = v3;
		v3;
		i += 2;
	}
	i = 0;
	{
		map.h[304] = 105;
		105;
	}
	while(i < 6) {
		var v4 = 307 + i;
		map.h[306 + i] = v4;
		v4;
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 314 + i;
		map.h[313 + i] = v5;
		v5;
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 331 + i;
		map.h[330 + i] = v6;
		v6;
		i += 2;
	}
	i = 0;
	{
		map.h[376] = 255;
		255;
	}
	while(i < 6) {
		var v7 = 378 + i;
		map.h[377 + i] = v7;
		v7;
		i += 2;
	}
	i = 0;
	{
		map.h[385] = 595;
		595;
	}
	while(i < 4) {
		var v8 = 387 + i;
		map.h[386 + i] = v8;
		v8;
		i += 2;
	}
	i = 0;
	{
		map.h[390] = 596;
		596;
	}
	{
		map.h[391] = 392;
		392;
	}
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v9 = 598 + i4;
		map.h[393 + i4] = v9;
		v9;
	}
	{
		map.h[395] = 396;
		396;
	}
	{
		map.h[398] = 477;
		477;
	}
	{
		map.h[399] = 601;
		601;
	}
	{
		map.h[400] = 603;
		603;
	}
	{
		map.h[401] = 402;
		402;
	}
	{
		map.h[403] = 608;
		608;
	}
	{
		map.h[404] = 611;
		611;
	}
	{
		map.h[406] = 617;
		617;
	}
	{
		map.h[407] = 616;
		616;
	}
	{
		map.h[408] = 409;
		409;
	}
	{
		map.h[412] = 623;
		623;
	}
	{
		map.h[413] = 626;
		626;
	}
	{
		map.h[415] = 629;
		629;
	}
	while(i < 6) {
		var v10 = 417 + i;
		map.h[416 + i] = v10;
		v10;
		i += 2;
	}
	i = 0;
	{
		map.h[422] = 640;
		640;
	}
	{
		map.h[423] = 424;
		424;
	}
	{
		map.h[425] = 643;
		643;
	}
	{
		map.h[428] = 429;
		429;
	}
	{
		map.h[430] = 648;
		648;
	}
	{
		map.h[431] = 432;
		432;
	}
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v11 = 650 + i5;
		map.h[433 + i5] = v11;
		v11;
	}
	while(i < 4) {
		var v12 = 436 + i;
		map.h[435 + i] = v12;
		v12;
		i += 2;
	}
	i = 0;
	{
		map.h[439] = 658;
		658;
	}
	{
		map.h[440] = 441;
		441;
	}
	{
		map.h[444] = 445;
		445;
	}
	{
		map.h[452] = 454;
		454;
	}
	{
		map.h[455] = 457;
		457;
	}
	{
		map.h[458] = 460;
		460;
	}
	while(i < 16) {
		var v13 = 462 + i;
		map.h[461 + i] = v13;
		v13;
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 479 + i;
		map.h[478 + i] = v14;
		v14;
		i += 2;
	}
	i = 0;
	{
		map.h[497] = 499;
		499;
	}
	{
		map.h[500] = 501;
		501;
	}
	{
		map.h[502] = 405;
		405;
	}
	{
		map.h[503] = 447;
		447;
	}
	while(i < 40) {
		var v15 = 505 + i;
		map.h[504 + i] = v15;
		v15;
		i += 2;
	}
	i = 0;
	{
		map.h[544] = 414;
		414;
	}
	while(i < 18) {
		var v16 = 547 + i;
		map.h[546 + i] = v16;
		v16;
		i += 2;
	}
	i = 0;
	{
		map.h[570] = 11365;
		11365;
	}
	{
		map.h[571] = 572;
		572;
	}
	{
		map.h[573] = 410;
		410;
	}
	{
		map.h[574] = 11366;
		11366;
	}
	{
		map.h[577] = 578;
		578;
	}
	{
		map.h[579] = 384;
		384;
	}
	{
		map.h[580] = 649;
		649;
	}
	{
		map.h[581] = 652;
		652;
	}
	while(i < 10) {
		var v17 = 583 + i;
		map.h[582 + i] = v17;
		v17;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v18 = 881 + i;
		map.h[880 + i] = v18;
		v18;
		i += 2;
	}
	i = 0;
	{
		map.h[886] = 887;
		887;
	}
	{
		map.h[895] = 1011;
		1011;
	}
	{
		map.h[902] = 940;
		940;
	}
	var _g5 = 0;
	while(_g5 < 3) {
		var i6 = _g5++;
		var v19 = 941 + i6;
		map.h[904 + i6] = v19;
		v19;
	}
	{
		map.h[908] = 972;
		972;
	}
	var _g6 = 0;
	while(_g6 < 2) {
		var i7 = _g6++;
		var v20 = 973 + i7;
		map.h[910 + i7] = v20;
		v20;
	}
	var _g7 = 0;
	while(_g7 < 17) {
		var i8 = _g7++;
		var v21 = 945 + i8;
		map.h[913 + i8] = v21;
		v21;
	}
	var _g8 = 0;
	while(_g8 < 9) {
		var i9 = _g8++;
		var v22 = 963 + i9;
		map.h[931 + i9] = v22;
		v22;
	}
	{
		map.h[975] = 983;
		983;
	}
	while(i < 24) {
		var v23 = 985 + i;
		map.h[984 + i] = v23;
		v23;
		i += 2;
	}
	i = 0;
	{
		map.h[1012] = 952;
		952;
	}
	{
		map.h[1015] = 1016;
		1016;
	}
	{
		map.h[1017] = 1010;
		1010;
	}
	{
		map.h[1018] = 1019;
		1019;
	}
	var _g9 = 0;
	while(_g9 < 3) {
		var i10 = _g9++;
		var v24 = 891 + i10;
		map.h[1021 + i10] = v24;
		v24;
	}
	var _g10 = 0;
	while(_g10 < 16) {
		var i11 = _g10++;
		var v25 = 1104 + i11;
		map.h[1024 + i11] = v25;
		v25;
	}
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1072 + i12;
		map.h[1040 + i12] = v26;
		v26;
	}
	while(i < 34) {
		var v27 = 1121 + i;
		map.h[1120 + i] = v27;
		v27;
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v28 = 1163 + i;
		map.h[1162 + i] = v28;
		v28;
		i += 2;
	}
	i = 0;
	{
		map.h[1216] = 1231;
		1231;
	}
	while(i < 14) {
		var v29 = 1218 + i;
		map.h[1217 + i] = v29;
		v29;
		i += 2;
	}
	i = 0;
	while(i < 96) {
		var v30 = 1233 + i;
		map.h[1232 + i] = v30;
		v30;
		i += 2;
	}
	i = 0;
	var _g12 = 0;
	while(_g12 < 38) {
		var i13 = _g12++;
		var v31 = 1377 + i13;
		map.h[1329 + i13] = v31;
		v31;
	}
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 11520 + i14;
		map.h[4256 + i14] = v32;
		v32;
	}
	{
		map.h[4295] = 11559;
		11559;
	}
	{
		map.h[4301] = 11565;
		11565;
	}
	var _g14 = 0;
	while(_g14 < 80) {
		var i15 = _g14++;
		var v33 = 43888 + i15;
		map.h[5024 + i15] = v33;
		v33;
	}
	var _g15 = 0;
	while(_g15 < 6) {
		var i16 = _g15++;
		var v34 = 5112 + i16;
		map.h[5104 + i16] = v34;
		v34;
	}
	while(i < 150) {
		var v35 = 7681 + i;
		map.h[7680 + i] = v35;
		v35;
		i += 2;
	}
	i = 0;
	{
		map.h[7838] = 223;
		223;
	}
	while(i < 96) {
		var v36 = 7841 + i;
		map.h[7840 + i] = v36;
		v36;
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7936 + i17;
		map.h[7944 + i17] = v37;
		v37;
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7952 + i18;
		map.h[7960 + i18] = v38;
		v38;
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7968 + i19;
		map.h[7976 + i19] = v39;
		v39;
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7984 + i20;
		map.h[7992 + i20] = v40;
		v40;
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8000 + i21;
		map.h[8008 + i21] = v41;
		v41;
	}
	while(i < 8) {
		var v42 = 8017 + i;
		map.h[8025 + i] = v42;
		v42;
		i += 2;
	}
	i = 0;
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v43 = 8032 + i22;
		map.h[8040 + i22] = v43;
		v43;
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v44 = 8112 + i23;
		map.h[8120 + i23] = v44;
		v44;
	}
	var _g23 = 0;
	while(_g23 < 2) {
		var i24 = _g23++;
		var v45 = 8048 + i24;
		map.h[8122 + i24] = v45;
		v45;
	}
	var _g24 = 0;
	while(_g24 < 4) {
		var i25 = _g24++;
		var v46 = 8050 + i25;
		map.h[8136 + i25] = v46;
		v46;
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v47 = 8144 + i26;
		map.h[8152 + i26] = v47;
		v47;
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v48 = 8054 + i27;
		map.h[8154 + i27] = v48;
		v48;
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v49 = 8160 + i28;
		map.h[8168 + i28] = v49;
		v49;
	}
	var _g28 = 0;
	while(_g28 < 2) {
		var i29 = _g28++;
		var v50 = 8058 + i29;
		map.h[8170 + i29] = v50;
		v50;
	}
	{
		map.h[8172] = 8165;
		8165;
	}
	var _g29 = 0;
	while(_g29 < 2) {
		var i30 = _g29++;
		var v51 = 8056 + i30;
		map.h[8184 + i30] = v51;
		v51;
	}
	var _g30 = 0;
	while(_g30 < 2) {
		var i31 = _g30++;
		var v52 = 8060 + i31;
		map.h[8186 + i31] = v52;
		v52;
	}
	{
		map.h[8486] = 969;
		969;
	}
	{
		map.h[8490] = 107;
		107;
	}
	{
		map.h[8491] = 229;
		229;
	}
	{
		map.h[8498] = 8526;
		8526;
	}
	{
		map.h[8579] = 8580;
		8580;
	}
	var _g31 = 0;
	while(_g31 < 47) {
		var i32 = _g31++;
		var v53 = 11312 + i32;
		map.h[11264 + i32] = v53;
		v53;
	}
	{
		map.h[11360] = 11361;
		11361;
	}
	{
		map.h[11362] = 619;
		619;
	}
	{
		map.h[11363] = 7549;
		7549;
	}
	{
		map.h[11364] = 637;
		637;
	}
	while(i < 6) {
		var v54 = 11368 + i;
		map.h[11367 + i] = v54;
		v54;
		i += 2;
	}
	i = 0;
	{
		map.h[11373] = 593;
		593;
	}
	{
		map.h[11374] = 625;
		625;
	}
	{
		map.h[11375] = 592;
		592;
	}
	{
		map.h[11376] = 594;
		594;
	}
	{
		map.h[11378] = 11379;
		11379;
	}
	{
		map.h[11381] = 11382;
		11382;
	}
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v55 = 575 + i33;
		map.h[11390 + i33] = v55;
		v55;
	}
	while(i < 100) {
		var v56 = 11393 + i;
		map.h[11392 + i] = v56;
		v56;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v57 = 11500 + i;
		map.h[11499 + i] = v57;
		v57;
		i += 2;
	}
	i = 0;
	{
		map.h[11506] = 11507;
		11507;
	}
	while(i < 46) {
		var v58 = 42561 + i;
		map.h[42560 + i] = v58;
		v58;
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v59 = 42625 + i;
		map.h[42624 + i] = v59;
		v59;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v60 = 42787 + i;
		map.h[42786 + i] = v60;
		v60;
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v61 = 42803 + i;
		map.h[42802 + i] = v61;
		v61;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v62 = 42874 + i;
		map.h[42873 + i] = v62;
		v62;
		i += 2;
	}
	i = 0;
	{
		map.h[42877] = 7545;
		7545;
	}
	while(i < 10) {
		var v63 = 42879 + i;
		map.h[42878 + i] = v63;
		v63;
		i += 2;
	}
	i = 0;
	{
		map.h[42891] = 42892;
		42892;
	}
	{
		map.h[42893] = 613;
		613;
	}
	while(i < 4) {
		var v64 = 42897 + i;
		map.h[42896 + i] = v64;
		v64;
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v65 = 42903 + i;
		map.h[42902 + i] = v65;
		v65;
		i += 2;
	}
	i = 0;
	{
		map.h[42922] = 614;
		614;
	}
	{
		map.h[42923] = 604;
		604;
	}
	{
		map.h[42924] = 609;
		609;
	}
	{
		map.h[42925] = 620;
		620;
	}
	{
		map.h[42926] = 618;
		618;
	}
	{
		map.h[42928] = 670;
		670;
	}
	{
		map.h[42929] = 647;
		647;
	}
	{
		map.h[42930] = 669;
		669;
	}
	{
		map.h[42931] = 43859;
		43859;
	}
	while(i < 4) {
		var v66 = 42933 + i;
		map.h[42932 + i] = v66;
		v66;
		i += 2;
	}
	i = 0;
	var _g33 = 0;
	while(_g33 < 26) {
		var i34 = _g33++;
		var v67 = 65345 + i34;
		map.h[65313 + i34] = v67;
		v67;
	}
	var _g34 = 0;
	while(_g34 < 40) {
		var i35 = _g34++;
		var v68 = 66600 + i35;
		map.h[66560 + i35] = v68;
		v68;
	}
	var _g35 = 0;
	while(_g35 < 36) {
		var i36 = _g35++;
		var v69 = 66776 + i36;
		map.h[66736 + i36] = v69;
		v69;
	}
	var _g36 = 0;
	while(_g36 < 51) {
		var i37 = _g36++;
		var v70 = 68800 + i37;
		map.h[68736 + i37] = v70;
		v70;
	}
	var _g37 = 0;
	while(_g37 < 32) {
		var i38 = _g37++;
		var v71 = 71872 + i38;
		map.h[71840 + i38] = v71;
		v71;
	}
	var _g38 = 0;
	while(_g38 < 34) {
		var i39 = _g38++;
		var v72 = 125218 + i39;
		map.h[125184 + i39] = v72;
		v72;
	}
};
lime_text__$UTF8String_Utf8Ext.fillLowerToUpperMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 65 + i1;
		map.h[97 + i1] = v;
		v;
	}
	{
		map.h[181] = 924;
		924;
	}
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 192 + i2;
		map.h[224 + i2] = v1;
		v1;
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 216 + i3;
		map.h[248 + i3] = v2;
		v2;
	}
	{
		map.h[255] = 376;
		376;
	}
	while(i < 48) {
		var v3 = 256 + i;
		map.h[257 + i] = v3;
		v3;
		i += 2;
	}
	i = 0;
	{
		map.h[305] = 73;
		73;
	}
	while(i < 6) {
		var v4 = 306 + i;
		map.h[307 + i] = v4;
		v4;
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 313 + i;
		map.h[314 + i] = v5;
		v5;
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 330 + i;
		map.h[331 + i] = v6;
		v6;
		i += 2;
	}
	i = 0;
	while(i < 6) {
		var v7 = 377 + i;
		map.h[378 + i] = v7;
		v7;
		i += 2;
	}
	i = 0;
	{
		map.h[383] = 83;
		83;
	}
	{
		map.h[384] = 579;
		579;
	}
	while(i < 4) {
		var v8 = 386 + i;
		map.h[387 + i] = v8;
		v8;
		i += 2;
	}
	i = 0;
	{
		map.h[392] = 391;
		391;
	}
	{
		map.h[396] = 395;
		395;
	}
	{
		map.h[402] = 401;
		401;
	}
	{
		map.h[405] = 502;
		502;
	}
	{
		map.h[409] = 408;
		408;
	}
	{
		map.h[410] = 573;
		573;
	}
	{
		map.h[414] = 544;
		544;
	}
	while(i < 6) {
		var v9 = 416 + i;
		map.h[417 + i] = v9;
		v9;
		i += 2;
	}
	i = 0;
	{
		map.h[424] = 423;
		423;
	}
	{
		map.h[429] = 428;
		428;
	}
	{
		map.h[432] = 431;
		431;
	}
	while(i < 4) {
		var v10 = 435 + i;
		map.h[436 + i] = v10;
		v10;
		i += 2;
	}
	i = 0;
	{
		map.h[441] = 440;
		440;
	}
	{
		map.h[445] = 444;
		444;
	}
	{
		map.h[447] = 503;
		503;
	}
	{
		map.h[454] = 452;
		452;
	}
	{
		map.h[457] = 455;
		455;
	}
	{
		map.h[460] = 458;
		458;
	}
	while(i < 16) {
		var v11 = 461 + i;
		map.h[462 + i] = v11;
		v11;
		i += 2;
	}
	i = 0;
	{
		map.h[477] = 398;
		398;
	}
	while(i < 18) {
		var v12 = 478 + i;
		map.h[479 + i] = v12;
		v12;
		i += 2;
	}
	i = 0;
	{
		map.h[496] = 74;
		74;
	}
	{
		map.h[499] = 497;
		497;
	}
	{
		map.h[501] = 500;
		500;
	}
	while(i < 40) {
		var v13 = 504 + i;
		map.h[505 + i] = v13;
		v13;
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 546 + i;
		map.h[547 + i] = v14;
		v14;
		i += 2;
	}
	i = 0;
	{
		map.h[572] = 571;
		571;
	}
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v15 = 11390 + i4;
		map.h[575 + i4] = v15;
		v15;
	}
	{
		map.h[578] = 577;
		577;
	}
	while(i < 10) {
		var v16 = 582 + i;
		map.h[583 + i] = v16;
		v16;
		i += 2;
	}
	i = 0;
	{
		map.h[592] = 11375;
		11375;
	}
	{
		map.h[593] = 11373;
		11373;
	}
	{
		map.h[594] = 11376;
		11376;
	}
	{
		map.h[595] = 385;
		385;
	}
	{
		map.h[596] = 390;
		390;
	}
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v17 = 393 + i5;
		map.h[598 + i5] = v17;
		v17;
	}
	{
		map.h[601] = 399;
		399;
	}
	{
		map.h[603] = 400;
		400;
	}
	{
		map.h[604] = 42923;
		42923;
	}
	{
		map.h[608] = 403;
		403;
	}
	{
		map.h[609] = 42924;
		42924;
	}
	{
		map.h[611] = 404;
		404;
	}
	{
		map.h[613] = 42893;
		42893;
	}
	{
		map.h[614] = 42922;
		42922;
	}
	{
		map.h[616] = 407;
		407;
	}
	{
		map.h[617] = 406;
		406;
	}
	{
		map.h[618] = 42926;
		42926;
	}
	{
		map.h[619] = 11362;
		11362;
	}
	{
		map.h[620] = 42925;
		42925;
	}
	{
		map.h[623] = 412;
		412;
	}
	{
		map.h[625] = 11374;
		11374;
	}
	{
		map.h[626] = 413;
		413;
	}
	{
		map.h[629] = 415;
		415;
	}
	{
		map.h[637] = 11364;
		11364;
	}
	{
		map.h[640] = 422;
		422;
	}
	{
		map.h[643] = 425;
		425;
	}
	{
		map.h[647] = 42929;
		42929;
	}
	{
		map.h[648] = 430;
		430;
	}
	{
		map.h[649] = 580;
		580;
	}
	var _g5 = 0;
	while(_g5 < 2) {
		var i6 = _g5++;
		var v18 = 433 + i6;
		map.h[650 + i6] = v18;
		v18;
	}
	{
		map.h[652] = 581;
		581;
	}
	{
		map.h[658] = 439;
		439;
	}
	{
		map.h[669] = 42930;
		42930;
	}
	{
		map.h[670] = 42928;
		42928;
	}
	while(i < 4) {
		var v19 = 880 + i;
		map.h[881 + i] = v19;
		v19;
		i += 2;
	}
	i = 0;
	{
		map.h[887] = 886;
		886;
	}
	var _g6 = 0;
	while(_g6 < 3) {
		var i7 = _g6++;
		var v20 = 1021 + i7;
		map.h[891 + i7] = v20;
		v20;
	}
	{
		map.h[912] = 938;
		938;
	}
	{
		map.h[940] = 902;
		902;
	}
	var _g7 = 0;
	while(_g7 < 3) {
		var i8 = _g7++;
		var v21 = 904 + i8;
		map.h[941 + i8] = v21;
		v21;
	}
	{
		map.h[944] = 939;
		939;
	}
	var _g8 = 0;
	while(_g8 < 17) {
		var i9 = _g8++;
		var v22 = 913 + i9;
		map.h[945 + i9] = v22;
		v22;
	}
	{
		map.h[962] = 931;
		931;
	}
	var _g9 = 0;
	while(_g9 < 9) {
		var i10 = _g9++;
		var v23 = 931 + i10;
		map.h[963 + i10] = v23;
		v23;
	}
	{
		map.h[972] = 908;
		908;
	}
	var _g10 = 0;
	while(_g10 < 2) {
		var i11 = _g10++;
		var v24 = 910 + i11;
		map.h[973 + i11] = v24;
		v24;
	}
	{
		map.h[976] = 914;
		914;
	}
	{
		map.h[977] = 920;
		920;
	}
	{
		map.h[981] = 934;
		934;
	}
	{
		map.h[982] = 928;
		928;
	}
	{
		map.h[983] = 975;
		975;
	}
	while(i < 24) {
		var v25 = 984 + i;
		map.h[985 + i] = v25;
		v25;
		i += 2;
	}
	i = 0;
	{
		map.h[1008] = 922;
		922;
	}
	{
		map.h[1009] = 929;
		929;
	}
	{
		map.h[1010] = 1017;
		1017;
	}
	{
		map.h[1011] = 895;
		895;
	}
	{
		map.h[1013] = 917;
		917;
	}
	{
		map.h[1016] = 1015;
		1015;
	}
	{
		map.h[1019] = 1018;
		1018;
	}
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1040 + i12;
		map.h[1072 + i12] = v26;
		v26;
	}
	var _g12 = 0;
	while(_g12 < 16) {
		var i13 = _g12++;
		var v27 = 1024 + i13;
		map.h[1104 + i13] = v27;
		v27;
	}
	while(i < 34) {
		var v28 = 1120 + i;
		map.h[1121 + i] = v28;
		v28;
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v29 = 1162 + i;
		map.h[1163 + i] = v29;
		v29;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v30 = 1217 + i;
		map.h[1218 + i] = v30;
		v30;
		i += 2;
	}
	i = 0;
	{
		map.h[1231] = 1216;
		1216;
	}
	while(i < 96) {
		var v31 = 1232 + i;
		map.h[1233 + i] = v31;
		v31;
		i += 2;
	}
	i = 0;
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 1329 + i14;
		map.h[1377 + i14] = v32;
		v32;
	}
	var _g14 = 0;
	while(_g14 < 6) {
		var i15 = _g14++;
		var v33 = 5104 + i15;
		map.h[5112 + i15] = v33;
		v33;
	}
	{
		map.h[7296] = 1042;
		1042;
	}
	{
		map.h[7297] = 1044;
		1044;
	}
	{
		map.h[7298] = 1054;
		1054;
	}
	var _g15 = 0;
	while(_g15 < 2) {
		var i16 = _g15++;
		var v34 = 1057 + i16;
		map.h[7299 + i16] = v34;
		v34;
	}
	{
		map.h[7301] = 1058;
		1058;
	}
	{
		map.h[7302] = 1066;
		1066;
	}
	{
		map.h[7303] = 1122;
		1122;
	}
	{
		map.h[7304] = 42570;
		42570;
	}
	{
		map.h[7545] = 42877;
		42877;
	}
	{
		map.h[7549] = 11363;
		11363;
	}
	while(i < 150) {
		var v35 = 7680 + i;
		map.h[7681 + i] = v35;
		v35;
		i += 2;
	}
	i = 0;
	{
		map.h[7830] = 72;
		72;
	}
	{
		map.h[7831] = 84;
		84;
	}
	{
		map.h[7832] = 87;
		87;
	}
	{
		map.h[7833] = 89;
		89;
	}
	{
		map.h[7835] = 7776;
		7776;
	}
	while(i < 96) {
		var v36 = 7840 + i;
		map.h[7841 + i] = v36;
		v36;
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7944 + i17;
		map.h[7936 + i17] = v37;
		v37;
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7960 + i18;
		map.h[7952 + i18] = v38;
		v38;
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7976 + i19;
		map.h[7968 + i19] = v39;
		v39;
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7992 + i20;
		map.h[7984 + i20] = v40;
		v40;
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8008 + i21;
		map.h[8000 + i21] = v41;
		v41;
	}
	{
		map.h[8016] = 933;
		933;
	}
	{
		map.h[8017] = 8025;
		8025;
	}
	{
		map.h[8018] = 933;
		933;
	}
	{
		map.h[8019] = 8027;
		8027;
	}
	{
		map.h[8020] = 933;
		933;
	}
	{
		map.h[8021] = 8029;
		8029;
	}
	{
		map.h[8022] = 933;
		933;
	}
	{
		map.h[8023] = 8031;
		8031;
	}
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v42 = 8040 + i22;
		map.h[8032 + i22] = v42;
		v42;
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v43 = 8122 + i23;
		map.h[8048 + i23] = v43;
		v43;
	}
	var _g23 = 0;
	while(_g23 < 4) {
		var i24 = _g23++;
		var v44 = 8136 + i24;
		map.h[8050 + i24] = v44;
		v44;
	}
	var _g24 = 0;
	while(_g24 < 2) {
		var i25 = _g24++;
		var v45 = 8154 + i25;
		map.h[8054 + i25] = v45;
		v45;
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v46 = 8184 + i26;
		map.h[8056 + i26] = v46;
		v46;
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v47 = 8170 + i27;
		map.h[8058 + i27] = v47;
		v47;
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v48 = 8186 + i28;
		map.h[8060 + i28] = v48;
		v48;
	}
	var _g28 = 0;
	while(_g28 < 8) {
		var i29 = _g28++;
		var v49 = 8072 + i29;
		map.h[8064 + i29] = v49;
		v49;
	}
	var _g29 = 0;
	while(_g29 < 8) {
		var i30 = _g29++;
		var v50 = 8088 + i30;
		map.h[8080 + i30] = v50;
		v50;
	}
	var _g30 = 0;
	while(_g30 < 8) {
		var i31 = _g30++;
		var v51 = 8104 + i31;
		map.h[8096 + i31] = v51;
		v51;
	}
	var _g31 = 0;
	while(_g31 < 3) {
		var i32 = _g31++;
		var v52 = 8120 + i32;
		map.h[8112 + i32] = v52;
		v52;
	}
	{
		map.h[8115] = 8124;
		8124;
	}
	{
		map.h[8116] = 902;
		902;
	}
	{
		map.h[8118] = 913;
		913;
	}
	{
		map.h[8119] = 913;
		913;
	}
	{
		map.h[8126] = 921;
		921;
	}
	{
		map.h[8130] = 8138;
		8138;
	}
	{
		map.h[8131] = 8140;
		8140;
	}
	{
		map.h[8132] = 905;
		905;
	}
	{
		map.h[8134] = 919;
		919;
	}
	{
		map.h[8135] = 919;
		919;
	}
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v53 = 8152 + i33;
		map.h[8144 + i33] = v53;
		v53;
	}
	{
		map.h[8146] = 938;
		938;
	}
	{
		map.h[8147] = 938;
		938;
	}
	{
		map.h[8150] = 921;
		921;
	}
	{
		map.h[8151] = 938;
		938;
	}
	var _g33 = 0;
	while(_g33 < 2) {
		var i34 = _g33++;
		var v54 = 8168 + i34;
		map.h[8160 + i34] = v54;
		v54;
	}
	{
		map.h[8162] = 939;
		939;
	}
	{
		map.h[8163] = 939;
		939;
	}
	{
		map.h[8164] = 929;
		929;
	}
	{
		map.h[8165] = 8172;
		8172;
	}
	{
		map.h[8166] = 933;
		933;
	}
	{
		map.h[8167] = 939;
		939;
	}
	{
		map.h[8178] = 8186;
		8186;
	}
	{
		map.h[8179] = 8188;
		8188;
	}
	{
		map.h[8180] = 911;
		911;
	}
	{
		map.h[8182] = 937;
		937;
	}
	{
		map.h[8183] = 937;
		937;
	}
	{
		map.h[8526] = 8498;
		8498;
	}
	{
		map.h[8580] = 8579;
		8579;
	}
	var _g34 = 0;
	while(_g34 < 47) {
		var i35 = _g34++;
		var v55 = 11264 + i35;
		map.h[11312 + i35] = v55;
		v55;
	}
	{
		map.h[11361] = 11360;
		11360;
	}
	{
		map.h[11365] = 570;
		570;
	}
	{
		map.h[11366] = 574;
		574;
	}
	while(i < 6) {
		var v56 = 11367 + i;
		map.h[11368 + i] = v56;
		v56;
		i += 2;
	}
	i = 0;
	{
		map.h[11379] = 11378;
		11378;
	}
	{
		map.h[11382] = 11381;
		11381;
	}
	while(i < 100) {
		var v57 = 11392 + i;
		map.h[11393 + i] = v57;
		v57;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v58 = 11499 + i;
		map.h[11500 + i] = v58;
		v58;
		i += 2;
	}
	i = 0;
	{
		map.h[11507] = 11506;
		11506;
	}
	var _g35 = 0;
	while(_g35 < 38) {
		var i36 = _g35++;
		var v59 = 4256 + i36;
		map.h[11520 + i36] = v59;
		v59;
	}
	{
		map.h[11559] = 4295;
		4295;
	}
	{
		map.h[11565] = 4301;
		4301;
	}
	while(i < 46) {
		var v60 = 42560 + i;
		map.h[42561 + i] = v60;
		v60;
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v61 = 42624 + i;
		map.h[42625 + i] = v61;
		v61;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v62 = 42786 + i;
		map.h[42787 + i] = v62;
		v62;
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v63 = 42802 + i;
		map.h[42803 + i] = v63;
		v63;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v64 = 42873 + i;
		map.h[42874 + i] = v64;
		v64;
		i += 2;
	}
	i = 0;
	while(i < 10) {
		var v65 = 42878 + i;
		map.h[42879 + i] = v65;
		v65;
		i += 2;
	}
	i = 0;
	{
		map.h[42892] = 42891;
		42891;
	}
	while(i < 4) {
		var v66 = 42896 + i;
		map.h[42897 + i] = v66;
		v66;
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v67 = 42902 + i;
		map.h[42903 + i] = v67;
		v67;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v68 = 42932 + i;
		map.h[42933 + i] = v68;
		v68;
		i += 2;
	}
	i = 0;
	{
		map.h[43859] = 42931;
		42931;
	}
	var _g36 = 0;
	while(_g36 < 80) {
		var i37 = _g36++;
		var v69 = 5024 + i37;
		map.h[43888 + i37] = v69;
		v69;
	}
	var _g37 = 0;
	while(_g37 < 26) {
		var i38 = _g37++;
		var v70 = 65313 + i38;
		map.h[65345 + i38] = v70;
		v70;
	}
	var _g38 = 0;
	while(_g38 < 40) {
		var i39 = _g38++;
		var v71 = 66560 + i39;
		map.h[66600 + i39] = v71;
		v71;
	}
	var _g39 = 0;
	while(_g39 < 36) {
		var i40 = _g39++;
		var v72 = 66736 + i40;
		map.h[66776 + i40] = v72;
		v72;
	}
	var _g40 = 0;
	while(_g40 < 51) {
		var i41 = _g40++;
		var v73 = 68736 + i41;
		map.h[68800 + i41] = v73;
		v73;
	}
	var _g41 = 0;
	while(_g41 < 32) {
		var i42 = _g41++;
		var v74 = 71840 + i42;
		map.h[71872 + i42] = v74;
		v74;
	}
	var _g42 = 0;
	while(_g42 < 34) {
		var i43 = _g42++;
		var v75 = 125184 + i43;
		map.h[125218 + i43] = v75;
		v75;
	}
};
var lime_text_unifill__$CodePoint_CodePoint_$Impl_$ = {};
$hxClasses["lime.text.unifill._CodePoint.CodePoint_Impl_"] = lime_text_unifill__$CodePoint_CodePoint_$Impl_$;
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.__name__ = ["lime","text","unifill","_CodePoint","CodePoint_Impl_"];
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.fromInt = function(code) {
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	return code;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.cons = function(a,b) {
	return lime_text_unifill_InternalEncoding.fromCodePoint(a) + b;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.snoc = function(a,b) {
	return a + lime_text_unifill_InternalEncoding.fromCodePoint(b);
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.addInt = function(a,b) {
	var code = a + b;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	return code;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.sub = function(a,b) {
	return a - b;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.subInt = function(a,b) {
	var code = a - b;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodePoint(code));
	return code;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$._new = function(code) {
	return code;
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.toString = function(this1) {
	return lime_text_unifill_InternalEncoding.fromCodePoint(this1);
};
lime_text_unifill__$CodePoint_CodePoint_$Impl_$.toInt = function(this1) {
	return this1;
};
var lime_text_unifill_CodePointIter = function(s) {
	this.i = 0;
	this.string = s;
	this.index = 0;
	this.endIndex = s.length;
};
$hxClasses["lime.text.unifill.CodePointIter"] = lime_text_unifill_CodePointIter;
lime_text_unifill_CodePointIter.__name__ = ["lime","text","unifill","CodePointIter"];
lime_text_unifill_CodePointIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		this.index += lime_text_unifill_InternalEncoding.codePointWidthAt(this.string,this.index);
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this.string,this.i);
	}
	,__class__: lime_text_unifill_CodePointIter
};
var lime_text_unifill_Exception = function() {
};
$hxClasses["lime.text.unifill.Exception"] = lime_text_unifill_Exception;
lime_text_unifill_Exception.__name__ = ["lime","text","unifill","Exception"];
lime_text_unifill_Exception.prototype = {
	toString: function() {
		throw new js__$Boot_HaxeError(null);
	}
	,__class__: lime_text_unifill_Exception
};
var lime_text_unifill_InvalidCodePoint = function(code) {
	lime_text_unifill_Exception.call(this);
	this.code = code;
};
$hxClasses["lime.text.unifill.InvalidCodePoint"] = lime_text_unifill_InvalidCodePoint;
lime_text_unifill_InvalidCodePoint.__name__ = ["lime","text","unifill","InvalidCodePoint"];
lime_text_unifill_InvalidCodePoint.__super__ = lime_text_unifill_Exception;
lime_text_unifill_InvalidCodePoint.prototype = $extend(lime_text_unifill_Exception.prototype,{
	code: null
	,toString: function() {
		return "InvalidCodePoint(code: " + this.code + ")";
	}
	,__class__: lime_text_unifill_InvalidCodePoint
});
var lime_text_unifill_InvalidCodeUnitSequence = function(index) {
	lime_text_unifill_Exception.call(this);
	this.index = index;
};
$hxClasses["lime.text.unifill.InvalidCodeUnitSequence"] = lime_text_unifill_InvalidCodeUnitSequence;
lime_text_unifill_InvalidCodeUnitSequence.__name__ = ["lime","text","unifill","InvalidCodeUnitSequence"];
lime_text_unifill_InvalidCodeUnitSequence.__super__ = lime_text_unifill_Exception;
lime_text_unifill_InvalidCodeUnitSequence.prototype = $extend(lime_text_unifill_Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime_text_unifill_InvalidCodeUnitSequence
});
var lime_text_unifill_InternalEncoding = function() { };
$hxClasses["lime.text.unifill.InternalEncoding"] = lime_text_unifill_InternalEncoding;
lime_text_unifill_InternalEncoding.__name__ = ["lime","text","unifill","InternalEncoding"];
lime_text_unifill_InternalEncoding.__properties__ = {get_internalEncoding:"get_internalEncoding"}
lime_text_unifill_InternalEncoding.get_internalEncoding = function() {
	return "UTF-16";
};
lime_text_unifill_InternalEncoding.codeUnitAt = function(s,index) {
	return s.charCodeAt(index);
};
lime_text_unifill_InternalEncoding.codePointAt = function(s,index) {
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(s,index);
};
lime_text_unifill_InternalEncoding.charAt = function(s,index) {
	var this1;
	var this2 = s;
	var s1;
	var len;
	var c = this2.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) len = 1; else len = 2;
	var s2 = HxOverrides.substr(this2,index,len);
	s1 = s2;
	this1 = s1;
	return this1;
};
lime_text_unifill_InternalEncoding.codePointCount = function(s,beginIndex,endIndex) {
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(s,beginIndex,endIndex);
};
lime_text_unifill_InternalEncoding.codePointWidthAt = function(s,index) {
	var c = s.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) return 1; else return 2;
};
lime_text_unifill_InternalEncoding.codePointWidthBefore = function(s,index) {
	var this1 = s;
	return lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point(function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime_text_unifill_InternalEncoding.offsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this1.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = this1.charCodeAt(index1);
			if(!(55296 <= c && c <= 56319)) index1 += 1; else index1 += 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			var this2 = [this1];
			index2 -= lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this2) {
				return function(i1) {
					return this2[0].charCodeAt(i1);
				};
			})(this2),index2);
			++count;
		}
		return index2;
	}
};
lime_text_unifill_InternalEncoding.backwardOffsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	var codePointOffset1 = -codePointOffset;
	if(codePointOffset1 >= 0) {
		var index1 = index;
		var len = this1.length;
		var i = 0;
		while(i < codePointOffset1 && index1 < len) {
			var c = this1.charCodeAt(index1);
			if(!(55296 <= c && c <= 56319)) index1 += 1; else index1 += 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset1 && 0 < index2) {
			var this2 = [this1];
			index2 -= lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this2) {
				return function(i1) {
					return this2[0].charCodeAt(i1);
				};
			})(this2),index2);
			++count;
		}
		return index2;
	}
};
lime_text_unifill_InternalEncoding.fromCodePoint = function(codePoint) {
	var this1;
	if(codePoint <= 65535) {
		var s;
		var s1 = String.fromCharCode(codePoint);
		s = s1;
		this1 = s;
	} else {
		var s2;
		var s3 = String.fromCharCode((codePoint >> 10) + 55232) + String.fromCharCode(codePoint & 1023 | 56320);
		s2 = s3;
		this1 = s2;
	}
	return this1;
};
lime_text_unifill_InternalEncoding.fromCodePoints = function(codePoints) {
	var this1;
	var buf = new StringBuf();
	var $it0 = $iterator(codePoints)();
	while( $it0.hasNext() ) {
		var c = $it0.next();
		if(c <= 65535) buf.b += String.fromCharCode(c); else {
			buf.b += String.fromCharCode((c >> 10) + 55232);
			buf.b += String.fromCharCode(c & 1023 | 56320);
		}
	}
	this1 = buf.b;
	return this1;
};
lime_text_unifill_InternalEncoding.validate = function(s) {
	lime_text_unifill__$Utf16_Utf16_$Impl_$.validate(s);
};
lime_text_unifill_InternalEncoding.isValidString = function(s) {
	try {
		lime_text_unifill__$Utf16_Utf16_$Impl_$.validate(s);
		return true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,lime_text_unifill_InvalidCodeUnitSequence) ) {
			return false;
		} else throw(e);
	}
};
lime_text_unifill_InternalEncoding.encodeWith = function(f,c) {
	if(c <= 65535) f(c); else {
		f((c >> 10) + 55232);
		f(c & 1023 | 56320);
	}
};
var lime_text_unifill_InternalEncodingIter = function(s,beginIndex,endIndex) {
	this.i = 0;
	this.string = s;
	this.index = beginIndex;
	this.endIndex = endIndex;
};
$hxClasses["lime.text.unifill.InternalEncodingIter"] = lime_text_unifill_InternalEncodingIter;
lime_text_unifill_InternalEncodingIter.__name__ = ["lime","text","unifill","InternalEncodingIter"];
lime_text_unifill_InternalEncodingIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		this.index += lime_text_unifill_InternalEncoding.codePointWidthAt(this.string,this.index);
		return this.i;
	}
	,__class__: lime_text_unifill_InternalEncodingIter
};
var lime_text_unifill_Unicode = function() { };
$hxClasses["lime.text.unifill.Unicode"] = lime_text_unifill_Unicode;
lime_text_unifill_Unicode.__name__ = ["lime","text","unifill","Unicode"];
lime_text_unifill_Unicode.decodeSurrogate = function(hi,lo) {
	return hi - 55232 << 10 | lo & 1023;
};
lime_text_unifill_Unicode.encodeHighSurrogate = function(c) {
	return (c >> 10) + 55232;
};
lime_text_unifill_Unicode.encodeLowSurrogate = function(c) {
	return c & 1023 | 56320;
};
lime_text_unifill_Unicode.isScalar = function(code) {
	return 0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343);
};
lime_text_unifill_Unicode.isHighSurrogate = function(code) {
	return 55296 <= code && code <= 56319;
};
lime_text_unifill_Unicode.isLowSurrogate = function(code) {
	return 56320 <= code && code <= 57343;
};
var lime_text_unifill_Unifill = function() { };
$hxClasses["lime.text.unifill.Unifill"] = lime_text_unifill_Unifill;
lime_text_unifill_Unifill.__name__ = ["lime","text","unifill","Unifill"];
lime_text_unifill_Unifill.uLength = function(s) {
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(s,0,s.length);
};
lime_text_unifill_Unifill.uCharAt = function(s,index) {
	var i = lime_text_unifill_InternalEncoding.offsetByCodePoints(s,0,index);
	return lime_text_unifill_InternalEncoding.charAt(s,i);
};
lime_text_unifill_Unifill.uCharCodeAt = function(s,index) {
	var i = lime_text_unifill_InternalEncoding.offsetByCodePoints(s,0,index);
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(s,i);
};
lime_text_unifill_Unifill.uCodePointAt = function(s,index) {
	return lime_text_unifill_Unifill.uCharCodeAt(s,index);
};
lime_text_unifill_Unifill.uIndexOf = function(s,value,startIndex) {
	if(startIndex == null) startIndex = 0;
	var index = s.indexOf(value,lime_text_unifill_InternalEncoding.offsetByCodePoints(s,0,startIndex));
	if(index >= 0) return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(s,0,index); else return -1;
};
lime_text_unifill_Unifill.uLastIndexOf = function(s,value,startIndex) {
	if(startIndex == null) startIndex = s.length - 1;
	var index = s.lastIndexOf(value,lime_text_unifill_InternalEncoding.offsetByCodePoints(s,0,startIndex));
	if(index >= 0) return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(s,0,index); else return -1;
};
lime_text_unifill_Unifill.uSplit = function(s,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1_i = 0;
		var _g1_string = s;
		var _g1_index = 0;
		var _g1_endIndex = s.length;
		while(_g1_index < _g1_endIndex) {
			var i;
			_g1_i = _g1_index;
			_g1_index += lime_text_unifill_InternalEncoding.codePointWidthAt(_g1_string,_g1_index);
			i = _g1_i;
			_g.push(lime_text_unifill_InternalEncoding.charAt(s,i));
		}
		return _g;
	} else return s.split(delimiter);
};
lime_text_unifill_Unifill.uSubstr = function(s,startIndex,length) {
	var si = lime_text_unifill_InternalEncoding.offsetByCodePoints(s,startIndex >= 0?0:s.length,startIndex);
	var ei;
	if(length == null) ei = s.length; else if(length < 0) ei = si; else ei = lime_text_unifill_InternalEncoding.offsetByCodePoints(s,si,length);
	return s.substring(si,ei);
};
lime_text_unifill_Unifill.uSubstring = function(s,startIndex,endIndex) {
	var si;
	if(startIndex < 0) si = 0; else si = lime_text_unifill_InternalEncoding.offsetByCodePoints(s,0,startIndex);
	var ei;
	if(endIndex == null) ei = s.length; else if(endIndex < 0) ei = 0; else ei = lime_text_unifill_InternalEncoding.offsetByCodePoints(s,0,endIndex);
	return s.substring(si,ei);
};
lime_text_unifill_Unifill.uIterator = function(s) {
	return new lime_text_unifill_CodePointIter(s);
};
lime_text_unifill_Unifill.uCompare = function(a,b) {
	var aiter_i = 0;
	var aiter_string = a;
	var aiter_index = 0;
	var aiter_endIndex = a.length;
	var biter_i = 0;
	var biter_string = b;
	var biter_index = 0;
	var biter_endIndex = b.length;
	while(aiter_index < aiter_endIndex && biter_index < biter_endIndex) {
		var acode = lime_text_unifill_InternalEncoding.codePointAt(a,(function($this) {
			var $r;
			aiter_i = aiter_index;
			aiter_index += lime_text_unifill_InternalEncoding.codePointWidthAt(aiter_string,aiter_index);
			$r = aiter_i;
			return $r;
		}(this)));
		var bcode = lime_text_unifill_InternalEncoding.codePointAt(b,(function($this) {
			var $r;
			biter_i = biter_index;
			biter_index += lime_text_unifill_InternalEncoding.codePointWidthAt(biter_string,biter_index);
			$r = biter_i;
			return $r;
		}(this)));
		if(acode < bcode) return -1;
		if(acode > bcode) return 1;
	}
	if(biter_index < biter_endIndex) return -1;
	if(aiter_index < aiter_endIndex) return 1;
	return 0;
};
lime_text_unifill_Unifill.uToString = function(codePoints) {
	return lime_text_unifill_InternalEncoding.fromCodePoints(codePoints);
};
lime_text_unifill_Unifill.uAddChar = function(sb,c) {
	var c1 = c;
	if(c1 <= 65535) sb.b += String.fromCharCode(c1); else {
		sb.b += String.fromCharCode((c1 >> 10) + 55232);
		sb.b += String.fromCharCode(c1 & 1023 | 56320);
	}
};
var lime_text_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.Utf16_Impl_"] = lime_text_unifill__$Utf16_Utf16_$Impl_$;
lime_text_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","Utf16_Impl_"];
lime_text_unifill__$Utf16_Utf16_$Impl_$.__properties__ = {get_length:"get_length"}
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromCodePoint = function(codePoint) {
	if(codePoint <= 65535) {
		var s;
		var s1 = String.fromCharCode(codePoint);
		s = s1;
		return s;
	} else {
		var s2;
		var s3 = String.fromCharCode((codePoint >> 10) + 55232) + String.fromCharCode(codePoint & 1023 | 56320);
		s2 = s3;
		return s2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromCodePoints = function(codePoints) {
	var buf = new StringBuf();
	var $it0 = $iterator(codePoints)();
	while( $it0.hasNext() ) {
		var c = $it0.next();
		if(c <= 65535) buf.b += String.fromCharCode(c); else {
			buf.b += String.fromCharCode((c >> 10) + 55232);
			buf.b += String.fromCharCode(c & 1023 | 56320);
		}
	}
	return buf.b;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromString = function(s) {
	return s;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.fromArray = function(a) {
	var s;
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	s = buf_b;
	return s;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.encodeWith = function(f,c) {
	if(c <= 65535) f(c); else {
		f((c >> 10) + 55232);
		f(c & 1023 | 56320);
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.charAt = function(this1,index) {
	var s;
	var len;
	var c = this1.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) len = 1; else len = 2;
	var s1 = HxOverrides.substr(this1,index,len);
	s = s1;
	return s;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = this1.charCodeAt(index);
		if(!(55296 <= c && c <= 56319)) index += 1; else index += 2;
		++i;
	}
	return i;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointWidthAt = function(this1,index) {
	var c = this1.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) return 1; else return 2;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointWidthBefore = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point(function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.offsetByCodePoints = function(this1,index,codePointOffset) {
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this1.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = this1.charCodeAt(index1);
			if(!(55296 <= c && c <= 56319)) index1 += 1; else index1 += 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			var this2 = [this1];
			index2 -= lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this2) {
				return function(i1) {
					return this2[0].charCodeAt(i1);
				};
			})(this2),index2);
			++count;
		}
		return index2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.substr = function(this1,index,len) {
	var s;
	var s1 = HxOverrides.substr(this1,index,len);
	s = s1;
	return s;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.validate = function(this1) {
	var len = this1.length;
	var accessor = function(i) {
		return this1.charCodeAt(i);
	};
	var i1 = 0;
	while(i1 < len) {
		lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(len,accessor,i1);
		var c = this1.charCodeAt(i1);
		if(!(55296 <= c && c <= 56319)) i1 += 1; else i1 += 2;
	}
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(StringTools.fastCodeAt(this1,i++));
	return _g;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$._new = function(s) {
	return s;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.forward_offset_by_code_points = function(this1,index,codePointOffset) {
	var len = this1.length;
	var i = 0;
	while(i < codePointOffset && index < len) {
		var c = this1.charCodeAt(index);
		if(!(55296 <= c && c <= 56319)) index += 1; else index += 2;
		++i;
	}
	return index;
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.backward_offset_by_code_points = function(this1,index,codePointOffset) {
	var count = 0;
	while(count < codePointOffset && 0 < index) {
		var this2 = [this1];
		index -= lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this2) {
			return function(i) {
				return this2[0].charCodeAt(i);
			};
		})(this2),index);
		++count;
	}
	return index;
};
var lime_text_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime.text.unifill._Utf16.Utf16Impl"] = lime_text_unifill__$Utf16_Utf16Impl;
lime_text_unifill__$Utf16_Utf16Impl.__name__ = ["lime","text","unifill","_Utf16","Utf16Impl"];
lime_text_unifill__$Utf16_Utf16Impl.code_point_width = function(c) {
	if(!(55296 <= c && c <= 56319)) return 1; else return 2;
};
lime_text_unifill__$Utf16_Utf16Impl.find_prev_code_point = function(accessor,index) {
	var c = accessor(index - 1);
	if(!(56320 <= c && c <= 57343)) return 1; else return 2;
};
lime_text_unifill__$Utf16_Utf16Impl.encode_code_point = function(addUnit,codePoint) {
	if(codePoint <= 65535) addUnit(codePoint); else {
		addUnit((codePoint >> 10) + 55232);
		addUnit(codePoint & 1023 | 56320);
	}
};
lime_text_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) return hi - 55232 << 10 | lo & 1023; else throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	} else if(56320 <= hi && hi <= 57343) throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index)); else return hi;
};
var lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.StringU16Buffer_Impl_"] = lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$;
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","StringU16Buffer_Impl_"];
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$._new = function() {
	return new StringBuf();
};
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.addUnit = function(this1,unit) {
	this1.b += String.fromCharCode(unit);
};
lime_text_unifill__$Utf16_StringU16Buffer_$Impl_$.getStringU16 = function(this1) {
	return this1.b;
};
var lime_text_unifill__$Utf16_StringU16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.StringU16_Impl_"] = lime_text_unifill__$Utf16_StringU16_$Impl_$;
lime_text_unifill__$Utf16_StringU16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","StringU16_Impl_"];
lime_text_unifill__$Utf16_StringU16_$Impl_$.__properties__ = {get_length:"get_length"}
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromString = function(s) {
	return s;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromCodeUnit = function(u) {
	var s = String.fromCharCode(u);
	return s;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromTwoCodeUnits = function(u0,u1) {
	var s = String.fromCharCode(u0) + String.fromCharCode(u1);
	return s;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.ofArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	return buf_b;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.fromArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	return buf_b;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.substr = function(this1,index,len) {
	var s = HxOverrides.substr(this1,index,len);
	return s;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(StringTools.fastCodeAt(this1,i++));
	return _g;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$._new = function(s) {
	return s;
};
lime_text_unifill__$Utf16_StringU16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) gamepad.connected = false;
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) gamepad.onDisconnect.dispatch();
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) joystick.connected = false;
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) joystick.onDisconnect.dispatch();
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return null;
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function(keyCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
$hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] = lime_ui__$ScanCode_ScanCode_$Impl_$;
lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = ["lime","ui","_ScanCode","ScanCode_Impl_"];
lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function(keyCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function(scanCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) this.__borderless = config.borderless;
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) this.__resizable = config.resizable;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 96664;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(this.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(this.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(this.audio.exists(id)) return true;
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			var value = asset;
			this.font.set(id,value);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			var value1 = asset;
			this.image.set(id,value1);
			break;
		case "SOUND":case "MUSIC":
			if(!js_Boot.__instanceof(asset,lime_media_AudioBuffer)) throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			var value2 = asset;
			this.audio.set(id,value2);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) return null;
	var library = null;
	if(manifest.libraryType == null) library = new lime_utils_AssetLibrary(); else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) library = Type.createInstance(libraryClass,manifest.libraryArgs); else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 138, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) return library.load(); else return lime_app_Future.withError("Could not load asset manifest");
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.types.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEXT":
			return this.getText(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.cachedAudioBuffers.exists(id)) return this.cachedAudioBuffers.get(id); else if(this.classTypes.exists(id)) return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , haxe_io_Bytes)); else return lime_media_AudioBuffer.fromFile(this.paths.get(id));
	}
	,getBytes: function(id) {
		if(this.cachedBytes.exists(id)) return this.cachedBytes.get(id); else if(this.cachedText.exists(id)) {
			var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(this.cachedText.get(id));
			this.cachedBytes.set(id,bytes);
			return bytes;
		} else if(this.classTypes.exists(id)) return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , haxe_io_Bytes); else return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(this.paths.get(id));
	}
	,getFont: function(id) {
		if(this.cachedFonts.exists(id)) return this.cachedFonts.get(id); else if(this.classTypes.exists(id)) return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , lime_text_Font); else return lime_text_Font.fromFile(this.paths.get(id));
	}
	,getImage: function(id) {
		if(this.cachedImages.exists(id)) return this.cachedImages.get(id); else if(this.classTypes.exists(id)) return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , lime_graphics_Image); else return lime_graphics_Image.fromFile(this.paths.get(id));
	}
	,getPath: function(id) {
		return this.paths.get(id);
	}
	,getText: function(id) {
		if(this.cachedText.exists(id)) return this.cachedText.get(id); else {
			var bytes = this.getBytes(id);
			if(bytes == null) return null; else return bytes.getString(0,bytes.length);
		}
	}
	,isLocal: function(id,type) {
		if(this.classTypes.exists(id)) return true;
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		switch(requestedType) {
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			return this.cachedBytes.exists(id) || this.cachedText.exists(id);
		}
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.types.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEXT":
			return this.loadText(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) return lime_app_Future.withValue(this);
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var $it0 = this.preload.keys();
			while( $it0.hasNext() ) {
				var id = $it0.next();
				if(!this.preload.get(id)) continue;
				lime_utils_Log.verbose("Preloading asset: " + id + " [" + this.types.get(id) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 434, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id);
				if(_g != null) switch(_g) {
				case "BINARY":
					this.assetsTotal++;
					var future = this.loadBytes(id);
					future.onProgress((function(f,id1) {
						return function(a1,a2) {
							f(id1,a1,a2);
						};
					})($bind(this,this.load_onProgress),id));
					future.onError((function(f1,id2) {
						return function(a11) {
							f1(id2,a11);
						};
					})($bind(this,this.load_onError),id));
					future.onComplete((function(f2,id3) {
						return function(a12) {
							f2(id3,a12);
						};
					})($bind(this,this.loadBytes_onComplete),id));
					break;
				case "FONT":
					this.assetsTotal++;
					var future1 = this.loadFont(id);
					future1.onProgress((function(f3,id4) {
						return function(a13,a21) {
							f3(id4,a13,a21);
						};
					})($bind(this,this.load_onProgress),id));
					future1.onError((function(f4,id5) {
						return function(a14) {
							f4(id5,a14);
						};
					})($bind(this,this.load_onError),id));
					future1.onComplete((function(f5,id6) {
						return function(a15) {
							f5(id6,a15);
						};
					})($bind(this,this.loadFont_onComplete),id));
					break;
				case "IMAGE":
					this.assetsTotal++;
					var future2 = this.loadImage(id);
					future2.onProgress((function(f6,id7) {
						return function(a16,a22) {
							f6(id7,a16,a22);
						};
					})($bind(this,this.load_onProgress),id));
					future2.onError((function(f7,id8) {
						return function(a17) {
							f7(id8,a17);
						};
					})($bind(this,this.load_onError),id));
					future2.onComplete((function(f8,id9) {
						return function(a18) {
							f8(id9,a18);
						};
					})($bind(this,this.loadImage_onComplete),id));
					break;
				case "MUSIC":case "SOUND":
					this.assetsTotal++;
					var future3 = this.loadAudioBuffer(id);
					future3.onProgress((function(f9,id10) {
						return function(a19,a23) {
							f9(id10,a19,a23);
						};
					})($bind(this,this.load_onProgress),id));
					future3.onError((function(f10,id11) {
						return function(a110) {
							f10(id11,a110);
						};
					})($bind(this,this.load_onError),id));
					future3.onComplete((function(f11,id12) {
						return function(a111) {
							f11(id12,a111);
						};
					})($bind(this,this.loadAudioBuffer_onComplete),id));
					break;
				case "TEXT":
					this.assetsTotal++;
					var future4 = this.loadText(id);
					future4.onProgress((function(f12,id13) {
						return function(a112,a24) {
							f12(id13,a112,a24);
						};
					})($bind(this,this.load_onProgress),id));
					future4.onError((function(f13,id14) {
						return function(a113) {
							f13(id14,a113);
						};
					})($bind(this,this.load_onError),id));
					future4.onComplete((function(f14,id15) {
						return function(a114) {
							f14(id15,a114);
						};
					})($bind(this,this.loadText_onComplete),id));
					break;
				default:
				} else {
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(this.cachedAudioBuffers.exists(id)) return lime_app_Future.withValue(this.cachedAudioBuffers.get(id)); else if(this.classTypes.exists(id)) return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[])); else if(this.pathGroups.exists(id)) return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.get(id)); else return lime_media_AudioBuffer.loadFromFile(this.paths.get(id));
	}
	,loadBytes: function(id) {
		if(this.cachedBytes.exists(id)) return lime_app_Future.withValue(this.cachedBytes.get(id)); else if(this.classTypes.exists(id)) return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[])); else return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(this.paths.get(id));
	}
	,loadFont: function(id) {
		if(this.cachedFonts.exists(id)) return lime_app_Future.withValue(this.cachedFonts.get(id)); else if(this.classTypes.exists(id)) {
			var font = Type.createInstance(this.classTypes.get(id),[]);
			return lime_text_Font.loadFromName(font.name);
		} else return lime_text_Font.loadFromName(this.paths.get(id));
	}
	,loadImage: function(id) {
		if(this.cachedImages.exists(id)) return lime_app_Future.withValue(this.cachedImages.get(id)); else if(this.classTypes.exists(id)) return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[])); else return lime_graphics_Image.loadFromFile(this.paths.get(id));
	}
	,loadText: function(id) {
		if(this.cachedText.exists(id)) return lime_app_Future.withValue(this.cachedText.get(id)); else if(this.cachedBytes.exists(id) || this.classTypes.exists(id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) return lime_app_Future.withValue(null); else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.set(id,text);
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.get(id));
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.get(id) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 680, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		if(id != null) {
			var size = this.sizes.get(id);
			if(!this.bytesLoadedCache.exists(id)) this.bytesLoaded += size; else {
				var cache = this.bytesLoadedCache.get(id);
				if(cache < size) this.bytesLoaded += size - cache;
			}
			this.bytesLoadedCache.set(id,size);
		}
		if(this.assetsLoaded < this.assetsTotal) this.promise.progress(this.bytesLoaded,this.bytesTotal); else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		if(path.indexOf("?") > -1) path += "&" + lime_utils_Assets.cache.version; else path += "?" + lime_utils_Assets.cache.version;
		return path;
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) basePath = "";
		if(basePath != "") basePath += "/";
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize) size = asset.size; else size = 100;
			id = asset.id;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var value = this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path")));
				this.paths.set(id,value);
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				this.pathGroups.set(id,pathGroup);
			}
			this.sizes.set(id,size);
			var value1 = asset.type;
			this.types.set(id,value1);
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var value2 = Reflect.field(asset,"preload");
				this.preload.set(id,value2);
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				this.classTypes.set(id,classRef);
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			if(this.preload.exists(id) && this.preload.get(id)) this.bytesTotal += this.sizes.get(id);
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.set(id,audioBuffer);
		if(this.pathGroups.exists(id)) {
			var pathGroup = this.pathGroups.get(id);
			var $it0 = this.pathGroups.keys();
			while( $it0.hasNext() ) {
				var otherID = $it0.next();
				if(otherID == id) continue;
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if((function($this) {
						var $r;
						var _this = $this.pathGroups.get(otherID);
						$r = HxOverrides.indexOf(_this,path,0);
						return $r;
					}(this)) > -1) {
						this.cachedAudioBuffers.set(otherID,audioBuffer);
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.set(id,bytes);
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.set(id,font);
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.set(id,image);
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.set(id,text);
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message)); else this.promise.error("Error loading asset \"" + id + "\"");
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.get(id);
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) percent = 1;
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) bytesLoaded = size;
			if(this.bytesLoadedCache.exists(id)) {
				var cache = this.bytesLoadedCache.get(id);
				if(bytesLoaded != cache) this.bytesLoaded += bytesLoaded - cache;
			} else this.bytesLoaded += bytesLoaded;
			this.bytesLoadedCache.set(id,bytesLoaded);
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath); else return null;
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) return null;
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) return null;
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") return null;
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(rootPath != null) manifest.rootPath = rootPath;
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) return null;
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) basePath = HxOverrides.substr(path,0,queryIndex); else basePath = path;
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null); else return basePath + "/library.json";
	} else return path;
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) return rootPath;
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) rootPath = HxOverrides.substr(path,0,queryIndex); else rootPath = path;
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") return rootPath;
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) return rootPath; else return haxe_io_Path.directory(rootPath);
	return rootPath;
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) type = "BINARY";
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) return symbol.library.exists(symbol.symbolName,type);
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) switch(type) {
	case "BINARY":case "TEXT":
		useCache = false;
		break;
	case "FONT":
		var font = lime_utils_Assets.cache.font.get(id);
		if(font != null) return font;
		break;
	case "IMAGE":
		var image = lime_utils_Assets.cache.image.get(id);
		if(lime_utils_Assets.isValidImage(image)) return image;
		break;
	case "MUSIC":case "SOUND":
		var audio = lime_utils_Assets.cache.audio.get(id);
		if(lime_utils_Assets.isValidAudio(audio)) return audio;
		break;
	case "TEMPLATE":
		throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		break;
	default:
		return null;
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,type)) {
			if(symbol.library.isLocal(symbol.symbolName,type)) {
				var asset = symbol.library.getAsset(symbol.symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) lime_utils_Assets.cache.set(id,type,asset);
				return asset;
			} else lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
		} else lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
	} else lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol.libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_utils_Assets.libraries.get(name);
};
lime_utils_Assets.getPath = function(id) {
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,null)) return symbol.library.getPath(symbol.symbolName); else lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 269, className : "lime.utils.Assets", methodName : "getPath"});
	} else lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol.libraryName),{ fileName : "Assets.hx", lineNumber : 275, className : "lime.utils.Assets", methodName : "getPath"});
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_utils_Assets.libraries.exists(name);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) return true;
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	return symbol.library != null && symbol.library.isLocal(symbol.symbolName,type);
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	return image != null && image.buffer != null;
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var $it0 = lime_utils_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) switch(type) {
	case "BINARY":case "TEXT":
		useCache = false;
		break;
	case "FONT":
		var font = lime_utils_Assets.cache.font.get(id);
		if(font != null) return lime_app_Future.withValue(font);
		break;
	case "IMAGE":
		var image = lime_utils_Assets.cache.image.get(id);
		if(lime_utils_Assets.isValidImage(image)) return lime_app_Future.withValue(image);
		break;
	case "MUSIC":case "SOUND":
		var audio = lime_utils_Assets.cache.audio.get(id);
		if(lime_utils_Assets.isValidAudio(audio)) return lime_app_Future.withValue(audio);
		break;
	case "TEMPLATE":
		throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		break;
	default:
		return null;
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,type)) {
			var future = symbol.library.loadAsset(symbol.symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) future.onComplete(function(asset) {
				lime_utils_Assets.cache.set(id,type,asset);
			});
			return future;
		} else return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
	} else return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol.libraryName));
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) return library.load();
	var path = id;
	var rootPath = null;
	if(lime_utils_Assets.libraryPaths.exists(id)) {
		path = lime_utils_Assets.libraryPaths.get(id);
		rootPath = lime_utils_Assets.defaultRootPath;
	} else if(StringTools.endsWith(path,".bundle")) path += "/library.json";
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) promise.error("Cannot open library \"" + id + "\""); else {
			lime_utils_Assets.libraries.set(id,library1);
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			promise.completeWith(library1.load());
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(lime_utils_Assets.libraries.exists(name)) {
		if(lime_utils_Assets.libraries.get(name) == library) return; else lime_utils_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_utils_Assets.library_onChange);
	lime_utils_Assets.libraries.set(name,library);
};
lime_utils_Assets.unloadLibrary = function(name) {
	var library = lime_utils_Assets.libraries.get(name);
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") name = "default";
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) return "There is no asset library named \"" + name + "\", or it is not yet preloaded"; else return "There is no asset library named \"" + name + "\"";
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$BytePointer_BytePointer_$Impl_$ = {};
$hxClasses["lime.utils._BytePointer.BytePointer_Impl_"] = lime_utils__$BytePointer_BytePointer_$Impl_$;
lime_utils__$BytePointer_BytePointer_$Impl_$.__name__ = ["lime","utils","_BytePointer","BytePointer_Impl_"];
lime_utils__$BytePointer_BytePointer_$Impl_$._new = function(bytes,offset) {
	if(offset == null) offset = 0;
	return new lime_utils_BytePointerData(bytes,offset);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) bytes = haxe_io_Bytes.ofData(buffer);
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		if(offset != null) this1.offset = offset; else this1.offset = 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		if(offset != null) this1.offset = bufferView.byteOffset + offset; else this1.offset = bufferView.byteOffset;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arrayGet = function(this1,index) {
	if(this1.bytes != null) return this1.bytes.b[index + this1.offset]; else return 0;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) this1.bytes.b[index + this1.offset] = value & 255;
	return value;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) return null;
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) return null;
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) return new lime_utils_BytePointerData(null,0); else return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8Array = function(bytePointer) {
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) this1 = new Uint8Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) this1 = new Uint8ClampedArray(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) this1 = new Int8Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var this1;
	if(buffer != null) this1 = new Uint16Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var this1;
	if(buffer != null) this1 = new Int16Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) this1 = new Uint32Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) this1 = new Int32Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) this1 = new Float32Array(buffer,byteoffset); else this1 = null;
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) return null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var this1;
	if(buffer != null) this1 = new Float64Array(buffer,byteoffset); else this1 = null;
	return this1;
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	return new haxe_io_Bytes(bytesData);
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) return null;
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = ["lime","utils","_DataPointer","DataPointer_Impl_"];
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	return data;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value | 0));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,pointer.bytes.b.bufferValue,pointer.offset));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(arrayBufferView));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer = function(buffer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,buffer));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(bytes.b.bufferValue);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesData = function(bytesData) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(bytesData);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromLimeBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromCFFIPointer = function(pointer) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferOrBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 1:
		if(length == null) length = data.bufferView.byteLength;
		if(data.offset == 0 && length == data.bufferView.byteLength) return data.bufferView; else {
			var buffer = data.bufferView.buffer;
			var byteoffset = data.bufferView.byteOffset + data.offset;
			var this2;
			if(buffer != null) {
				if(length == null) this2 = new Uint8Array(buffer,byteoffset); else this2 = new Uint8Array(buffer,byteoffset,length);
			} else this2 = null;
			return this2;
		}
		break;
	case 0:
		if(length == null) length = data.buffer.byteLength;
		if(data.offset == 0 && length == data.buffer.byteLength) return data.buffer; else {
			var buffer1 = data.buffer;
			var byteoffset1 = data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) this3 = new Uint8Array(buffer1,byteoffset1); else this3 = new Uint8Array(buffer1,byteoffset1,length);
			} else this3 = null;
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 1:
		if(length == null) length = data.bufferView.byteLength;
		if(data.offset == 0 && length == data.bufferView.byteLength) return data.bufferView; else {
			var buffer = data.bufferView.buffer;
			var byteoffset = data.bufferView.byteOffset + data.offset;
			var this2;
			if(buffer != null) {
				if(length == null) this2 = new Uint8Array(buffer,byteoffset); else this2 = new Uint8Array(buffer,byteoffset,length);
			} else this2 = null;
			return this2;
		}
		break;
	case 0:
		if(length == null) length = data.buffer.byteLength;
		var buffer1 = data.buffer;
		var byteoffset1 = data.offset;
		var this3;
		if(buffer1 != null) {
			if(length == null) this3 = new Uint8Array(buffer1,byteoffset1); else this3 = new Uint8Array(buffer1,byteoffset1,length);
		} else this3 = null;
		return this3;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 1:
		if(length == null) length = data.bufferView.byteLength;
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Float32Array) return data.bufferView; else {
			var buffer = data.bufferView.buffer;
			var byteoffset = data.bufferView.byteOffset + data.offset;
			var len = length / 4 | 0;
			var this2;
			if(buffer != null) {
				if(len == null) this2 = new Float32Array(buffer,byteoffset); else this2 = new Float32Array(buffer,byteoffset,len);
			} else this2 = null;
			return this2;
		}
		break;
	case 0:
		if(length == null) length = data.buffer.byteLength;
		var buffer1 = data.buffer;
		var byteoffset1 = data.offset;
		var len1 = length / 4 | 0;
		var this3;
		if(buffer1 != null) {
			if(len1 == null) this3 = new Float32Array(buffer1,byteoffset1); else this3 = new Float32Array(buffer1,byteoffset1,len1);
		} else this3 = null;
		return this3;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 1:
		if(length == null) length = data.bufferView.byteLength;
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Int32Array) return data.bufferView; else {
			var buffer = data.bufferView.buffer;
			var byteoffset = data.bufferView.byteOffset + data.offset;
			var len = length / 4 | 0;
			var this2;
			if(buffer != null) {
				if(len == null) this2 = new Int32Array(buffer,byteoffset); else this2 = new Int32Array(buffer,byteoffset,len);
			} else this2 = null;
			return this2;
		}
		break;
	case 0:
		if(length == null) length = data.buffer.byteLength;
		var buffer1 = data.buffer;
		var byteoffset1 = data.offset;
		var len1 = length / 4 | 0;
		var this3;
		if(buffer1 != null) {
			if(len1 == null) this3 = new Int32Array(buffer1,byteoffset1); else this3 = new Int32Array(buffer1,byteoffset1,len1);
		} else this3 = null;
		return this3;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt8Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 1:
		if(length == null) length = data.bufferView.byteLength;
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint8Array) return data.bufferView; else {
			var buffer = data.bufferView.buffer;
			var byteoffset = data.bufferView.byteOffset + data.offset;
			var this2;
			if(buffer != null) {
				if(length == null) this2 = new Uint8Array(buffer,byteoffset); else this2 = new Uint8Array(buffer,byteoffset,length);
			} else this2 = null;
			return this2;
		}
		break;
	case 0:
		if(length == null) length = data.buffer.byteLength;
		var buffer1 = data.buffer;
		var byteoffset1 = data.offset;
		var this3;
		if(buffer1 != null) {
			if(length == null) this3 = new Uint8Array(buffer1,byteoffset1); else this3 = new Uint8Array(buffer1,byteoffset1,length);
		} else this3 = null;
		return this3;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 1:
		if(length == null) length = data.bufferView.byteLength;
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint32Array) return data.bufferView; else {
			var buffer = data.bufferView.buffer;
			var byteoffset = data.bufferView.byteOffset + data.offset;
			var len = length / 4 | 0;
			var this2;
			if(buffer != null) {
				if(len == null) this2 = new Uint32Array(buffer,byteoffset); else this2 = new Uint32Array(buffer,byteoffset,len);
			} else this2 = null;
			return this2;
		}
		break;
	case 0:
		if(length == null) length = data.buffer.byteLength;
		var buffer1 = data.buffer;
		var byteoffset1 = data.offset;
		var len1 = length / 4 | 0;
		var this3;
		if(buffer1 != null) {
			if(len1 == null) this3 = new Uint32Array(buffer1,byteoffset1); else this3 = new Uint32Array(buffer1,byteoffset1,len1);
		} else this3 = null;
		return this3;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toValue = function(this1) {
	var data = this1;
	if (!data) return 0;
	if (typeof data === 'number') return data;
	var _g = data.type;
	switch(_g[1]) {
	case 2:
		return data.offset;
	default:
		return 0;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset = function(data,offset) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equals = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThan = function(a,b) {
	return a > b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThan = function(a,b) {
	return a < b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEquals = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b | 0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-(b | 0));
};
var lime_utils_DataPointerObject = function(bufferView,buffer,offset) {
	if(offset == null) offset = 0;
	if(bufferView != null) {
		this.bufferView = bufferView;
		this.type = lime_utils_DataPointerObjectType.BUFFER_VIEW;
	} else if(buffer != null) {
		this.buffer = buffer;
		this.type = lime_utils_DataPointerObjectType.BUFFER;
	} else this.type = lime_utils_DataPointerObjectType.VALUE;
	this.offset = offset;
};
$hxClasses["lime.utils.DataPointerObject"] = lime_utils_DataPointerObject;
lime_utils_DataPointerObject.__name__ = ["lime","utils","DataPointerObject"];
lime_utils_DataPointerObject.prototype = {
	buffer: null
	,bufferView: null
	,offset: null
	,type: null
	,__class__: lime_utils_DataPointerObject
};
var lime_utils_DataPointerObjectType = $hxClasses["lime.utils.DataPointerObjectType"] = { __ename__ : ["lime","utils","DataPointerObjectType"], __constructs__ : ["BUFFER","BUFFER_VIEW","VALUE"] };
lime_utils_DataPointerObjectType.BUFFER = ["BUFFER",0];
lime_utils_DataPointerObjectType.BUFFER.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.BUFFER_VIEW = ["BUFFER_VIEW",1];
lime_utils_DataPointerObjectType.BUFFER_VIEW.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER_VIEW.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.VALUE = ["VALUE",2];
lime_utils_DataPointerObjectType.VALUE.toString = $estr;
lime_utils_DataPointerObjectType.VALUE.__enum__ = lime_utils_DataPointerObjectType;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Float64Array_Float64Array_$Impl_$ = {};
$hxClasses["lime.utils._Float64Array.Float64Array_Impl_"] = lime_utils__$Float64Array_Float64Array_$Impl_$;
lime_utils__$Float64Array_Float64Array_$Impl_$.__name__ = ["lime","utils","_Float64Array","Float64Array_Impl_"];
lime_utils__$Float64Array_Float64Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float64Array(bytes.b.bufferValue);
	if(len == null) return new Float64Array(bytes.b.bufferValue,byteOffset);
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
	lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.__context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35633:
			message = "Error compiling vertex shader";
			break;
		case 35632:
			message = "Error compiling fragment shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.__context.createProgram();
	lime_graphics_opengl_GL.context.__context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.__context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.__context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.__context.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 58, className : "lime.utils.GLUtils", methodName : "createProgram"});
	}
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int8Array_Int8Array_$Impl_$ = {};
$hxClasses["lime.utils._Int8Array.Int8Array_Impl_"] = lime_utils__$Int8Array_Int8Array_$Impl_$;
lime_utils__$Int8Array_Int8Array_$Impl_$.__name__ = ["lime","utils","_Int8Array","Int8Array_Impl_"];
lime_utils__$Int8Array_Int8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) console.debug("[" + info.className + "] " + message);
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + message;
		if(lime_utils_Log.throwErrors) throw new js__$Boot_HaxeError(message1); else console.error(message1);
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) console.info("[" + info.className + "] " + message);
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) console.log("[" + info.className + "] " + message);
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) console.warn("[" + info.className + "] WARNING: " + message);
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils_ObjectPool = function(create,clean,size) {
	if(create != null) this.create = create;
	if(clean != null) this.clean = clean;
	if(size != null) this.set_size(size);
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = ["lime","utils","ObjectPool"];
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) object = this.__getInactive(); else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		} else this.__pool.remove(object);
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject0 = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject1 = this.__inactiveObjectList.pop();
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		var _g_head = this.__inactiveObjectList.h;
		var _g_val = null;
		while(_g_head != null) {
			var object;
			object = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			count--;
			if(count == 0 || this.inactiveObjects == 0) return;
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) this.__size = null; else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) this.__removeInactive(current - value); else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else break;
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils_ObjectPool_$openfl_$utils_$TouchData = function(create,clean,size) {
	if(create != null) this.create = create;
	if(clean != null) this.clean = clean;
	if(size != null) this.set_size(size);
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool_openfl_utils_TouchData"] = lime_utils_ObjectPool_$openfl_$utils_$TouchData;
lime_utils_ObjectPool_$openfl_$utils_$TouchData.__name__ = ["lime","utils","ObjectPool_openfl_utils_TouchData"];
lime_utils_ObjectPool_$openfl_$utils_$TouchData.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!(this.__pool.h.__keys__[object.__id__] != null)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) object = this.__getInactive(); else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
			this.inactiveObjects++;
		} else this.__pool.remove(object);
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) this.__inactiveObject0 = object; else if(this.__inactiveObject1 == null) this.__inactiveObject1 = object; else this.__inactiveObjectList.add(object);
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject0 = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) this.__inactiveObject1 = this.__inactiveObjectList.pop();
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			count--;
		}
		if(count == 0 || this.inactiveObjects == 0) return;
		var _g_head = this.__inactiveObjectList.h;
		var _g_val = null;
		while(_g_head != null) {
			var object;
			object = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			count--;
			if(count == 0 || this.inactiveObjects == 0) return;
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) this.__size = null; else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) this.__removeInactive(current - value); else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else break;
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool_$openfl_$utils_$TouchData
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
	if(len == null) return new Uint16Array(bytes.b.bufferValue,byteOffset);
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$ = {};
$hxClasses["lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_"] = lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.__name__ = ["lime","utils","_UInt8ClampedArray","UInt8ClampedArray_Impl_"];
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint8ClampedArray(bytes.b.bufferValue);
	if(len == null) return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) _out = 255; else _out = _out;
	if(_out < 0) return 0; else return _out;
};
var lime_utils_compress_Deflate = function() { };
$hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
lime_utils_compress_Deflate.__name__ = ["lime","utils","compress","Deflate"];
lime_utils_compress_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime_utils_compress_LZMA = function() { };
$hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
lime_utils_compress_LZMA.__name__ = ["lime","utils","compress","LZMA"];
lime_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
lime_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var lime_utils_compress_Zlib = function() { };
$hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
lime_utils_compress_Zlib.__name__ = ["lime","utils","compress","Zlib"];
lime_utils_compress_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"}
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	lime_system_System.openURL(request.url,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 147, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) openfl__$internal_Lib.current = new openfl_display_MovieClip();
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,toJSON: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_BoolVector(null,null,this.__array.slice()); else return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) return false; else return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) sep = ",";
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) return this.__array.splice(index,1)[0];
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) return this.__array.toString(); else return null;
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_FloatVector(null,null,this.__array.slice()); else return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) sep = ",";
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) return this.__array.splice(index,1)[0];
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) return this.__array.toString(); else return null;
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_FunctionVector(null,null,this.__array.slice()); else return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) return null; else return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) sep = ",";
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) return this.__array.splice(index,1)[0];
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) return this.__array.toString(); else return null;
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_IntVector(null,null,this.__array.slice()); else return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) sep = ",";
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) return this.__array.splice(index,1)[0];
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) return this.__array.toString(); else return null;
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_ObjectVector(null,null,this.__array.slice()); else return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) sep = ",";
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) return this.__array.splice(index,1)[0];
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) return this.__array.toString(); else return null;
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array.push(null);
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
openfl__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!openfl__$internal_Lib.__sentWarnings.exists(api)) {
		openfl__$internal_Lib.__sentWarnings.set(api,true);
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,renderStage3D: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,initShader: function(shader) {
		return shader;
	}
	,setShader: function(shader) {
	}
	,updateShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else this.clear();
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c7 = data;
				this.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c8 = data;
				this.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c9 = data;
				this.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
				break;
			case 11:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c10 = data;
				this.endFill();
				break;
			case 12:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c11 = data;
				this.lineBitmapStyle(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos],c11.buffer.b[c11.bPos + 1]);
				break;
			case 13:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c12 = data;
				this.lineGradientStyle(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos]);
				break;
			case 14:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c13 = data;
				this.lineStyle(c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos],c13.buffer.f[c13.fPos],c13.buffer.b[c13.bPos],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos + 1]);
				break;
			case 15:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c14 = data;
				this.lineTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 16:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c15 = data;
				this.moveTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				var c16;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c16 = data;
				this.overrideMatrix(c16.buffer.o[c16.oPos]);
				break;
			case 18:
				var c17;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				c17 = data;
				this.windingEvenOdd();
				break;
			case 19:
				var c18;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				c18 = data;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return this;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return this;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return this;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return this;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return this;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return this;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return this;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return this;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return this;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return this;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return this;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return this;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return this;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return this;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return this;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return this;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return this;
	}
	,readWindingEvenOdd: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		return this;
	}
	,readWindingNonZero: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		return this;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingEvenOddView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingNonZeroView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",18];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",19];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",20];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
	this.clearRenderDirty = false;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,clearRenderDirty: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,projectionMatrix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && bitmap.smoothing?1:3);
			cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) strokeBefore = false;
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	if(!strokeBefore) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	if(strokeBefore) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		matrix.__transformPoint(point);
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,Math.abs((point.x - matrix.tx) / 2));
		break;
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		matrix.__transformPoint(point);
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		matrix.__transformPoint(point2);
		point.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point.x,point.y,point2.x,point2.y);
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = ((rgb & 16711680) >>> 16) / 255;
		g = ((rgb & 65280) >>> 8) / 255;
		b = (rgb & 255) / 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	if(point != null) openfl_geom_Point.__pool.release(point);
	if(point2 != null) openfl_geom_Point.__pool.release(point2);
	if(releaseMatrix) openfl_geom_Matrix.__pool.release(matrix);
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing?1:3);
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) ellipseHeight = ellipseWidth;
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) ellipseWidth = width / 2;
	if(ellipseHeight > height / 2) ellipseHeight = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data.get(t - 1);
		if(max < tmp) max = tmp;
	}
	if(!skipT) return { max : max, uvt : uvt};
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	if(commands.get_length() == 0) return;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 7:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c3 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 6:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c4 = data;
				hasPath = true;
				x = c4.buffer.f[c4.fPos];
				y = c4.buffer.f[c4.fPos + 1];
				width = c4.buffer.f[c4.fPos + 2];
				height = c4.buffer.f[c4.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				if(positionX == startX && positionY == startY) closeGap = true;
				break;
			case 16:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				if(setStart) closeGap = true;
				startX = c7.buffer.f[c7.fPos];
				startY = c7.buffer.f[c7.fPos + 1];
				setStart = true;
				break;
			case 14:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c8 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(c8.buffer.o[c8.oPos] == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c8.buffer.o[c8.oPos] > 0?c8.buffer.o[c8.oPos]:1);
					if(c8.buffer.o[c8.oPos + 3] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						var _g2 = c8.buffer.o[c8.oPos + 3];
						$r = (function($this) {
							var $r;
							switch(_g2) {
							case 1:
								$r = 0;
								break;
							case 0:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					if(c8.buffer.o[c8.oPos + 2] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						var _g21 = c8.buffer.o[c8.oPos + 2];
						$r = (function($this) {
							var $r;
							switch(_g21) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c8.buffer.f[c8.fPos + 1]);
					r = ((c8.buffer.i[c8.iPos] & 16711680) >>> 16) / 255;
					g = ((c8.buffer.i[c8.iPos] & 65280) >>> 8) / 255;
					b = (c8.buffer.i[c8.iPos] & 255) / 255;
					if(c8.buffer.f[c8.fPos] == 1) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,c8.buffer.f[c8.fPos]);
				}
				break;
			case 13:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c9 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c9.buffer.o[c9.oPos],c9.buffer.ii[c9.iiPos],c9.buffer.ff[c9.ffPos],c9.buffer.ii[c9.iiPos + 1],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3],c9.buffer.f[c9.fPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 12:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c10 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c11 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos],c11.buffer.b[c11.bPos + 1]);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c11.buffer.o[c11.oPos];
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c11.buffer.b[c11.bPos];
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c12 = data;
				if(c12.buffer.f[c12.fPos] < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255,((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255,(c12.buffer.i[c12.iPos] & 255) / 255,c12.buffer.f[c12.fPos]);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c13 = data;
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 10:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c14 = data;
				var v = c14.buffer.o[c14.oPos];
				var ind = c14.buffer.o[c14.oPos + 1];
				var uvt = c14.buffer.o[c14.oPos + 2];
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width1 = 0;
				var height1 = 0;
				var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g22 = Std["int"](v.data.get_length() / 2);
						while(_g3 < _g22) {
							var i1 = _g3++;
							var x4 = v.data.get(i1 * 2) - offsetX / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							uvt.data.push(x4);
							var x5 = v.data.get(i1 * 2 + 1) - offsetY / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							uvt.data.push(x5);
						}
					}
					var skipT = c14.buffer.o[c14.oPos + 2].data.get_length() != v.data.get_length();
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.data.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				var matrix = new lime_math_Matrix3();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.data.get(a_) * 2;
					iay = ind.data.get(a_) * 2 + 1;
					ibx = ind.data.get(b_) * 2;
					iby = ind.data.get(b_) * 2 + 1;
					icx = ind.data.get(c_) * 2;
					icy = ind.data.get(c_) * 2 + 1;
					x1 = v.data.get(iax) - offsetX;
					y1 = v.data.get(iay) - offsetY;
					x2 = v.data.get(ibx) - offsetX;
					y2 = v.data.get(iby) - offsetY;
					x3 = v.data.get(icx) - offsetX;
					y3 = v.data.get(icy) - offsetY;
					var _g23 = c14.buffer.o[c14.oPos + 3];
					switch(_g23) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3());
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data.get(iax) * width1;
					uvx2 = uvt.data.get(ibx) * width1;
					uvx3 = uvt.data.get(icx) * width1;
					uvy1 = uvt.data.get(iay) * height1;
					uvy2 = uvt.data.get(iby) * height1;
					uvy3 = uvt.data.get(icy) * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					x1 *= currentMatrix.a;
					x2 *= currentMatrix.a;
					x3 *= currentMatrix.a;
					y1 *= currentMatrix.d;
					y2 *= currentMatrix.d;
					y3 *= currentMatrix.d;
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					matrix.setTo(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 18:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
				break;
			case 19:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(0);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.closePath(false);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix1 = openfl_geom_Matrix.__pool.get();
				matrix1.copyFrom(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix);
				matrix1.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix1.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix1.__toMatrix3());
				openfl_geom_Matrix.__pool.release(matrix1);
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 4];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 16:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoRenderer = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		this.cairo.identityMatrix();
		if(this.stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2]);
			this.cairo.paint();
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCairo(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid && bitmap.bitmapData.readable) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap,false);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasBlendModeManager"] = openfl__$internal_renderer_canvas_CanvasBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasBlendModeManager"];
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) return;
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.renderSession.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.renderSession.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.renderSession.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.renderSession.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.renderSession.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.renderSession.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.renderSession.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.renderSession.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.renderSession.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.renderSession.context.globalCompositeOperation = "screen";
			break;
		default:
			this.renderSession.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasBlendModeManager
});
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) return;
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) return;
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >> 16 & 255) + "," + (color >> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(displayObject,renderSession);
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) strokeBefore = false;
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	if(!strokeBefore) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		matrix.__transformPoint(point);
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		matrix.__transformPoint(point);
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		matrix.__transformPoint(point2);
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) openfl_geom_Point.__pool.release(point);
	if(point2 != null) openfl_geom_Point.__pool.release(point2);
	if(releaseMatrix) openfl_geom_Matrix.__pool.release(matrix);
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) ellipseHeight = ellipseWidth;
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) ellipseWidth = width / 2;
	if(ellipseHeight > height / 2) ellipseHeight = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 15:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 16:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 13:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.f[c4.fPos]);
				break;
			case 12:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
				break;
			case 14:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.i[c6.iPos],1,c6.buffer.b[c6.bPos],c6.buffer.o[c6.oPos + 1],c6.buffer.o[c6.oPos + 2],c6.buffer.o[c6.oPos + 3],c6.buffer.f[c6.fPos + 1]);
				break;
			case 11:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
				} else {
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],1);
				}
				break;
			case 5:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				break;
			case 6:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				break;
			case 7:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				break;
			case 8:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) hitTest = true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) hitTest = true;
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data.get(t - 1);
		if(max < tmp) max = tmp;
	}
	if(!skipT) return { max : max, uvt : uvt};
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.o[c4.oPos]);
				break;
			case 15:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY);
				positionX = c5.buffer.f[c5.fPos];
				positionY = c5.buffer.f[c5.fPos + 1];
				if(positionX == startX && positionY == startY) closeGap = true;
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				if(setStart) closeGap = true;
				startX = c6.buffer.f[c6.fPos];
				startY = c6.buffer.f[c6.fPos + 1];
				setStart = true;
				break;
			case 14:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c7 = data;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				if(c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
					if(c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
					if(c7.buffer.o[c7.oPos + 3] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c7.buffer.o[c7.oPos + 3]).toLowerCase();
					if(c7.buffer.o[c7.oPos + 2] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
						var _g2 = c7.buffer.o[c7.oPos + 2];
						switch(_g2) {
						case 0:
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
							break;
						default:
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c7.buffer.o[c7.oPos + 2]).toLowerCase();
						}
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.f[c7.fPos + 1];
					if(c7.buffer.f[c7.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.i[c7.iPos] & 16777215,6); else {
						r = (c7.buffer.i[c7.iPos] & 16711680) >>> 16;
						g = (c7.buffer.i[c7.iPos] & 65280) >>> 8;
						b = c7.buffer.i[c7.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.f[c7.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				}
				break;
			case 13:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c8 = data;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 12:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c9 = data;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos],c9.buffer.b[c9.bPos],c9.buffer.b[c9.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 0:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c10.buffer.o[c10.oPos];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],true,c10.buffer.b[c10.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				if(c10.buffer.o[c10.oPos + 1] != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 1:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c11 = data;
				if(c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
					if(c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos] & 16777215,6); else {
						r = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
						g = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
						b = c11.buffer.i[c11.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c11.buffer.f[c11.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				}
				break;
			case 2:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				break;
			case 10:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c13 = data;
				var v = c13.buffer.o[c13.oPos];
				var ind = c13.buffer.o[c13.oPos + 1];
				var uvt = c13.buffer.o[c13.oPos + 2];
				var pattern = null;
				var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g21 = Std["int"](v.data.get_length() / 2);
						while(_g3 < _g21) {
							var i1 = _g3++;
							var x4 = v.data.get(i1 * 2) - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
							uvt.data.push(x4);
							var x5 = v.data.get(i1 * 2 + 1) - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
							uvt.data.push(x5);
						}
					}
					var skipT = uvt.data.get_length() != v.data.get_length();
					var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
				}
				var i = 0;
				var l = ind.data.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.data.get(a_) * 2;
					iay = ind.data.get(a_) * 2 + 1;
					ibx = ind.data.get(b_) * 2;
					iby = ind.data.get(b_) * 2 + 1;
					icx = ind.data.get(c_) * 2;
					icy = ind.data.get(c_) * 2 + 1;
					x1 = v.data.get(iax) - offsetX;
					y1 = v.data.get(iay) - offsetY;
					x2 = v.data.get(ibx) - offsetX;
					y2 = v.data.get(iby) - offsetY;
					x3 = v.data.get(icx) - offsetX;
					y3 = v.data.get(icy) - offsetY;
					var _g22 = c13.buffer.o[c13.oPos + 3];
					switch(_g22) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
						i += 3;
						continue;
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
					uvx1 = uvt.data.get(iax) * pattern.width;
					uvx2 = uvt.data.get(ibx) * pattern.width;
					uvx3 = uvt.data.get(icx) * pattern.width;
					uvy1 = uvt.data.get(iay) * pattern.height;
					uvy2 = uvt.data.get(iby) * pattern.height;
					uvy3 = uvt.data.get(icy) * pattern.height;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					i += 3;
				}
				break;
			case 7:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c14 = data;
				optimizationUsed = false;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					st = 0;
					sr = 0;
					sb = 0;
					sl = 0;
					canOptimizeMatrix = true;
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
						if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
							if(stl == null) stl = openfl_geom_Point.__pool.get();
							if(sbr == null) sbr = openfl_geom_Point.__pool.get();
							stl.setTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.__transformPoint(stl);
							sbr.setTo(c14.buffer.f[c14.fPos] + c14.buffer.f[c14.fPos + 2],c14.buffer.f[c14.fPos + 1] + c14.buffer.f[c14.fPos + 3]);
							openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.__transformPoint(sbr);
							st = stl.y;
							sl = stl.x;
							sb = sbr.y;
							sr = sbr.x;
						}
					} else {
						st = c14.buffer.f[c14.fPos + 1];
						sl = c14.buffer.f[c14.fPos];
						sb = c14.buffer.f[c14.fPos + 1] + c14.buffer.f[c14.fPos + 3];
						sr = c14.buffer.f[c14.fPos] + c14.buffer.f[c14.fPos + 2];
					}
					if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
						optimizationUsed = true;
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY,c14.buffer.f[c14.fPos + 2],c14.buffer.f[c14.fPos + 3]);
					}
				}
				if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY,c14.buffer.f[c14.fPos + 2],c14.buffer.f[c14.fPos + 3]);
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(stl != null) openfl_geom_Point.__pool.release(stl);
	if(sbr != null) openfl_geom_Point.__pool.release(sbr);
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		} else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			if(canvas.width == scaledWidth && canvas.height == scaledHeight) openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight); else {
				canvas.width = width;
				canvas.height = height;
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 3:
					var c;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					c = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]); else {
						initStrokeX = c.buffer.f[c.fPos + 4];
						initStrokeY = c.buffer.f[c.fPos + 5];
					}
					break;
				case 4:
					var c1;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					c1 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]); else {
						initStrokeX = c1.buffer.f[c1.fPos + 2];
						initStrokeY = c1.buffer.f[c1.fPos + 3];
					}
					break;
				case 15:
					var c2;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					c2 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]); else {
						initStrokeX = c2.buffer.f[c2.fPos];
						initStrokeY = c2.buffer.f[c2.fPos + 1];
					}
					break;
				case 16:
					var c3;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					c3 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]); else {
						initStrokeX = c3.buffer.f[c3.fPos];
						initStrokeY = c3.buffer.f[c3.fPos + 1];
					}
					break;
				case 11:
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 13:
					var c4;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					c4 = data;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.f[c4.fPos]);
					break;
				case 12:
					var c5;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					c5 = data;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
					break;
				case 14:
					var c6;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					c6 = data;
					if(!hasLineStyle && c6.buffer.o[c6.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c6.buffer.o[c6.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.i[c6.iPos],c6.buffer.f[c6.fPos],c6.buffer.b[c6.bPos],c6.buffer.o[c6.oPos + 1],c6.buffer.o[c6.oPos + 2],c6.buffer.o[c6.oPos + 3],c6.buffer.f[c6.fPos + 1]);
					break;
				case 0:case 1:case 2:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						var c7;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						c7 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						var c8;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						c8 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
					} else {
						var c9;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						c9 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
					}
					break;
				case 5:
					var c10;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					c10 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
					break;
				case 6:
					var c11;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					c11 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
					break;
				case 7:
					var c12;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					c12 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
					break;
				case 8:
					var c13;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					c13 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
					if(hasLineStyle) openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
					break;
				case 10:
					var c14;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					c14 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c14.buffer.o[c14.oPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3]);
					break;
				case 18:
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 19:
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					data.advance();
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 16:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) smooth = false;
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(!object.__cacheBitmapRender && object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(!object.__cacheBitmapRender && object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.context = context;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(this.renderSession);
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
	var config = stage.window.config;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"allowHighDPI") && config.allowHighDPI) openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) this.context.clearRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCanvas(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.blendModeManager.setBlendMode(shape.__worldBlendMode);
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) graphics.__bounds = new openfl_geom_Rectangle();
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.data.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.data.get_length()) {
					var group = _g11.data.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					if(group.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
						var x = group.offsetX + scrollX;
						var y = group.offsetY + offsetY + scrollY + group.ascent;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color & 16777215,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					if(textField.__filters != null && textField.__filters.length > 0) {
						if(js_Boot.__instanceof(textField.__filters[0],openfl_filters_GlowFilter)) {
							var glowFilter = textField.__filters[0];
							var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
							openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.alpha;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(glowFilter.color & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.blurX,glowFilter.blurY);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
							openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.positions.length <= i1) break;
									advance += group.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g31 = 0;
								var _g22 = textField.get_scrollV() - 1;
								while(_g31 < _g22) {
									var i2 = _g31++;
									scrollY1 -= textEngine.lineHeights.data.get(i2);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance - textField.get_scrollH(),scrollY1 + 2,1,openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex || group.startIndex > textField.__caretIndex && group.endIndex < textField.__selectionIndex || group.startIndex > textField.__selectionIndex && group.endIndex < textField.__caretIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
								end = textField.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i3 = _g12++;
						scrollY2 -= textEngine.lineHeights.data.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid && bitmap.bitmapData.readable) {
		renderSession.maskManager.pushObject(bitmap);
		if(bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		renderSession.maskManager.popObject(bitmap);
	} else openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		bitmap.__canvas.width = bitmap.bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.bitmapData.width;
		bitmap.__canvas.height = bitmap.bitmapData.height;
		bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderSession) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
	}
	openfl__$internal_renderer_dom_DOMShape.render(displayObject,renderSession);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) clipRect.height = 0;
		if(clipRect.width < 0) clipRect.width = 0;
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) this.currentClipRect = this.clipRects[this.numClipRects - 1]; else this.currentClipRect = null;
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) displayObject.__worldClip = new openfl_geom_Rectangle();
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) displayObject.__worldClipChanged = false; else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__renderTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	var maskManager = renderSession.maskManager;
	maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) this.element.style.background = this.stage.__colorString; else this.element.style.background = "none";
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderSession) {
	if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) renderSession.element.removeChild(shape.__canvas);
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
			} else openfl__$internal_renderer_dom_DOMShape.clear(shape,renderSession);
		}
		if(shape.__canvas != null) {
			renderSession.maskManager.pushObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(shape,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(shape);
		}
	} else openfl__$internal_renderer_dom_DOMShape.clear(shape,renderSession);
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderSession) {
	if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							if(textField.__displayAsPassword) {
							}
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) textField.__style.setProperty("white-space","nowrap",null); else textField.__style.setProperty("word-wrap","break-word",null);
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null); else style.removeProperty("background-color");
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) text = StringTools.htmlEscape(text); else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) size = scaledSize + adjustment; else size = adjustment;
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.replace(text,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += adjustment | 0;
				textField.__div.innerHTML = new EReg("\r\n","g").replace(text,"<br>");
				textField.__div.innerHTML = new EReg("\n","g").replace(textField.__div.innerHTML,"<br>");
				textField.__div.innerHTML = new EReg("\r","g").replace(textField.__div.innerHTML,"<br>");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderSession.roundPixels;
			renderSession.roundPixels = true;
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
			renderSession.roundPixels = old;
		}
	} else openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderSession);
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) return regex.matched(2); else return regex.matched(3);
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		renderSession.filterManager.pushObject(bitmap);
		var shader = renderSession.shaderManager.initShader(bitmap.shader);
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		var useColorTransform = !bitmap.__worldColorTransform.__isDefault();
		if(shader.get_data().uColorTransform.value == null) shader.get_data().uColorTransform.value = [];
		shader.get_data().uColorTransform.value[0] = useColorTransform;
		renderSession.shaderManager.updateShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 1,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 2,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56));
		gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 3,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72));
		gl.vertexAttribPointer(shader.get_data().aColorOffsets.index,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
openfl__$internal_renderer_opengl_GLBitmap.renderMask = function(bitmap,renderSession) {
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.updateShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.__context.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) return;
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.__context.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) return;
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) return;
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.__context.clearColor((color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,1);
		gl.__context.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) openfl__$internal_renderer_opengl_GLShape.render(displayObject,renderSession);
};
openfl__$internal_renderer_opengl_GLDisplayObject.renderMask = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) return;
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		var gl = renderSession.gl;
	}
	if(displayObject.__graphics != null) openfl__$internal_renderer_opengl_GLShape.renderMask(displayObject,renderSession);
};
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		return this.renderSession.shaderManager.defaultShader;
		if(object.__filters != null && object.__filters.length > 0) {
			if(js_Boot.__instanceof(object.__filters[0],openfl_filters_GlowFilter) && js_Boot.__instanceof(object,openfl_text_TextField)) return this.renderSession.shaderManager.defaultShader;
			if(object.__filters.length == 1 && object.__filters[0].__numShaderPasses == 0) {
				this.renderer.getRenderTarget(false);
				return object.__filters[0].__initShader(this.renderSession,0);
			} else this.renderer.getRenderTarget(true);
			this.filterDepth++;
		}
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		return;
		if(object.__filters != null && object.__filters.length > 0) {
			if(js_Boot.__instanceof(object.__filters[0],openfl_filters_GlowFilter) && js_Boot.__instanceof(object,openfl_text_TextField)) return;
			var numPasses = 0;
			if(object.__filters.length > 1 || object.__filters[0].__numShaderPasses > 0) {
				numPasses = object.__filters.length;
				var _g = 0;
				var _g1 = object.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__numShaderPasses > 0) numPasses += filter.__numShaderPasses - 1; else numPasses += 0;
				}
			}
			if(numPasses > 0) {
				var currentTarget;
				var shader;
				var _g2 = 0;
				var _g11 = object.__filters;
				while(_g2 < _g11.length) {
					var filter1 = _g11[_g2];
					++_g2;
					var _g3 = 0;
					var _g21 = filter1.__numShaderPasses;
					while(_g3 < _g21) {
						var i = _g3++;
						currentTarget = this.renderer.currentRenderTarget;
						this.renderer.getRenderTarget(true);
						shader = filter1.__initShader(this.renderSession,i);
						this.renderPass(currentTarget,shader);
					}
					this.filterDepth--;
					currentTarget = this.renderer.currentRenderTarget;
					this.renderer.getRenderTarget(this.filterDepth > 0);
					this.renderPass(currentTarget,this.renderSession.shaderManager.defaultShader);
				}
			} else this.filterDepth--;
		}
	}
	,renderPass: function(target,shader) {
		if(target == null || shader == null) return;
		shader.get_data().uImage0.input = target;
		shader.get_data().uImage0.smoothing = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		if(shader.get_data().uColorTransform != null) {
			if(shader.get_data().uColorTransform.value == null) shader.get_data().uColorTransform.value = [];
			shader.get_data().uColorTransform.value[0] = false;
		}
		this.renderSession.shaderManager.setShader(shader);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,target.getBuffer(this.gl,1,null));
		this.gl.vertexAttribPointer(shader.get_data().aPosition.index,3,this.gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
		this.gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,this.gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
		this.gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,this.gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20));
		this.gl.__context.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = vColorOffsets + (color * vColorMultipliers);\n\t\t\t\t\n\t\t\t\tif (color.a > 0.0) {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute mat4 aColorMultipliers;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers = aColorMultipliers;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) this.__disableGL();
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) this.get_data().uImage0.input = null;
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.__context.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.__context.bindTexture(this.gl.TEXTURE_2D,null);
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL) this.gl.__context.disable(this.gl.TEXTURE_2D);
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) this.__enableGL();
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			textureCount++;
		}
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL && textureCount > 0) this.gl.__context.enable(this.gl.TEXTURE_2D);
	}
	,__init: function() {
		if(this.__data == null) this.__data = new openfl_display_ShaderData(null);
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) this.__initGL();
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			var this1;
			this1 = new Float32Array(4);
			this.__uniformMatrix2 = this1;
			var this2;
			this2 = new Float32Array(9);
			this.__uniformMatrix3 = this2;
			var this3;
			this3 = new Float32Array(16);
			this.__uniformMatrix4 = this3;
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment;
			fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1?"mediump":"lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(this.__isUniform.get(input.name)) input.index = this.gl.__context.getUniformLocation(this.glProgram,input.name); else input.index = this.gl.__context.getAttribLocation(this.glProgram,input.name);
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					if(this.__isUniform.get(parameter.name)) parameter.index = this.gl.__context.getUniformLocation(this.glProgram,parameter.name); else parameter.index = this.gl.__context.getAttribLocation(this.glProgram,parameter.name);
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					if(this.__isUniform.get(parameter1.name)) parameter1.index = this.gl.__context.getUniformLocation(this.glProgram,parameter1.name); else parameter1.index = this.gl.__context.getAttribLocation(this.glProgram,parameter1.name);
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					if(this.__isUniform.get(parameter2.name)) parameter2.index = this.gl.__context.getUniformLocation(this.glProgram,parameter2.name); else parameter2.index = this.gl.__context.getAttribLocation(this.glProgram,parameter2.name);
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)",""); else regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				Reflect.setField(this.get_data(),name,input);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "vec2":case "dvec2":
					parameterType = 5;
					break;
				case "vec3":case "dvec3":
					parameterType = 6;
					break;
				case "vec4":case "dvec4":
					parameterType = 7;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					Reflect.setField(this.get_data(),name,parameter);
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					Reflect.setField(this.get_data(),name,parameter1);
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					Reflect.setField(this.get_data(),name,parameter2);
				}
			}
			this.__isUniform.set(name,storageType == "uniform");
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) this.__updateGL();
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.__context.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			textureCount++;
		}
		var value;
		var index;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			value = parameter.value;
			index = parameter.index;
			if(value != null) {
				var _g21 = parameter.type;
				switch(_g21) {
				case 0:
					this.gl.__context.uniform1i(index,value[0]?1:0);
					break;
				case 1:
					this.gl.__context.uniform2i(index,value[0]?1:0,value[1]?1:0);
					break;
				case 2:
					this.gl.__context.uniform3i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0);
					break;
				case 3:
					this.gl.__context.uniform4i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0,value[3]?1:0);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter.name)) this.gl.enableVertexAttribArray(parameter.index);
		}
		var value1;
		var index1;
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			value1 = parameter1.value;
			index1 = parameter1.index;
			if(value1 != null) {
				var _g22 = parameter1.type;
				switch(_g22) {
				case 4:
					this.gl.__context.uniform1f(index1,value1[0]);
					break;
				case 5:
					this.gl.__context.uniform2f(index1,value1[0],value1[1]);
					break;
				case 6:
					this.gl.__context.uniform3f(index1,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.__context.uniform4f(index1,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g31 = 0;
					while(_g31 < 4) {
						var i = _g31++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index1,1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix2));
					break;
				case 16:
					var _g32 = 0;
					while(_g32 < 9) {
						var i1 = _g32++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index1,1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix3));
					break;
				case 20:
					var _g33 = 0;
					while(_g33 < 16) {
						var i2 = _g33++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index1,1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix4));
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter1.name)) {
				this.gl.enableVertexAttribArray(parameter1.index);
				var _g23 = parameter1.type;
				switch(_g23) {
				case 12:
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					break;
				case 16:
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					this.gl.enableVertexAttribArray(parameter1.index + 2);
					break;
				case 20:
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					this.gl.enableVertexAttribArray(parameter1.index + 2);
					this.gl.enableVertexAttribArray(parameter1.index + 3);
					break;
				default:
				}
			}
		}
		var value2;
		var index2;
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			value2 = parameter2.value;
			index2 = parameter2.index;
			if(value2 != null) {
				var _g24 = parameter2.type;
				switch(_g24) {
				case 8:
					this.gl.__context.uniform1i(index2,value2[0]);
					break;
				case 9:
					this.gl.__context.uniform2i(index2,value2[0],value2[1]);
					break;
				case 10:
					this.gl.__context.uniform3i(index2,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.__context.uniform4i(index2,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter2.name)) this.gl.enableVertexAttribArray(parameter2.index);
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) this.__init();
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) this.__glSourceDirty = true;
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) this.__glSourceDirty = true;
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl__$internal_renderer_opengl_GLMaskShader = function(code) {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this,code);
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskShader"] = openfl__$internal_renderer_opengl_GLMaskShader;
openfl__$internal_renderer_opengl_GLMaskShader.__name__ = ["openfl","_internal","renderer","opengl","GLMaskShader"];
openfl__$internal_renderer_opengl_GLMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_opengl_GLMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl__$internal_renderer_opengl_GLMaskShader
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.maskObjects = [];
	this.numClipRects = 0;
	this.stencilReference = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,maskObjects: null
	,numClipRects: null
	,stencilReference: null
	,tempRect: null
	,pushMask: function(mask) {
		if(this.stencilReference == 0) {
			this.gl.__context.enable(this.gl.STENCIL_TEST);
			this.gl.__context.stencilMask(255);
			this.gl.__context.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(false,false,false,false);
		mask.__renderGLMask(this.renderSession);
		this.maskObjects.push(mask);
		this.stencilReference++;
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(true,true,true,true);
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) clipRect.height = 0;
		if(clipRect.width < 0) clipRect.width = 0;
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		if(this.stencilReference == 0) return;
		if(this.stencilReference > 1) {
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(false,false,false,false);
			var mask = this.maskObjects.pop();
			mask.__renderGLMask(this.renderSession);
			this.stencilReference--;
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(true,true,true,true);
		} else {
			this.stencilReference = 0;
			this.gl.__context.disable(this.gl.STENCIL_TEST);
		}
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) this.scissorRect(this.clipRects[this.numClipRects - 1]); else this.scissorRect();
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) width = 0;
			if(height < 0) height = 0;
			this.gl.__context.scissor(x,y,width,height);
		} else this.gl.__context.disable(this.gl.SCISSOR_TEST);
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,defaultRenderTarget) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.defaultRenderTarget = defaultRenderTarget;
	this.flipped = defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = gl.__context.getParameter(gl.MAX_TEXTURE_SIZE);
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.gl = gl;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.data.get(0).context3D == null) stage.stage3Ds.data.get(0).__createContext(stage,this.renderSession);
		var width;
		if(defaultRenderTarget != null) width = defaultRenderTarget.width; else width = Math.ceil(stage.window.__width * stage.window.__scale);
		var height;
		if(defaultRenderTarget != null) height = defaultRenderTarget.height; else height = Math.ceil(stage.window.__height * stage.window.__scale);
		this.resize(width,height);
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,defaultRenderTarget: null
	,currentRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) this.gl.__context.clearColor(0,0,0,0); else this.gl.__context.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,getCacheObject: function() {
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped?this.projectionFlipped:this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.values;
	}
	,getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) this.currentRenderTarget = this.renderTargetB; else this.currentRenderTarget = this.renderTargetA;
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentRenderTarget.__getFramebuffer(this.gl));
			this.gl.__context.viewport(0,0,this.width,this.height);
			this.gl.__context.clearColor(0,0,0,0);
			this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.currentRenderTarget = this.defaultRenderTarget;
			var frameBuffer;
			if(this.currentRenderTarget != null) frameBuffer = this.currentRenderTarget.__getFramebuffer(this.gl); else frameBuffer = null;
			this.gl.__context.bindFramebuffer(this.gl.FRAMEBUFFER,frameBuffer);
			this.flipped = this.currentRenderTarget == null;
		}
	}
	,render: function() {
		this.gl.__context.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.__context.clearColor(0,0,0,1);
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.__context.scissor(0,0,this.offsetX,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.__context.scissor(0,0,this.width,this.offsetY);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(width > 0 && height > 0) {
			if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
		}
		if(this.defaultRenderTarget == null) this.displayMatrix = this.stage.__displayMatrix; else this.displayMatrix = new openfl_geom_Matrix();
		var w;
		if(this.defaultRenderTarget == null) w = this.stage.stageWidth; else w = this.defaultRenderTarget.width;
		var h;
		if(this.defaultRenderTarget == null) h = this.stage.stageHeight; else h = this.defaultRenderTarget.height;
		this.offsetX = Math.round(this.displayMatrix.__transformX(0,0));
		this.offsetY = Math.round(this.displayMatrix.__transformY(0,0));
		this.displayWidth = Math.round(this.displayMatrix.__transformX(w,0) - this.offsetX);
		this.displayHeight = Math.round(this.displayMatrix.__transformY(0,h) - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.initShader(this.defaultShader);
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,initShader: function(shader) {
		if(shader != null) {
			if(shader.gl == null) {
				shader.gl = this.gl;
				shader.__init();
			}
			return shader;
		}
		return this.defaultShader;
	}
	,setShader: function(shader) {
		if(this.currentShader == shader) return;
		if(this.currentShader != null) this.currentShader.__disable();
		if(shader == null) {
			this.currentShader = null;
			this.gl.__context.useProgram(null);
			return;
		} else {
			this.currentShader = shader;
			this.initShader(shader);
			this.gl.__context.useProgram(shader.glProgram);
			this.currentShader.__enable();
		}
	}
	,updateShader: function(shader) {
		if(this.currentShader != null) this.currentShader.__update();
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.__worldBlendMode);
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			renderSession.shaderManager.setShader(shader);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			var useColorTransform = !shape.__worldColorTransform.__isDefault();
			if(shader.get_data().uColorTransform.value == null) shader.get_data().uColorTransform.value = [];
			shader.get_data().uColorTransform.value[0] = useColorTransform;
			renderSession.shaderManager.updateShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha,shape.__worldColorTransform));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
			gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 1,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 2,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56));
			gl.vertexAttribPointer(shader.get_data().aColorMultipliers.index + 3,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72));
			gl.vertexAttribPointer(shader.get_data().aColorOffsets.index,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88));
			gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.filterManager.popObject(shape);
			renderSession.maskManager.popObject(shape);
		}
	}
};
openfl__$internal_renderer_opengl_GLShape.renderMask = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
			renderSession.shaderManager.setShader(shader);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.updateShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha,shape.__worldColorTransform));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
			gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
		}
	}
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) return "vc"; else return "fc";
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) return "vt"; else return "ft";
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var x = new haxe__$Int64__$_$_$Int64(high,low);
	return x;
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) return agal.readUTF();
	if(magic != 160) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	var version = agal.readInt();
	if(version != 1) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	var programType;
	if((agal.readByte() & 255) == 0) programType = openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX; else programType = openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb = new StringBuf();
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb.b += "\t";
		switch(opcode) {
		case 0:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) sb.add(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp"); else sb.add(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb.add(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb.add(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb.add(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb.add(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb.add(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb.add(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb.add(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb.add(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb.add(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb.add(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb.add(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb.add(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb.add(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb.add(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb.add("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			var _g = sampler.d;
			switch(_g) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb.add(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb.add(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) samplerState[sampler.n] = sampler.toSamplerState();
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb.b += "\n";
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version1 = lime_graphics_opengl_GL.context.__context.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl = new StringBuf();
	glsl.b += Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX?"vertex":"fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl.b += "#version 100\n";
		glsl.b += "precision highp float;\n";
	} else glsl.b += "#version 120\n";
	glsl.add(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) glsl.b += "uniform vec4 vcPositionScale;\n";
	glsl.b += "void main() {\n";
	glsl.add(map.toGLSL(true));
	if(sb.b == null) glsl.b += "null"; else glsl.b += "" + sb.b;
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) glsl.b += "\tgl_Position *= vcPositionScale;\n";
	glsl.b += "}\n";
	return glsl.b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >> 24 & 15;
	dr.mask = v >> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) str += "x";
		if((this.mask & 2) != 0) str += "y";
		if((this.mask & 4) != 0) str += "z";
		if((this.mask & 8) != 0) str += "w";
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) useMask = true;
		var str;
		if(this.type == 3) if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) str = "gl_Position"; else str = "gl_FragColor"; else str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		if(useMask && this.mask != 15) str += this.getWriteMask();
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry1 = _g1[_g];
			++_g;
			if(entry1.type == type && entry1.name == name && entry1.number == number) {
				if(entry1.usage != usage) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				return;
			}
		}
		var entry = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry.type = type;
		entry.name = name;
		entry.number = number;
		entry.usage = usage;
		this.mEntries.push(entry);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) offset = 0;
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) return entry.usage;
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var arrayCount = new haxe_ds_ObjectMap();
		var entry;
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			entry = this.mEntries[i];
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				if(i < this.mEntries.length - 1) {
					var v = this.mEntries[i + 1].number - entry.number;
					arrayCount.set(entry,v);
					v;
				} else {
					arrayCount.set(entry,128);
					128;
				}
			}
		}
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb = new StringBuf();
		var _g11 = 0;
		var _g2 = this.mEntries.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			entry = this.mEntries[i1];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) continue;
			if(entry.type == 3) continue;
			var _g21 = entry.type;
			switch(_g21) {
			case 0:
				sb.b += "attribute ";
				break;
			case 1:
				sb.b += "uniform ";
				break;
			case 2:
				sb.b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb.b += "varying ";
				break;
			case 5:
				sb.b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g22 = entry.usage;
			switch(_g22[1]) {
			case 1:
				sb.b += "vec4 ";
				break;
			case 6:
				sb.b += "vec4 ";
				break;
			case 2:
				sb.b += "mat4 ";
				break;
			case 3:
				sb.b += "sampler2D ";
				break;
			case 5:
				sb.b += "samplerCube ";
				break;
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 811, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 815, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb.b += "sampler2D ";
				if(entry.name == null) sb.b += "null"; else sb.b += "" + entry.name;
				sb.b += ";\n";
				sb.b += "uniform ";
				sb.b += "sampler2D ";
				sb.b += Std.string(entry.name + "_alpha");
				sb.b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(entry.name + "[" + arrayCount.h[entry.__id__] + "]");
				sb.b += ";\n";
			} else {
				if(entry.name == null) sb.b += "null"; else sb.b += "" + entry.name;
				sb.b += ";\n";
			}
		}
		return sb.b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var this1;
	var a;
	var b1 = 60;
	b1 &= 63;
	if(b1 == 0) {
		var x1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = x1;
	} else if(b1 < 32) {
		var x2 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a = x2;
	} else {
		var x3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a = x3;
	}
	var b;
	{
		var x4 = new haxe__$Int64__$_$_$Int64(0,15);
		b = x4;
	}
	var x = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	this1 = x;
	sr.f = this1.low;
	var this2;
	var a1;
	var b3 = 56;
	b3 &= 63;
	if(b3 == 0) {
		var x6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = x6;
	} else if(b3 < 32) {
		var x7 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a1 = x7;
	} else {
		var x8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a1 = x8;
	}
	var b2;
	{
		var x9 = new haxe__$Int64__$_$_$Int64(0,15);
		b2 = x9;
	}
	var x5 = new haxe__$Int64__$_$_$Int64(a1.high & b2.high,a1.low & b2.low);
	this2 = x5;
	sr.m = this2.low;
	var this3;
	var a2;
	var b5 = 52;
	b5 &= 63;
	if(b5 == 0) {
		var x11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = x11;
	} else if(b5 < 32) {
		var x12 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
		a2 = x12;
	} else {
		var x13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
		a2 = x13;
	}
	var b4;
	{
		var x14 = new haxe__$Int64__$_$_$Int64(0,15);
		b4 = x14;
	}
	var x10 = new haxe__$Int64__$_$_$Int64(a2.high & b4.high,a2.low & b4.low);
	this3 = x10;
	sr.w = this3.low;
	var this4;
	var a3;
	var b7 = 48;
	b7 &= 63;
	if(b7 == 0) {
		var x16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = x16;
	} else if(b7 < 32) {
		var x17 = new haxe__$Int64__$_$_$Int64(v.high >> b7,v.high << 32 - b7 | v.low >>> b7);
		a3 = x17;
	} else {
		var x18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b7 - 32);
		a3 = x18;
	}
	var b6;
	{
		var x19 = new haxe__$Int64__$_$_$Int64(0,15);
		b6 = x19;
	}
	var x15 = new haxe__$Int64__$_$_$Int64(a3.high & b6.high,a3.low & b6.low);
	this4 = x15;
	sr.s = this4.low;
	var this5;
	var a4;
	var b9 = 44;
	b9 &= 63;
	if(b9 == 0) {
		var x21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = x21;
	} else if(b9 < 32) {
		var x22 = new haxe__$Int64__$_$_$Int64(v.high >> b9,v.high << 32 - b9 | v.low >>> b9);
		a4 = x22;
	} else {
		var x23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b9 - 32);
		a4 = x23;
	}
	var b8;
	{
		var x24 = new haxe__$Int64__$_$_$Int64(0,15);
		b8 = x24;
	}
	var x20 = new haxe__$Int64__$_$_$Int64(a4.high & b8.high,a4.low & b8.low);
	this5 = x20;
	sr.d = this5.low;
	var this6;
	var a5;
	var b11 = 40;
	b11 &= 63;
	if(b11 == 0) {
		var x26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = x26;
	} else if(b11 < 32) {
		var x27 = new haxe__$Int64__$_$_$Int64(v.high >> b11,v.high << 32 - b11 | v.low >>> b11);
		a5 = x27;
	} else {
		var x28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b11 - 32);
		a5 = x28;
	}
	var b10;
	{
		var x29 = new haxe__$Int64__$_$_$Int64(0,15);
		b10 = x29;
	}
	var x25 = new haxe__$Int64__$_$_$Int64(a5.high & b10.high,a5.low & b10.low);
	this6 = x25;
	sr.t = this6.low;
	sr.type = (function($this) {
		var $r;
		var this7;
		{
			var a6;
			var b13 = 32;
			b13 &= 63;
			if(b13 == 0) {
				var x31 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
				a6 = x31;
			} else if(b13 < 32) {
				var x32 = new haxe__$Int64__$_$_$Int64(v.high >> b13,v.high << 32 - b13 | v.low >>> b13);
				a6 = x32;
			} else {
				var x33 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b13 - 32);
				a6 = x33;
			}
			var b12;
			{
				var x34 = new haxe__$Int64__$_$_$Int64(0,15);
				b12 = x34;
			}
			var x30 = new haxe__$Int64__$_$_$Int64(a6.high & b12.high,a6.low & b12.low);
			this7 = x30;
		}
		$r = this7.low;
		return $r;
	}(this));
	var this8;
	var a7;
	var b15 = 16;
	b15 &= 63;
	if(b15 == 0) {
		var x36 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = x36;
	} else if(b15 < 32) {
		var x37 = new haxe__$Int64__$_$_$Int64(v.high >> b15,v.high << 32 - b15 | v.low >>> b15);
		a7 = x37;
	} else {
		var x38 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b15 - 32);
		a7 = x38;
	}
	var b14;
	{
		var x39 = new haxe__$Int64__$_$_$Int64(0,255);
		b14 = x39;
	}
	var x35 = new haxe__$Int64__$_$_$Int64(a7.high & b14.high,a7.low & b14.low);
	this8 = x35;
	sr.b = this8.low;
	var this9;
	var b16;
	{
		var x41 = new haxe__$Int64__$_$_$Int64(0,65535);
		b16 = x41;
	}
	var x40 = new haxe__$Int64__$_$_$Int64(v.high & b16.high,v.low & b16.low);
	this9 = x40;
	sr.n = this9.low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		var _g = this.f;
		switch(_g) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = this.m;
		switch(_g1) {
		case 0:
			if(this.f != 0) minFilter = 9729; else minFilter = 9728;
			break;
		case 1:
			if(this.f != 0) minFilter = 9985; else minFilter = 9984;
			break;
		case 2:
			if(this.f != 0) minFilter = 9987; else minFilter = 9986;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g2 = this.w;
		switch(_g2) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		var maxAniso = 0.0;
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var this1;
	var a;
	var b1 = 63;
	b1 &= 63;
	if(b1 == 0) {
		var x1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = x1;
	} else if(b1 < 32) {
		var x2 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a = x2;
	} else {
		var x3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a = x3;
	}
	var b;
	{
		var x4 = new haxe__$Int64__$_$_$Int64(0,1);
		b = x4;
	}
	var x = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	this1 = x;
	sr.d = this1.low;
	var this2;
	var a1;
	var b3 = 48;
	b3 &= 63;
	if(b3 == 0) {
		var x6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = x6;
	} else if(b3 < 32) {
		var x7 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a1 = x7;
	} else {
		var x8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a1 = x8;
	}
	var b2;
	{
		var x9 = new haxe__$Int64__$_$_$Int64(0,3);
		b2 = x9;
	}
	var x5 = new haxe__$Int64__$_$_$Int64(a1.high & b2.high,a1.low & b2.low);
	this2 = x5;
	sr.q = this2.low;
	sr.itype = (function($this) {
		var $r;
		var this3;
		{
			var a2;
			var b5 = 40;
			b5 &= 63;
			if(b5 == 0) {
				var x11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
				a2 = x11;
			} else if(b5 < 32) {
				var x12 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
				a2 = x12;
			} else {
				var x13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
				a2 = x13;
			}
			var b4;
			{
				var x14 = new haxe__$Int64__$_$_$Int64(0,15);
				b4 = x14;
			}
			var x10 = new haxe__$Int64__$_$_$Int64(a2.high & b4.high,a2.low & b4.low);
			this3 = x10;
		}
		$r = this3.low;
		return $r;
	}(this));
	sr.type = (function($this) {
		var $r;
		var this4;
		{
			var a3;
			var b7 = 32;
			b7 &= 63;
			if(b7 == 0) {
				var x16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
				a3 = x16;
			} else if(b7 < 32) {
				var x17 = new haxe__$Int64__$_$_$Int64(v.high >> b7,v.high << 32 - b7 | v.low >>> b7);
				a3 = x17;
			} else {
				var x18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b7 - 32);
				a3 = x18;
			}
			var b6;
			{
				var x19 = new haxe__$Int64__$_$_$Int64(0,15);
				b6 = x19;
			}
			var x15 = new haxe__$Int64__$_$_$Int64(a3.high & b6.high,a3.low & b6.low);
			this4 = x15;
		}
		$r = this4.low;
		return $r;
	}(this));
	var this5;
	var a4;
	var b9 = 24;
	b9 &= 63;
	if(b9 == 0) {
		var x21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = x21;
	} else if(b9 < 32) {
		var x22 = new haxe__$Int64__$_$_$Int64(v.high >> b9,v.high << 32 - b9 | v.low >>> b9);
		a4 = x22;
	} else {
		var x23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b9 - 32);
		a4 = x23;
	}
	var b8;
	{
		var x24 = new haxe__$Int64__$_$_$Int64(0,255);
		b8 = x24;
	}
	var x20 = new haxe__$Int64__$_$_$Int64(a4.high & b8.high,a4.low & b8.low);
	this5 = x20;
	sr.s = this5.low;
	var this6;
	var a5;
	var b11 = 16;
	b11 &= 63;
	if(b11 == 0) {
		var x26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = x26;
	} else if(b11 < 32) {
		var x27 = new haxe__$Int64__$_$_$Int64(v.high >> b11,v.high << 32 - b11 | v.low >>> b11);
		a5 = x27;
	} else {
		var x28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b11 - 32);
		a5 = x28;
	}
	var b10;
	{
		var x29 = new haxe__$Int64__$_$_$Int64(0,255);
		b10 = x29;
	}
	var x25 = new haxe__$Int64__$_$_$Int64(a5.high & b10.high,a5.low & b10.low);
	this6 = x25;
	sr.o = this6.low;
	var this7;
	var b12;
	{
		var x31 = new haxe__$Int64__$_$_$Int64(0,65535);
		b12 = x31;
	}
	var x30 = new haxe__$Int64__$_$_$Int64(v.high & b12.high,v.low & b12.low);
	this7 = x30;
	sr.n = this7.low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) offset = 0;
		if(emitSwizzle == null) emitSwizzle = true;
		if(this.type == 3) if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) return "gl_Position"; else return "gl_FragColor";
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					var _g1 = this.s >> i * 2 & 3;
					switch(_g1) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) str += this.n + offset; else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			var indexRegister = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") str += "." + swizzle;
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var numFloats = 4096;
		var _g = 0;
		while(_g < numFloats) {
			var c = _g++;
			this._registers.data.set(c,-999999999.0);
		}
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLCompressedTextureFormats = function(gl) {
	this.__formatMapAlpha = new haxe_ds_IntMap();
	this.__formatMap = new haxe_ds_IntMap();
	this.checkDXT(gl);
	this.checkETC1(gl);
	this.checkPVRTC(gl);
};
$hxClasses["openfl._internal.stage3D.GLCompressedTextureFormats"] = openfl__$internal_stage3D_GLCompressedTextureFormats;
openfl__$internal_stage3D_GLCompressedTextureFormats.__name__ = ["openfl","_internal","stage3D","GLCompressedTextureFormats"];
openfl__$internal_stage3D_GLCompressedTextureFormats.prototype = {
	__formatMap: null
	,__formatMapAlpha: null
	,checkDXT: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_s3tc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			this.__formatMap.h[0] = v;
			v;
			var v1 = compressedExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			this.__formatMapAlpha.h[0] = v1;
			v1;
		}
	}
	,checkETC1: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_etc1");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMap.h[2] = v;
			v;
		}
	}
	,checkPVRTC: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			this.__formatMap.h[1] = v;
			v;
			var v1 = compressedExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			this.__formatMapAlpha.h[1] = v1;
			v1;
		}
	}
	,toTextureFormat: function(alpha,gpuFormat) {
		if(alpha) return this.__formatMap.h[gpuFormat]; else return this.__formatMapAlpha.h[gpuFormat];
	}
	,__class__: openfl__$internal_stage3D_GLCompressedTextureFormats
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) return;
	var error = lime_graphics_opengl_GL.context.__context.getError();
	if(error != 0) {
		var errorText;
		switch(error) {
		case 0:
			errorText = "GL_NO_ERROR";
			break;
		case 1280:
			errorText = "GL_INVALID_ENUM";
			break;
		case 1282:
			errorText = "GL_INVALID_OPERATION";
			break;
		case 1286:
			errorText = "GL_INVALID_FRAMEBUFFER_OPERATION";
			break;
		case 1281:
			errorText = "GL_INVALID_VALUE";
			break;
		case 1285:
			errorText = "GL_OUT_OF_MEMORY";
			break;
		default:
			if(error == null) errorText = "null"; else errorText = "" + error;
		}
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + errorText + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid,mipmapGenerated) {
	if(mipmapGenerated == null) mipmapGenerated = false;
	if(centroid == null) centroid = false;
	if(ignoreSampler == null) ignoreSampler = false;
	if(maxAniso == null) maxAniso = 0.0;
	if(lodBias == null) lodBias = 0.0;
	this.set_minFilter(minFilter);
	this.set_magFilter(magFilter);
	this.set_wrapModeS(wrapModeS);
	this.set_wrapModeT(wrapModeT);
	this.set_lodBias(lodBias);
	this.set_maxAniso(maxAniso);
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.mipmapGenerated = mipmapGenerated;
	this.__samplerDirty = true;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,centroid: null
	,ignoreSampler: null
	,mipmapGenerated: null
	,__samplerDirty: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) return;
		this.set_minFilter(other.minFilter);
		this.set_magFilter(other.magFilter);
		this.set_wrapModeS(other.wrapModeS);
		this.set_wrapModeT(other.wrapModeT);
		this.set_lodBias(other.lodBias);
		this.set_maxAniso(other.maxAniso);
		this.centroid = other.centroid;
		this.mipmapGenerated = other.mipmapGenerated;
	}
	,equals: function(other) {
		if(this == other) return !this.__samplerDirty;
		if(other == null) return false;
		return this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias && this.maxAniso == other.maxAniso && this.mipmapGenerated == other.mipmapGenerated;
	}
	,set_lodBias: function(value) {
		if(this.lodBias != value) this.__samplerDirty = true;
		return this.lodBias = value;
	}
	,set_magFilter: function(value) {
		if(this.magFilter != value) this.__samplerDirty = true;
		return this.magFilter = value;
	}
	,set_maxAniso: function(value) {
		if(this.maxAniso != value) this.__samplerDirty = true;
		return this.maxAniso = value;
	}
	,set_minFilter: function(value) {
		if(this.minFilter != value) this.__samplerDirty = true;
		return this.minFilter = value;
	}
	,set_wrapModeS: function(value) {
		if(this.wrapModeS != value) this.__samplerDirty = true;
		return this.wrapModeS = value;
	}
	,set_wrapModeT: function(value) {
		if(this.wrapModeT != value) this.__samplerDirty = true;
		return this.wrapModeT = value;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
	,__properties__: {set_wrapModeT:"set_wrapModeT",set_wrapModeS:"set_wrapModeS",set_minFilter:"set_minFilter",set_maxAniso:"set_maxAniso",set_magFilter:"set_magFilter",set_lodBias:"set_lodBias"}
};
var openfl__$internal_stage3D_atf_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(js_Boot.__cast(byteArrayOffset + length , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	this.data = data;
};
$hxClasses["openfl._internal.stage3D.atf.ATFReader"] = openfl__$internal_stage3D_atf_ATFReader;
openfl__$internal_stage3D_atf_ATFReader.__name__ = ["openfl","_internal","stage3D","atf","ATFReader"];
openfl__$internal_stage3D_atf_ATFReader.prototype = {
	data: null
	,version: null
	,cubeMap: null
	,width: null
	,height: null
	,mipCount: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >> 7;
		if(!cubeMap && type != 0) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		if(cubeMap && type != 1) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		this.cubeMap = cubeMap;
		var atfFormat = tdata & 127;
		if(atfFormat != 3 && atfFormat != 5) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Only ATF block compressed textures without JPEG-XR+LZMA are supported"));
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		this.mipCount = this.data.readUnsignedByte();
		return atfFormat == 3;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats;
		if(this.version < 3) gpuFormats = 3; else gpuFormats = 4;
		var sideCount;
		if(this.cubeMap) sideCount = 6; else sideCount = 1;
		var _g = 0;
		while(_g < sideCount) {
			var side = _g++;
			var _g2 = 0;
			var _g1 = this.mipCount;
			while(_g2 < _g1) {
				var level = _g2++;
				var _g3 = 0;
				while(_g3 < gpuFormats) {
					var gpuFormat = _g3++;
					var blockLength;
					if(this.version == 0) blockLength = this.__readUInt24(this.data); else blockLength = this.__readUInt32(this.data);
					if(_$UInt_UInt_$Impl_$.gt(this.data.position + blockLength,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.data))) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						this.data.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes),0,blockLength);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes));
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value;
		value = data.readUnsignedByte() << 16;
		var b = data.readUnsignedByte() << 8;
		value = value | b;
		var b1 = data.readUnsignedByte();
		value = value | b1;
		return value;
	}
	,__readUInt32: function(data) {
		var value;
		value = data.readUnsignedByte() << 24;
		var b = data.readUnsignedByte() << 16;
		value = value | b;
		var b1 = data.readUnsignedByte() << 8;
		value = value | b1;
		var b2 = data.readUnsignedByte();
		value = value | b2;
		return value;
	}
	,__class__: openfl__$internal_stage3D_atf_ATFReader
};
var openfl__$internal_stage3D_opengl_GLContext3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLContext3D"] = openfl__$internal_stage3D_opengl_GLContext3D;
openfl__$internal_stage3D_opengl_GLContext3D.__name__ = ["openfl","_internal","stage3D","opengl","GLContext3D"];
openfl__$internal_stage3D_opengl_GLContext3D.create = function(context) {
	var gl = context.__renderSession.gl;
	var this1;
	this1 = new Float32Array(512);
	context.__vertexConstants = this1;
	var this2;
	this2 = new Float32Array(512);
	context.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) this3 = new Float32Array(array); else this3 = null;
	context.__positionScale = this3;
	context.__samplerDirty = 0;
	context.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	context.__samplerStates = [];
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		context.__samplerStates[i] = new openfl__$internal_stage3D_SamplerState(gl.LINEAR,gl.LINEAR,gl.CLAMP_TO_EDGE,gl.CLAMP_TO_EDGE);
	}
	context.maxBackBufferHeight = context.maxBackBufferWidth = gl.__context.getParameter(gl.MAX_VIEWPORT_DIMS);
	context.__backBufferAntiAlias = 0;
	context.__backBufferEnableDepthAndStencil = true;
	context.__backBufferWantsBestResolution = false;
	context.__frameCount = 0;
	context.__rttDepthAndStencil = false;
	context.__samplerDirty = 0;
	context.__stencilCompareMode = 0;
	context.__stencilRef = 0;
	context.__stencilReadMask = 255;
	var anisoExtension = gl.__context.getExtension("EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) anisoExtension = gl.__context.getExtension("MOZ_EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) anisoExtension = gl.__context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
	context.__supportsPackedDepthStencil = true;
	openfl_display3D_Context3D.DEPTH_STENCIL = gl.DEPTH_STENCIL;
	context.__supportsAnisotropicFiltering = anisoExtension != null;
	if(context.__supportsAnisotropicFiltering) {
		openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
		var maxAnisotropy = gl.getParameter(anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		context.__maxAnisotropyTexture2D = maxAnisotropy;
		context.__maxAnisotropyTexture2D = maxAnisotropy;
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = gl.__context.getParameter(gl.VENDOR);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = gl.__context.getParameter(gl.VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = gl.__context.getParameter(gl.RENDERER);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = gl.__context.getParameter(gl.SHADING_LANGUAGE_VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
};
openfl__$internal_stage3D_opengl_GLContext3D.clear = function(context,red,green,blue,alpha,depth,stencil,mask) {
	if(mask == null) mask = 7;
	if(stencil == null) stencil = 0;
	if(depth == null) depth = 1;
	if(alpha == null) alpha = 1;
	if(blue == null) blue = 0;
	if(green == null) green = 0;
	if(red == null) red = 0;
	var gl = context.__renderSession.gl;
	var clearMask = 0;
	if((mask & 1) != 0) {
		clearMask |= gl.COLOR_BUFFER_BIT;
		gl.__context.clearColor(red,green,blue,alpha);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	if((mask & 2) != 0) {
		clearMask |= gl.DEPTH_BUFFER_BIT;
		gl.__context.depthMask(true);
		gl.__context.clearDepth(depth);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	if((mask & 4) != 0) {
		clearMask |= gl.STENCIL_BUFFER_BIT;
		gl.__context.clearStencil(stencil);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	gl.__context.clear(clearMask);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.configureBackBuffer = function(context,width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
	if(wantsBestResolutionOnBrowserZoom == null) wantsBestResolutionOnBrowserZoom = false;
	if(wantsBestResolution == null) wantsBestResolution = false;
	if(enableDepthAndStencil == null) enableDepthAndStencil = true;
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
	context.backBufferWidth = width;
	context.backBufferHeight = height;
	context.__backBufferAntiAlias = antiAlias;
	context.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
	context.__backBufferWantsBestResolution = wantsBestResolution;
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
openfl__$internal_stage3D_opengl_GLContext3D.dispose = function(context,recreate) {
	if(recreate == null) recreate = true;
};
openfl__$internal_stage3D_opengl_GLContext3D.drawToBitmapData = function(context,destination) {
	var $window = context.__stage3D.__stage.window;
	if($window != null) {
		var image = $window.renderer.readPixels();
		var heightOffset = image.height - context.backBufferHeight;
		destination.image.copyPixels(image,new lime_math_Rectangle(context.__stage3D.x | 0,context.__stage3D.y + heightOffset | 0,context.backBufferWidth,context.backBufferHeight),new lime_math_Vector2());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.drawTriangles = function(context,indexBuffer,firstIndex,numTriangles) {
	if(numTriangles == null) numTriangles = -1;
	if(firstIndex == null) firstIndex = 0;
	if(context.__program == null) return;
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__flushSamplerState();
	context.__program.__flush();
	var count;
	if(numTriangles == -1) count = indexBuffer.__numIndices; else count = numTriangles * 3;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.bindBuffer(openfl__$internal_stage3D_opengl_GLContext3D.gl.ELEMENT_ARRAY_BUFFER,indexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.drawElements(openfl__$internal_stage3D_opengl_GLContext3D.gl.TRIANGLES,count,indexBuffer.__elementType,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(firstIndex));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.present = function(context) {
};
openfl__$internal_stage3D_opengl_GLContext3D.setBlendFactors = function(context,sourceFactor,destinationFactor) {
	var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
	var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
	if(updateSrc || updateDest) {
		openfl__$internal_stage3D_opengl_GLContext3D.context = context;
		openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setColorMask = function(context,red,green,blue,alpha) {
	var gl = context.__renderSession.gl;
	gl.__context.colorMask(red,green,blue,alpha);
};
openfl__$internal_stage3D_opengl_GLContext3D.setCulling = function(context,triangleFaceToCull) {
	var gl = context.__renderSession.gl;
	if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) switch(triangleFaceToCull) {
	case 3:
		gl.__context.disable(gl.CULL_FACE);
		break;
	case 0:
		gl.__context.enable(gl.CULL_FACE);
		gl.__context.cullFace(gl.FRONT);
		break;
	case 1:
		gl.__context.enable(gl.CULL_FACE);
		gl.__context.cullFace(gl.BACK);
		break;
	case 2:
		gl.__context.enable(gl.CULL_FACE);
		gl.__context.cullFace(gl.FRONT_AND_BACK);
		break;
	default:
		return new openfl_errors_IllegalOperationError();
	}
	return null;
};
openfl__$internal_stage3D_opengl_GLContext3D.setDepthTest = function(context,depthMask,passCompareMode) {
	var gl = context.__renderSession.gl;
	var depthTestEnabled = context.__backBufferEnableDepthAndStencil;
	if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
		if(depthTestEnabled) gl.__context.enable(gl.DEPTH_TEST); else gl.__context.disable(gl.DEPTH_TEST);
	}
	if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) gl.__context.depthMask(depthMask);
	if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) switch(passCompareMode) {
	case 0:
		gl.__context.depthFunc(gl.ALWAYS);
		break;
	case 1:
		gl.__context.depthFunc(gl.EQUAL);
		break;
	case 2:
		gl.__context.depthFunc(gl.GREATER);
		break;
	case 3:
		gl.__context.depthFunc(gl.GEQUAL);
		break;
	case 4:
		gl.__context.depthFunc(gl.LESS);
		break;
	case 5:
		gl.__context.depthFunc(gl.LEQUAL);
		break;
	case 6:
		gl.__context.depthFunc(gl.NEVER);
		break;
	case 7:
		gl.__context.depthFunc(gl.NOTEQUAL);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking = function(value) {
	openfl__$internal_stage3D_GLUtils.debug = value;
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgram = function(context,program) {
	if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
		program.__use();
		program.__setPositionScale(context.__positionScale);
		context.__program = program;
		context.__samplerDirty |= context.__program.__samplerUsageMask;
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			context.__samplerStates[i].copyFrom(context.__program.__getSamplerState(i));
		}
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromByteArray = function(context,programType,firstRegister,numRegisters,data,byteArrayOffset) {
	var gl = context.__renderSession.gl;
	if(numRegisters == -1) {
		var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2;
		numRegisters = a - byteArrayOffset;
	}
	var isVertex = programType == 1;
	var dest;
	if(isVertex) dest = context.__vertexConstants; else dest = context.__fragmentConstants;
	var floatData;
	var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
	var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
	if(len == null) floatData = new Float32Array(bytes.b.bufferValue,0); else floatData = new Float32Array(bytes.b.bufferValue,0,len);
	var outOffset = firstRegister * 4;
	var inOffset = Std["int"](_$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4));
	var _g1 = 0;
	var _g = numRegisters * 4;
	while(_g1 < _g) {
		var i = _g1++;
		dest[outOffset + i] = floatData[inOffset + i];
	}
	if(context.__program != null) context.__program.__markDirty(isVertex,firstRegister,numRegisters);
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromMatrix = function(context,programType,firstRegister,matrix,transposedMatrix) {
	if(transposedMatrix == null) transposedMatrix = false;
	var isVertex = programType == 1;
	var dest;
	if(isVertex) dest = context.__vertexConstants; else dest = context.__fragmentConstants;
	var source = matrix.rawData;
	var i = firstRegister * 4;
	if(transposedMatrix) {
		var idx = i++;
		var val = source.data.get(0);
		dest[idx] = val;
		var idx1 = i++;
		var val1 = source.data.get(4);
		dest[idx1] = val1;
		var idx2 = i++;
		var val2 = source.data.get(8);
		dest[idx2] = val2;
		var idx3 = i++;
		var val3 = source.data.get(12);
		dest[idx3] = val3;
		var idx4 = i++;
		var val4 = source.data.get(1);
		dest[idx4] = val4;
		var idx5 = i++;
		var val5 = source.data.get(5);
		dest[idx5] = val5;
		var idx6 = i++;
		var val6 = source.data.get(9);
		dest[idx6] = val6;
		var idx7 = i++;
		var val7 = source.data.get(13);
		dest[idx7] = val7;
		var idx8 = i++;
		var val8 = source.data.get(2);
		dest[idx8] = val8;
		var idx9 = i++;
		var val9 = source.data.get(6);
		dest[idx9] = val9;
		var idx10 = i++;
		var val10 = source.data.get(10);
		dest[idx10] = val10;
		var idx11 = i++;
		var val11 = source.data.get(14);
		dest[idx11] = val11;
		var idx12 = i++;
		var val12 = source.data.get(3);
		dest[idx12] = val12;
		var idx13 = i++;
		var val13 = source.data.get(7);
		dest[idx13] = val13;
		var idx14 = i++;
		var val14 = source.data.get(11);
		dest[idx14] = val14;
		var idx15 = i++;
		var val15 = source.data.get(15);
		dest[idx15] = val15;
	} else {
		var idx16 = i++;
		var val16 = source.data.get(0);
		dest[idx16] = val16;
		var idx17 = i++;
		var val17 = source.data.get(1);
		dest[idx17] = val17;
		var idx18 = i++;
		var val18 = source.data.get(2);
		dest[idx18] = val18;
		var idx19 = i++;
		var val19 = source.data.get(3);
		dest[idx19] = val19;
		var idx20 = i++;
		var val20 = source.data.get(4);
		dest[idx20] = val20;
		var idx21 = i++;
		var val21 = source.data.get(5);
		dest[idx21] = val21;
		var idx22 = i++;
		var val22 = source.data.get(6);
		dest[idx22] = val22;
		var idx23 = i++;
		var val23 = source.data.get(7);
		dest[idx23] = val23;
		var idx24 = i++;
		var val24 = source.data.get(8);
		dest[idx24] = val24;
		var idx25 = i++;
		var val25 = source.data.get(9);
		dest[idx25] = val25;
		var idx26 = i++;
		var val26 = source.data.get(10);
		dest[idx26] = val26;
		var idx27 = i++;
		var val27 = source.data.get(11);
		dest[idx27] = val27;
		var idx28 = i++;
		var val28 = source.data.get(12);
		dest[idx28] = val28;
		var idx29 = i++;
		var val29 = source.data.get(13);
		dest[idx29] = val29;
		var idx30 = i++;
		var val30 = source.data.get(14);
		dest[idx30] = val30;
		var idx31 = i++;
		var val31 = source.data.get(15);
		dest[idx31] = val31;
	}
	if(context.__program != null) context.__program.__markDirty(isVertex,firstRegister,4);
};
openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromVector = function(context,programType,firstRegister,data,numRegisters) {
	if(numRegisters == null) numRegisters = -1;
	if(numRegisters == -1) numRegisters = data.data.get_length() >> 2;
	var isVertex = programType == 1;
	var dest;
	if(isVertex) dest = context.__vertexConstants; else dest = context.__fragmentConstants;
	var source = data;
	var sourceIndex = 0;
	var destIndex = firstRegister * 4;
	var _g = 0;
	while(_g < numRegisters) {
		var i = _g++;
		var idx = destIndex++;
		var val;
		var index = sourceIndex++;
		val = source.data.get(index);
		dest[idx] = val;
		var idx1 = destIndex++;
		var val1;
		var index1 = sourceIndex++;
		val1 = source.data.get(index1);
		dest[idx1] = val1;
		var idx2 = destIndex++;
		var val2;
		var index2 = sourceIndex++;
		val2 = source.data.get(index2);
		dest[idx2] = val2;
		var idx3 = destIndex++;
		var val3;
		var index3 = sourceIndex++;
		val3 = source.data.get(index3);
		dest[idx3] = val3;
	}
	if(context.__program != null) context.__program.__markDirty(isVertex,firstRegister,numRegisters);
};
openfl__$internal_stage3D_opengl_GLContext3D.setRenderToBackBuffer = function(context) {
	var gl = context.__renderSession.gl;
	gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.frontFace(gl.CCW);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.__renderToTexture = null;
	context.__scissorRectangle = null;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState();
	context.__positionScale[1] = 1.0;
	if(context.__program != null) context.__program.__setPositionScale(context.__positionScale);
};
openfl__$internal_stage3D_opengl_GLContext3D.setRenderToTexture = function(context,texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
	if(surfaceSelector == null) surfaceSelector = 0;
	if(antiAlias == null) antiAlias = 0;
	if(enableDepthAndStencil == null) enableDepthAndStencil = false;
	var gl = context.__renderSession.gl;
	var width = 0;
	var height = 0;
	if(context.__framebuffer == null) {
		context.__framebuffer = gl.__context.createFramebuffer();
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	gl.__context.bindFramebuffer(gl.FRAMEBUFFER,context.__framebuffer);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
		var texture2D = texture;
		width = texture2D.__width;
		height = texture2D.__height;
		gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
		var rectTexture = texture;
		width = rectTexture.__width;
		height = rectTexture.__height;
		gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
		var cubeTexture = texture;
		width = cubeTexture.__size;
		height = cubeTexture.__size;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,texture.__textureID,0);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	} else throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
	if(enableDepthAndStencil) {
		if(context.__supportsPackedDepthStencil) {
			if(context.__depthStencilRenderBuffer == null) {
				context.__depthStencilRenderBuffer = gl.__context.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			gl.__context.bindRenderbuffer(gl.RENDERBUFFER,context.__depthStencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.DEPTH_STENCIL,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,context.__depthStencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			if(context.__depthRenderBuffer == null) {
				context.__depthRenderBuffer = gl.__context.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			if(context.__stencilRenderBuffer == null) {
				context.__stencilRenderBuffer = gl.__context.createRenderbuffer();
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			gl.__context.bindRenderbuffer(gl.RENDERBUFFER,context.__depthRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.bindRenderbuffer(gl.RENDERBUFFER,context.__stencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,context.__depthRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			gl.__context.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,context.__stencilRenderBuffer);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		gl.__context.bindRenderbuffer(gl.RENDERBUFFER,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(0,0,width,height);
	if(context.enableErrorChecking) {
		var code = gl.__context.checkFramebufferStatus(gl.FRAMEBUFFER);
		if(code != gl.FRAMEBUFFER_COMPLETE) haxe_Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "GLContext3D.hx", lineNumber : 736, className : "openfl._internal.stage3D.opengl.GLContext3D", methodName : "setRenderToTexture"});
	}
	context.__positionScale[1] = -1.0;
	if(context.__program != null) context.__program.__setPositionScale(context.__positionScale);
	gl.__context.frontFace(gl.CW);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.__renderToTexture = texture;
	context.__scissorRectangle = null;
	context.__rttDepthAndStencil = enableDepthAndStencil;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
	openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState();
};
openfl__$internal_stage3D_opengl_GLContext3D.setSamplerStateAt = function(context,sampler,wrap,filter,mipfilter) {
	if(sampler < 0 || sampler > 8) throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
	var gl = context.__renderSession.gl;
	var state = context.__samplerStates[sampler];
	switch(wrap) {
	case 0:
		state.set_wrapModeS(gl.CLAMP_TO_EDGE);
		state.set_wrapModeT(gl.CLAMP_TO_EDGE);
		break;
	case 1:
		state.set_wrapModeS(gl.CLAMP_TO_EDGE);
		state.set_wrapModeT(gl.REPEAT);
		break;
	case 2:
		state.set_wrapModeS(gl.REPEAT);
		state.set_wrapModeT(gl.REPEAT);
		break;
	case 3:
		state.set_wrapModeS(gl.REPEAT);
		state.set_wrapModeT(gl.CLAMP_TO_EDGE);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
	}
	switch(filter) {
	case 4:
		state.set_magFilter(gl.LINEAR);
		if(context.__supportsAnisotropicFiltering) state.set_maxAniso(1);
		break;
	case 5:
		state.set_magFilter(gl.NEAREST);
		if(context.__supportsAnisotropicFiltering) state.set_maxAniso(1);
		break;
	case 1:
		if(context.__supportsAnisotropicFiltering) state.set_maxAniso(context.__maxAnisotropyTexture2D < 2?context.__maxAnisotropyTexture2D:2);
		break;
	case 2:
		if(context.__supportsAnisotropicFiltering) state.set_maxAniso(context.__maxAnisotropyTexture2D < 4?context.__maxAnisotropyTexture2D:4);
		break;
	case 3:
		if(context.__supportsAnisotropicFiltering) state.set_maxAniso(context.__maxAnisotropyTexture2D < 8?context.__maxAnisotropyTexture2D:8);
		break;
	case 0:
		if(context.__supportsAnisotropicFiltering) state.set_maxAniso(context.__maxAnisotropyTexture2D < 16?context.__maxAnisotropyTexture2D:16);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
	}
	switch(mipfilter) {
	case 0:
		state.set_minFilter(filter == 5?gl.NEAREST_MIPMAP_LINEAR:gl.LINEAR_MIPMAP_LINEAR);
		break;
	case 1:
		state.set_minFilter(filter == 5?gl.NEAREST_MIPMAP_NEAREST:gl.LINEAR_MIPMAP_NEAREST);
		break;
	case 2:
		state.set_minFilter(filter == 5?gl.NEAREST:gl.LINEAR);
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setScissorRectangle = function(context,rectangle) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	if(rectangle != null) context.__scissorRectangle = rectangle.clone(); else context.__scissorRectangle = null;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle();
};
openfl__$internal_stage3D_opengl_GLContext3D.setStencilActions = function(context,triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
	if(actionOnDepthPassStencilFail == null) actionOnDepthPassStencilFail = 5;
	if(actionOnDepthFail == null) actionOnDepthFail = 5;
	if(actionOnBothPass == null) actionOnBothPass = 5;
	if(compareMode == null) compareMode = 0;
	if(triangleFace == null) triangleFace = 2;
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__stencilCompareMode = compareMode;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilOpSeparate(openfl__$internal_stage3D_opengl_GLContext3D.__getGLTriangleFace(triangleFace),openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnDepthPassStencilFail),openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnDepthFail),openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction(actionOnBothPass));
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilFunc(openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode(context.__stencilCompareMode),context.__stencilRef,context.__stencilReadMask);
};
openfl__$internal_stage3D_opengl_GLContext3D.setStencilReferenceValue = function(context,referenceValue,readMask,writeMask) {
	if(writeMask == null) writeMask = 255;
	if(readMask == null) readMask = 255;
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	context.__stencilReadMask = readMask;
	context.__stencilRef = referenceValue;
	openfl__$internal_stage3D_opengl_GLContext3D.gl.stencilFunc(openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode(context.__stencilCompareMode),context.__stencilRef,context.__stencilReadMask);
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.stencilMask(writeMask);
};
openfl__$internal_stage3D_opengl_GLContext3D.setTextureAt = function(context,sampler,texture) {
	if(context.__samplerTextures.data.get(sampler) != texture) {
		context.__samplerTextures.data.set(sampler,texture);
		context.__samplerDirty |= 1 << sampler;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.setVertexBufferAt = function(context,index,buffer,bufferOffset,format) {
	if(format == null) format = 4;
	if(bufferOffset == null) bufferOffset = 0;
	var gl = context.__renderSession.gl;
	if(buffer == null) {
		gl.__context.disableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.bindBuffer(gl.ARRAY_BUFFER,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		return;
	}
	gl.__context.enableVertexAttribArray(index);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindBuffer(gl.ARRAY_BUFFER,buffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var byteOffset = bufferOffset * 4;
	switch(format) {
	case 0:
		gl.vertexAttribPointer(index,4,gl.UNSIGNED_BYTE,true,buffer.__stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 4:
		gl.vertexAttribPointer(index,4,gl.FLOAT,false,buffer.__stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 3:
		gl.vertexAttribPointer(index,3,gl.FLOAT,false,buffer.__stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 2:
		gl.vertexAttribPointer(index,2,gl.FLOAT,false,buffer.__stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	case 1:
		gl.vertexAttribPointer(index,1,gl.FLOAT,false,buffer.__stride,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(byteOffset));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__flushSamplerState = function() {
	var sampler = 0;
	while(openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty != 0) {
		if((openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty & 1 << sampler) != 0) {
			if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
				openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.activeTexture(openfl__$internal_stage3D_opengl_GLContext3D.gl.TEXTURE0 + sampler);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			var texture = openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerTextures.data.get(sampler);
			if(texture != null) {
				var target = texture.__textureTarget;
				openfl__$internal_stage3D_opengl_GLContext3D.gl.bindTexture(target,texture.__getTexture());
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				texture.__setSamplerState(openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerStates[sampler]);
			} else {
				openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.bindTexture(openfl__$internal_stage3D_opengl_GLContext3D.gl.TEXTURE_2D,null);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			openfl__$internal_stage3D_opengl_GLContext3D.context.__samplerDirty &= ~(1 << sampler);
		}
		sampler++;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLCompareMode = function(compareMode) {
	switch(compareMode) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.ALWAYS;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.EQUAL;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.GREATER;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.GEQUAL;
	case 4:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.LESS;
	case 5:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.LEQUAL;
	case 6:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NEVER;
	case 7:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NOTEQUAL;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.EQUAL;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLTriangleFace = function(triangleFace) {
	switch(triangleFace) {
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT;
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.BACK;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT_AND_BACK;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.NONE;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.FRONT_AND_BACK;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__getGLStencilAction = function(stencilAction) {
	switch(stencilAction) {
	case 0:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.DECR;
	case 1:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.DECR_WRAP;
	case 2:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INCR;
	case 3:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INCR_WRAP;
	case 4:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.INVERT;
	case 5:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.KEEP;
	case 6:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.REPLACE;
	case 7:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	default:
		return openfl__$internal_stage3D_opengl_GLContext3D.gl.KEEP;
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__hasGLExtension = function(name) {
	return (function($this) {
		var $r;
		var _this = openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.getSupportedExtensions();
		$r = HxOverrides.indexOf(_this,name,0);
		return $r;
	}(this)) != -1;
};
openfl__$internal_stage3D_opengl_GLContext3D.__setViewport = function(originX,originY,width,height) {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) originY *= -1;
	if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.viewport(originX,originY,width,height);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateDepthAndStencilState = function() {
	var depthAndStencil;
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) depthAndStencil = openfl__$internal_stage3D_opengl_GLContext3D.context.__rttDepthAndStencil; else depthAndStencil = openfl__$internal_stage3D_opengl_GLContext3D.context.__backBufferEnableDepthAndStencil;
	if(depthAndStencil) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.DEPTH_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.STENCIL_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	} else {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.DEPTH_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.STENCIL_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors = function() {
	if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) return;
	var src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
	var dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	var _g = openfl_display3D_Context3D.__stateCache._srcBlendFactor;
	switch(_g) {
	case 2:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 9:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	case 7:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 0:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 1:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_COLOR;
		break;
	case 5:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 3:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 4:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_COLOR;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	var _g1 = openfl_display3D_Context3D.__stateCache._destBlendFactor;
	switch(_g1) {
	case 2:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 9:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	case 7:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 8:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_COLOR;
		break;
	case 0:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 5:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 6:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_COLOR;
		break;
	case 3:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.BLEND);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.blendFunc(src,dest);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateScissorRectangle = function() {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle == null) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.disable(openfl__$internal_stage3D_opengl_GLContext3D.gl.SCISSOR_TEST);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		return;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.SCISSOR_TEST);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var height = 0;
	var offsetX = 0;
	var offsetY = 0;
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		if(js_Boot.__instanceof(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture,openfl_display3D_textures_Texture)) {
			var texture2D = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture;
			height = texture2D.__height;
		} else if(js_Boot.__instanceof(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture;
			height = rectTexture.__height;
		}
	} else {
		height = openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight;
		offsetX = openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.x | 0;
		offsetY = openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.y | 0;
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.scissor((openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.x | 0) + offsetX,height - (openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.y | 0) - (openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.height | 0) + offsetY,openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.width | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.__scissorRectangle.height | 0);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport = function() {
	if(!openfl_display_Stage3D.__active) {
		openfl_display_Stage3D.__active = true;
		openfl__$internal_stage3D_opengl_GLContext3D.context.__renderSession.renderer.clear();
	}
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture == null && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth > 0 && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight > 0) openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.x | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.y | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight);
};
var openfl__$internal_stage3D_opengl_GLCubeTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLCubeTexture"] = openfl__$internal_stage3D_opengl_GLCubeTexture;
openfl__$internal_stage3D_opengl_GLCubeTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLCubeTexture"];
openfl__$internal_stage3D_opengl_GLCubeTexture.create = function(cubeTexture,renderSession) {
	var gl = renderSession.gl;
	cubeTexture.__textureTarget = gl.TEXTURE_CUBE_MAP;
	cubeTexture.__uploadedSides = 0;
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray = function(cubeTexture,renderSession,data,byteArrayOffset) {
	var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
	var alpha = reader.readHeader(cubeTexture.__size,cubeTexture.__size,true);
	var gl = renderSession.gl;
	gl.__context.bindTexture(cubeTexture.__textureTarget,cubeTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
		var format = openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) return;
		var target = openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget(gl,side);
		cubeTexture.__format = format;
		gl.__context.compressedTexImage2D(target,level,cubeTexture.__format,width,height,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(bytes,blockLength));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	});
	gl.__context.bindTexture(cubeTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromBitmapData = function(cubeTexture,renderSession,source,side,miplevel,generateMipmap) {
	if(generateMipmap == null) generateMipmap = false;
	if(miplevel == null) miplevel = 0;
	var size = cubeTexture.__size >> miplevel;
	if(size == 0) return;
	var image = cubeTexture.__getImage(source);
	openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,image.get_data(),side,miplevel);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromByteArray = function(cubeTexture,renderSession,data,byteArrayOffset,side,miplevel) {
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,data.b,side,miplevel);
		return;
	}
	openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(cubeTexture,renderSession,(function($this) {
		var $r;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) this1 = new Uint8Array(buffer,byteArrayOffset); else this1 = null;
		$r = this1;
		return $r;
	}(this)),side,miplevel);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray = function(cubeTexture,renderSession,data,side,miplevel) {
	if(data == null) return;
	var gl = renderSession.gl;
	var size = cubeTexture.__size >> miplevel;
	if(size == 0) return;
	var target = openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget(gl,side);
	gl.__context.bindTexture(gl.TEXTURE_CUBE_MAP,cubeTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(target,miplevel,cubeTexture.__internalFormat,size,size,0,cubeTexture.__format,gl.UNSIGNED_BYTE,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(cubeTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	cubeTexture.__uploadedSides |= 1 << side;
};
openfl__$internal_stage3D_opengl_GLCubeTexture.setSamplerState = function(cubeTexture,renderSession,state) {
	if(!state.equals(cubeTexture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.__context.generateMipmap(gl.TEXTURE_CUBE_MAP);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.__context.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(cubeTexture,renderSession,state);
};
openfl__$internal_stage3D_opengl_GLCubeTexture.__sideToTarget = function(gl,side) {
	switch(side) {
	case 0:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
	case 1:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
	case 2:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
	case 3:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
	case 4:
		return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
	case 5:
		return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
var openfl__$internal_stage3D_opengl_GLIndexBuffer3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLIndexBuffer3D"] = openfl__$internal_stage3D_opengl_GLIndexBuffer3D;
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.__name__ = ["openfl","_internal","stage3D","opengl","GLIndexBuffer3D"];
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.create = function(indexBuffer,renderSession,bufferUsage) {
	var gl = renderSession.gl;
	indexBuffer.__elementType = gl.UNSIGNED_SHORT;
	indexBuffer.__id = gl.__context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(bufferUsage == 0) indexBuffer.__usage = gl.DYNAMIC_DRAW; else indexBuffer.__usage = gl.STATIC_DRAW;
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.dispose = function(indexBuffer,renderSession) {
	var gl = renderSession.gl;
	gl.__context.deleteBuffer(indexBuffer.__id);
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromByteArray = function(indexBuffer,renderSession,data,byteArrayOffset,startOffset,count) {
	var offset = byteArrayOffset + startOffset * 2;
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(indexBuffer,renderSession,(function($this) {
		var $r;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			if(count == null) this1 = new Int16Array(buffer,offset); else this1 = new Int16Array(buffer,offset,count);
		} else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray = function(indexBuffer,renderSession,data) {
	if(data == null) return;
	var gl = renderSession.gl;
	gl.__context.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,indexBuffer.__usage);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromVector = function(indexBuffer,renderSession,data,startOffset,count) {
	if(data == null) return;
	var gl = renderSession.gl;
	var length = startOffset + count;
	var existingInt16Array = indexBuffer.__tempInt16Array;
	if(indexBuffer.__tempInt16Array == null || indexBuffer.__tempInt16Array.length < count) {
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		indexBuffer.__tempInt16Array = this1;
		if(existingInt16Array != null) indexBuffer.__tempInt16Array.set(existingInt16Array);
	}
	var _g = startOffset;
	while(_g < length) {
		var i = _g++;
		var val = data.data.get(i);
		indexBuffer.__tempInt16Array[i - startOffset] = val;
	}
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(indexBuffer,renderSession,indexBuffer.__tempInt16Array);
};
var openfl__$internal_stage3D_opengl_GLProgram3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLProgram3D"] = openfl__$internal_stage3D_opengl_GLProgram3D;
openfl__$internal_stage3D_opengl_GLProgram3D.__name__ = ["openfl","_internal","stage3D","opengl","GLProgram3D"];
openfl__$internal_stage3D_opengl_GLProgram3D.dispose = function(program,renderSession) {
	openfl__$internal_stage3D_opengl_GLProgram3D.program = program;
	openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders();
};
openfl__$internal_stage3D_opengl_GLProgram3D.flushUniform = function(uniform,gl) {
	var index = uniform.regIndex * 4;
	var _g = uniform.type;
	switch(_g) {
	case 35674:
		gl.uniformMatrix2fv(uniform.location,uniform.size,false,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.size * 2 * 2)));
		break;
	case 35675:
		gl.uniformMatrix3fv(uniform.location,uniform.size,false,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.size * 3 * 3)));
		break;
	case 35676:
		gl.uniformMatrix4fv(uniform.location,uniform.size,false,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.size * 4 * 4)));
		break;
	case 35664:
		gl.uniform2fv(uniform.location,uniform.regCount,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 2)));
		break;
	case 35665:
		gl.uniform3fv(uniform.location,uniform.regCount,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 3)));
		break;
	case 35666:
		gl.uniform4fv(uniform.location,uniform.regCount,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 4)));
		break;
	default:
		gl.uniform4fv(uniform.location,uniform.regCount,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(uniform.regData.subarray(index,index + uniform.regCount * 4)));
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLProgram3D.setPositionScale = function(program,renderSession,positionScale) {
	var gl = renderSession.gl;
	gl.uniform4fv(program.__positionScale.location,1,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(positionScale));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLProgram3D.upload = function(program,renderSession,vertexProgram,fragmentProgram) {
	openfl__$internal_stage3D_opengl_GLProgram3D.program = program;
	openfl__$internal_stage3D_opengl_GLProgram3D.renderSession = renderSession;
	var samplerStates = [];
	var glslVertex = openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null);
	var glslFragment = openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
	openfl__$internal_stage3D_opengl_GLProgram3D.__uploadFromGLSL(glslVertex,glslFragment);
	var _g1 = 0;
	var _g = samplerStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		program.__samplerStates.data.set(i,samplerStates[i]);
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D["use"] = function(program,renderSession) {
	var gl = renderSession.gl;
	gl.__context.useProgram(program.__programID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	program.__vertexUniformMap.markAllDirty();
	program.__fragmentUniformMap.markAllDirty();
	var _g_head = program.__samplerUniforms.h;
	var _g_val = null;
	while(_g_head != null) {
		var sampler;
		sampler = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		if(sampler.regCount == 1) {
			gl.__context.uniform1i(sampler.location,sampler.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
	}
	var _g_head1 = program.__alphaSamplerUniforms.h;
	var _g_val1 = null;
	while(_g_head1 != null) {
		var sampler1;
		sampler1 = (function($this) {
			var $r;
			_g_val1 = _g_head1[0];
			_g_head1 = _g_head1[1];
			$r = _g_val1;
			return $r;
		}(this));
		if(sampler1.regCount == 1) {
			gl.__context.uniform1i(sampler1.location,sampler1.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.__buildUniformList = function() {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__uniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__alphaSamplerUniforms.clear();
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUsageMask = 0;
	var numActive = 0;
	numActive = gl.__context.getProgramParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,gl.ACTIVE_UNIFORMS);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vertexUniforms = new List();
	var fragmentUniforms = new List();
	var _g = 0;
	while(_g < numActive) {
		var i = _g++;
		var info = gl.__context.getActiveUniform(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,i);
		var name = info.name;
		var size = info.size;
		var uniformType = info.type;
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var uniform = new openfl_display3D_Uniform(gl);
		uniform.name = name;
		uniform.size = size;
		uniform.type = uniformType;
		uniform.location = gl.__context.getUniformLocation(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,uniform.name);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var indexBracket = uniform.name.indexOf("[");
		if(indexBracket >= 0) uniform.name = uniform.name.substring(0,indexBracket);
		var _g1 = uniform.type;
		switch(_g1) {
		case 35674:
			uniform.regCount = 2;
			break;
		case 35675:
			uniform.regCount = 3;
			break;
		case 35676:
			uniform.regCount = 4;
			break;
		default:
			uniform.regCount = 1;
		}
		uniform.regCount *= uniform.size;
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__uniforms.add(uniform);
		if(uniform.name == "vcPositionScale") openfl__$internal_stage3D_opengl_GLProgram3D.program.__positionScale = uniform; else if(StringTools.startsWith(uniform.name,"vc")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(2));
			uniform.regData = openfl__$internal_stage3D_opengl_GLProgram3D.program.__context.__vertexConstants;
			vertexUniforms.add(uniform);
		} else if(StringTools.startsWith(uniform.name,"fc")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(2));
			uniform.regData = openfl__$internal_stage3D_opengl_GLProgram3D.program.__context.__fragmentConstants;
			fragmentUniforms.add(uniform);
		} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
			uniform.regIndex = Std.parseInt(uniform.name.substring(7));
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUniforms.add(uniform);
			var _g2 = 0;
			var _g11 = uniform.regCount;
			while(_g2 < _g11) {
				var reg = _g2++;
				openfl__$internal_stage3D_opengl_GLProgram3D.program.__samplerUsageMask |= 1 << uniform.regIndex + reg;
			}
		} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
			var len = uniform.name.indexOf("_") - 7;
			uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
			openfl__$internal_stage3D_opengl_GLProgram3D.program.__alphaSamplerUniforms.add(uniform);
		}
		if(lime_utils_Log.level == 5) haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "GLProgram3D.hx", lineNumber : 247, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__buildUniformList"});
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
};
openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders = function() {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID != null) openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID = null;
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID != null) {
		gl.__context.deleteShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID = null;
	}
	if(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID != null) {
		gl.__context.deleteShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID = null;
	}
};
openfl__$internal_stage3D_opengl_GLProgram3D.__getUniformRegisters = function(uniform,index,size) {
	return uniform.regData.subarray(index,index + size);
};
openfl__$internal_stage3D_opengl_GLProgram3D.__uploadFromGLSL = function(vertexShaderSource,fragmentShaderSource) {
	var gl = openfl__$internal_stage3D_opengl_GLProgram3D.renderSession.gl;
	openfl__$internal_stage3D_opengl_GLProgram3D.__deleteShaders();
	if(lime_utils_Log.level == 5) {
		lime_utils_Log.info(vertexShaderSource,{ fileName : "GLProgram3D.hx", lineNumber : 322, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		lime_utils_Log.info(fragmentShaderSource,{ fileName : "GLProgram3D.hx", lineNumber : 323, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexSource = vertexShaderSource;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentSource = fragmentShaderSource;
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID = gl.__context.createShader(gl.VERTEX_SHADER);
	gl.__context.shaderSource(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID,vertexShaderSource);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.compileShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var shaderCompiled = gl.__context.getShaderParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID,gl.COMPILE_STATUS);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(shaderCompiled == 0) {
		var vertexInfoLog = gl.__context.getShaderInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
		if(vertexInfoLog != null && vertexInfoLog.length != 0) haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "GLProgram3D.hx", lineNumber : 347, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID = gl.__context.createShader(gl.FRAGMENT_SHADER);
	gl.__context.shaderSource(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID,fragmentShaderSource);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.compileShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var fragmentCompiled = gl.__context.getShaderParameter(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID,gl.COMPILE_STATUS);
	if(fragmentCompiled == 0) {
		var fragmentInfoLog = gl.__context.getShaderInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
		if(fragmentInfoLog != null && fragmentInfoLog.length != 0) haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "GLProgram3D.hx", lineNumber : 370, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
	}
	openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID = gl.__context.createProgram();
	gl.__context.attachShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,openfl__$internal_stage3D_opengl_GLProgram3D.program.__vertexShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.attachShader(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,openfl__$internal_stage3D_opengl_GLProgram3D.program.__fragmentShaderID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var name = "va" + i;
		if(vertexShaderSource.indexOf(" " + name) != -1) gl.__context.bindAttribLocation(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID,i,name);
	}
	gl.__context.linkProgram(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID);
	var infoLog = gl.__context.getProgramInfoLog(openfl__$internal_stage3D_opengl_GLProgram3D.program.__programID);
	if(infoLog != null && infoLog.length != 0) haxe_Log.trace("program: " + infoLog,{ fileName : "GLProgram3D.hx", lineNumber : 403, className : "openfl._internal.stage3D.opengl.GLProgram3D", methodName : "__uploadFromGLSL"});
	openfl__$internal_stage3D_opengl_GLProgram3D.__buildUniformList();
};
var openfl__$internal_stage3D_opengl_GLRectangleTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLRectangleTexture"] = openfl__$internal_stage3D_opengl_GLRectangleTexture;
openfl__$internal_stage3D_opengl_GLRectangleTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLRectangleTexture"];
openfl__$internal_stage3D_opengl_GLRectangleTexture.create = function(rectangleTexture,renderSession) {
	var gl = renderSession.gl;
	rectangleTexture.__textureTarget = gl.TEXTURE_2D;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromBitmapData = function(rectangleTexture,renderSession,source) {
	if(source == null) return;
	var image = rectangleTexture.__getImage(source);
	if(image == null) return;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,image.get_data());
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromByteArray = function(rectangleTexture,renderSession,data,byteArrayOffset) {
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,data.b);
		return;
	}
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,(function($this) {
		var $r;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) this1 = new Uint8Array(buffer,byteArrayOffset); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray = function(rectangleTexture,renderSession,data) {
	var gl = renderSession.gl;
	gl.__context.bindTexture(rectangleTexture.__textureTarget,rectangleTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(rectangleTexture.__textureTarget,0,rectangleTexture.__internalFormat,rectangleTexture.__width,rectangleTexture.__height,0,rectangleTexture.__format,gl.UNSIGNED_BYTE,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(rectangleTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.setSamplerState = function(rectangleTexture,renderSession,state) {
	if(!state.equals(rectangleTexture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.maxAniso != 0.0) {
			gl.__context.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(rectangleTexture,renderSession,state);
};
var openfl__$internal_stage3D_opengl_GLStage3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLStage3D"] = openfl__$internal_stage3D_opengl_GLStage3D;
openfl__$internal_stage3D_opengl_GLStage3D.__name__ = ["openfl","_internal","stage3D","opengl","GLStage3D"];
openfl__$internal_stage3D_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) stage3D.context3D.__program.__use();
		}
	}
	if(openfl__$internal_stage3D_GLUtils.debug) renderSession.gl.__context.getError();
};
var openfl__$internal_stage3D_opengl_GLTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTexture"] = openfl__$internal_stage3D_opengl_GLTexture;
openfl__$internal_stage3D_opengl_GLTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLTexture"];
openfl__$internal_stage3D_opengl_GLTexture.create = function(texture,renderSession) {
	var gl = renderSession.gl;
	texture.__textureTarget = gl.TEXTURE_2D;
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(texture.__textureTarget,0,texture.__internalFormat,texture.__width,texture.__height,0,texture.__format,gl.UNSIGNED_BYTE,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray = function(texture,renderSession,data,byteArrayOffset) {
	var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
	var alpha = reader.readHeader(texture.__width,texture.__height,false);
	var gl = renderSession.gl;
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
		var format = openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) return;
		texture.__format = format;
		gl.__context.compressedTexImage2D(texture.__textureTarget,level,texture.__format,width,height,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(bytes,blockLength));
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	});
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromBitmapData = function(texture,renderSession,source,miplevel,generateMipmap) {
	if(source == null) return;
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) return;
	if(width == 0) width = 1;
	if(height == 0) height = 1;
	if(source.width != width || source.height != height) {
		var copy = new openfl_display_BitmapData(width,height,true,0);
		copy.draw(source);
		source = copy;
	}
	var image = texture.__getImage(source);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,image.get_data(),miplevel);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromByteArray = function(texture,renderSession,data,byteArrayOffset,miplevel) {
	if(miplevel == null) miplevel = 0;
	if(byteArrayOffset == 0) {
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,data.b,miplevel);
		return;
	}
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,(function($this) {
		var $r;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) this1 = new Uint8Array(buffer,byteArrayOffset); else this1 = null;
		$r = this1;
		return $r;
	}(this)),miplevel);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray = function(texture,renderSession,data,miplevel) {
	if(miplevel == null) miplevel = 0;
	if(data == null) return;
	var gl = renderSession.gl;
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) return;
	if(width == 0) width = 1;
	if(height == 0) height = 1;
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.texImage2D(texture.__textureTarget,miplevel,texture.__internalFormat,width,height,0,texture.__format,gl.UNSIGNED_BYTE,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLTexture.setSamplerState = function(texture,renderSession,state) {
	if(!state.equals(texture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.__context.generateMipmap(gl.TEXTURE_2D);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.__context.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(texture,renderSession,state);
};
var openfl__$internal_stage3D_opengl_GLTextureBase = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTextureBase"] = openfl__$internal_stage3D_opengl_GLTextureBase;
openfl__$internal_stage3D_opengl_GLTextureBase.__name__ = ["openfl","_internal","stage3D","opengl","GLTextureBase"];
openfl__$internal_stage3D_opengl_GLTextureBase.create = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	textureBase.__textureID = gl.__context.createTexture();
	textureBase.__textureContext = gl;
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = true;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(gl.type == lime_graphics_opengl_GLContextType.GLES) openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
		} else {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = false;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = gl.RGBA;
		}
	}
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats == null) openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = new openfl__$internal_stage3D_GLCompressedTextureFormats(gl);
	textureBase.__internalFormat = openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat;
	textureBase.__format = openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat;
};
openfl__$internal_stage3D_opengl_GLTextureBase.dispose = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	if(textureBase.__alphaTexture != null) textureBase.__alphaTexture.dispose();
	gl.__context.deleteTexture(textureBase.__textureID);
};
openfl__$internal_stage3D_opengl_GLTextureBase.getImage = function(textureBase,renderSession,bitmapData) {
	var image = bitmapData.image;
	if(!bitmapData.__isValid || image == null) return null;
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	var gl = renderSession.gl;
	if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1); else if(!image.get_premultiplied() && image.get_transparent()) {
		gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
		image = image.clone();
		image.set_premultiplied(true);
	}
	if(image.get_format() != 0) {
		image = image.clone();
		image.set_format(0);
		image.buffer.premultiplied = true;
	}
	return image;
};
openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState = function(textureBase,renderSession,state) {
	if(!state.equals(textureBase.__samplerState)) {
		var gl = renderSession.gl;
		gl.__context.bindTexture(textureBase.__textureTarget,textureBase.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_MIN_FILTER,state.minFilter);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_MAG_FILTER,state.magFilter);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_WRAP_S,state.wrapModeS);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		gl.__context.texParameteri(textureBase.__textureTarget,gl.TEXTURE_WRAP_T,state.wrapModeT);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(state.lodBias != 0.0) {
		}
		textureBase.__samplerState = state;
		textureBase.__samplerState.__samplerDirty = false;
	}
};
var openfl__$internal_stage3D_opengl_GLVertexBuffer3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVertexBuffer3D"] = openfl__$internal_stage3D_opengl_GLVertexBuffer3D;
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.__name__ = ["openfl","_internal","stage3D","opengl","GLVertexBuffer3D"];
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.create = function(vertexBuffer,renderSession,bufferUsage) {
	var gl = renderSession.gl;
	vertexBuffer.__id = gl.__context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	vertexBuffer.__stride = vertexBuffer.__vertexSize * 4;
	if(bufferUsage == 0) vertexBuffer.__usage = gl.DYNAMIC_DRAW; else vertexBuffer.__usage = gl.STATIC_DRAW;
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.dispose = function(vertexBuffer,renderSession) {
	var gl = renderSession.gl;
	gl.__context.deleteBuffer(vertexBuffer.__id);
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromByteArray = function(vertexBuffer,renderSession,data,byteArrayOffset,startVertex,numVertices) {
	var offset = byteArrayOffset + startVertex * vertexBuffer.__stride;
	var length = numVertices * vertexBuffer.__vertexSize;
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(vertexBuffer,renderSession,(function($this) {
		var $r;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			if(length == null) this1 = new Float32Array(buffer,offset); else this1 = new Float32Array(buffer,offset,length);
		} else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray = function(vertexBuffer,renderSession,data) {
	if(data == null) return;
	var gl = renderSession.gl;
	gl.__context.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer.__id);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,data,vertexBuffer.__usage);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromVector = function(vertexBuffer,renderSession,data,startVertex,numVertices) {
	if(data == null) return;
	var gl = renderSession.gl;
	var start = startVertex * vertexBuffer.__vertexSize;
	var count = numVertices * vertexBuffer.__vertexSize;
	var length = start + count;
	var existingFloat32Array = vertexBuffer.__tempFloat32Array;
	if(vertexBuffer.__tempFloat32Array == null || vertexBuffer.__tempFloat32Array.length < count) {
		var this1;
		if(count != null) this1 = new Float32Array(count); else this1 = null;
		vertexBuffer.__tempFloat32Array = this1;
		if(existingFloat32Array != null) vertexBuffer.__tempFloat32Array.set(existingFloat32Array);
	}
	var _g = start;
	while(_g < length) {
		var i = _g++;
		var val = data.data.get(i);
		vertexBuffer.__tempFloat32Array[i - start] = val;
	}
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(vertexBuffer,renderSession,vertexBuffer.__tempFloat32Array);
};
var openfl__$internal_stage3D_opengl_GLVideoTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVideoTexture"] = openfl__$internal_stage3D_opengl_GLVideoTexture;
openfl__$internal_stage3D_opengl_GLVideoTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLVideoTexture"];
openfl__$internal_stage3D_opengl_GLVideoTexture.create = function(videoTexture,renderSession) {
	var gl = renderSession.gl;
	videoTexture.__textureTarget = gl.TEXTURE_2D;
};
openfl__$internal_stage3D_opengl_GLVideoTexture.getTexture = function(videoTexture,renderSession) {
	if(!videoTexture.__netStream.__video.paused) {
		var gl = renderSession.gl;
		gl.__context.bindTexture(videoTexture.__textureTarget,videoTexture.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,videoTexture.__netStream.__video);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	return videoTexture.__textureID;
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	if(value == null) value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	if(value == null) value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) return null;
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) className = "";
		if(className == "") return this.root.__createObject(this); else {
			var $it0 = this.symbols.iterator();
			while( $it0.hasNext() ) {
				var symbol = $it0.next();
				if(symbol.className == className) {
					if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_SpriteSymbol)) return (js_Boot.__cast(symbol , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var $it0 = this.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(symbol.className == className) {
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol;
					return openfl_utils_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var $it0 = this.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(symbol.className == className) return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null && js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) return library; else return null;
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null && js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) return library.load().then(function(library1) {
		return lime_app_Future.withValue(library1);
	}); else return lime_app_Future.withError("Could not load asset manifest");
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getMovieClip(id);
		});
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) return false;
		if(id == "" && type == "MOVIE_CLIP") return true;
		if(type == "IMAGE" || type == "MOVIE_CLIP") return this.swf != null && this.swf.hasSymbol(id);
		return false;
	}
	,getImage: function(id) {
		if(this.imageClassNames.exists(id)) id = this.imageClassNames.get(id);
		if(!this.alphaCheck.exists(id)) {
			var $it0 = this.swf.symbols.iterator();
			while( $it0.hasNext() ) {
				var symbol = $it0.next();
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						this.cachedImages.set(id,image);
						this.cachedImages.remove(bitmapSymbol.alpha);
						this.alphaCheck.set(id,true);
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) return this.swf.createMovieClip(id); else return null;
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _g = this;
		if(this.id != null) this.preload.set(this.id,true);
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			_g.cachedText.set(_g.id,data);
			_g.swf = openfl__$internal_swf_SWFLite.unserialize(data);
			_g.swf.library = _g;
			var bitmapSymbol;
			var $it0 = _g.swf.symbols.iterator();
			while( $it0.hasNext() ) {
				var symbol = $it0.next();
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol;
					if(bitmapSymbol.className != null) _g.imageClassNames.set(bitmapSymbol.className,bitmapSymbol.path);
				}
			}
			openfl__$internal_swf_SWFLite.instances.set(_g.id,_g.swf);
			_g.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_g.preloading = false;
				promise.complete(_g);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var $it1 = this.paths.keys();
			while( $it1.hasNext() ) {
				var id = $it1.next();
				this.preload.set(id,true);
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var $it2 = this.paths.keys();
			while( $it2.hasNext() ) {
				var id1 = $it2.next();
				this.preload.set(id1,true);
			}
			var path;
			if(this.rootPath != null && this.rootPath != "") path = this.rootPath + "/" + this.id; else path = this.id;
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _g = this;
		if(this.imageClassNames.exists(id)) id = this.imageClassNames.get(id);
		if(!this.preloading && !this.alphaCheck.exists(id)) {
			var $it0 = this.swf.symbols.iterator();
			while( $it0.hasNext() ) {
				var symbol = $it0.next();
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise,bitmapSymbol) {
							return function(image) {
								_g.__loadImage(bitmapSymbol[0].alpha).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise,bitmapSymbol) {
									return function(alpha) {
										_g.__copyChannel(image,alpha);
										_g.cachedImages.set(id,image);
										_g.cachedImages.remove(bitmapSymbol[0].alpha);
										_g.alphaCheck.set(id,true);
										promise[0].complete(image);
									};
								})(promise,bitmapSymbol));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) return;
		var bitmap;
		var $it0 = this.swf.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) simpleButton = Type.createInstance(symbolType,[]); else {
			}
		}
		if(simpleButton == null) simpleButton = new openfl_display_SimpleButton();
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmapSymbol = swf.symbols.h[bitmapID];
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit); else graphics.lineStyle();
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
			if(symbolType == null) {
			}
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
			if(symbolType == null) {
			}
		}
		var movieClip = null;
		if(symbolType != null) movieClip = Type.createInstance(symbolType,[]); else movieClip = new openfl_display_MovieClip();
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var code;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) font = swf.symbols.h[record.fontID];
				if(record.offsetX != null) offsetX = this.matrix.tx + record.offsetX * 0.05;
				if(record.offsetY != null) offsetY = this.matrix.ty + record.offsetY * 0.05;
				if(record.color != null) color = record.color;
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit); else graphics.lineStyle();
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_HTMLParser = function() { };
$hxClasses["openfl._internal.text.HTMLParser"] = openfl__$internal_text_HTMLParser;
openfl__$internal_text_HTMLParser.__name__ = ["openfl","_internal","text","HTMLParser"];
openfl__$internal_text_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = openfl__$internal_text_HTMLParser.__regexBreakTag.replace(value,"\n");
	value = openfl__$internal_text_HTMLParser.__regexEntities[0].replace(value,"\"");
	value = openfl__$internal_text_HTMLParser.__regexEntities[1].replace(value,"'");
	value = openfl__$internal_text_HTMLParser.__regexEntities[2].replace(value,"&");
	value = openfl__$internal_text_HTMLParser.__regexEntities[5].replace(value," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = openfl__$internal_text_HTMLParser.__regexHTMLTag.replace(value,"");
		if(textFormatRanges.data.get_length() > 1) {
			var len = textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(1,len));
		}
		value = openfl__$internal_text_HTMLParser.__regexEntities[3].replace(value,"<");
		value = openfl__$internal_text_HTMLParser.__regexEntities[4].replace(value,">");
		var range = textFormatRanges.data.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var len1 = textFormatRanges.data.get_length();
		new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(0,len1));
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = openfl__$internal_text_HTMLParser.__regexEntities[3].replace(segment,"<");
			segment = openfl__$internal_text_HTMLParser.__regexEntities[4].replace(segment,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") continue;
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag?1:0,spaceIndex > -1 && spaceIndex < tagEndIndex?spaceIndex:tagEndIndex);
			var format;
			if(isClosingTag) {
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.data.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					var x = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
					textFormatRanges.data.push(x);
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					var _g11 = tagName.toLowerCase();
					switch(_g11) {
					case "a":
						if(openfl__$internal_text_HTMLParser.__regexHref.match(segment1)) format.url = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexHref);
						break;
					case "p":
						if(textFormatRanges.data.get_length() > 0 && !noLineBreak) value += "\n";
						if(openfl__$internal_text_HTMLParser.__regexAlign.match(segment1)) format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexAlign).toLowerCase());
						break;
					case "font":
						if(openfl__$internal_text_HTMLParser.__regexFace.match(segment1)) format.font = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexFace);
						if(openfl__$internal_text_HTMLParser.__regexColor.match(segment1)) format.color = Std.parseInt("0x" + openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexColor));
						if(openfl__$internal_text_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat;
								if(formatStack.length >= 2) parentFormat = formatStack[formatStack.length - 2]; else parentFormat = textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else format.size = Std.parseInt(sizeAttr);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "u":
						format.underline = true;
						break;
					case "i":case "em":
						format.italic = true;
						break;
					case "textformat":
						if(openfl__$internal_text_HTMLParser.__regexBlockIndent.match(segment1)) format.blockIndent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexBlockIndent));
						if(openfl__$internal_text_HTMLParser.__regexIndent.match(segment1)) format.indent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexIndent));
						if(openfl__$internal_text_HTMLParser.__regexLeading.match(segment1)) format.leading = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeading));
						if(openfl__$internal_text_HTMLParser.__regexLeftMargin.match(segment1)) format.leftMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeftMargin));
						if(openfl__$internal_text_HTMLParser.__regexRightMargin.match(segment1)) format.rightMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexRightMargin));
						if(openfl__$internal_text_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g21 = 0;
							while(_g21 < values.length) {
								var stop = values[_g21];
								++_g21;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					}
					formatStack.push(format);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						var x1 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
						textFormatRanges.data.push(x1);
						value += sub;
						noLineBreak = false;
					}
				} else {
					var x2 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length);
					textFormatRanges.data.push(x2);
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.data.get_length() == 0) {
			var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0],0,0);
			textFormatRanges.data.push(x3);
		}
	}
	return value;
};
openfl__$internal_text_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) return regex.matched(2); else return regex.matched(3);
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold Italic")) return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic"); else if(bold && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold")) return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold"); else if(italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Italic")) return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) fontName = "_serif";
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) bold = false;
		if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) italic = false;
	}
	var font;
	if(italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	font += "" + (function($this) {
		var $r;
		switch(fontName) {
		case "_sans":
			$r = "sans-serif";
			break;
		case "_serif":
			$r = "serif";
			break;
		case "_typewriter":
			$r = "monospace";
			break;
		default:
			$r = "'" + new EReg("^[\\s'\"]+(.*)[\\s'\"]+$","").replace(fontName,"$1") + "'";
		}
		return $r;
	}(this));
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) testRegexpParts.push("[^" + restrict + "]");
		if(declined.length > 0) testRegexpParts.push("[" + declined + "]");
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.data.get_length() + 1) return null;
		if(this.lineBreaks.data.get_length() == 0) return this.text; else return lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.text,index > 0?this.lineBreaks.data.get(index - 1):0,this.lineBreaks.data.get(index));
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) startIndex = 0;
		var br = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"<br>",startIndex);
		var cr = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) return lf;
		if(lf == -1 && br == -1) return cr;
		if(lf == -1 && cr == -1) return br;
		if(cr == -1) return Std["int"](Math.min(br,lf));
		if(lf == -1) return Std["int"](Math.min(br,cr));
		if(br == -1) return Std["int"](Math.min(cr,lf));
		return Std["int"](Math.min(Math.min(cr,lf),br));
	}
	,getLineMeasurements: function() {
		this.lineAscents.data.set_length(0);
		this.lineDescents.data.set_length(0);
		this.lineLeadings.data.set_length(0);
		this.lineHeights.data.set_length(0);
		this.lineWidths.data.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.data.push(currentLineAscent);
				this.lineDescents.data.push(currentLineDescent);
				this.lineLeadings.data.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.data.push(currentLineHeight);
				this.lineWidths.data.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) this.textHeight = currentTextHeight;
		}
		this.lineAscents.data.push(currentLineAscent);
		this.lineDescents.data.push(currentLineDescent);
		this.lineLeadings.data.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.data.push(currentLineHeight);
		this.lineWidths.data.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 1:case 3:case 0:
				if(!this.wordWrap) this.width = this.textWidth + 4;
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.data.set_length(0);
		if(this.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.text,"")) return;
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.data.get_length() - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges.data.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
		}
		if(heightValue > maxHeightValue) maxHeightValue = heightValue;
		if(ascent > maxAscent) maxAscent = ascent;
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					var tempWidth;
					var text = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_g.text,textIndex,breakIndex);
					tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text).width;
					while(offsetX + tempWidth > _g.width - 2) {
						var i = 1;
						while(textIndex + i < breakIndex + 1) {
							var text1 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_g.text,textIndex,i);
							tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text1).width;
							if(offsetX + tempWidth > _g.width - 2) {
								i--;
								break;
							}
							i++;
						}
						if(i == 0 && tempWidth > _g.width - 4) i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_g.text);
						if(i == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex = textIndex + i;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
								_g.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex;
							}
							var text2 = _g.text;
							var endIndex1 = textIndex + i;
							var positions1 = [];
							if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							if(_g.__useIntAdvances) {
								var previousWidth = 0.0;
								var width;
								var _g1 = textIndex;
								while(_g1 < endIndex1) {
									var i1 = _g1++;
									width = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text2,textIndex,i1 + 1)).width;
									positions1.push(width - previousWidth);
									previousWidth = width;
								}
							} else {
								var _g11 = textIndex;
								while(_g11 < endIndex1) {
									var i2 = _g11++;
									var advance;
									if(i2 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text2) - 1) {
										var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i2 + 1)).width;
										var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text2,i2,2)).width;
										advance = twoWidths - nextWidth;
									} else advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i2)).width;
									positions1.push(advance);
								}
							}
							layoutGroup.positions = positions1;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions2 = layoutGroup.positions;
							var width1 = 0.0;
							var _g2 = 0;
							while(_g2 < positions2.length) {
								var position = positions2[_g2];
								++_g2;
								width1 += position;
							}
							layoutGroup.width = width1;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) maxAscent = ascent;
							if(heightValue > maxHeightValue) maxHeightValue = heightValue;
							var _g12 = 0;
							var _g21 = _g.layoutGroups;
							while(_g12 < _g21.data.get_length()) {
								var lg = _g21.data.get(_g12);
								++_g12;
								if(lg.lineIndex < lineIndex) continue;
								if(lg.lineIndex > lineIndex) break;
								lg.ascent = maxAscent;
								lg.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i;
							var text3 = _g.text;
							var positions3 = [];
							if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							if(_g.__useIntAdvances) {
								var previousWidth1 = 0.0;
								var width2;
								var _g13 = textIndex;
								while(_g13 < breakIndex) {
									var i3 = _g13++;
									width2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text3,textIndex,i3 + 1)).width;
									positions3.push(width2 - previousWidth1);
									previousWidth1 = width2;
								}
							} else {
								var _g14 = textIndex;
								while(_g14 < breakIndex) {
									var i4 = _g14++;
									var advance1;
									if(i4 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text3) - 1) {
										var nextWidth1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i4 + 1)).width;
										var twoWidths1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text3,i4,2)).width;
										advance1 = twoWidths1 - nextWidth1;
									} else advance1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i4)).width;
									positions3.push(advance1);
								}
							}
							positions = positions3;
							var width3 = 0.0;
							var _g3 = 0;
							while(_g3 < positions.length) {
								var position1 = positions[_g3];
								++_g3;
								width3 += position1;
							}
							widthValue = width3;
							tempWidth = widthValue;
						}
					}
				}
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
					_g.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = breakIndex;
				}
				var text4 = this.text;
				var positions4 = [];
				if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				if(_g.__useIntAdvances) {
					var previousWidth2 = 0.0;
					var width4;
					var _g15 = textIndex;
					while(_g15 < breakIndex) {
						var i5 = _g15++;
						width4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text4,textIndex,i5 + 1)).width;
						positions4.push(width4 - previousWidth2);
						previousWidth2 = width4;
					}
				} else {
					var _g16 = textIndex;
					while(_g16 < breakIndex) {
						var i6 = _g16++;
						var advance2;
						if(i6 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text4) - 1) {
							var nextWidth2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i6 + 1)).width;
							var twoWidths2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text4,i6,2)).width;
							advance2 = twoWidths2 - nextWidth2;
						} else advance2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i6)).width;
						positions4.push(advance2);
					}
				}
				layoutGroup.positions = positions4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions5 = layoutGroup.positions;
				var width5 = 0.0;
				var _g4 = 0;
				while(_g4 < positions5.length) {
					var position2 = positions5[_g4];
					++_g4;
					width5 += position2;
				}
				layoutGroup.width = width5;
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.data.get_length() - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges.data.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					if(currentFormat.__ascent != null) {
						ascent = currentFormat.size * currentFormat.__ascent;
						descent = currentFormat.size * currentFormat.__descent;
					} else {
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
					}
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
				}
				if(heightValue > maxHeightValue) maxHeightValue = heightValue;
				if(ascent > maxAscent) maxAscent = ascent;
				lineFormat = formatRange.format;
			}
			if(breakIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) - 1) offsetY -= maxHeightValue;
			if(ascent > maxAscent) maxAscent = ascent;
			if(heightValue > maxHeightValue) maxHeightValue = heightValue;
			var _g17 = 0;
			var _g22 = _g.layoutGroups;
			while(_g17 < _g22.data.get_length()) {
				var lg1 = _g22.data.get(_g17);
				++_g17;
				if(lg1.lineIndex < lineIndex) continue;
				if(lg1.lineIndex > lineIndex) break;
				lg1.ascent = maxAscent;
				lg1.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			++lineIndex;
			offsetX = 2;
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) layoutGroup = null;
			wrap = false;
			while(true) {
				if(textIndex == formatRange.end) break;
				var endIndex2 = -1;
				if(spaceIndex == -1) endIndex2 = breakIndex; else {
					endIndex2 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex2) endIndex2 = breakIndex;
				}
				if(endIndex2 == -1 || endIndex2 > formatRange.end) endIndex2 = formatRange.end;
				var text5 = this.text;
				var positions6 = [];
				if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				if(_g.__useIntAdvances) {
					var previousWidth3 = 0.0;
					var width6;
					var _g18 = textIndex;
					while(_g18 < endIndex2) {
						var i7 = _g18++;
						width6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text5,textIndex,i7 + 1)).width;
						positions6.push(width6 - previousWidth3);
						previousWidth3 = width6;
					}
				} else {
					var _g19 = textIndex;
					while(_g19 < endIndex2) {
						var i8 = _g19++;
						var advance3;
						if(i8 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text5) - 1) {
							var nextWidth3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i8 + 1)).width;
							var twoWidths3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text5,i8,2)).width;
							advance3 = twoWidths3 - nextWidth3;
						} else advance3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i8)).width;
						positions6.push(advance3);
					}
				}
				positions = positions6;
				var width7 = 0.0;
				var _g5 = 0;
				while(_g5 < positions.length) {
					var position3 = positions[_g5];
					++_g5;
					width7 += position3;
				}
				widthValue = width7;
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex++;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
						endIndex2--;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) wrap = false;
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.data.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							var index = this.layoutGroups.data.get_length() - 1;
							previous = this.layoutGroups.data.get(index);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i9 = this.layoutGroups.data.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.data.get(i9);
						if(i9 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i9--;
					}
					if(textIndex == previousSpaceIndex + 1) {
						if(ascent > maxAscent) maxAscent = ascent;
						if(heightValue > maxHeightValue) maxHeightValue = heightValue;
						var _g110 = 0;
						var _g23 = _g.layoutGroups;
						while(_g110 < _g23.data.get_length()) {
							var lg2 = _g23.data.get(_g110);
							++_g110;
							if(lg2.lineIndex < lineIndex) continue;
							if(lg2.lineIndex > lineIndex) break;
							lg2.ascent = maxAscent;
							lg2.height = maxHeightValue;
						}
						offsetY += maxHeightValue;
						maxAscent = 0.0;
						maxHeightValue = 0.0;
						++lineIndex;
						offsetX = 2;
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX;
						bumpX = ((function($this) {
							var $r;
							var index1 = $this.layoutGroups.data.get_length() - offsetCount;
							$r = $this.layoutGroups.data.get(index1);
							return $r;
						}(this))).offsetX;
						var _g111 = this.layoutGroups.data.get_length() - offsetCount;
						var _g6 = this.layoutGroups.data.get_length();
						while(_g111 < _g6) {
							var i10 = _g111++;
							layoutGroup = this.layoutGroups.data.get(i10);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						var tempWidth1;
						var text6 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_g.text,textIndex,endIndex2);
						tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text6).width;
						while(offsetX + tempWidth1 > _g.width - 2) {
							var i11 = 1;
							while(textIndex + i11 < endIndex2 + 1) {
								var text7 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_g.text,textIndex,i11);
								tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text7).width;
								if(offsetX + tempWidth1 > _g.width - 2) {
									i11--;
									break;
								}
								i11++;
							}
							if(i11 == 0 && tempWidth1 > _g.width - 4) i11 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_g.text);
							if(i11 == 0) {
								offsetX = 2;
								offsetY += layoutGroup.height;
								++lineIndex;
								break;
							} else {
								var endIndex3 = textIndex + i11;
								if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
									layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex3);
									_g.layoutGroups.data.push(layoutGroup);
								} else {
									layoutGroup.format = formatRange.format;
									layoutGroup.startIndex = textIndex;
									layoutGroup.endIndex = endIndex3;
								}
								var text8 = _g.text;
								var endIndex4 = textIndex + i11;
								var positions7 = [];
								if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								if(_g.__useIntAdvances) {
									var previousWidth4 = 0.0;
									var width8;
									var _g112 = textIndex;
									while(_g112 < endIndex4) {
										var i12 = _g112++;
										width8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text8,textIndex,i12 + 1)).width;
										positions7.push(width8 - previousWidth4);
										previousWidth4 = width8;
									}
								} else {
									var _g113 = textIndex;
									while(_g113 < endIndex4) {
										var i13 = _g113++;
										var advance4;
										if(i13 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text8) - 1) {
											var nextWidth4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i13 + 1)).width;
											var twoWidths4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text8,i13,2)).width;
											advance4 = twoWidths4 - nextWidth4;
										} else advance4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i13)).width;
										positions7.push(advance4);
									}
								}
								layoutGroup.positions = positions7;
								layoutGroup.offsetX = offsetX;
								layoutGroup.ascent = ascent;
								layoutGroup.descent = descent;
								layoutGroup.leading = leading;
								layoutGroup.lineIndex = lineIndex;
								layoutGroup.offsetY = offsetY;
								var positions8 = layoutGroup.positions;
								var width9 = 0.0;
								var _g7 = 0;
								while(_g7 < positions8.length) {
									var position4 = positions8[_g7];
									++_g7;
									width9 += position4;
								}
								layoutGroup.width = width9;
								layoutGroup.height = heightValue;
								layoutGroup = null;
								if(ascent > maxAscent) maxAscent = ascent;
								if(heightValue > maxHeightValue) maxHeightValue = heightValue;
								var _g114 = 0;
								var _g24 = _g.layoutGroups;
								while(_g114 < _g24.data.get_length()) {
									var lg3 = _g24.data.get(_g114);
									++_g114;
									if(lg3.lineIndex < lineIndex) continue;
									if(lg3.lineIndex > lineIndex) break;
									lg3.ascent = maxAscent;
									lg3.height = maxHeightValue;
								}
								offsetY += maxHeightValue;
								maxAscent = 0.0;
								maxHeightValue = 0.0;
								++lineIndex;
								offsetX = 2;
								textIndex += i11;
								var text9 = _g.text;
								var positions9 = [];
								if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								if(_g.__useIntAdvances) {
									var previousWidth5 = 0.0;
									var width10;
									var _g115 = textIndex;
									while(_g115 < endIndex2) {
										var i14 = _g115++;
										width10 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text9,textIndex,i14 + 1)).width;
										positions9.push(width10 - previousWidth5);
										previousWidth5 = width10;
									}
								} else {
									var _g116 = textIndex;
									while(_g116 < endIndex2) {
										var i15 = _g116++;
										var advance5;
										if(i15 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text9) - 1) {
											var nextWidth5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i15 + 1)).width;
											var twoWidths5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text9,i15,2)).width;
											advance5 = twoWidths5 - nextWidth5;
										} else advance5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i15)).width;
										positions9.push(advance5);
									}
								}
								positions = positions9;
								var width11 = 0.0;
								var _g8 = 0;
								while(_g8 < positions.length) {
									var position5 = positions[_g8];
									++_g8;
									width11 += position5;
								}
								widthValue = width11;
								tempWidth1 = widthValue;
							}
						}
					}
					if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
						_g.layoutGroups.data.push(layoutGroup);
					} else {
						layoutGroup.format = formatRange.format;
						layoutGroup.startIndex = textIndex;
						layoutGroup.endIndex = endIndex2;
					}
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex2;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
							_g.layoutGroups.data.push(layoutGroup);
						} else {
							layoutGroup.format = formatRange.format;
							layoutGroup.startIndex = textIndex;
							layoutGroup.endIndex = endIndex2;
						}
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex2;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex2) endIndex2++;
					}
					offsetX += widthValue;
					textIndex = endIndex2;
				}
				var nextSpaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					if(rangeIndex < _g.textFormatRanges.data.get_length() - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges.data.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						if(currentFormat.__ascent != null) {
							ascent = currentFormat.size * currentFormat.__ascent;
							descent = currentFormat.size * currentFormat.__descent;
						} else {
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
						}
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
					}
					if(heightValue > maxHeightValue) maxHeightValue = heightValue;
					if(ascent > maxAscent) maxAscent = ascent;
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) layoutGroup.positions.push(0.0);
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) || spaceIndex > formatRange.end) break;
			}
		} else {
			if(textIndex > formatRange.end) break; else if(textIndex < formatRange.end || textIndex == lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text)) {
				if(this.wordWrap && this.width >= 4) {
					var endIndex5 = formatRange.end;
					var tempWidth2;
					var text10 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_g.text,textIndex,endIndex5);
					tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text10).width;
					while(offsetX + tempWidth2 > _g.width - 2) {
						var i16 = 1;
						while(textIndex + i16 < endIndex5 + 1) {
							var text11 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_g.text,textIndex,i16);
							tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text11).width;
							if(offsetX + tempWidth2 > _g.width - 2) {
								i16--;
								break;
							}
							i16++;
						}
						if(i16 == 0 && tempWidth2 > _g.width - 4) i16 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_g.text);
						if(i16 == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex6 = textIndex + i16;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex6);
								_g.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex6;
							}
							var text12 = _g.text;
							var endIndex7 = textIndex + i16;
							var positions10 = [];
							if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							if(_g.__useIntAdvances) {
								var previousWidth6 = 0.0;
								var width12;
								var _g117 = textIndex;
								while(_g117 < endIndex7) {
									var i17 = _g117++;
									width12 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text12,textIndex,i17 + 1)).width;
									positions10.push(width12 - previousWidth6);
									previousWidth6 = width12;
								}
							} else {
								var _g118 = textIndex;
								while(_g118 < endIndex7) {
									var i18 = _g118++;
									var advance6;
									if(i18 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text12) - 1) {
										var nextWidth6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i18 + 1)).width;
										var twoWidths6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text12,i18,2)).width;
										advance6 = twoWidths6 - nextWidth6;
									} else advance6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i18)).width;
									positions10.push(advance6);
								}
							}
							layoutGroup.positions = positions10;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions11 = layoutGroup.positions;
							var width13 = 0.0;
							var _g9 = 0;
							while(_g9 < positions11.length) {
								var position6 = positions11[_g9];
								++_g9;
								width13 += position6;
							}
							layoutGroup.width = width13;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) maxAscent = ascent;
							if(heightValue > maxHeightValue) maxHeightValue = heightValue;
							var _g119 = 0;
							var _g25 = _g.layoutGroups;
							while(_g119 < _g25.data.get_length()) {
								var lg4 = _g25.data.get(_g119);
								++_g119;
								if(lg4.lineIndex < lineIndex) continue;
								if(lg4.lineIndex > lineIndex) break;
								lg4.ascent = maxAscent;
								lg4.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i16;
							var text13 = _g.text;
							var positions12 = [];
							if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							if(_g.__useIntAdvances) {
								var previousWidth7 = 0.0;
								var width14;
								var _g120 = textIndex;
								while(_g120 < endIndex5) {
									var i19 = _g120++;
									width14 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text13,textIndex,i19 + 1)).width;
									positions12.push(width14 - previousWidth7);
									previousWidth7 = width14;
								}
							} else {
								var _g121 = textIndex;
								while(_g121 < endIndex5) {
									var i20 = _g121++;
									var advance7;
									if(i20 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text13) - 1) {
										var nextWidth7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i20 + 1)).width;
										var twoWidths7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text13,i20,2)).width;
										advance7 = twoWidths7 - nextWidth7;
									} else advance7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i20)).width;
									positions12.push(advance7);
								}
							}
							positions = positions12;
							var width15 = 0.0;
							var _g10 = 0;
							while(_g10 < positions.length) {
								var position7 = positions[_g10];
								++_g10;
								width15 += position7;
							}
							widthValue = width15;
							tempWidth2 = widthValue;
						}
					}
				}
				var text14 = this.text;
				var endIndex8 = formatRange.end;
				var positions13 = [];
				if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				if(_g.__useIntAdvances) {
					var previousWidth8 = 0.0;
					var width16;
					var _g122 = textIndex;
					while(_g122 < endIndex8) {
						var i21 = _g122++;
						width16 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text14,textIndex,i21 + 1)).width;
						positions13.push(width16 - previousWidth8);
						previousWidth8 = width16;
					}
				} else {
					var _g123 = textIndex;
					while(_g123 < endIndex8) {
						var i22 = _g123++;
						var advance8;
						if(i22 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text14) - 1) {
							var nextWidth8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i22 + 1)).width;
							var twoWidths8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text14,i22,2)).width;
							advance8 = twoWidths8 - nextWidth8;
						} else advance8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i22)).width;
						positions13.push(advance8);
					}
				}
				positions = positions13;
				var width17 = 0.0;
				var _g20 = 0;
				while(_g20 < positions.length) {
					var position8 = positions[_g20];
					++_g20;
					width17 += position8;
				}
				widthValue = width17;
				var endIndex9 = formatRange.end;
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex9);
					_g.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = endIndex9;
				}
				var text15 = this.text;
				var endIndex10 = formatRange.end;
				var positions14 = [];
				if(_g.__useIntAdvances == null) _g.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				if(_g.__useIntAdvances) {
					var previousWidth9 = 0.0;
					var width18;
					var _g124 = textIndex;
					while(_g124 < endIndex10) {
						var i23 = _g124++;
						width18 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text15,textIndex,i23 + 1)).width;
						positions14.push(width18 - previousWidth9);
						previousWidth9 = width18;
					}
				} else {
					var _g125 = textIndex;
					while(_g125 < endIndex10) {
						var i24 = _g125++;
						var advance9;
						if(i24 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text15) - 1) {
							var nextWidth9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i24 + 1)).width;
							var twoWidths9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text15,i24,2)).width;
							advance9 = twoWidths9 - nextWidth9;
						} else advance9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i24)).width;
						positions14.push(advance9);
					}
				}
				layoutGroup.positions = positions14;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions15 = layoutGroup.positions;
				var width19 = 0.0;
				var _g26 = 0;
				while(_g26 < positions15.length) {
					var position9 = positions15[_g26];
					++_g26;
					width19 += position9;
				}
				layoutGroup.width = width19;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _g.textFormatRanges.data.get_length() - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges.data.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) maxHeightValue = heightValue;
			if(ascent > maxAscent) maxAscent = ascent;
			if(textIndex == formatRange.end) {
				if(ascent > maxAscent) maxAscent = ascent;
				if(heightValue > maxHeightValue) maxHeightValue = heightValue;
				var _g126 = 0;
				var _g27 = _g.layoutGroups;
				while(_g126 < _g27.data.get_length()) {
					var lg5 = _g27.data.get(_g126);
					++_g126;
					if(lg5.lineIndex < lineIndex) continue;
					if(lg5.lineIndex > lineIndex) break;
					lg5.ascent = maxAscent;
					lg5.height = maxHeightValue;
				}
				offsetY += maxHeightValue;
				maxAscent = 0.0;
				maxHeightValue = 0.0;
				++lineIndex;
				offsetX = 2;
				textIndex++;
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.data.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) offsetX = Math.round((totalWidth - this.lineWidths.data.get(lineIndex)) / 2); else offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) offsetX = Math.round(totalWidth - this.lineWidths.data.get(lineIndex)); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.data.get_length();
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups.data.get(j).lineIndex == lineIndex) {
								if(j == 0 || lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j).startIndex - 1) == 32) lineLength++;
							} else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups.data.get(i + lineLength - 1);
							var endChar = lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.data.get(lineIndex)) / (lineLength - 1);
								var j1 = 0;
								do {
									if(j1 > 1 && lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j1).startIndex - 1) != 32) {
										this.layoutGroups.data.get(i + j1).offsetX += offsetX * (j1 - 1);
										j1++;
									}
									this.layoutGroups.data.get(i + j1).offsetX += offsetX * j1;
								} while(++j1 < lineLength);
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.data.get_length() == 0) {
			this.lineAscents.data.set_length(0);
			this.lineBreaks.data.set_length(0);
			this.lineDescents.data.set_length(0);
			this.lineLeadings.data.set_length(0);
			this.lineHeights.data.set_length(0);
			this.lineWidths.data.set_length(0);
			this.layoutGroups.data.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_restrict: function(value) {
		if(lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.restrict,value)) return this.restrict;
		this.restrict = value;
		if(this.restrict == null || lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.restrict) == 0) this.__restrictRegexp = null; else this.__restrictRegexp = this.createRestrictRegexp(value);
		return this.restrict;
	}
	,set_text: function(value) {
		if(value == null) return this.text = value;
		if(this.__restrictRegexp != null) value = this.__restrictRegexp.split(value).join("");
		if(this.maxChars > 0 && value.length > this.maxChars) value = HxOverrides.substr(value,0,this.maxChars);
		this.text = value;
		return this.text;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text",set_restrict:"set_restrict"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl__$internal_utils_NullUtils = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) seed = 123;
	if(falloff == null) falloff = .5;
	if(octaves == null) this.octaves = 4; else this.octaves = octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX;
		baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g = 0;
		while(_g < height) {
			var py = _g++;
			_x = baseX;
			var _g1 = 0;
			while(_g1 < width) {
				var px = _g1++;
				var s = 0.;
				var _g2 = 0;
				while(_g2 < octaves) {
					var i = _g2++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1;
					g1 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z1:hash < 4?-y1:hash == 14?-x1:-z1);
					hash = p[AB + 1] & 15;
					var g2;
					g2 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z1:hash < 4?-y1:hash == 14?-x:-z1);
					hash = p[BA + 1] & 15;
					var g3;
					g3 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z1:hash < 4?-y:hash == 14?-x1:-z1);
					hash = p[AA + 1] & 15;
					var g4;
					g4 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z1:hash < 4?-y:hash == 14?-x:-z1);
					hash = p[BB] & 15;
					var g5;
					g5 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z:hash < 4?-y1:hash == 14?-x1:-z);
					hash = p[AB] & 15;
					var g6;
					g6 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z:hash < 4?-y1:hash == 14?-x:-z);
					hash = p[BA] & 15;
					var g7;
					g7 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z:hash < 4?-y:hash == 14?-x1:-z);
					hash = p[AA] & 15;
					var g8;
					g8 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z:hash < 4?-y:hash == 14?-x:-z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		this.iXoffset = iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed = iSeed * 16807. % 2147483647 | 0;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) openfl__$internal_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(openfl__$internal_Lib.current == null) openfl__$internal_Lib.current = new openfl_display_MovieClip();
		openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_IShaderDrawable = function() { };
$hxClasses["openfl.display.IShaderDrawable"] = openfl_display_IShaderDrawable;
openfl_display_IShaderDrawable.__name__ = ["openfl","display","IShaderDrawable"];
openfl_display_IShaderDrawable.prototype = {
	shader: null
	,__class__: openfl_display_IShaderDrawable
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.set_bitmapData(bitmapData);
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = 1;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,shader: null
	,smoothing: null
	,__image: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.bitmapData != null && this.bitmapData.image != null) {
			var image = this.bitmapData.image;
			if(this.bitmapData.image.version != this.__imageVersion) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.__imageVersion = image.version;
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) return false;
			if(stack != null && !interactiveOnly) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession); else openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession); else openfl__$internal_renderer_opengl_GLBitmap.render(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession); else openfl__$internal_renderer_opengl_GLBitmap.renderMask(this,renderSession);
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) return;
		openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderSession,force);
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) return;
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(this.__filters != null && this.__filters.length > 0) {
		}
		this.__imageVersion = -1;
		return this.bitmapData;
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * Math.abs(this.get_scaleY());
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * Math.abs(this.__scaleX);
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromBase64(base64,type);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromBytes(bytes,rawAlpha);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) return null;
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) bitmapData.__applyAlpha(rawAlpha);
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__buffer: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__framebufferContext: null
	,__isMask: null
	,__isValid: null
	,__renderable: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureVersion: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) return;
		filter.__applyFilter(this,sourceBitmapData,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent,0); else if(!this.readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
			return bitmapData;
		} else return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) return;
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) return 0; else if(otherBitmapData == null) return -1; else if(this.readable == false || otherBitmapData.readable == false) return -2; else if(this.width != otherBitmapData.width) return -3; else if(this.height != otherBitmapData.height) return -4;
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) return 0;
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) r *= -1;
					if(g < 0) g *= -1;
					if(b < 0) b *= -1;
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
							255;
							comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							a;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						r;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						g;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						b;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) return 0;
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.readable || sourceBitmapData == null) return;
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?openfl_display_BitmapData.__tempVector:null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = false;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.clearRenderDirty = false;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			renderSession1.blendModeManager.setBlendMode(blendMode);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) renderSession1.maskManager.popRect();
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) smoothing = false;
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2?smoothing:false);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) return byteArray = null;
		if(byteArray == null) byteArray = new openfl_utils_ByteArrayData(0);
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("png")));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(rect == null) return;
		if(this.transparent && (color & -16777216) == 0) color = 0;
		if(this.readable) this.image.fillRect(rect.__toLimeRectangle(),color,1); else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.__context.enable(gl.SCISSOR_TEST);
				gl.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.__context.clearColor((color1 >> 16 & 255) / 255,(color1 >> 8 & 255) / 255,(color1 & 255) / 255,(color1 >> 24 & 255) / 255);
			gl.__context.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) gl.__context.disable(gl.SCISSOR_TEST);
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) return;
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			var uvWidth = 1;
			var uvHeight = 1;
			var this1;
			this1 = new Float32Array(104);
			this.__bufferData = this1;
			this.__bufferData[0] = this.width;
			this.__bufferData[1] = this.height;
			this.__bufferData[3] = uvWidth;
			this.__bufferData[4] = uvHeight;
			this.__bufferData[27] = this.height;
			this.__bufferData[30] = uvHeight;
			this.__bufferData[52] = this.width;
			this.__bufferData[55] = uvWidth;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			if(colorTransform != null) this.__bufferColorTransform = colorTransform.__clone(); else this.__bufferColorTransform = null;
			this.__bufferContext = gl;
			this.__buffer = gl.__context.createBuffer();
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else {
			if(this.__bufferAlpha != alpha) {
				var _g1 = 0;
				while(_g1 < 4) {
					var i1 = _g1++;
					this.__bufferData[26 * i1 + 5] = alpha;
				}
				this.__bufferAlpha = alpha;
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				if(colorTransform != null) {
					if(this.__bufferColorTransform == null) this.__bufferColorTransform = colorTransform.__clone(); else this.__bufferColorTransform.__copyFrom(colorTransform);
					var _g2 = 0;
					while(_g2 < 4) {
						var i2 = _g2++;
						this.__bufferData[26 * i2 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i2 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i2 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i2 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i2 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i2 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i2 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i2 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g3 = 0;
					while(_g3 < 4) {
						var i3 = _g3++;
						this.__bufferData[26 * i3 + 6] = 1;
						this.__bufferData[26 * i3 + 11] = 1;
						this.__bufferData[26 * i3 + 16] = 1;
						this.__bufferData[26 * i3 + 21] = 1;
						this.__bufferData[26 * i3 + 22] = 0;
						this.__bufferData[26 * i3 + 23] = 0;
						this.__bufferData[26 * i3 + 24] = 0;
						this.__bufferData[26 * i3 + 25] = 0;
					}
				}
			}
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData.byteLength,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__bufferData),gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.readable) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >> 24 & 255) == 0) color1 = 0;
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) return 0;
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) return 0;
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) return null;
		if(rect == null) rect = this.rect;
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__texture == null || this.__textureContext != gl) {
			this.__textureContext = gl;
			this.__texture = gl.__context.createTexture();
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				if(openfl_display_BitmapData.__supportsBGRA == null) {
					openfl_display_BitmapData.__textureInternalFormat = gl.RGBA;
					var bgraExtension = null;
					if(bgraExtension != null) {
						openfl_display_BitmapData.__supportsBGRA = true;
						openfl_display_BitmapData.__textureFormat = bgraExtension.BGRA_EXT;
						if(gl.type == lime_graphics_opengl_GLContextType.GLES) openfl_display_BitmapData.__textureInternalFormat = bgraExtension.BGRA_EXT;
					} else {
						openfl_display_BitmapData.__supportsBGRA = false;
						openfl_display_BitmapData.__textureFormat = gl.RGBA;
					}
				}
				internalFormat = openfl_display_BitmapData.__textureInternalFormat;
				format = openfl_display_BitmapData.__textureFormat;
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1); else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			if(!openfl_display_BitmapData.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,textureImage.buffer.width,textureImage.buffer.height,0,format,gl.UNSIGNED_BYTE,lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(textureImage.get_data())); else lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			gl.__context.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			result.data.set(i,value);
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.readable) return false;
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) return true;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__pool.get();
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				openfl_geom_Rectangle.__pool.release(hitRect);
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) > firstAlphaThreshold && (testPixel >> 24 & 255) > secondAlphaThreshold) return true;
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
				var pixel2;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) > firstAlphaThreshold) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) return;
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.readable) return;
		var rand;
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return Std["int"](Math.abs(randomSeed / 65536)) % 32768;
		};
		rand = func;
		rand();
		var range = high - low;
		var data = new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					red = green = blue = low + rand() % range;
					alpha = 255;
				} else {
					if(redChannel) red = low + rand() % range;
					if(greenChannel) green = low + rand() % range;
					if(blueChannel) blue = low + rand() % range;
					if(alphaChannel) alpha = low + rand() % range;
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) a = pixelValue & -16777216; else a = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) r = pixelValue & 16711680; else r = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) g = pixelValue & 65280; else g = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) b = pixelValue & 255; else b = blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(!this.readable) return;
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) return;
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) return;
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) return;
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) return;
		var length = rect.width * rect.height * 4;
		if(_$UInt_UInt_$Impl_$.toFloat(byteArray.length - byteArray.position) < length) throw new js__$Boot_HaxeError(new openfl_errors_Error("End of file was encountered.",2030));
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer(byteArray),1,openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.data.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.data.get_length()) {
			var color = inputVector.data.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) {
			var i = _g1++;
			var val = alpha.readUnsignedByte();
			data[i * 4 + 3] = val;
		}
		this.image.version++;
	}
	,__draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = true;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.clearRenderDirty = true;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			var cacheRenderable = source.__renderable;
			if(source.__isMask) source.__renderable = true;
			var cacheAlpha = source.__worldAlpha;
			source.__worldAlpha = 1;
			source.__renderCanvas(renderSession1);
			source.__renderable = cacheRenderable;
			source.__worldAlpha = cacheAlpha;
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) renderSession1.maskManager.popRect();
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) this.__applyAlpha(rawAlpha);
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null || this.__framebufferContext != gl) {
			this.getTexture(gl);
			this.__framebufferContext = gl;
			this.__framebuffer = gl.__context.createFramebuffer();
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__loadFromBase64: function(base64,type) {
		var _g = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_g.__fromImage(image);
			return lime_app_Future.withValue(_g);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _g = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) _g.__applyAlpha(rawAlpha);
			return lime_app_Future.withValue(_g);
		});
	}
	,__loadFromFile: function(path) {
		var _g = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_g.__fromImage(image);
			return lime_app_Future.withValue(_g);
		});
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) return;
		if(this.image.type == lime_graphics_ImageType.DATA) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1,this.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__renderGLMask: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		shader.get_data().uImage0.input = this;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1,this.__worldColorTransform));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0));
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.beginBitmapFill(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) focalPointRatio = 0;
		if(interpolationMethod == null) interpolationMethod = 1;
		if(spreadMethod == null) spreadMethod = 0;
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		if(sourceGraphics.__bounds != null) this.__bounds = sourceGraphics.__bounds.clone(); else this.__bounds = null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var trianglePath;
		var _g = 0;
		while(_g < graphicsData.data.get_length()) {
			var graphics = graphicsData.data.get(_g);
			++_g;
			switch(graphics.__graphicsDataType) {
			case openfl_display_GraphicsDataType.SOLID:
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
				break;
			case openfl_display_GraphicsDataType.BITMAP:
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case openfl_display_GraphicsDataType.GRADIENT:
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case openfl_display_GraphicsDataType.STROKE:
				stroke = graphics;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) thickness = null;
					switch(stroke.fill.__graphicsFillType) {
					case openfl_display_GraphicsFillType.SOLID_FILL:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case openfl_display_GraphicsFillType.BITMAP_FILL:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					case openfl_display_GraphicsFillType.GRADIENT_FILL:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					default:
					}
				} else this.lineStyle();
				break;
			case openfl_display_GraphicsDataType.PATH:
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case openfl_display_GraphicsDataType.TRIANGLE_PATH:
				trianglePath = graphics;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			case openfl_display_GraphicsDataType.END:
				this.endFill();
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) winding = 0;
		var dataIndex = 0;
		if(winding == 1) this.__commands.windingNonZero();
		var _g = 0;
		try {
			while(_g < commands.data.get_length()) {
				var command = commands.data.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 4:
					this.moveTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
					throw "__break__";
					dataIndex += 4;
					break;
				case 5:
					this.lineTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
					throw "__break__";
					dataIndex += 4;
					break;
				case 3:
					this.curveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 6:
					this.cubicCurveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3),data.data.get(dataIndex + 4),data.data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize;
		if(width < height) minSize = width * 2; else minSize = height * 2;
		if(topLeftRadius < minSize) topLeftRadius = topLeftRadius; else topLeftRadius = minSize;
		if(topRightRadius < minSize) topRightRadius = topRightRadius; else topRightRadius = minSize;
		if(bottomLeftRadius < minSize) bottomLeftRadius = bottomLeftRadius; else bottomLeftRadius = minSize;
		if(bottomRightRadius < minSize) bottomRightRadius = bottomRightRadius; else bottomRightRadius = minSize;
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) culling = 1;
		if(vertices == null) return;
		var vlen = Std["int"](vertices.data.get_length() / 2);
		if(culling == null) culling = 1;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				indices.data.push(i);
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data.get(i1 * 2);
			tmpy = vertices.data.get(i1 * 2 + 1);
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.lineBitmapStyle(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) focalPointRatio = 0;
		if(interpolationMethod == null) interpolationMethod = 1;
		if(spreadMethod == null) spreadMethod = 0;
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) miterLimit = 3;
		if(scaleMode == null) scaleMode = 2;
		if(pixelHinting == null) pixelHinting = false;
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) return;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) recurse = true;
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:case 4:case 15:case 16:case 5:case 6:case 7:case 8:
				if(path == null) path = new openfl_display_GraphicsPath();
				break;
			default:
				if(path != null) {
					graphicsData.data.push(path);
					path = null;
				}
			}
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				path.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				path.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 15:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				path.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 16:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				path.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 5:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c4 = data;
				path.__drawCircle(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2]);
				break;
			case 6:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c5 = data;
				path.__drawEllipse(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 7:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c6 = data;
				path.__drawRect(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 8:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c7 = data;
				path.__drawRoundRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3],c7.buffer.f[c7.fPos + 4],c7.buffer.o[c7.oPos] != null?c7.buffer.o[c7.oPos]:c7.buffer.f[c7.fPos + 4]);
				break;
			case 13:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c8 = data;
				break;
			case 12:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c9 = data;
				path = null;
				break;
			case 14:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c10 = data;
				stroke = new openfl_display_GraphicsStroke(c10.buffer.o[c10.oPos],c10.buffer.b[c10.bPos],c10.buffer.o[c10.oPos + 1],c10.buffer.o[c10.oPos + 2],c10.buffer.o[c10.oPos + 3],c10.buffer.f[c10.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c10.buffer.i[c10.iPos],c10.buffer.f[c10.fPos]);
				graphicsData.data.push(stroke);
				break;
			case 11:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				var x = new openfl_display_GraphicsEndFill();
				graphicsData.data.push(x);
				break;
			case 0:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c11 = data;
				var x1 = new openfl_display_GraphicsBitmapFill(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos],c11.buffer.b[c11.bPos + 1]);
				graphicsData.data.push(x1);
				break;
			case 1:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c12 = data;
				var x2 = new openfl_display_GraphicsSolidFill(c12.buffer.i[c12.iPos],1);
				graphicsData.data.push(x2);
				break;
			case 2:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c13 = data;
				var x3 = new openfl_display_GraphicsGradientFill(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
				graphicsData.data.push(x3);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		if(path != null) graphicsData.data.push(path);
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) return;
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) scaleX = Math.abs(parentTransform.a); else scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			if(parentTransform.c == 0) scaleY = Math.abs(parentTransform.d); else scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
		} else return;
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) this.set___dirty(true);
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		this.__renderTransform.tx = this.__worldTransform.__transformInverseX(tx,ty);
		this.__renderTransform.ty = this.__worldTransform.__transformInverseY(tx,ty);
		var newWidth = Math.ceil(width + this.__renderTransform.tx);
		var newHeight = Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) this.set___dirty(true);
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(type == null) type = 0;
	if(spreadMethod == null) spreadMethod = 0;
	if(interpolationMethod == null) interpolationMethod = 1;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) winding = 0;
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		if(this.data == null) this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.commands.data.push(6);
		this.data.data.push(controlX1);
		this.data.data.push(controlY1);
		this.data.data.push(controlX2);
		this.data.data.push(controlY2);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		if(this.data == null) this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.commands.data.push(3);
		this.data.data.push(controlX);
		this.data.data.push(controlY);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		if(this.data == null) this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		if(this.data == null) this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		if(this.data == null) this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		if(this.data == null) this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) ellipseWidth = width / 2;
		if(ellipseHeight > height / 2) ellipseHeight = height / 2;
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.SIN45;
		var cx2 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.TAN22;
		var cy1 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.SIN45;
		var cy2 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.TAN22;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(joints == null) joints = 2;
	if(caps == null) caps = 0;
	if(scaleMode == null) scaleMode = 2;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = NaN;
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) culling = 1;
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = openfl_display_GraphicsDataType.TRIANGLE_PATH;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = ["openfl","display","GraphicsTrianglePath"];
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END","TRIANGLE_PATH"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.TRIANGLE_PATH = ["TRIANGLE_PATH",6];
openfl_display_GraphicsDataType.TRIANGLE_PATH.toString = $estr;
openfl_display_GraphicsDataType.TRIANGLE_PATH.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__library: null
	,__path: null
	,__unloaded: null
	,close: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 59, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) this.__path = this.__path.substring(0,queryIndex);
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if(StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) request.url = this.__path + request.url.substring(queryIndex); else request.url = this.__path;
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) extension = this.__path.substring(extIndex + 1);
			switch(extension) {
			case "json":
				this.contentLoaderInfo.contentType = "application/json";
				break;
			case "swf":
				this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
				break;
			case "jpg":case "jpeg":
				this.contentLoaderInfo.contentType = "image/jpeg";
				break;
			case "png":
				this.contentLoaderInfo.contentType = "image/png";
				break;
			case "gif":
				this.contentLoaderInfo.contentType = "image/gif";
				break;
			case "js":
				this.contentLoaderInfo.contentType = "application/javascript";
				break;
			default:
				this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
			}
		} else this.contentLoaderInfo.contentType = request.contentType;
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) loader.dataFormat = 1;
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,unload: function() {
		if(!this.__unloaded) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		if(this.content != null) this.content.__stopAllMovieClips();
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		if(gc) {
		}
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.content = new openfl_display_Bitmap(bitmapData);
		this.contentLoaderInfo.content = this.content;
		this.addChild(this.content);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _g = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = lime_utils_AssetManifest.parse(loader.data,haxe_io_Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) library.load().onComplete(function(_) {
				_g.__library = library;
				openfl_utils_Assets.registerLibrary(_g.contentLoaderInfo.url,_g.__library);
				if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) openfl_utils_Assets.registerLibrary(manifest.name,_g.__library);
				_g.content = _g.__library.getMovieClip("");
				_g.contentLoaderInfo.content = _g.content;
				_g.addChild(_g.content);
				_g.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
			}).onError(function(e) {
				_g.__dispatchError(e);
			});
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.content = new openfl_display_Sprite();
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) this.bytesLoaded = this.bytesTotal;
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(index < 0) return;
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
			this.__frameScripts.h[frame] = method;
		} else if(this.__frameScripts != null) this.__frameScripts.remove(frame);
	}
	,gotoAndPlay: function(frame,scene) {
		this.play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,gotoAndStop: function(frame,scene) {
		this.stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,nextFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame + 1);
	}
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) return;
		this.__playing = true;
		this.__frameTime = 1000 / this.__swf.frameRate | 0;
		this.__timeElapsed = 0;
	}
	,prevFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame - 1);
	}
	,stop: function() {
		this.__playing = false;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) return;
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) return;
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) return;
			} else this.__currentFrame = nextFrame;
		}
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frame;
			var frameData;
			var instance;
			var _g1 = 0;
			var _g = this.__currentFrame;
			while(_g1 < _g) {
				var i1 = _g1++;
				frame = i1 + 1;
				frameData = this.__symbol.frames[i1];
				if(frameData.objects == null) continue;
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					var _g4 = frameObject.type;
					switch(_g4[1]) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null) {
							currentInstancesByFrameObjectID.h[frameObject.id] = instance;
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null && instance.displayObject != null) this.__updateDisplayObject(instance.displayObject,frameObject);
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var $it0 = currentInstancesByFrameObjectID.iterator();
			while( $it0.hasNext() ) {
				var instance1 = $it0.next();
				if(HxOverrides.indexOf(currentInstances,instance1,0) == -1) {
					if(instance1.clipDepth > 0) currentMasks.push(instance1); else currentInstances.push(instance1);
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g11 = 0;
			var _g5 = currentInstances.length;
			while(_g11 < _g5) {
				var i2 = _g11++;
				existingChild = this.__children[i2];
				instance = currentInstances[i2];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i2);
				} else child = this.__children[i2];
				maskApplied = false;
				var _g21 = 0;
				while(_g21 < currentMasks.length) {
					var mask = currentMasks[_g21];
					++_g21;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) child.set_mask(null);
			}
			var child1;
			var i = currentInstances.length;
			var length = this.__children.length;
			while(i < length) {
				child1 = this.__children[i];
				var _g6 = 0;
				var _g12 = this.__activeInstances;
				while(_g6 < _g12.length) {
					var instance2 = _g12[_g6];
					++_g6;
					if(instance2.displayObject == child1) {
						this.removeChild(child1);
						i--;
						length--;
					}
				}
				i++;
			}
			this.__lastFrameUpdate = this.__currentFrame;
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g1 = this.__currentFrame;
		var _g = advanceToFrame + 1;
		while(_g1 < _g) {
			var frame = _g1++;
			if(frame == this.__lastFrameScriptEval) continue;
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				var script = this.__frameScripts.h[frame];
				script();
				if(this.__currentFrame != frame) return false;
			}
			if(!this.__playing) break;
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		var _g2 = this;
		if(this.__activeInstances != null) return;
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			if(frameData.script != null) {
				if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
				this.__frameScripts.h[frame] = frameData.script;
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script) {
						return function() {
							try {
								script[0].call(_g2);
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								haxe_Log.trace("Error evaluating frame script\n " + Std.string(e) + "\n" + haxe_CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script[0].toString(),{ fileName : "MovieClip.hx", lineNumber : 488, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
							}
						};
					})(script);
					this.__frameScripts.h[frame] = wrapper;
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
					if(this.__symbol.className != null) lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 504, className : "openfl.display.MovieClip", methodName : "__fromSymbol"}); else lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 508, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var _g11 = 0;
		var _g3 = this.__totalFrames;
		while(_g11 < _g3) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) continue;
			var _g21 = 0;
			var _g31 = frameData1.objects;
			while(_g21 < _g31.length) {
				var frameObject = _g31[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.h.hasOwnProperty(frameObject.id)) continue; else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.h[frameObject.symbol];
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.h[frameObject.id] = instance;
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) this.play();
		this.__enterFrame(0);
		var _g6 = 0;
		var _g12 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g6 < _g12.length) {
			var field = _g12[_g6];
			++_g6;
			var _g22 = 0;
			var _g32 = this.__children;
			while(_g22 < _g32.length) {
				var child = _g32[_g22];
				++_g22;
				if(child.get_name() == field) this[field] = child;
			}
		}
	}
	,__getNextFrame: function(deltaTime) {
		this.__timeElapsed += deltaTime;
		var nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) nextFrame = 1;
		if(nextFrame > this.__totalFrames) nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		this.__timeElapsed = this.__timeElapsed % this.__frameTime;
		return nextFrame;
	}
	,__goto: function(frame) {
		if(this.__symbol == null) return;
		if(frame < 1) frame = 1; else if(frame > this.__totalFrames) frame = this.__totalFrames;
		this.__currentFrame = frame;
		this.__enterFrame(0);
	}
	,__resolveFrameReference: function(frame) {
		if(((frame | 0) === frame)) return frame; else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) return frameLabel.get_frame();
			}
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else throw new js__$Boot_HaxeError("Invalid type for frame " + Type.getClassName(frame));
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateDisplayObject: function(displayObject,frameObject) {
		if(displayObject == null) return;
		if(frameObject.name != null) displayObject.set_name(frameObject.name);
		if(frameObject.matrix != null) displayObject.get_transform().set_matrix(frameObject.matrix);
		if(frameObject.colorTransform != null) displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else displayObject.set_filters(null);
		if(frameObject.visible != null) displayObject.set_visible(frameObject.visible);
		if(frameObject.blendMode != null) displayObject.set_blendMode(frameObject.blendMode);
		if(frameObject.cacheAsBitmap != null) {
		}
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) this.__currentLabel = this.__currentFrameLabel; else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) this.__currentLabel = label.get_name(); else break;
			}
		}
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_isPlaying: function() {
		return this.__playing;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_isPlaying:"get_isPlaying",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		if(this.simulateProgress) return;
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) this.display.dispatchEvent(new openfl_events_Event("unload"));
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) openfl_Lib.get_current().removeChild(this.display);
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready && !this.simulateProgress) lime_app_Preloader.prototype.start.call(this);
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.get_current().stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.config.height;
		if(height > 0) return height; else return openfl_Lib.get_current().stage.stageHeight;
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.config.width;
		if(width > 0) return width; else return openfl_Lib.get_current().stage.stageWidth;
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) percentLoaded = 1;
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) percent = 0;
		if(percent > 1) percent = 1;
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 1:
		return "full";
	case 0:
		return "fast";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	shader: null
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl_display_Graphics(this);
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null?upState:new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null?hitTestState:new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) this.set_downState(symbol.downState.__createObject(swf));
		if(symbol.hitState != null) this.set_hitTestState(symbol.hitState.__createObject(swf));
		if(symbol.overState != null) this.set_overState(symbol.overState.__createObject(swf));
		if(symbol.upState != null) this.set_upState(symbol.upState.__createObject(swf));
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) stack[0] = hitObject; else stack[stack.length - 1] = hitObject;
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) hitTest = interactiveOnly;
		}
		if(stack != null) while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) hitTest = true;
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) return;
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) return;
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.data.get_length()) {
			var previousState = _g1.data.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.data.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) this.__currentState.__setStageReference(this.stage);
			this.__currentState.__renderDOM(renderSession);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) return;
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGLMask: function(renderSession) {
		if(this.__currentState == null) return;
		this.__currentState.__renderGLMask(renderSession);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) this.__currentState.__setStageReference(stage);
		if(this.hitTestState != null && this.hitTestState != this.__currentState) this.hitTestState.__setStageReference(stage);
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) this.__currentState.__setTransformDirty();
		if(this.hitTestState != null && this.hitTestState != this.__currentState) this.hitTestState.__setTransformDirty();
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			if(this.__currentState != null) this.__currentState.__update(transformOnly,true,maskGraphics);
			if(this.hitTestState != null && this.hitTestState != this.__currentState) this.hitTestState.__update(transformOnly,true,maskGraphics);
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		if(this.__currentState != null) this.__currentState.__updateChildren(transformOnly);
		if(this.hitTestState != null && this.hitTestState != this.__currentState) this.hitTestState.__updateChildren(transformOnly);
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) this.__currentState.__updateTransforms();
		if(this.hitTestState != null && this.hitTestState != this.__currentState) this.hitTestState.__updateTransforms();
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) this.set___currentState(downState);
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.hitTestState != null && this.hitTestState != hitTestState) {
			if(this.hitTestState != this.downState && this.hitTestState != this.upState && this.hitTestState != this.overState) this.hitTestState.__renderParent = null;
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) this.set___currentState(overState);
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) this.__soundTransform = new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) this.set___currentState(upState);
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.hitTestState) this.__currentState.__renderParent = null;
		if(value != null && value.parent != null) value.parent.removeChild(value);
		if(value != this.__currentState) {
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) this.set___currentState(this.upState);
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) this.__ignoreEvent = true;
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) this.set___currentState(this.overState);
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) this.set___currentState(this.overState); else this.set___currentState(this.upState);
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__contentsScaleFactor = window.__scale;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.__wasFullscreen = window.__fullscreen;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var x = new openfl_display_Stage3D();
	this.stage3Ds.data.push(x);
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	if(openfl_Lib.get_current().stage == null) this.stage.addChild(openfl_Lib.get_current());
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,__touchData: null
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
	}
	,addWindow: function(window) {
		if(this.window != window) return;
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window),false,-9000);
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onDropFile.add((function(f4,a14) {
			return function(a2) {
				f4(a14,a2);
			};
		})($bind(this,this.onWindowDropFile),window));
		window.onEnter.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f8,a18) {
			return function() {
				f8(a18);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f9,a19) {
			return function(a21,a3) {
				f9(a19,a21,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f10,a110) {
			return function(a22,a31) {
				f10(a110,a22,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f12,a112) {
			return function() {
				f12(a112);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f13,a113) {
			return function(x,y,a23) {
				f13(a113,x,y,a23);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f14,a114) {
			return function(x1,y1) {
				f14(a114,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f15,a115) {
			return function(x2,y2) {
				f15(a115,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f16,a116) {
			return function(x3,y3,a24) {
				f16(a116,x3,y3,a24);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f17,a117) {
			return function(a25,a32) {
				f17(a117,a25,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f18,a118) {
			return function(x4,y4) {
				f18(a118,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f19,a119) {
			return function(a26,a33) {
				f19(a119,a26,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f20,a120) {
			return function() {
				f20(a120);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f21,a121) {
			return function(a27,a34,a4) {
				f21(a121,a27,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f22,a122) {
			return function(a28) {
				f22(a122,a28);
			};
		})($bind(this,this.onTextInput),window));
		if(window.id > -1) this.onWindowCreate(window);
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var $it0 = lime_ui_Gamepad.devices.iterator();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			this.__onGamepadConnect(gamepad);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function(window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onKey("keyDown",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onKey("keyUp",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onModuleExit: function(code) {
		if(this.window != null) try {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseDown";
				break;
			case 2:
				type = "rightMouseDown";
				break;
			default:
				type = "mouseDown";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseUp";
				break;
			case 2:
				type = "rightMouseUp";
				break;
			default:
				type = "mouseUp";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
			if(!this.showDefaultContextMenu && button == 2) window.onMouseUp.cancel();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(renderer,context) {
		this.__createRenderer();
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		try {
			var stack = [];
			if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
			var event = new openfl_events_TextEvent("textInput",true,false,text);
			if(stack.length > 0) {
				stack.reverse();
				this.__dispatchStack(event,stack);
			} else this.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchMove: function(touch) {
		try {
			this.__onTouch("touchMove",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchEnd: function(touch) {
		try {
			if(this.__primaryTouch == touch) this.__primaryTouch = null;
			this.__onTouch("touchEnd",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchStart: function(touch) {
		try {
			if(this.__primaryTouch == null) this.__primaryTouch = touch;
			this.__onTouch("touchBegin",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			if(window.renderer != null) this.__createRenderer();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__renderDirty = true;
			this.__broadcastEvent(new openfl_events_Event("activate"));
			this.set_focus(this.__cacheFocus);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
			var currentFocus = this.get_focus();
			this.set_focus(null);
			this.__cacheFocus = currentFocus;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__resize();
			if(!this.__wasFullscreen) {
				this.__wasFullscreen = true;
				if(this.__displayState == 2) this.__displayState = 1;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) return;
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		try {
			this.__renderDirty = true;
			this.__resize();
			if(this.__wasFullscreen && !window.__fullscreen) {
				this.__wasFullscreen = false;
				this.__displayState = 2;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) return;
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		try {
			if(this.__rendering) return;
			this.__rendering = true;
			if(this.__renderer != null && (openfl_display_Stage3D.__active || this.stage3Ds.data.get(0).__contextRequested)) {
				this.__renderer.clear();
				this.__renderer.renderStage3D();
				this.__renderDirty = true;
			}
			this.__broadcastEvent(new openfl_events_Event("enterFrame"));
			this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
			this.__broadcastEvent(new openfl_events_Event("exitFrame"));
			if(this.__invalidated) {
				this.__invalidated = false;
				this.__broadcastEvent(new openfl_events_Event("render"));
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false,true);
			if(this.__renderer != null && this.__renderDirty) {
				if(!openfl_display_Stage3D.__active) this.__renderer.clear();
				if(renderer.type == lime_graphics_RendererType.CAIRO) {
					var _g = renderer.context;
					switch(_g[1]) {
					case 4:
						var cairo = _g[2];
						break;
					default:
					}
				}
				this.__renderer.render();
			} else renderer.onRender.cancel();
			this.__rendering = false;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		if(openfl_display_DisplayObject.__broadcastEvents.exists(event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(event.type);
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__createRenderer: function() {
		{
			var _g = this.window.renderer.context;
			switch(_g[1]) {
			case 0:
				var gl = _g[2];
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,gl);
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,context);
				break;
			case 2:
				var element = _g[2];
				break;
			case 4:
				var cairo = _g[2];
				break;
			case 5:
				var ctx = _g[2];
				break;
			default:
			}
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) parent.__getWorldTransform().__transformInversePoint(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) local.copyFrom(global);
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") this.window.onKeyDown.cancel(); else this.window.onKeyUp.cancel();
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		var clickType = null;
		switch(type) {
		case "mouseDown":
			if(target.__allowMouseFocus()) this.set_focus(target); else this.set_focus(null);
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0) this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this)); else if(this.__mouseDownLeft == target) clickType = "click";
				this.__mouseDownLeft = null;
			}
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) clickType = "middleClick";
			this.__mouseDownMiddle = null;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) clickType = "rightClick";
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) cursor = this.__mouseDownLeft.__getCursor(); else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__rollOutStack,target3,0) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) this.__rollOutStack.push(target3);
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) dropTarget = stack1[stack1.length - 1];
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) dropTarget = this.__mouseOverTarget;
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var delta = deltaY | 0;
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) touchData = this.__touchData.h[touchId]; else {
			touchData = openfl_utils_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) touchType = "touchTap";
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchOverTarget.__dispatchEvent(touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(HxOverrides.indexOf(stack,target1,0) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				target1.__dispatchEvent(touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(HxOverrides.indexOf(touchOutStack,target2,0) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					target2.__dispatchEvent(touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) touchOutStack.push(target2);
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				target.__dispatchEvent(touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl_utils_TouchData.__pool.release(touchData);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = Math.min(scaleX,scaleY);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) this.__renderer.resize(windowWidth,windowHeight);
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) this.__dispatchEvent(new openfl_events_Event("resize"));
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) parent.__getWorldTransform().__transformInversePoint(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGraphics);
				if(updateChildren) this.__transformDirty = false;
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			if(updateChildren) {
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value & 16777215,6);
		return this.__color = value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) switch(value) {
		case 2:
			if(this.window.__fullscreen) this.window.set_fullscreen(false);
			break;
		default:
			if(!this.window.__fullscreen) this.window.set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) return this.application.backend.getFrameRate();
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) return this.application.backend.setFrameRate(value);
		return value;
	}
	,get_fullScreenHeight: function() {
		return this.window.get_display().currentMode.height;
	}
	,get_fullScreenWidth: function() {
		return this.window.get_display().currentMode.width;
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_fullScreenWidth:"get_fullScreenWidth",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.set_x(0);
	this.set_y(0);
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,__contextRequested: null
	,__stage: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) profile = 0;
		if(context3DRenderMode == null) context3DRenderMode = 0;
		this.__contextRequested = true;
		if(this.context3D != null) haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		this.__stage = stage;
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var transparentBackground = Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null;
			var colorDepth;
			if(Object.prototype.hasOwnProperty.call($window.config,"colorDepth")) colorDepth = $window.config.colorDepth; else colorDepth = 16;
			var options = { alpha : transparentBackground || colorDepth > 16?true:false, antialias : Object.prototype.hasOwnProperty.call($window.config,"antialiasing")?$window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call($window.config,"depthBuffer")?$window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer")?$window.config.stencilBuffer:false, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options);
			if(this.__webgl != null) {
				this.__renderContext = new lime__$backend_html5_HTML5GLRenderContext(this.__webgl);
				lime_graphics_opengl_GL.context = this.__renderContext;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else this.__dispatchError();
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested && this.context3D == null) this.__createContext(stage,renderSession);
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__renderContext;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested && this.context3D == null) this.__createContext(stage,renderSession);
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) this.context3D.__program.__use();
				}
			}
			if(openfl__$internal_stage3D_GLUtils.debug) renderSession.gl.__context.getError();
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,set_x: function(value) {
		if(this.x == value) return value;
		this.x = value;
		if(this.context3D != null) this.context3D.__updateBackbufferViewport();
		return value;
	}
	,set_y: function(value) {
		if(this.y == value) return value;
		this.y = value;
		if(this.context3D != null) this.context3D.__updateBackbufferViewport();
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",set_x:"set_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"parameters")) try {
			this.stage.get_loaderInfo().parameters = this.config.parameters;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) this.stage.__setLogicalSize(this.config.width,this.config.height);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.enableErrorChecking = false;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLContext3D.create(this);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__maxAnisotropyCubeTexture: null
	,__maxAnisotropyTexture2D: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsAnisotropicFiltering: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 7;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		openfl__$internal_stage3D_opengl_GLContext3D.clear(this,red,green,blue,alpha,depth,stencil,mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) wantsBestResolutionOnBrowserZoom = false;
		if(wantsBestResolution == null) wantsBestResolution = false;
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		openfl__$internal_stage3D_opengl_GLContext3D.configureBackBuffer(this,width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) bufferUsage = 1;
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) bufferUsage = 1;
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) recreate = true;
		openfl__$internal_stage3D_opengl_GLContext3D.dispose(this,recreate);
	}
	,drawToBitmapData: function(destination) {
		if(destination == null) return;
		openfl__$internal_stage3D_opengl_GLContext3D.drawToBitmapData(this,destination);
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		if(this.__program == null) return;
		openfl__$internal_stage3D_opengl_GLContext3D.drawTriangles(this,indexBuffer,firstIndex,numTriangles);
	}
	,present: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.present(this);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		openfl__$internal_stage3D_opengl_GLContext3D.setBlendFactors(this,sourceFactor,destinationFactor);
	}
	,setColorMask: function(red,green,blue,alpha) {
		openfl__$internal_stage3D_opengl_GLContext3D.setColorMask(this,red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		openfl__$internal_stage3D_opengl_GLContext3D.setCulling(this,triangleFaceToCull);
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		openfl__$internal_stage3D_opengl_GLContext3D.setDepthTest(this,depthMask,passCompareMode);
	}
	,setProgram: function(program) {
		if(program == null) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		openfl__$internal_stage3D_opengl_GLContext3D.setProgram(this,program);
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) return;
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromByteArray(this,programType,firstRegister,numRegisters,data,byteArrayOffset);
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromMatrix(this,programType,firstRegister,matrix,transposedMatrix);
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = -1;
		if(numRegisters == 0) return;
		openfl__$internal_stage3D_opengl_GLContext3D.setProgramConstantsFromVector(this,programType,firstRegister,data,numRegisters);
	}
	,setRenderToBackBuffer: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.setRenderToBackBuffer(this);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		openfl__$internal_stage3D_opengl_GLContext3D.setRenderToTexture(this,texture,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		openfl__$internal_stage3D_opengl_GLContext3D.setSamplerStateAt(this,sampler,wrap,filter,mipfilter);
	}
	,setScissorRectangle: function(rectangle) {
		openfl__$internal_stage3D_opengl_GLContext3D.setScissorRectangle(this,rectangle);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) actionOnDepthPassStencilFail = 5;
		if(actionOnDepthFail == null) actionOnDepthFail = 5;
		if(actionOnBothPass == null) actionOnBothPass = 5;
		if(compareMode == null) compareMode = 0;
		if(triangleFace == null) triangleFace = 2;
		openfl__$internal_stage3D_opengl_GLContext3D.setStencilActions(this,triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		openfl__$internal_stage3D_opengl_GLContext3D.setStencilReferenceValue(this,referenceValue,readMask,writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		openfl__$internal_stage3D_opengl_GLContext3D.setTextureAt(this,sampler,texture);
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) format = 4;
		if(bufferOffset == null) bufferOffset = 0;
		openfl__$internal_stage3D_opengl_GLContext3D.setVertexBufferAt(this,index,buffer,bufferOffset,format);
	}
	,__updateBackbufferViewport: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP(this);
	}
	,__updateBlendFactors: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP(this);
	}
	,set_enableErrorChecking: function(value) {
		openfl__$internal_stage3D_opengl_GLContext3D.setEnableErrorChecking(value);
		return this.enableErrorChecking = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	openfl__$internal_stage3D_opengl_GLIndexBuffer3D.create(this,this.__context.__renderSession,bufferUsage);
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__tempInt16Array: null
	,__usage: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.dispose(this,this.__context.__renderSession);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,startOffset,count);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) byteLength = -1;
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,uploadFromVector: function(data,startOffset,count) {
		openfl__$internal_stage3D_opengl_GLIndexBuffer3D.uploadFromVector(this,this.__context.__renderSession,data,startOffset,count);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.dispose(this,this.__context.__renderSession);
	}
	,upload: function(vertexProgram,fragmentProgram) {
		openfl__$internal_stage3D_opengl_GLProgram3D.upload(this,this.__context.__renderSession,vertexProgram,fragmentProgram);
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.data.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) this.__vertexUniformMap.markDirty(index,count); else this.__fragmentUniformMap.markDirty(index,count);
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) openfl__$internal_stage3D_opengl_GLProgram3D.setPositionScale(this,this.__context.__renderSession,positionScale);
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.data.set(sampler,state);
	}
	,__use: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D["use"](this,this.__context.__renderSession);
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(gl) {
	this.gl = gl;
	this.isDirty = true;
	this.regDataPointer = new lime_utils_BytePointerData(null,0);
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,gl: null
	,regDataPointer: null
	,flush: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D.flushUniform(this,this.gl);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) total = uniform.regIndex + uniform.regCount;
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.data.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) return;
		var end = start + count;
		if(end > this.__registerLookup.data.get_length()) end = this.__registerLookup.data.get_length();
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.data.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else index++;
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	openfl__$internal_stage3D_opengl_GLVertexBuffer3D.create(this,this.__context.__renderSession,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage));
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.dispose(this,this.__context.__renderSession);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,startVertex,numVertices);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) byteLength = -1;
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		openfl__$internal_stage3D_opengl_GLVertexBuffer3D.uploadFromVector(this,this.__context.__renderSession,data,startVertex,numVertices);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	openfl__$internal_stage3D_opengl_GLTextureBase.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		openfl__$internal_stage3D_opengl_GLTextureBase.dispose(this,this.__context.__renderSession);
	}
	,__getImage: function(bitmapData) {
		return openfl__$internal_stage3D_opengl_GLTextureBase.getImage(this,this.__context.__renderSession,bitmapData);
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLTextureBase.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLCubeTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
		var _g = this;
		if(!async) openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset); else haxe_Timer.delay(function() {
			openfl__$internal_stage3D_opengl_GLCubeTexture.uploadCompressedTextureFromByteArray(_g,_g.__context.__renderSession,data,byteArrayOffset);
			_g.dispatchEvent(new openfl_events_Event("textureReady"));
		},1);
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) generateMipmap = false;
		if(miplevel == null) miplevel = 0;
		if(source == null) return;
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromBitmapData(this,this.__context.__renderSession,source,side,miplevel,generateMipmap);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		if(data == null) return;
		openfl__$internal_stage3D_opengl_GLCubeTexture.uploadFromTypedArray(this,this.__context.__renderSession,data,side,miplevel);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLCubeTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromBitmapData(this,this.__context.__renderSession,source);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset);
	}
	,uploadFromTypedArray: function(data) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(this,this.__context.__renderSession,data);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLRectangleTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
		var _g = this;
		if(!async) openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset); else haxe_Timer.delay(function() {
			openfl__$internal_stage3D_opengl_GLTexture.uploadCompressedTextureFromByteArray(_g,_g.__context.__renderSession,data,byteArrayOffset);
			_g.dispatchEvent(new openfl_events_Event("textureReady"));
		},1);
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) generateMipmap = false;
		if(miplevel == null) miplevel = 0;
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromBitmapData(this,this.__context.__renderSession,source,miplevel,generateMipmap);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromByteArray(this,this.__context.__renderSession,data,byteArrayOffset,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(this,this.__context.__renderSession,data,miplevel);
	}
	,__setSamplerState: function(state) {
		openfl__$internal_stage3D_opengl_GLTexture.setSamplerState(this,this.__context.__renderSession,state);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	openfl__$internal_stage3D_opengl_GLVideoTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _g = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) haxe_Timer.delay(function() {
			_g.__textureReady();
		},0); else this.__netStream.__video.addEventListener("canplay",function(_) {
			_g.__textureReady();
		},false);
	}
	,__getTexture: function() {
		return openfl__$internal_stage3D_opengl_GLVideoTexture.getTexture(this,this.__context.__renderSession);
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) parameters.push(p1);
		if(p2 != null) parameters.push(p2);
		if(p3 != null) parameters.push(p3);
		if(p4 != null) parameters.push(p4);
		if(p5 != null) parameters.push(p5);
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") output += " " + param + "=\"" + Std.string(arg) + "\""; else output += " " + param + "=" + Std.string(arg);
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) activating = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) return true; else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) this.index--;
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.isCopy = false;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) redirected = false;
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) isTouchPointCanceled = false;
	if(timestamp == null) timestamp = 0;
	if(controlKey == null) controlKey = false;
	if(commandKey == null) commandKey = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(pressure == null) pressure = 0;
	if(sizeY == null) sizeY = 0;
	if(sizeX == null) sizeX = 0;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
	if(touchPointID == null) touchPointID = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) cancelable = true;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_external_ExternalInterface = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = ["openfl","external","ExternalInterface"];
openfl_external_ExternalInterface.addCallback = function(functionName,closure) {
	if(openfl__$internal_Lib.application.__windows[0].backend.element != null) openfl__$internal_Lib.application.__windows[0].backend.element[functionName] = closure;
};
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	var callResponse = null;
	if(!new EReg("^\\(.+\\)$","").match(functionName)) {
		var thisArg = functionName.split(".").slice(0,-1).join(".");
		if(thisArg.length > 0) functionName += ".bind(" + thisArg + ")";
	}
	var fn;
	try {
		fn = eval(functionName);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
	if(ValueType.TFunction != Type["typeof"](fn)) return null;
	if(p1 == null) callResponse = fn(); else if(p2 == null) callResponse = fn(p1); else if(p3 == null) callResponse = fn(p1,p2); else if(p4 == null) callResponse = fn(p1,p2,p3); else if(p5 == null) callResponse = fn(p1,p2,p3,p4); else callResponse = fn(p1,p2,p3,p4,p5);
	return callResponse;
};
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__topExtension = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.blurX,this.blurY,this.quality);
		if(finalImage == bitmapData.image) return bitmapData;
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,set_blurX: function(value) {
		if(value != this.blurX) {
			this.blurX = value;
			this.__renderDirty = true;
			if(value > 0) this.__leftExtension = Math.ceil(value); else this.__leftExtension = 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.blurY) {
			this.blurY = value;
			this.__renderDirty = true;
			if(value > 0) this.__topExtension = Math.ceil(value); else this.__topExtension = 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_quality: function(value) {
		if(this.blurX <= 0) this.horizontalPasses = 0; else this.horizontalPasses = Math.round(this.blurX * (value / 4)) + 1;
		if(this.blurY <= 0) this.verticalPasses = 0; else this.verticalPasses = Math.round(this.blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.horizontalPasses + this.verticalPasses;
		if(value != this.quality) this.__renderDirty = true;
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",set_blurY:"set_blurY",set_blurX:"set_blurX"}
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 0;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) destPixel = 0; else {
					var value = Std["int"](Math.min(this.matrix[0] * (sourcePixel >> 24 & 255) + this.matrix[1] * (sourcePixel >> 16 & 255) + this.matrix[2] * (sourcePixel >> 8 & 255) + this.matrix[3] * (sourcePixel & 255) + this.matrix[4],255));
					destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					value;
					var value1 = Std["int"](Math.min(this.matrix[5] * (sourcePixel >> 24 & 255) + this.matrix[6] * (sourcePixel >> 16 & 255) + this.matrix[7] * (sourcePixel >> 8 & 255) + this.matrix[8] * (sourcePixel & 255) + this.matrix[9],255));
					destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					value1;
					var value2 = Std["int"](Math.min(this.matrix[10] * (sourcePixel >> 24 & 255) + this.matrix[11] * (sourcePixel >> 16 & 255) + this.matrix[12] * (sourcePixel >> 8 & 255) + this.matrix[13] * (sourcePixel & 255) + this.matrix[14],255));
					destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					value2;
					var value3 = Std["int"](Math.min(this.matrix[15] * (sourcePixel >> 24 & 255) + this.matrix[16] * (sourcePixel >> 16 & 255) + this.matrix[17] * (sourcePixel >> 8 & 255) + this.matrix[18] * (sourcePixel & 255) + this.matrix[19],255));
					destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
					value3;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) destPixel = 0;
					} else if((destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destOffset] = destPixel >> 8 & 255;
					destData[destOffset + 1] = destPixel >> 16 & 255;
					destData[destOffset + 2] = destPixel >> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 0:
					destData[destOffset] = destPixel >> 24 & 255;
					destData[destOffset + 1] = destPixel >> 16 & 255;
					destData[destOffset + 2] = destPixel >> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >> 24 & 255;
					destData[destOffset + 2] = destPixel >> 16 & 255;
					destData[destOffset + 3] = destPixel >> 8 & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) hideObject = false;
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(angle == null) angle = 45;
	if(distance == null) distance = 4;
	this.distance = 4;
	this.blurY = 0;
	this.blurX = 0;
	this.angle = 45;
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__updateSize();
	this.set_distance(distance);
	this.set_angle(angle);
	this.set_color(color);
	this.set_alpha(alpha);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_strength(strength);
	this.set_quality(quality);
	this.set_inner(inner);
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
	this.__needSecondBitmapData = true;
	this.__preserveObject = !hideObject;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,__offsetX: null
	,__offsetY: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var a = this.color >> 24 & 255;
		var r = this.color >> 16 & 255;
		var g = this.color >> 8 & 255;
		var b = this.color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,a));
		destPoint.x += this.__offsetX;
		destPoint.y += this.__offsetY;
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.blurX,this.blurY,this.quality,this.strength);
		if(finalImage == bitmapData.image) return bitmapData;
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = Std["int"](this.distance * Math.cos(this.angle * Math.PI / 180));
		this.__offsetY = Std["int"](this.distance * Math.sin(this.angle * Math.PI / 180));
		this.__topExtension = Math.ceil((this.__offsetY < 0?-this.__offsetY:0) + this.blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0?this.__offsetY:0) + this.blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0?-this.__offsetX:0) + this.blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0?this.__offsetX:0) + this.blurX);
	}
	,set_alpha: function(value) {
		if(value != this.alpha) this.__renderDirty = true;
		return this.alpha = value;
	}
	,set_angle: function(value) {
		if(value != this.angle) {
			this.angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_blurX: function(value) {
		if(value != this.blurX) {
			this.blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.blurY) {
			this.blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_color: function(value) {
		if(value != this.color) this.__renderDirty = true;
		return this.color = value;
	}
	,set_distance: function(value) {
		if(value != this.distance) {
			this.distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,set_hideObject: function(value) {
		if(value != this.hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.hideObject = value;
	}
	,set_inner: function(value) {
		if(value != this.inner) this.__renderDirty = true;
		return this.inner = value;
	}
	,set_knockout: function(value) {
		if(value != this.knockout) this.__renderDirty = true;
		return this.knockout = value;
	}
	,set_quality: function(value) {
		if(value != this.quality) this.__renderDirty = true;
		return this.quality = value;
	}
	,set_strength: function(value) {
		if(value != this.strength) this.__renderDirty = true;
		return this.strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_strength:"set_strength",set_quality:"set_quality",set_knockout:"set_knockout",set_inner:"set_inner",set_hideObject:"set_hideObject",set_distance:"set_distance",set_color:"set_color",set_blurY:"set_blurY",set_blurX:"set_blurX",set_angle:"set_angle",set_alpha:"set_alpha"}
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 2;
	if(blurY == null) blurY = 6;
	if(blurX == null) blurX = 6;
	if(alpha == null) alpha = 1;
	if(color == null) color = 16711680;
	openfl_filters_BitmapFilter.call(this);
	this.set_color(color);
	this.set_alpha(alpha);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_strength(strength);
	this.set_quality(quality);
	this.set_inner(inner);
	this.set_knockout(knockout);
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.color >> 16 & 255;
		var g = this.color >> 8 & 255;
		var b = this.color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,this.alpha * 255));
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.blurX,this.blurY,this.quality,this.strength);
		if(finalImage == bitmapData.image) return bitmapData;
		return sourceBitmapData;
	}
	,__initShader: function(renderSession,pass) {
		return null;
	}
	,set_alpha: function(value) {
		if(value != this.alpha) this.__renderDirty = true;
		return this.alpha = value;
	}
	,set_blurX: function(value) {
		if(value != this.blurX) {
			this.blurX = value;
			this.__renderDirty = true;
			if(value > 0) this.__leftExtension = Math.ceil(value); else this.__leftExtension = 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.blurY) {
			this.blurY = value;
			this.__renderDirty = true;
			if(value > 0) this.__topExtension = Math.ceil(value); else this.__topExtension = 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_color: function(value) {
		if(value != this.color) this.__renderDirty = true;
		return this.color = value;
	}
	,set_inner: function(value) {
		if(value != this.inner) this.__renderDirty = true;
		return this.inner = value;
	}
	,set_knockout: function(value) {
		if(value != this.knockout) this.__renderDirty = true;
		return this.knockout = value;
	}
	,set_quality: function(value) {
		if(this.blurX <= 0) this.horizontalPasses = 0; else this.horizontalPasses = Math.round(this.blurX * (value / 4)) + 1;
		if(this.blurY <= 0) this.verticalPasses = 0; else this.verticalPasses = Math.round(this.blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.horizontalPasses + this.verticalPasses;
		if(value != this.quality) this.__renderDirty = true;
		return this.quality = value;
	}
	,set_strength: function(value) {
		if(value != this.strength) this.__renderDirty = true;
		return this.strength = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_strength:"set_strength",set_quality:"set_quality",set_knockout:"set_knockout",set_inner:"set_inner",set_color:"set_color",set_blurY:"set_blurY",set_blurX:"set_blurX",set_alpha:"set_alpha"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
	this.get_data().uColor.value = [0,0,0,0];
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters__$BlurShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._BlurShader_ShaderData"] = openfl_filters__$BlurShader_$ShaderData;
openfl_filters__$BlurShader_$ShaderData.__name__ = ["openfl","filters","_BlurShader_ShaderData"];
openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$BlurShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurShader_$ShaderData
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$GlowShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._GlowShader_ShaderData"] = openfl_filters__$GlowShader_$ShaderData;
openfl_filters__$GlowShader_$ShaderData.__name__ = ["openfl","filters","_GlowShader_ShaderData"];
openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$GlowShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,uColor: null
	,__class__: openfl_filters__$GlowShader_$ShaderData
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__isDefault: function() {
		return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1;
			this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__transform.clone();
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				{
					var _g1 = 0;
					var _g = a.length;
					while(_g1 < _g) {
						var i = _g1++;
						vector.data.set(i,a[i]);
					}
				}
				$r = vector;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.data.get(0),value.rawData.data.get(1),value.rawData.data.get(5),value.rawData.data.get(6),value.rawData.data.get(12),value.rawData.data.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) scaleX = a; else scaleX = Math.sqrt(a * a + b * b);
			if(c == 0) scaleY = a; else scaleY = Math.sqrt(c * c + d * d);
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) this.__buffer.dispose();
	}
	,load: function(stream,context) {
		var _g = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && defaultLibrary.cachedAudioBuffers.exists(this.url)) this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.get(this.url)); else lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
			_g.AudioBuffer_onURLLoad(null);
		});
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) > bytesLength) {
			var copy = new openfl_utils_ByteArrayData(bytesLength);
			copy.writeBytes(bytes,0,bytesLength);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		if(this.__buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent("ioError")); else this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		if(format == null) format = "float";
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		if(format == "float") audioBuffer.bitsPerSample = 32; else audioBuffer.bitsPerSample = 16;
		if(stereo) audioBuffer.channels = 2; else audioBuffer.channels = 1;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(bytes);
		var this1;
		if(buffer != null) this1 = new Uint8Array(buffer,0); else this1 = null;
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) return null;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(); else sndTransform = sndTransform.clone();
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) pan = 1;
		if(pan < -1) pan = -1;
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) source.set_loops(loops - 1);
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) return Std["int"](this.__buffer.get_src().duration() * 1000);
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent("ioError")); else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) this.__soundTransform = soundTransform; else this.__soundTransform = new openfl_media_SoundTransform();
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) return;
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) pan = -1;
			if(pan > 1) pan = 1;
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 1000;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _g = this;
		if(this.__timer == null) this.__timer = new haxe_Timer(1);
		this.__timer.run = function() {
			if(_g.__video.paused) _g.__playStatus("NetStream.Play.pause"); else _g.__playStatus("NetStream.Play.playing");
			_g.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) time = 0; else if(time > this.__video.duration) time = this.__video.duration;
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) this.__video.play(); else this.__video.pause();
	}
	,__playStatus: function(code) {
		if(this.client != null) try {
			var handler = this.client.onPlayStatus;
			handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) try {
			var handler = this.client.onMetaData;
			handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) this.__httpRequest.cancel();
	}
	,load: function(request) {
		var _g = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_g.__dispatchStatus();
				_g.data = data;
				var event = new openfl_events_Event("complete");
				_g.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_g.__dispatchStatus();
				_g.data = data1;
				var event1 = new openfl_events_Event("complete");
				_g.dispatchEvent(event1);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		switch(_g) {
		case "DELETE":
			this.__httpRequest.method = "DELETE";
			break;
		case "HEAD":
			this.__httpRequest.method = "HEAD";
			break;
		case "OPTIONS":
			this.__httpRequest.method = "OPTIONS";
			break;
		case "POST":
			this.__httpRequest.method = "POST";
			break;
		case "PUT":
			this.__httpRequest.method = "PUT";
			break;
		default:
			this.__httpRequest.method = "GET";
		}
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var value = Reflect.field(request.data,field);
					this.__httpRequest.formData.set(field,value);
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) this.__httpRequest.data = request.data; else this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g2 = 0;
			var _g11 = request.requestHeaders;
			while(_g2 < _g11.length) {
				var header = _g11[_g2];
				++_g2;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) this.url = url;
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	if(openfl_net_URLRequestDefaults.idleTimeout > 0) this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout; else this.idleTimeout = 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) this.decode(source);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl_system_Capabilities;
openfl_system_Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl_system_Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_manufacturer:"get_manufacturer",get_language:"get_language",get_cpuArchitecture:"get_cpuArchitecture"}
openfl_system_Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl_system_Capabilities.get_cpuArchitecture = function() {
	return "x86";
};
openfl_system_Capabilities.get_language = function() {
	var language = lime_system__$Locale_Locale_$Impl_$.get_language(lime_system__$Locale_Locale_$Impl_$.get_currentLocale());
	if(language != null) {
		language = language.toLowerCase();
		switch(language) {
		case "cs":case "da":case "nl":case "en":case "fi":case "fr":case "de":case "hu":case "it":case "ja":case "ko":case "nb":case "pl":case "pt":case "ru":case "es":case "sv":case "tr":
			return language;
		case "zh":
			var region = lime_system__$Locale_Locale_$Impl_$.get_region(lime_system__$Locale_Locale_$Impl_$.get_currentLocale());
			if(region != null) {
				var _g = region.toUpperCase();
				switch(_g) {
				case "TW":case "HANT":
					return "zh-TW";
				default:
				}
			}
			return "zh-CN";
		default:
			return "xu";
		}
	}
	return "en";
};
openfl_system_Capabilities.get_manufacturer = function() {
	return "OpenFL HTML5";
};
openfl_system_Capabilities.get_os = function() {
	return "HTML5";
};
openfl_system_Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl_system_Capabilities.get_screenDPI = function() {
	var $window;
	if(openfl__$internal_Lib.application != null) $window = openfl__$internal_Lib.application.__windows[0]; else $window = null;
	var screenDPI;
	screenDPI = 72;
	if($window != null) screenDPI *= $window.__scale;
	return screenDPI;
};
openfl_system_Capabilities.get_screenResolutionX = function() {
	var stage = openfl__$internal_Lib.current.stage;
	var resolutionX = 0;
	if(stage.window != null) {
		var display = stage.window.get_display();
		if(display != null) resolutionX = display.currentMode.width;
	}
	if(resolutionX > 0) return resolutionX;
	return stage.stageWidth;
};
openfl_system_Capabilities.get_screenResolutionY = function() {
	var stage = openfl__$internal_Lib.current.stage;
	var resolutionY = 0;
	if(stage.window != null) {
		var display = stage.window.get_display();
		if(display != null) resolutionY = display.currentMode.height;
	}
	if(resolutionY > 0) return resolutionY;
	return stage.stageHeight;
};
openfl_system_Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("6.5.3",".",",") + ",0";
	return value;
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 40, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 47, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_system__$TouchscreenType_TouchscreenType_$Impl_$ = {};
$hxClasses["openfl.system._TouchscreenType.TouchscreenType_Impl_"] = openfl_system__$TouchscreenType_TouchscreenType_$Impl_$;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.__name__ = ["openfl","system","_TouchscreenType","TouchscreenType_Impl_"];
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "finger":
		return 0;
	case "none":
		return 1;
	case "stylus":
		return 2;
	default:
		return null;
	}
};
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "finger";
	case 1:
		return "none";
	case 2:
		return "stylus";
	default:
		return null;
	}
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		{
			openfl_text_Font.__fontByName.set(instance.name,instance);
			instance;
		}
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	var x = new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0);
	this.__textEngine.textFormatRanges.data.push(x);
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	shader: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		if(text == null || text == "") return;
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.plus(this.__text,text));
		((function($this) {
			var $r;
			var index = $this.__textEngine.textFormatRanges.data.get_length() - 1;
			$r = $this.__textEngine.textFormatRanges.data.get(index);
			return $r;
		}(this))).end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		this.__updateScrollH();
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) try {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.positions[i];
				}
				var lastPosition = group.positions[charIndex - group.startIndex];
				return new openfl_geom_Rectangle(x,group.offsetY,lastPosition,group.ascent + group.descent);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.data.get_length()) {
			var group = _g11.data.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.positions.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.positions[i1];
						if(x <= group.offsetX + advance) return group.startIndex + i1;
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) return 0;
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) startIndex = index + 1; else if(index > charIndex) break;
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.data.get_length()) {
			var group = _g11.data.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) return -1;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.data.get(lineIndex);
		var descender = this.__textEngine.lineDescents.data.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.data.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.data.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.data.get(lineIndex);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g) {
		case 3:case 2:case 5:
			margin = 2;
			break;
		case 4:case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) return group.startIndex;
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		return lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__textEngine.text,startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) return 0;
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) return;
		if(startIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) startIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) startIndex = 0;
		this.replaceText(startIndex,endIndex,value);
		var i = startIndex + lime_text__$UTF8String_UTF8String_$Impl_$.get_length(js_Boot.__cast(value , String));
		if(i > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		this.setSelection(i,i);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) || newText == null) return;
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,0,beginIndex) + newText + lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.data.get_length()) {
			range = this.__textEngine.textFormatRanges.data.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(i,1)); else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					i++;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var max = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
		var range;
		if(beginIndex < 0) beginIndex = 0;
		if(endIndex < 0) endIndex = 0;
		if(endIndex == 0) {
			if(beginIndex == 0) endIndex = max; else endIndex = beginIndex + 1;
		}
		if(endIndex < beginIndex) return;
		if(beginIndex == 0 && endIndex >= max) {
			this.__textFormat.__merge(format);
			if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
				var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
				new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(1,len));
				range = this.__textEngine.textFormatRanges.data.get(0);
				range.format = this.__textFormat;
				range.start = 0;
				range.end = max;
			}
		} else {
			var index = this.__textEngine.textFormatRanges.data.get_length();
			var searchIndex;
			while(index > 0) {
				index--;
				range = this.__textEngine.textFormatRanges.data.get(index);
				if(range.start == beginIndex && range.end == endIndex) {
					range.format = openfl_text_TextField.__defaultTextFormat.clone();
					range.format.__merge(format);
					return;
				}
				if(range.start >= beginIndex && range.end <= endIndex) {
					searchIndex = this.__textEngine.textFormatRanges.data.indexOf(range,0);
					if(searchIndex > -1) new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(searchIndex,1));
				}
			}
			var prevRange = null;
			var nextRange = null;
			if(beginIndex > 0) {
				var _g1 = 0;
				var _g = this.__textEngine.textFormatRanges.data.get_length();
				while(_g1 < _g) {
					var i = _g1++;
					range = this.__textEngine.textFormatRanges.data.get(i);
					if(range.end >= beginIndex) {
						prevRange = range;
						break;
					}
				}
			}
			if(endIndex < max) {
				var ni = this.__textEngine.textFormatRanges.data.get_length();
				while(--ni >= 0) {
					range = this.__textEngine.textFormatRanges.data.get(ni);
					if(range.start <= endIndex) {
						nextRange = range;
						break;
					}
				}
			}
			if(nextRange == prevRange) {
				nextRange = new openfl__$internal_text_TextFormatRange(nextRange.format.clone(),nextRange.start,nextRange.end);
				this.__textEngine.textFormatRanges.data.push(nextRange);
			}
			if(prevRange != null) prevRange.end = beginIndex;
			if(nextRange != null) nextRange.start = endIndex;
			var textFormat = openfl_text_TextField.__defaultTextFormat.clone();
			textFormat.__merge(format);
			var x = new openfl__$internal_text_TextFormatRange(textFormat,beginIndex,endIndex);
			this.__textEngine.textFormatRanges.data.push(x);
			this.__textEngine.textFormatRanges.data.sort(function(a,b) {
				if(a.start < b.start || a.end < b.end) return -1; else if(a.start > b.start || a.end > b.end) return 1;
				return 0;
			});
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		return this.__textEngine.type == 1 || this.get_tabEnabled() || this.get_selectable();
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex)); else this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) lineIndex = this.getLineIndexOfChar(this.__caretIndex); else lineIndex = this.getLineIndexOfChar(Std["int"](Math.max(this.__caretIndex,this.__selectionIndex)));
		if(lineIndex < this.__textEngine.numLines - 1) this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1; else this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) this.__caretIndex++;
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) caretIndex = this.__caretIndex;
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) this.__caretIndex--;
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			if(caretIndex == null) caretIndex = this.__caretIndex;
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else this.__caretIndex = 0;
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != "") {
					if(StringTools.startsWith(url,"event:")) this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null))); else openfl_Lib.getURL(new openfl_net_URLRequest(url));
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) this.set_type(1);
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) format.color = symbol.color & 16777215;
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) found = true; else switch(_g) {
		case "_sans":case "_serif":case "_typewriter":case "":
			found = true;
			break;
		default:
			var _g1 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g1 < _g2.length) {
				var font1 = _g2[_g1];
				++_g1;
				if(font1.name == format.font) {
					found = true;
					break;
				}
			}
		}
		if(!found) {
			var alpha = new EReg("[^a-zA-Z]+","g");
			var _g3 = 0;
			var _g11 = openfl_text_Font.enumerateFonts();
			while(_g3 < _g11.length) {
				var font2 = _g11[_g3];
				++_g3;
				if((function($this) {
					var $r;
					var _this = alpha.replace(font2.name,"");
					$r = HxOverrides.substr(_this,0,symbol.fontName.length);
					return $r;
				}(this)) == symbol.fontName) {
					format.font = font2.name;
					found = true;
					break;
				}
			}
		}
		if(found) this.set_embedFonts(true); else if(!openfl_text_TextField.__missingFontWarning.exists(format.font)) {
			{
				openfl_text_TextField.__missingFontWarning.set(format.font,true);
				true;
			}
			lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 1071, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		}
		if(symbol.align != null) {
			if(symbol.align == "center") format.align = 0; else if(symbol.align == "right") format.align = 4; else if(symbol.align == "justify") format.align = 2;
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) this.set_htmlText(symbol.text); else this.set_text(symbol.text);
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) return -1;
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.positions[i];
				}
				if(y != null) return this.__getPosition(x,y);
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				if(x != null) return this.__getPosition(x,y);
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") return lime_ui_MouseCursor.POINTER; else if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT;
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) precise = false;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.data.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.data.get(i1);
			if(i1 < this.__textEngine.layoutGroups.data.get_length() - 1) nextGroup = this.__textEngine.layoutGroups.data.get(i1 + 1); else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) return group;
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) return group.startIndex + i; else if(group.startIndex + i < group.endIndex) return group.startIndex + i + 1; else return group.endIndex;
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderDOMClear: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = true;
		if(enableInput) this.__enableInput();
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = true;
		if(disableInput) this.__disableInput();
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 3:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) this.set_scrollH(Math.ceil(offsetX)); else this.set_scrollH(0);
		}
	}
	,__updateText: function(value) {
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) < this.__caretIndex) this.__selectionIndex = this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		if(!this.__displayAsPassword) this.__textEngine.set_text(this.__text); else {
			var length = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__renderTransform.__translateTransformed(this.__offsetX,this.__offsetY);
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		if(value != this.__textEngine.antiAliasType) {
		}
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters != null && this.__filters.length == 1 && js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) return false;
		return openfl_display_InteractiveObject.prototype.get_cacheAsBitmap.call(this);
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		value = openfl__$internal_text_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
		if(value < 0) value = 0;
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
		if(value < 1) value = 1;
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) return this.__textEngine.type == 1; else return this.__tabEnabled;
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else return value;
		if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
			var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(1,len));
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.data.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(utfValue);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.data.get_length()) {
			var range = _g1.data.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !js_Boot.__instanceof(event.relatedObject,openfl_text_TextField)) this.__stopTextInput(); else {
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretBeginningOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) this.__selectionIndex = this.__caretIndex;
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) this.__caretPreviousCharacter(); else {
				if(this.__selectionIndex == this.__caretIndex) this.__caretPreviousCharacter(); else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretEndOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) this.__selectionIndex = this.__caretIndex;
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) this.__caretNextCharacter(); else {
				if(this.__selectionIndex == this.__caretIndex) this.__caretNextCharacter(); else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741905:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) this.__caretNextLine(); else {
				if(this.__selectionIndex == this.__caretIndex) this.__caretNextLine(); else {
					var lineIndex = this.getLineIndexOfChar(Std["int"](Math.max(this.__caretIndex,this.__selectionIndex)));
					this.__caretNextLine(lineIndex,Std["int"](Math.min(this.__caretIndex,this.__selectionIndex)));
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741906:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) this.__caretPreviousLine(); else {
				if(this.__selectionIndex == this.__caretIndex) this.__caretPreviousLine(); else {
					var lineIndex1 = this.getLineIndexOfChar(Std["int"](Math.min(this.__caretIndex,this.__selectionIndex)));
					this.__caretPreviousLine(lineIndex1,Std["int"](Math.min(this.__caretIndex,this.__selectionIndex)));
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741898:
			this.__caretBeginningOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741901:
			this.__caretEndOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
				this.__selectionIndex = 0;
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
		if(format.__ascent != null) this.__ascent = format.__ascent;
		if(format.__descent != null) this.__descent = format.__descent;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) return openfl_ui_GameInput.__deviceList[index];
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,x);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "hand":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	case "crosshair":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.CROSSHAIR);
		break;
	case "custom":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.CUSTOM);
		break;
	case "resize_nesw":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NESW);
		break;
	case "resize_ns":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NS);
		break;
	case "resize_nwse":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_NWSE);
		break;
	case "resize_we":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.RESIZE_WE);
		break;
	case "wait":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.WAIT);
		break;
	case "waitarrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.WAIT_ARROW);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui__$MouseCursor_MouseCursor_$Impl_$ = {};
$hxClasses["openfl.ui._MouseCursor.MouseCursor_Impl_"] = openfl_ui__$MouseCursor_MouseCursor_$Impl_$;
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__name__ = ["openfl","ui","_MouseCursor","MouseCursor_Impl_"];
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.fromLimeCursor = function(cursor) {
	switch(cursor[1]) {
	case 0:
		return "arrow";
	case 2:
		return "auto";
	case 4:
		return "button";
	case 3:
		return "hand";
	case 9:
		return "ibeam";
	case 1:
		return "crosshair";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_nwse";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"}
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
var openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$ = {};
$hxClasses["openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_"] = openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.__name__ = ["openfl","ui","_MultitouchInputMode","MultitouchInputMode_Impl_"];
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) debugging = false;
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) openfl_utils_AGALMiniAssembler.init();
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("mov",v);
	v;
	var v1 = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("add",v1);
	v1;
	var v2 = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sub",v2);
	v2;
	var v3 = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("mul",v3);
	v3;
	var v4 = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("div",v4);
	v4;
	var v5 = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("rcp",v5);
	v5;
	var v6 = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("min",v6);
	v6;
	var v7 = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("max",v7);
	v7;
	var v8 = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("frc",v8);
	v8;
	var v9 = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sqt",v9);
	v9;
	var v10 = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("rsq",v10);
	v10;
	var v11 = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("pow",v11);
	v11;
	var v12 = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("log",v12);
	v12;
	var v13 = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("exp",v13);
	v13;
	var v14 = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("nrm",v14);
	v14;
	var v15 = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sin",v15);
	v15;
	var v16 = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("cos",v16);
	v16;
	var v17 = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("crs",v17);
	v17;
	var v18 = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("dp3",v18);
	v18;
	var v19 = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("dp4",v19);
	v19;
	var v20 = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("abs",v20);
	v20;
	var v21 = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("neg",v21);
	v21;
	var v22 = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sat",v22);
	v22;
	var v23 = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	openfl_utils_AGALMiniAssembler.OPMAP.set("m33",v23);
	v23;
	var v24 = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	openfl_utils_AGALMiniAssembler.OPMAP.set("m44",v24);
	v24;
	var v25 = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	openfl_utils_AGALMiniAssembler.OPMAP.set("m34",v25);
	v25;
	var v26 = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	openfl_utils_AGALMiniAssembler.OPMAP.set("ddx",v26);
	v26;
	var v27 = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	openfl_utils_AGALMiniAssembler.OPMAP.set("ddy",v27);
	v27;
	var v28 = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	openfl_utils_AGALMiniAssembler.OPMAP.set("ife",v28);
	v28;
	var v29 = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	openfl_utils_AGALMiniAssembler.OPMAP.set("ine",v29);
	v29;
	var v30 = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	openfl_utils_AGALMiniAssembler.OPMAP.set("ifg",v30);
	v30;
	var v31 = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	openfl_utils_AGALMiniAssembler.OPMAP.set("ifl",v31);
	v31;
	var v32 = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	openfl_utils_AGALMiniAssembler.OPMAP.set("els",v32);
	v32;
	var v33 = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	openfl_utils_AGALMiniAssembler.OPMAP.set("eif",v33);
	v33;
	var v34 = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	openfl_utils_AGALMiniAssembler.OPMAP.set("kil",v34);
	v34;
	var v35 = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	openfl_utils_AGALMiniAssembler.OPMAP.set("tex",v35);
	v35;
	var v36 = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sge",v36);
	v36;
	var v37 = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("slt",v37);
	v37;
	var v38 = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sgn",v38);
	v38;
	var v39 = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("seq",v39);
	v39;
	var v40 = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	openfl_utils_AGALMiniAssembler.OPMAP.set("sne",v40);
	v40;
	var v41 = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("rgba",v41);
	v41;
	var v42 = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("compressed",v42);
	v42;
	var v43 = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("compressedalpha",v43);
	v43;
	var v44 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("dxt1",v44);
	v44;
	var v45 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("dxt5",v45);
	v45;
	var v46 = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("video",v46);
	v46;
	var v47 = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("2d",v47);
	v47;
	var v48 = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("3d",v48);
	v48;
	var v49 = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("cube",v49);
	v49;
	var v50 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("mipnearest",v50);
	v50;
	var v51 = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("miplinear",v51);
	v51;
	var v52 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("mipnone",v52);
	v52;
	var v53 = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("nomip",v53);
	v53;
	var v54 = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("nearest",v54);
	v54;
	var v55 = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("linear",v55);
	v55;
	var v56 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("anisotropic2x",v56);
	v56;
	var v57 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("anisotropic4x",v57);
	v57;
	var v58 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("anisotropic8x",v58);
	v58;
	var v59 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("anisotropic16x",v59);
	v59;
	var v60 = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("centroid",v60);
	v60;
	var v61 = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("single",v61);
	v61;
	var v62 = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("ignoresampler",v62);
	v62;
	var v63 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("repeat",v63);
	v63;
	var v64 = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("wrap",v64);
	v64;
	var v65 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("clamp",v65);
	v65;
	var v66 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("clamp_u_repeat_v",v66);
	v66;
	var v67 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	openfl_utils_AGALMiniAssembler.SAMPLEMAP.set("repeat_u_clamp_v",v67);
	v67;
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) ignoreLimits = false;
		if(version == null) version = 1;
		var start = openfl_Lib.getTimer();
		this.agalcode = new openfl_utils_ByteArrayData(0);
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") isFrag = true; else if(mode != "vertex") this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag?1:0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nest = 0;
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) line = HxOverrides.substr(line,0,startcomment);
			var optsi;
			if(reg1.match(line)) optsi = reg1.matchedPos().pos; else optsi = -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.get(opCode);
			}
			if(opFound == null) {
				if(line.length >= 3) haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 284, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				i++;
				continue;
			}
			if(this.debugEnabled) haxe_Log.trace(opFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 296, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			if(opFound == null) {
				if(line.length >= 3) haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 304, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				i++;
				continue;
			}
			var pos = line.indexOf(opFound.name) + opFound.name.length;
			line = HxOverrides.substr(line,pos,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) haxe_Log.trace("emit opcode=" + Std.string(opFound),{ fileName : "AGALMiniAssembler.hx", lineNumber : 338, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			nops++;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g = 0;
			while(_g < regLength) {
				var j1 = _g++;
				var isRelative = false;
				var relreg = this.match(regs[j1],reg5);
				if(relreg.length > 0) {
					regs[j1] = StringTools.replace(regs[j1],relreg[0],"0");
					if(this.verbose) haxe_Log.trace("IS REL",{ fileName : "AGALMiniAssembler.hx", lineNumber : 377, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					isRelative = true;
				}
				var res = this.match(regs[j1],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j1 + " (" + regs[j1] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.get(res[0]);
				if(this.debugEnabled) haxe_Log.trace(regFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 399, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j1 + " (" + regs[j1] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j1 + " (" + regs[j1] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j1 + " (" + regs[j1] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j1 + " (" + regs[j1] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				var pos1 = regs[j1].indexOf(regFound.name) + regFound.name.length;
				regs[j1] = HxOverrides.substr(regs[j1],pos1,null);
				var idxmatch;
				if(isRelative) idxmatch = this.match(relreg[0],reg7); else idxmatch = this.match(regs[j1],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) regidx = Std.parseInt(idxmatch[0]);
				if(_$UInt_UInt_$Impl_$.gt(regidx,regFound.range)) {
					this.error = "error: register operand " + j1 + " (" + regs[j1] + ") index exceeds limit of " + Std.string(_$UInt_UInt_$Impl_$.toFloat(regFound.range + 1)) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j1],reg8);
				var isDest = j1 == 0 && (opFound.flags & 128) == 0;
				var isSampler = j1 == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(_$UInt_UInt_$Impl_$.gt(cv,2)) cv = 3;
						if(isDest) regmask |= 1 << cv; else regmask = regmask | cv << (k - 1 << 1);
						k++;
					}
					if(!isDest) while(k <= 4) {
						regmask = regmask | cv << (k - 1 << 1);
						k++;
					}
				} else if(isDest) regmask = 15; else regmask = 228;
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.get(relname[0]);
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(_$UInt_UInt_$Impl_$.gt(relsel,2)) relsel = 3;
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) reloffset = Std.parseInt(relofs[0]);
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) haxe_Log.trace("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(relsel)) + "==" + selmatch[0] + " idx=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + " offset=" + reloffset,{ fileName : "AGALMiniAssembler.hx", lineNumber : 574, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(this.verbose) haxe_Log.trace("  emit argcode=" + Std.string(regFound) + "[" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + "][" + regmask + "]",{ fileName : "AGALMiniAssembler.hx", lineNumber : 582, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) haxe_Log.trace("  emit sampler",{ fileName : "AGALMiniAssembler.hx", lineNumber : 599, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					var samplerbits = 5;
					var optsLength;
					if(opts == null) optsLength = 0; else optsLength = opts.length;
					var bias = 0.0;
					var _g1 = 0;
					while(_g1 < optsLength) {
						var k1 = _g1++;
						if(this.verbose) haxe_Log.trace("    opt: " + opts[k1],{ fileName : "AGALMiniAssembler.hx", lineNumber : 611, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.get(opts[k1]);
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) haxe_Log.trace("    bias: " + bias,{ fileName : "AGALMiniAssembler.hx", lineNumber : 625, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						} else {
							if(optfound.flag != 16) samplerbits &= ~(15 << optfound.flag);
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) haxe_Log.trace("    bits: " + (samplerbits - 5),{ fileName : "AGALMiniAssembler.hx", lineNumber : 650, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					pad -= 64;
				} else {
					if(j1 == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative?relsel | 32768:0);
					pad -= 64;
				}
			}
			var j = 0;
			while(j < pad) {
				this.agalcode.writeByte(0);
				j += 8;
			}
			if(badreg) break;
			i++;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(this.agalcode,0);
			haxe_Log.trace(this.error,{ fileName : "AGALMiniAssembler.hx", lineNumber : 703, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.agalcode);
			var _g2 = 0;
			while(_g2 < agalLength) {
				var index = _g2++;
				if(index % 16 == 0) dbgLine += "\n";
				if(index % 4 == 0) dbgLine += " ";
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) byteStr = "0" + byteStr;
				dbgLine += byteStr;
			}
			haxe_Log.trace(dbgLine,{ fileName : "AGALMiniAssembler.hx", lineNumber : 739, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) haxe_Log.trace("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "AGALMiniAssembler.hx", lineNumber : 745, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits?1024:version == 1 || version == 2?7:15,66);
		openfl_utils_AGALMiniAssembler.REGMAP.set("va",v);
		v;
		var v1 = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits?1024:version == 1?127:249,66);
		openfl_utils_AGALMiniAssembler.REGMAP.set("vc",v1);
		v1;
		var v2 = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits?1024:version == 1?7:25,67);
		openfl_utils_AGALMiniAssembler.REGMAP.set("vt",v2);
		v2;
		var v3 = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits?1024:0,65);
		openfl_utils_AGALMiniAssembler.REGMAP.set("vo",v3);
		v3;
		var v4 = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits?1024:version == 1?7:9,99);
		openfl_utils_AGALMiniAssembler.REGMAP.set("vi",v4);
		v4;
		var v5 = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits?1024:version == 1?27:version == 2?63:199,34);
		openfl_utils_AGALMiniAssembler.REGMAP.set("fc",v5);
		v5;
		var v6 = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits?1024:version == 1?7:25,35);
		openfl_utils_AGALMiniAssembler.REGMAP.set("ft",v6);
		v6;
		var v7 = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits?1024:7,34);
		openfl_utils_AGALMiniAssembler.REGMAP.set("fs",v7);
		v7;
		var v8 = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits?1024:version == 1?0:3,33);
		openfl_utils_AGALMiniAssembler.REGMAP.set("fo",v8);
		v8;
		var v9 = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits?1024:version == 1?-1:0,33);
		openfl_utils_AGALMiniAssembler.REGMAP.set("fd",v9);
		v9;
		var v10 = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits?1024:0,66);
		openfl_utils_AGALMiniAssembler.REGMAP.set("iid",v10);
		v10;
		var v11 = openfl_utils_AGALMiniAssembler.REGMAP.get("vo");
		openfl_utils_AGALMiniAssembler.REGMAP.set("op",v11);
		v11;
		var v12 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		openfl_utils_AGALMiniAssembler.REGMAP.set("i",v12);
		v12;
		var v13 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		openfl_utils_AGALMiniAssembler.REGMAP.set("v",v13);
		v13;
		var v14 = openfl_utils_AGALMiniAssembler.REGMAP.get("fo");
		openfl_utils_AGALMiniAssembler.REGMAP.set("oc",v14);
		v14;
		var v15 = openfl_utils_AGALMiniAssembler.REGMAP.get("fd");
		openfl_utils_AGALMiniAssembler.REGMAP.set("od",v15);
		v15;
		var v16 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		openfl_utils_AGALMiniAssembler.REGMAP.set("fi",v16);
		v16;
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = ["openfl","utils","_AGALMiniAssembler","OpCode"];
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = ["openfl","utils","_AGALMiniAssembler","Register"];
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.emitCode)) + ", range=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.range)) + ", flags=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flags)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = ["openfl","utils","_AGALMiniAssembler","Sampler"];
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flag)) + "\", mask=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.mask)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.removeBitmapData(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.removeFont(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.removeSound(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_utils_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_utils_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	if(!lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) return openfl_utils_Assets.cache.getFont(id);
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) openfl_utils_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(js_Boot.__instanceof(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else {
					lime_utils_Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 175, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		lime_utils_Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 184, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else lime_utils_Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 188, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) return sound;
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) openfl_utils_Assets.cache.setSound(id,sound1);
		return sound1;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return lime_utils_Assets.hasLibrary(name);
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
			promise.complete(bitmapData1);
		} else promise.error("[Assets] Could not load Image \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		promise.complete(openfl_utils_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) openfl_utils_Assets.cache.setFont(id,font);
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	var future = lime_utils_Assets.loadLibrary(name);
	return future;
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var future = new lime_app_Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(js_Boot.__instanceof(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) openfl_utils_Assets.cache.setSound(id,sound);
			promise.complete(sound);
		} else promise.error("[Assets] Could not load Sound \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = lime_utils_Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) length = 0;
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) return null;
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) return null;
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) return bytes; else return openfl_utils_ByteArrayData.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) return null;
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromBytes = function(bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer = function(byteArray) {
	lime_utils__$BytePointer_BytePointer_$Impl_$.set(openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) this1.position = value;
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) length = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) openfl_utils_ByteArrayData.__defaultEndian = 1; else openfl_utils_ByteArrayData.__defaultEndian = 0;
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) algorithm = 2;
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) return this.get(this.position++) != 0; else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return false;
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) return value - 256; else return value;
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(length == 0) length = this.length - this.position;
		if(this.position + length > this.length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		if(bytes.length < offset + length) bytes.__resize(offset + length);
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) return haxe_io_FPHelper.i64ToDouble(ch1,ch2); else return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) value = ch2 << 8 | ch1; else value = ch1 << 8 | ch2;
		if((value & 32768) != 0) return value - 65536; else return value;
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) return this.get(this.position++); else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return 0;
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) return (ch2 << 8) + ch1; else return ch1 << 8 | ch2;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) algorithm = 2;
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) return;
		if(length == 0) {
			var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
			length = a - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var $int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt($int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.set(this.position++,value & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 24 & 255);
		} else {
			this.set(this.position++,value >> 24 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value & 255);
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) this.length = size;
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromLimeEndian = function(value) {
	switch(value[1]) {
	case 1:
		return 0;
	case 0:
		return 1;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian = function(value) {
	switch(value) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	return { };
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name);
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c;
	if(this1 == null) c = null; else c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) return true;
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) fields = [];
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name) && Std["is"](Reflect.field(this1,name),haxe_lang_Iterable);
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.utils.TouchData"] = openfl_utils_TouchData;
openfl_utils_TouchData.__name__ = ["openfl","utils","TouchData"];
openfl_utils_TouchData.prototype = {
	touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,rollOutStack: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl_utils_TouchData
};
var starling_animation_IAnimatable = function() { };
$hxClasses["starling.animation.IAnimatable"] = starling_animation_IAnimatable;
starling_animation_IAnimatable.__name__ = ["starling","animation","IAnimatable"];
starling_animation_IAnimatable.prototype = {
	advanceTime: null
	,__class__: starling_animation_IAnimatable
};
var starling_animation_DelayedCall = function(call,delay,args) {
	starling_events_EventDispatcher.call(this);
	this.reset(call,delay,args);
};
$hxClasses["starling.animation.DelayedCall"] = starling_animation_DelayedCall;
starling_animation_DelayedCall.__name__ = ["starling","animation","DelayedCall"];
starling_animation_DelayedCall.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_DelayedCall.fromPool = function(call,delay,args) {
	if(starling_animation_DelayedCall.sPool.data.get_length() != 0) return starling_animation_DelayedCall.sPool.data.pop().reset(call,delay,args); else return new starling_animation_DelayedCall(call,delay,args);
};
starling_animation_DelayedCall.toPool = function(delayedCall) {
	delayedCall.mCall = null;
	delayedCall.mArgs = null;
	delayedCall.removeEventListeners();
	starling_animation_DelayedCall.sPool.data.push(delayedCall);
};
starling_animation_DelayedCall.__super__ = starling_events_EventDispatcher;
starling_animation_DelayedCall.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mCurrentTime: null
	,mTotalTime: null
	,mCall: null
	,mArgs: null
	,mRepeatCount: null
	,reset: function(call,delay,args) {
		this.mCurrentTime = 0;
		this.mTotalTime = Math.max(delay,0.0001);
		this.mCall = call;
		this.mArgs = args;
		this.mRepeatCount = 1;
		return this;
	}
	,advanceTime: function(time) {
		var previousTime = this.mCurrentTime;
		this.mCurrentTime += time;
		if(this.mCurrentTime > this.mTotalTime) this.mCurrentTime = this.mTotalTime;
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCall.apply(this.mCall,this.mArgs);
				if(this.mRepeatCount > 0) this.mRepeatCount -= 1;
				this.mCurrentTime = 0;
				this.advanceTime(previousTime + time - this.mTotalTime);
			} else {
				var call = this.mCall;
				var args = this.mArgs;
				this.dispatchEventWith("removeFromJuggler");
				call.apply(call,args);
			}
		}
	}
	,complete: function() {
		var restTime = this.mTotalTime - this.mCurrentTime;
		if(restTime > 0) this.advanceTime(restTime);
	}
	,get_isComplete: function() {
		return this.mRepeatCount == 1 && this.mCurrentTime >= this.mTotalTime;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		return this.mRepeatCount = value;
	}
	,__class__: starling_animation_DelayedCall
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",get_isComplete:"get_isComplete"}
});
var starling_animation_Juggler = function() {
	this.mElapsedTime = 0;
	this.mObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.animation.Juggler"] = starling_animation_Juggler;
starling_animation_Juggler.__name__ = ["starling","animation","Juggler"];
starling_animation_Juggler.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_Juggler.prototype = {
	mObjects: null
	,mElapsedTime: null
	,add: function(object) {
		if(object != null && this.mObjects.data.indexOf(object,0) == -1) {
			var index = this.mObjects.data.get_length();
			this.mObjects.data.set(index,object);
			var dispatcher;
			if(js_Boot.__instanceof(object,starling_events_EventDispatcher)) dispatcher = object; else dispatcher = null;
			if(dispatcher != null) dispatcher.addEventListener("removeFromJuggler",$bind(this,this.onRemove));
		}
	}
	,contains: function(object) {
		return this.mObjects.data.indexOf(object,0) != -1;
	}
	,remove: function(object) {
		if(object == null) return;
		var dispatcher;
		if(js_Boot.__instanceof(object,starling_events_EventDispatcher)) dispatcher = object; else dispatcher = null;
		if(dispatcher != null) dispatcher.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
		var index = this.mObjects.data.indexOf(object,0);
		if(index != -1) this.mObjects.data.set(index,null);
	}
	,removeTweens: function(target) {
		if(target == null) return;
		var i = this.mObjects.data.get_length() - 1;
		while(i >= 0) {
			var tween;
			if(Std["is"](this.mObjects.data.get(i),starling_animation_Tween)) tween = this.mObjects.data.get(i); else tween = null;
			if(tween != null && tween.get_target() == target) {
				tween.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
				this.mObjects.data.set(i,null);
			}
			--i;
		}
	}
	,containsTweens: function(target) {
		if(target == null) return false;
		var i = this.mObjects.data.get_length() - 1;
		while(i >= 0) {
			var tween;
			if(Std["is"](this.mObjects.data.get(i),starling_animation_Tween)) tween = this.mObjects.data.get(i); else tween = null;
			if(tween != null && tween.get_target() == target) return true;
			--i;
		}
		return false;
	}
	,purge: function() {
		var i = this.mObjects.data.get_length() - 1;
		while(i >= 0) {
			var dispatcher;
			if(Std["is"](this.mObjects.data.get(i),starling_events_EventDispatcher)) dispatcher = this.mObjects.data.get(i); else dispatcher = null;
			if(dispatcher != null) dispatcher.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
			this.mObjects.data.set(i,null);
			--i;
		}
	}
	,delayCall: function(call,delay,args) {
		if(call == null) return null;
		if(args == null) args = [];
		var delayedCall = starling_animation_DelayedCall.fromPool(call,delay,args);
		delayedCall.addEventListener("removeFromJuggler",$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,repeatCall: function(call,interval,repeatCount,args) {
		if(repeatCount == null) repeatCount = 0;
		if(call == null) return null;
		if(args == null) args = [];
		var delayedCall = starling_animation_DelayedCall.fromPool(call,interval,args);
		delayedCall.set_repeatCount(repeatCount);
		delayedCall.addEventListener("removeFromJuggler",$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,onPooledDelayedCallComplete: function(event) {
		starling_animation_DelayedCall.toPool(js_Boot.__cast(event.target , starling_animation_DelayedCall));
	}
	,tween: function(target,time,properties) {
		if(target == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("target must not be null"));
		var tween = starling_animation_Tween.fromPool(target,time);
		var _g = 0;
		var _g1 = Reflect.fields(properties);
		while(_g < _g1.length) {
			var property = _g1[_g];
			++_g;
			var value = Reflect.field(properties,property);
			if(Reflect.getProperty(tween,property) != null) Reflect.setProperty(tween,property,value); else if(Reflect.getProperty(target,property) != null) tween.animate(property,value); else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid property: " + property));
		}
		tween.addEventListener("removeFromJuggler",$bind(this,this.onPooledTweenComplete));
		this.add(tween);
		return tween;
	}
	,onPooledTweenComplete: function(event) {
		starling_animation_Tween.toPool(js_Boot.__cast(event.target , starling_animation_Tween));
	}
	,advanceTime: function(time) {
		var numObjects = this.mObjects.data.get_length();
		var currentIndex = 0;
		var i = 0;
		this.mElapsedTime += time;
		if(numObjects == 0) return;
		while(i < numObjects) {
			var object = this.mObjects.data.get(i);
			if(object != null) {
				if(currentIndex != i) {
					this.mObjects.data.set(currentIndex,object);
					this.mObjects.data.set(i,null);
				}
				object.advanceTime(time);
				++currentIndex;
			}
			++i;
		}
		if(currentIndex != i) {
			numObjects = this.mObjects.data.get_length();
			while(i < numObjects) {
				var index = currentIndex++;
				var value;
				var index1 = i++;
				value = this.mObjects.data.get(index1);
				this.mObjects.data.set(index,value);
			}
			this.mObjects.data.set_length(currentIndex);
		}
	}
	,onRemove: function(event) {
		this.remove(js_Boot.__cast(event.target , starling_animation_IAnimatable));
		var tween;
		if(js_Boot.__instanceof(event.target,starling_animation_Tween)) tween = event.target; else tween = null;
		if(tween != null && tween.get_isComplete()) this.add(tween.get_nextTween());
	}
	,get_elapsedTime: function() {
		return this.mElapsedTime;
	}
	,get_objects: function() {
		return this.mObjects;
	}
	,__class__: starling_animation_Juggler
	,__properties__: {get_objects:"get_objects",get_elapsedTime:"get_elapsedTime"}
};
var starling_animation_Transitions = function() { };
$hxClasses["starling.animation.Transitions"] = starling_animation_Transitions;
starling_animation_Transitions.__name__ = ["starling","animation","Transitions"];
starling_animation_Transitions.getTransition = function(name) {
	if(starling_animation_Transitions.sTransitions == null) starling_animation_Transitions.registerDefaults();
	return starling_animation_Transitions.sTransitions.get(name);
};
starling_animation_Transitions.register = function(name,func) {
	if(starling_animation_Transitions.sTransitions == null) starling_animation_Transitions.registerDefaults();
	{
		starling_animation_Transitions.sTransitions.set(name,func);
		func;
	}
};
starling_animation_Transitions.registerDefaults = function() {
	starling_animation_Transitions.sTransitions = new haxe_ds_StringMap();
	starling_animation_Transitions.register("linear",starling_animation_Transitions.linear);
	starling_animation_Transitions.register("easeIn",starling_animation_Transitions.easeIn);
	starling_animation_Transitions.register("easeOut",starling_animation_Transitions.easeOut);
	starling_animation_Transitions.register("easeInOut",starling_animation_Transitions.easeInOut);
	starling_animation_Transitions.register("easeOutIn",starling_animation_Transitions.easeOutIn);
	starling_animation_Transitions.register("easeInBack",starling_animation_Transitions.easeInBack);
	starling_animation_Transitions.register("easeOutBack",starling_animation_Transitions.easeOutBack);
	starling_animation_Transitions.register("easeInOutBack",starling_animation_Transitions.easeInOutBack);
	starling_animation_Transitions.register("easeOutInBack",starling_animation_Transitions.easeOutInBack);
	starling_animation_Transitions.register("easeInElastic",starling_animation_Transitions.easeInElastic);
	starling_animation_Transitions.register("easeOutElastic",starling_animation_Transitions.easeOutElastic);
	starling_animation_Transitions.register("easeInOutElastic",starling_animation_Transitions.easeInOutElastic);
	starling_animation_Transitions.register("easeOutInElastic",starling_animation_Transitions.easeOutInElastic);
	starling_animation_Transitions.register("easeInBounce",starling_animation_Transitions.easeInBounce);
	starling_animation_Transitions.register("easeOutBounce",starling_animation_Transitions.easeOutBounce);
	starling_animation_Transitions.register("easeInOutBounce",starling_animation_Transitions.easeInOutBounce);
	starling_animation_Transitions.register("easeOutInBounce",starling_animation_Transitions.easeOutInBounce);
};
starling_animation_Transitions.linear = function(ratio) {
	return ratio;
};
starling_animation_Transitions.easeIn = function(ratio) {
	return ratio * ratio * ratio;
};
starling_animation_Transitions.easeOut = function(ratio) {
	var invRatio = ratio - 1.0;
	return invRatio * invRatio * invRatio + 1;
};
starling_animation_Transitions.easeInOut = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeIn,starling_animation_Transitions.easeOut,ratio);
};
starling_animation_Transitions.easeOutIn = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOut,starling_animation_Transitions.easeIn,ratio);
};
starling_animation_Transitions.easeInBack = function(ratio) {
	var s = 1.70158;
	return Math.pow(ratio,2) * ((s + 1.0) * ratio - s);
};
starling_animation_Transitions.easeOutBack = function(ratio) {
	var invRatio = ratio - 1.0;
	var s = 1.70158;
	return Math.pow(invRatio,2) * ((s + 1.0) * invRatio + s) + 1.0;
};
starling_animation_Transitions.easeInOutBack = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInBack,starling_animation_Transitions.easeOutBack,ratio);
};
starling_animation_Transitions.easeOutInBack = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutBack,starling_animation_Transitions.easeInBack,ratio);
};
starling_animation_Transitions.easeInElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) return ratio; else {
		var p = 0.3;
		var s = p / 4.0;
		var invRatio = ratio - 1;
		return -1. * Math.pow(2.0,10.0 * invRatio) * Math.sin((invRatio - s) * (2.0 * Math.PI) / p);
	}
};
starling_animation_Transitions.easeOutElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) return ratio; else {
		var p = 0.3;
		var s = p / 4.0;
		return Math.pow(2.0,-10. * ratio) * Math.sin((ratio - s) * (2.0 * Math.PI) / p) + 1;
	}
};
starling_animation_Transitions.easeInOutElastic = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInElastic,starling_animation_Transitions.easeOutElastic,ratio);
};
starling_animation_Transitions.easeOutInElastic = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutElastic,starling_animation_Transitions.easeInElastic,ratio);
};
starling_animation_Transitions.easeInBounce = function(ratio) {
	return 1.0 - starling_animation_Transitions.easeOutBounce(1.0 - ratio);
};
starling_animation_Transitions.easeOutBounce = function(ratio) {
	var s = 7.5625;
	var p = 2.75;
	var l;
	if(ratio < 1.0 / p) l = s * Math.pow(ratio,2); else if(ratio < 2.0 / p) {
		ratio -= 1.5 / p;
		l = s * Math.pow(ratio,2) + 0.75;
	} else if(ratio < 2.5 / p) {
		ratio -= 2.25 / p;
		l = s * Math.pow(ratio,2) + 0.9375;
	} else {
		ratio -= 2.625 / p;
		l = s * Math.pow(ratio,2) + 0.984375;
	}
	return l;
};
starling_animation_Transitions.easeInOutBounce = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInBounce,starling_animation_Transitions.easeOutBounce,ratio);
};
starling_animation_Transitions.easeOutInBounce = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutBounce,starling_animation_Transitions.easeInBounce,ratio);
};
starling_animation_Transitions.easeCombined = function(startFunc,endFunc,ratio) {
	if(ratio < 0.5) return 0.5 * startFunc(ratio * 2.0); else return 0.5 * endFunc((ratio - 0.5) * 2.0) + 0.5;
};
var starling_animation_Tween = function(target,time,transition) {
	if(transition == null) transition = "linear";
	starling_events_EventDispatcher.call(this);
	this.reset(target,time,transition);
};
$hxClasses["starling.animation.Tween"] = starling_animation_Tween;
starling_animation_Tween.__name__ = ["starling","animation","Tween"];
starling_animation_Tween.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_Tween.getPropertyHint = function(property) {
	if(property.indexOf("color") != -1 || property.indexOf("Color") != -1) return "rgb";
	var hintMarkerIndex = property.indexOf("#");
	if(hintMarkerIndex != -1) return HxOverrides.substr(property,hintMarkerIndex + 1,null); else return null;
};
starling_animation_Tween.getPropertyName = function(property) {
	var hintMarkerIndex = property.indexOf("#");
	if(hintMarkerIndex != -1) return property.substring(0,hintMarkerIndex); else return property;
};
starling_animation_Tween.fromPool = function(target,time,transition) {
	if(transition == null) transition = "linear";
	if(starling_animation_Tween.sTweenPool.data.get_length() != 0) return starling_animation_Tween.sTweenPool.data.pop().reset(target,time,transition); else return new starling_animation_Tween(target,time,transition);
};
starling_animation_Tween.toPool = function(tween) {
	tween.mOnStart = tween.mOnUpdate = tween.mOnRepeat = tween.mOnComplete = null;
	tween.mOnStartArgs = tween.mOnUpdateArgs = tween.mOnRepeatArgs = tween.mOnCompleteArgs = null;
	tween.mTarget = null;
	tween.mTransitionFunc = null;
	tween.removeEventListeners();
	starling_animation_Tween.sTweenPool.data.push(tween);
};
starling_animation_Tween.__super__ = starling_events_EventDispatcher;
starling_animation_Tween.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mTarget: null
	,mTransitionFunc: null
	,mTransitionName: null
	,mProperties: null
	,mStartValues: null
	,mEndValues: null
	,mUpdateFuncs: null
	,mOnStart: null
	,mOnUpdate: null
	,mOnRepeat: null
	,mOnComplete: null
	,mOnStartArgs: null
	,mOnUpdateArgs: null
	,mOnRepeatArgs: null
	,mOnCompleteArgs: null
	,mTotalTime: null
	,mCurrentTime: null
	,mProgress: null
	,mDelay: null
	,mRoundToInt: null
	,mNextTween: null
	,mRepeatCount: null
	,mRepeatDelay: null
	,mReverse: null
	,mCurrentCycle: null
	,reset: function(target,time,transition) {
		if(transition == null) transition = "linear";
		this.mTarget = target;
		this.mCurrentTime = 0.0;
		this.mTotalTime = Math.max(0.0001,time);
		this.mProgress = 0.0;
		this.mDelay = this.mRepeatDelay = 0.0;
		this.mOnStart = this.mOnUpdate = this.mOnRepeat = this.mOnComplete = null;
		this.mOnStartArgs = this.mOnUpdateArgs = this.mOnRepeatArgs = this.mOnCompleteArgs = null;
		this.mRoundToInt = this.mReverse = false;
		this.mRepeatCount = 1;
		this.mCurrentCycle = -1;
		this.mNextTween = null;
		if(typeof(transition) == "string") this.set_transition(transition); else if(Reflect.isFunction(transition)) this.set_transitionFunc(transition); else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Transition must be either a string or a function"));
		if(this.mProperties != null) this.mProperties.data.set_length(0); else this.mProperties = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		if(this.mStartValues != null) this.mStartValues.data.set_length(0); else this.mStartValues = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		if(this.mEndValues != null) this.mEndValues.data.set_length(0); else this.mEndValues = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		if(this.mUpdateFuncs != null) this.mUpdateFuncs.data.set_length(0); else this.mUpdateFuncs = openfl__$Vector_Vector_$Impl_$.toFunctionVector(null);
		return this;
	}
	,animate: function(property,endValue) {
		if(this.mTarget == null) return;
		var pos = this.mProperties.data.get_length();
		var updateFunc = this.getUpdateFuncFromProperty(property);
		var value = starling_animation_Tween.getPropertyName(property);
		this.mProperties.data.set(pos,value);
		var value1 = NaN;
		this.mStartValues.data.set(pos,value1);
		this.mEndValues.data.set(pos,endValue);
		this.mUpdateFuncs.data.set(pos,updateFunc);
	}
	,scaleTo: function(factor) {
		this.animate("scaleX",factor);
		this.animate("scaleY",factor);
	}
	,moveTo: function(x,y) {
		this.animate("x",x);
		this.animate("y",y);
	}
	,fadeTo: function(alpha) {
		this.animate("alpha",alpha);
	}
	,rotateTo: function(angle,type) {
		if(type == null) type = "rad";
		this.animate("rotation#" + type,angle);
	}
	,advanceTime: function(time) {
		if(time == 0 || this.mRepeatCount == 1 && this.mCurrentTime == this.mTotalTime) return;
		var i;
		var previousTime = this.mCurrentTime;
		var restTime = this.mTotalTime - this.mCurrentTime;
		var carryOverTime;
		if(time > restTime) carryOverTime = time - restTime; else carryOverTime = 0.0;
		this.mCurrentTime += time;
		if(this.mCurrentTime <= 0) return; else if(this.mCurrentTime > this.mTotalTime) this.mCurrentTime = this.mTotalTime;
		if(this.mCurrentCycle < 0 && previousTime <= 0 && this.mCurrentTime > 0) {
			this.mCurrentCycle++;
			if(this.mOnStart != null) {
				if(this.mOnStartArgs != null) this.mOnStart(this.mOnStartArgs); else this.mOnStart();
			}
		}
		var ratio = this.mCurrentTime / this.mTotalTime;
		var reversed = this.mReverse && this.mCurrentCycle % 2 == 1;
		var numProperties = this.mStartValues.data.get_length();
		if(reversed) this.mProgress = this.mTransitionFunc(1.0 - ratio); else this.mProgress = this.mTransitionFunc(ratio);
		var _g = 0;
		while(_g < numProperties) {
			var i1 = _g++;
			if(this.mStartValues.data.get(i1) != this.mStartValues.data.get(i1)) {
				var value = Reflect.getProperty(this.mTarget,this.mProperties.data.get(i1));
				this.mStartValues.data.set(i1,value);
			}
			var updateFunc = this.mUpdateFuncs.data.get(i1);
			updateFunc(this.mProperties.data.get(i1),this.mStartValues.data.get(i1),this.mEndValues.data.get(i1));
		}
		if(this.mOnUpdate != null) {
			if(this.mOnUpdateArgs != null) this.mOnUpdate(this.mOnUpdateArgs); else this.mOnUpdate();
		}
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCurrentTime = -this.mRepeatDelay;
				this.mCurrentCycle++;
				if(this.mRepeatCount > 1) this.mRepeatCount--;
				if(this.mOnRepeat != null) {
					if(this.mOnRepeatArgs != null) this.mOnRepeat(this.mOnRepeatArgs); else this.mOnRepeat();
				}
			} else {
				var onComplete = this.mOnComplete;
				var onCompleteArgs = this.mOnCompleteArgs;
				this.dispatchEventWith("removeFromJuggler");
				if(this.mOnComplete != null) {
					if(this.mOnCompleteArgs != null) this.mOnComplete(this.mOnCompleteArgs); else this.mOnComplete();
				}
			}
		}
		if(carryOverTime != 0) this.advanceTime(carryOverTime);
	}
	,getUpdateFuncFromProperty: function(property) {
		var updateFunc;
		var hint = starling_animation_Tween.getPropertyHint(property);
		if(hint == null) updateFunc = $bind(this,this.updateStandard); else switch(hint) {
		case "rgb":
			updateFunc = $bind(this,this.updateRgb);
			break;
		case "rad":
			updateFunc = $bind(this,this.updateRad);
			break;
		case "deg":
			updateFunc = $bind(this,this.updateDeg);
			break;
		default:
			haxe_Log.trace("[Starling] Ignoring unknown property hint: " + hint,{ fileName : "Tween.hx", lineNumber : 285, className : "starling.animation.Tween", methodName : "getUpdateFuncFromProperty"});
			updateFunc = $bind(this,this.updateStandard);
		}
		return updateFunc;
	}
	,updateStandard: function(property,startValue,endValue) {
		var newValue = startValue + this.mProgress * (endValue - startValue);
		if(this.mRoundToInt) newValue = Math.round(newValue);
		Reflect.setProperty(this.mTarget,property,newValue);
	}
	,updateRgb: function(property,startValue,endValue) {
		var startColor = startValue | 0;
		var endColor = endValue | 0;
		var startA = startColor >> 24 & 255;
		var startR = startColor >> 16 & 255;
		var startG = startColor >> 8 & 255;
		var startB = startColor & 255;
		var endA = endColor >> 24 & 255;
		var endR = endColor >> 16 & 255;
		var endG = endColor >> 8 & 255;
		var endB = endColor & 255;
		var newA = Std["int"]((function($this) {
			var $r;
			var b = _$UInt_UInt_$Impl_$.toFloat(endA - startA) * $this.mProgress;
			$r = _$UInt_UInt_$Impl_$.toFloat(startA) + b;
			return $r;
		}(this)));
		var newR = Std["int"]((function($this) {
			var $r;
			var b1 = _$UInt_UInt_$Impl_$.toFloat(endR - startR) * $this.mProgress;
			$r = _$UInt_UInt_$Impl_$.toFloat(startR) + b1;
			return $r;
		}(this)));
		var newG = Std["int"]((function($this) {
			var $r;
			var b2 = _$UInt_UInt_$Impl_$.toFloat(endG - startG) * $this.mProgress;
			$r = _$UInt_UInt_$Impl_$.toFloat(startG) + b2;
			return $r;
		}(this)));
		var newB = Std["int"]((function($this) {
			var $r;
			var b3 = _$UInt_UInt_$Impl_$.toFloat(endB - startB) * $this.mProgress;
			$r = _$UInt_UInt_$Impl_$.toFloat(startB) + b3;
			return $r;
		}(this)));
		Reflect.setProperty(this.mTarget,property,newA << 24 | newR << 16 | newG << 8 | newB);
	}
	,updateRad: function(property,startValue,endValue) {
		this.updateAngle(Math.PI,property,startValue,endValue);
	}
	,updateDeg: function(property,startValue,endValue) {
		this.updateAngle(180,property,startValue,endValue);
	}
	,updateAngle: function(pi,property,startValue,endValue) {
		while(Math.abs(endValue - startValue) > pi) if(startValue < endValue) endValue -= 2.0 * pi; else endValue += 2.0 * pi;
		this.updateStandard(property,startValue,endValue);
	}
	,getEndValue: function(property) {
		var index = this.mProperties.data.indexOf(property,0);
		if(index == -1) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("The property '" + property + "' is not animated")); else return this.mEndValues.data.get(index);
	}
	,get_isComplete: function() {
		return this.mCurrentTime >= this.mTotalTime && this.mRepeatCount == 1;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_transition: function() {
		return this.mTransitionName;
	}
	,set_transition: function(value) {
		this.mTransitionName = value;
		this.mTransitionFunc = starling_animation_Transitions.getTransition(value);
		if(this.mTransitionFunc == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid transiton: " + value));
		return this.mTransitionName;
	}
	,get_transitionFunc: function() {
		return this.mTransitionFunc;
	}
	,set_transitionFunc: function(value) {
		this.mTransitionName = "custom";
		this.mTransitionFunc = value;
		return value;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_progress: function() {
		return this.mProgress;
	}
	,get_delay: function() {
		return this.mDelay;
	}
	,set_delay: function(value) {
		this.mCurrentTime = this.mCurrentTime + this.mDelay - value;
		this.mDelay = value;
		return this.mDelay;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		return this.mRepeatCount = value;
	}
	,get_repeatDelay: function() {
		return this.mRepeatDelay;
	}
	,set_repeatDelay: function(value) {
		return this.mRepeatDelay = value;
	}
	,get_reverse: function() {
		return this.mReverse;
	}
	,set_reverse: function(value) {
		return this.mReverse = value;
	}
	,get_roundToInt: function() {
		return this.mRoundToInt;
	}
	,set_roundToInt: function(value) {
		return this.mRoundToInt = value;
	}
	,get_onStart: function() {
		return this.mOnStart;
	}
	,set_onStart: function(value) {
		return this.mOnStart = value;
	}
	,get_onUpdate: function() {
		return this.mOnUpdate;
	}
	,set_onUpdate: function(value) {
		return this.mOnUpdate = value;
	}
	,get_onRepeat: function() {
		return this.mOnRepeat;
	}
	,set_onRepeat: function(value) {
		return this.mOnRepeat = value;
	}
	,get_onComplete: function() {
		return this.mOnComplete;
	}
	,set_onComplete: function(value) {
		return this.mOnComplete = value;
	}
	,get_onStartArgs: function() {
		return this.mOnStartArgs;
	}
	,set_onStartArgs: function(value) {
		return this.mOnStartArgs = value;
	}
	,onUpdateArgs: null
	,get_onUpdateArgs: function() {
		return this.mOnUpdateArgs;
	}
	,set_onUpdateArgs: function(value) {
		this.mOnUpdateArgs = value;
	}
	,get_onRepeatArgs: function() {
		return this.mOnRepeatArgs;
	}
	,set_onRepeatArgs: function(value) {
		return this.mOnRepeatArgs = value;
	}
	,get_onCompleteArgs: function() {
		return this.mOnCompleteArgs;
	}
	,set_onCompleteArgs: function(value) {
		return this.mOnCompleteArgs = value;
	}
	,get_nextTween: function() {
		return this.mNextTween;
	}
	,set_nextTween: function(value) {
		return this.mNextTween = value;
	}
	,__class__: starling_animation_Tween
	,__properties__: {set_nextTween:"set_nextTween",get_nextTween:"get_nextTween",set_onCompleteArgs:"set_onCompleteArgs",get_onCompleteArgs:"get_onCompleteArgs",set_onRepeatArgs:"set_onRepeatArgs",get_onRepeatArgs:"get_onRepeatArgs",set_onStartArgs:"set_onStartArgs",get_onStartArgs:"get_onStartArgs",set_onComplete:"set_onComplete",get_onComplete:"get_onComplete",set_onRepeat:"set_onRepeat",get_onRepeat:"get_onRepeat",set_onUpdate:"set_onUpdate",get_onUpdate:"get_onUpdate",set_onStart:"set_onStart",get_onStart:"get_onStart",set_roundToInt:"set_roundToInt",get_roundToInt:"get_roundToInt",set_reverse:"set_reverse",get_reverse:"get_reverse",set_repeatDelay:"set_repeatDelay",get_repeatDelay:"get_repeatDelay",set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay",get_progress:"get_progress",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",set_transitionFunc:"set_transitionFunc",get_transitionFunc:"get_transitionFunc",set_transition:"set_transition",get_transition:"get_transition",get_target:"get_target",get_isComplete:"get_isComplete"}
});
var starling_core_RenderSupport = function() {
	this.mStencilReferenceValue = 0;
	this.mMasks = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mProjectionMatrix = new openfl_geom_Matrix();
	this.mModelViewMatrix = new openfl_geom_Matrix();
	this.mMvpMatrix = new openfl_geom_Matrix();
	this.mMatrixStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMatrixStackSize = 0;
	this.mProjectionMatrix3D = new openfl_geom_Matrix3D();
	this.mModelViewMatrix3D = new openfl_geom_Matrix3D();
	this.mMvpMatrix3D = new openfl_geom_Matrix3D();
	this.mMatrixStack3D = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMatrixStack3DSize = 0;
	this.mDrawCount = 0;
	this.mBlendMode = "normal";
	this.mClipRectStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mClipRectStackSize = 0;
	this.mCurrentQuadBatchID = 0;
	var a = [new starling_display_QuadBatch(true)];
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.data.set(i,a[i]);
	}
	this.mQuadBatches = vector;
	this.loadIdentity();
	this.setProjectionMatrix(0,0,400,300);
};
$hxClasses["starling.core.RenderSupport"] = starling_core_RenderSupport;
starling_core_RenderSupport.__name__ = ["starling","core","RenderSupport"];
starling_core_RenderSupport.transformMatrixForObject = function(matrix,object) {
	starling_utils_MatrixUtil.prependMatrix(matrix,object.get_transformationMatrix());
};
starling_core_RenderSupport.setDefaultBlendFactors = function(premultipliedAlpha) {
	starling_core_RenderSupport.setBlendFactors(premultipliedAlpha);
};
starling_core_RenderSupport.setBlendFactors = function(premultipliedAlpha,blendMode) {
	if(blendMode == null) blendMode = "normal";
	var blendFactors = starling_display_BlendMode.getBlendFactors(blendMode,premultipliedAlpha);
	starling_core_Starling.get_current().get_context().setBlendFactors(blendFactors[0],blendFactors[1]);
};
starling_core_RenderSupport._clear = function(rgb,alpha) {
	if(alpha == null) alpha = 0.0;
	if(rgb == null) rgb = 0;
	starling_core_Starling.get_current().get_context().clear(starling_utils_Color.getRed(rgb) / 255.0,starling_utils_Color.getGreen(rgb) / 255.0,starling_utils_Color.getBlue(rgb) / 255.0,alpha);
};
starling_core_RenderSupport.assembleAgal = function(vertexShader,fragmentShader,resultProgram) {
	if(resultProgram == null) {
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		resultProgram = context.createProgram();
	}
	var assembler = new openfl_utils_AGALMiniAssembler();
	resultProgram.upload(assembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),vertexShader),assembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),fragmentShader));
	return resultProgram;
};
starling_core_RenderSupport.getTextureLookupFlags = function(format,mipMapping,repeat,smoothing) {
	if(smoothing == null) smoothing = "bilinear";
	if(repeat == null) repeat = false;
	var options = ["2d",repeat?"repeat":"clamp"];
	if(format == 3) options.push("dxt1"); else if(format == 4) options.push("dxt5");
	if(smoothing == "none") {
		options.push("nearest");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else if(smoothing == "bilinear") {
		options.push("linear");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else {
		options.push("linear");
		options.push(mipMapping?"miplinear":"mipnone");
	}
	return "<" + options.join(",") + ">";
};
starling_core_RenderSupport.prototype = {
	mProjectionMatrix: null
	,mModelViewMatrix: null
	,mMvpMatrix: null
	,mMatrixStack: null
	,mMatrixStackSize: null
	,mProjectionMatrix3D: null
	,mModelViewMatrix3D: null
	,mMvpMatrix3D: null
	,mMatrixStack3D: null
	,mMatrixStack3DSize: null
	,mDrawCount: null
	,mBlendMode: null
	,mClipRectStack: null
	,mClipRectStackSize: null
	,mQuadBatches: null
	,mCurrentQuadBatchID: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.mQuadBatches;
		while(_g < _g1.data.get_length()) {
			var quadBatch = _g1.data.get(_g);
			++_g;
			quadBatch.dispose();
		}
	}
	,setProjectionMatrix: function(x,y,width,height,stageWidth,stageHeight,cameraPos) {
		if(stageHeight == null) stageHeight = 0;
		if(stageWidth == null) stageWidth = 0;
		if(stageWidth <= 0) stageWidth = width;
		if(stageHeight <= 0) stageHeight = height;
		if(cameraPos == null) {
			cameraPos = starling_core_RenderSupport.sPoint3D;
			cameraPos.setTo(stageWidth / 2,stageHeight / 2,stageWidth / Math.tan(0.5) * 0.5);
		}
		this.mProjectionMatrix.setTo(2.0 / width,0,0,-2. / height,-(2 * x + width) / width,(2 * y + height) / height);
		var focalLength = Math.abs(cameraPos.z);
		var offsetX = cameraPos.x - stageWidth / 2;
		var offsetY = cameraPos.y - stageHeight / 2;
		var far = focalLength * 20;
		var near = 1;
		var scaleX = stageWidth / width;
		var scaleY = stageHeight / height;
		starling_core_RenderSupport.sMatrixData.data.set(0,2 * focalLength / stageWidth);
		starling_core_RenderSupport.sMatrixData.data.set(5,-2 * focalLength / stageHeight);
		starling_core_RenderSupport.sMatrixData.data.set(10,far / (far - near));
		starling_core_RenderSupport.sMatrixData.data.set(14,-far * near / (far - near));
		starling_core_RenderSupport.sMatrixData.data.set(11,1);
		var value = starling_core_RenderSupport.sMatrixData.data.get(0) * scaleX;
		starling_core_RenderSupport.sMatrixData.data.set(0,value);
		var value1 = starling_core_RenderSupport.sMatrixData.data.get(5) * scaleY;
		starling_core_RenderSupport.sMatrixData.data.set(5,value1);
		starling_core_RenderSupport.sMatrixData.data.set(8,scaleX - 1 - 2 * scaleX * (x - offsetX) / stageWidth);
		starling_core_RenderSupport.sMatrixData.data.set(9,-scaleY + 1 + 2 * scaleY * (y - offsetY) / stageHeight);
		this.mProjectionMatrix3D.copyRawDataFrom(starling_core_RenderSupport.sMatrixData);
		this.mProjectionMatrix3D.prependTranslation(-stageWidth / 2.0 - offsetX,-stageHeight / 2.0 - offsetY,focalLength);
		this.applyClipRect();
	}
	,setOrthographicProjection: function(x,y,width,height) {
		var stage = starling_core_Starling.get_current().get_stage();
		starling_core_RenderSupport.sClipRect.setTo(x,y,width,height);
		this.setProjectionMatrix(x,y,width,height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
	}
	,loadIdentity: function() {
		this.mModelViewMatrix.identity();
		this.mModelViewMatrix3D.rawData.data.set(0,1.0);
		this.mModelViewMatrix3D.rawData.data.set(1,0.0);
		this.mModelViewMatrix3D.rawData.data.set(2,0.0);
		this.mModelViewMatrix3D.rawData.data.set(3,0.0);
		this.mModelViewMatrix3D.rawData.data.set(4,0.0);
		this.mModelViewMatrix3D.rawData.data.set(5,1.0);
		this.mModelViewMatrix3D.rawData.data.set(6,0.0);
		this.mModelViewMatrix3D.rawData.data.set(7,0.0);
		this.mModelViewMatrix3D.rawData.data.set(8,0.0);
		this.mModelViewMatrix3D.rawData.data.set(9,0.0);
		this.mModelViewMatrix3D.rawData.data.set(10,1.0);
		this.mModelViewMatrix3D.rawData.data.set(11,0.0);
		this.mModelViewMatrix3D.rawData.data.set(12,0.0);
		this.mModelViewMatrix3D.rawData.data.set(13,0.0);
		this.mModelViewMatrix3D.rawData.data.set(14,0.0);
		this.mModelViewMatrix3D.rawData.data.set(15,1.0);
	}
	,translateMatrix: function(dx,dy) {
		starling_utils_MatrixUtil.prependTranslation(this.mModelViewMatrix,dx,dy);
	}
	,rotateMatrix: function(angle) {
		starling_utils_MatrixUtil.prependRotation(this.mModelViewMatrix,angle);
	}
	,scaleMatrix: function(sx,sy) {
		starling_utils_MatrixUtil.prependScale(this.mModelViewMatrix,sx,sy);
	}
	,prependMatrix: function(matrix) {
		starling_utils_MatrixUtil.prependMatrix(this.mModelViewMatrix,matrix);
	}
	,transformMatrix: function(object) {
		starling_utils_MatrixUtil.prependMatrix(this.mModelViewMatrix,object.get_transformationMatrix());
	}
	,pushMatrix: function() {
		if(this.mMatrixStack.data.get_length() < this.mMatrixStackSize + 1) {
			var x = new openfl_geom_Matrix();
			this.mMatrixStack.data.push(x);
		}
		((function($this) {
			var $r;
			var index = $this.mMatrixStackSize++;
			$r = $this.mMatrixStack.data.get(index);
			return $r;
		}(this))).copyFrom(this.mModelViewMatrix);
	}
	,popMatrix: function() {
		this.mModelViewMatrix.copyFrom((function($this) {
			var $r;
			var index = --$this.mMatrixStackSize;
			$r = $this.mMatrixStack.data.get(index);
			return $r;
		}(this)));
	}
	,resetMatrix: function() {
		this.mMatrixStackSize = 0;
		this.mMatrixStack3DSize = 0;
		this.loadIdentity();
	}
	,get_mvpMatrix: function() {
		this.mMvpMatrix.copyFrom(this.mModelViewMatrix);
		this.mMvpMatrix.concat(this.mProjectionMatrix);
		return this.mMvpMatrix;
	}
	,get_modelViewMatrix: function() {
		return this.mModelViewMatrix;
	}
	,get_projectionMatrix: function() {
		return this.mProjectionMatrix;
	}
	,set_projectionMatrix: function(value) {
		this.mProjectionMatrix.copyFrom(value);
		this.applyClipRect();
		return this.mProjectionMatrix;
	}
	,transformMatrix3D: function(object) {
		this.mModelViewMatrix3D.prepend(starling_utils_MatrixUtil.convertTo3D(this.mModelViewMatrix,starling_core_RenderSupport.sMatrix3D));
		this.mModelViewMatrix3D.prepend(object.get_transformationMatrix3D());
		this.mModelViewMatrix.identity();
	}
	,pushMatrix3D: function() {
		if(this.mMatrixStack3D.data.get_length() < this.mMatrixStack3DSize + 1) {
			var x = new openfl_geom_Matrix3D();
			this.mMatrixStack3D.data.push(x);
		}
		((function($this) {
			var $r;
			var index = $this.mMatrixStack3DSize++;
			$r = $this.mMatrixStack3D.data.get(index);
			return $r;
		}(this))).copyFrom(this.mModelViewMatrix3D);
	}
	,popMatrix3D: function() {
		this.mModelViewMatrix3D.copyFrom((function($this) {
			var $r;
			var index = --$this.mMatrixStack3DSize;
			$r = $this.mMatrixStack3D.data.get(index);
			return $r;
		}(this)));
	}
	,get_mvpMatrix3D: function() {
		if(this.mMatrixStack3DSize == 0) starling_utils_MatrixUtil.convertTo3D(this.get_mvpMatrix(),this.mMvpMatrix3D); else {
			this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
			this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
			this.mMvpMatrix3D.prepend(starling_utils_MatrixUtil.convertTo3D(this.mModelViewMatrix,starling_core_RenderSupport.sMatrix3D));
		}
		return this.mMvpMatrix3D;
	}
	,get_projectionMatrix3D: function() {
		return this.mProjectionMatrix3D;
	}
	,set_projectionMatrix3D: function(value) {
		this.mProjectionMatrix3D.copyFrom(value);
		return this.mProjectionMatrix3D;
	}
	,applyBlendMode: function(premultipliedAlpha) {
		starling_core_RenderSupport.setBlendFactors(premultipliedAlpha,this.mBlendMode);
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		if(value != "auto") this.mBlendMode = value;
		return this.mBlendMode;
	}
	,get_renderTarget: function() {
		var this1 = starling_core_Starling.get_current().get_contextData();
		return this1.get("Starling.renderTarget");
	}
	,set_renderTarget: function(target) {
		this.setRenderTarget(target);
		return target;
	}
	,setRenderTarget: function(target,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		var this1 = starling_core_Starling.get_current().get_contextData();
		this1.set("Starling.renderTarget",target);
		target;
		this.applyClipRect();
		if(target != null) starling_core_Starling.get_current().get_context().setRenderToTexture(target.get_base(),starling_utils_SystemUtil.get_supportsDepthAndStencil(),antiAliasing); else starling_core_Starling.get_current().get_context().setRenderToBackBuffer();
	}
	,pushClipRect: function(rectangle,intersectWithCurrent) {
		if(intersectWithCurrent == null) intersectWithCurrent = true;
		if(this.mClipRectStack.data.get_length() < this.mClipRectStackSize + 1) {
			var x = new openfl_geom_Rectangle();
			this.mClipRectStack.data.push(x);
		}
		this.mClipRectStack.data.get(this.mClipRectStackSize).copyFrom(rectangle);
		rectangle = this.mClipRectStack.data.get(this.mClipRectStackSize);
		if(intersectWithCurrent && this.mClipRectStackSize > 0) starling_utils_RectangleUtil.intersect(rectangle,this.mClipRectStack.data.get(this.mClipRectStackSize - 1),rectangle);
		++this.mClipRectStackSize;
		this.applyClipRect();
		return rectangle;
	}
	,popClipRect: function() {
		if(this.mClipRectStackSize > 0) {
			--this.mClipRectStackSize;
			this.applyClipRect();
		}
	}
	,applyClipRect: function() {
		this.finishQuadBatch();
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) return;
		if(this.mClipRectStackSize > 0) {
			var width;
			var height;
			var rect = this.mClipRectStack.data.get(this.mClipRectStackSize - 1);
			var renderTarget = this.get_renderTarget();
			if(renderTarget != null) {
				width = Std["int"](renderTarget.get_root().get_nativeWidth());
				height = Std["int"](renderTarget.get_root().get_nativeHeight());
			} else {
				width = starling_core_Starling.get_current().get_backBufferWidth();
				height = starling_core_Starling.get_current().get_backBufferHeight();
			}
			starling_utils_MatrixUtil.transformCoords(this.mProjectionMatrix,rect.x,rect.y,starling_core_RenderSupport.sPoint);
			starling_core_RenderSupport.sClipRect.x = (starling_core_RenderSupport.sPoint.x * 0.5 + 0.5) * width;
			starling_core_RenderSupport.sClipRect.y = (0.5 - starling_core_RenderSupport.sPoint.y * 0.5) * height;
			starling_utils_MatrixUtil.transformCoords(this.mProjectionMatrix,rect.get_right(),rect.get_bottom(),starling_core_RenderSupport.sPoint);
			starling_core_RenderSupport.sClipRect.set_right((starling_core_RenderSupport.sPoint.x * 0.5 + 0.5) * width);
			starling_core_RenderSupport.sClipRect.set_bottom((0.5 - starling_core_RenderSupport.sPoint.y * 0.5) * height);
			starling_core_RenderSupport.sBufferRect.setTo(0,0,width,height);
			starling_utils_RectangleUtil.intersect(starling_core_RenderSupport.sClipRect,starling_core_RenderSupport.sBufferRect,starling_core_RenderSupport.sScissorRect);
			if(starling_core_RenderSupport.sScissorRect.width < 1 || starling_core_RenderSupport.sScissorRect.height < 1) starling_core_RenderSupport.sScissorRect.setTo(0,0,1,1);
			starling_core_RenderSupport.sScissorRect.y = height - starling_core_RenderSupport.sScissorRect.height - starling_core_RenderSupport.sScissorRect.y;
			context.setScissorRectangle(starling_core_RenderSupport.sScissorRect);
		} else context.setScissorRectangle(null);
	}
	,mMasks: null
	,mStencilReferenceValue: null
	,pushMask: function(mask) {
		var index = this.mMasks.data.get_length();
		this.mMasks.data.set(index,mask);
		this.mStencilReferenceValue++;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) return;
		this.finishQuadBatch();
		context.setStencilActions(2,1,2);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(2,1,5);
	}
	,popMask: function() {
		var mask = this.mMasks.data.pop();
		this.mStencilReferenceValue--;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) return;
		this.finishQuadBatch();
		context.setStencilActions(2,1,0);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(2,1,5);
	}
	,drawMask: function(mask) {
		this.pushMatrix();
		var stage = mask.get_stage();
		if(stage != null) mask.getTransformationMatrix(stage,this.mModelViewMatrix); else this.transformMatrix(mask);
		mask.render(this,0.0);
		this.finishQuadBatch();
		this.popMatrix();
	}
	,get_stencilReferenceValue: function() {
		return this.mStencilReferenceValue;
	}
	,set_stencilReferenceValue: function(value) {
		this.mStencilReferenceValue = value;
		if(starling_core_Starling.get_current().get_contextValid()) starling_core_Starling.get_current().get_context().setStencilReferenceValue(value);
		return this.mStencilReferenceValue;
	}
	,batchQuad: function(quad,parentAlpha,texture,smoothing) {
		if(this.mQuadBatches.data.get(this.mCurrentQuadBatchID).isStateChange(quad.get_tinted(),parentAlpha,texture,smoothing,this.mBlendMode)) this.finishQuadBatch();
		this.mQuadBatches.data.get(this.mCurrentQuadBatchID).addQuad(quad,parentAlpha,texture,smoothing,this.mModelViewMatrix,this.mBlendMode);
	}
	,batchQuadBatch: function(quadBatch,parentAlpha) {
		if(this.mQuadBatches.data.get(this.mCurrentQuadBatchID).isStateChange(quadBatch.get_tinted(),parentAlpha,quadBatch.get_texture(),quadBatch.get_smoothing(),this.mBlendMode,quadBatch.get_numQuads())) this.finishQuadBatch();
		this.mQuadBatches.data.get(this.mCurrentQuadBatchID).addQuadBatch(quadBatch,parentAlpha,this.mModelViewMatrix,this.mBlendMode);
	}
	,finishQuadBatch: function() {
		var currentBatch = this.mQuadBatches.data.get(this.mCurrentQuadBatchID);
		if(currentBatch.get_numQuads() != 0) {
			if(this.mMatrixStack3DSize == 0) currentBatch.renderCustom(this.mProjectionMatrix3D); else {
				this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
				this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
				currentBatch.renderCustom(this.mMvpMatrix3D);
			}
			currentBatch.reset();
			++this.mCurrentQuadBatchID;
			++this.mDrawCount;
			if(this.mQuadBatches.data.get_length() <= this.mCurrentQuadBatchID) {
				var x = new starling_display_QuadBatch(true);
				this.mQuadBatches.data.push(x);
			}
		}
	}
	,nextFrame: function() {
		this.resetMatrix();
		this.trimQuadBatches();
		this.mMasks.data.set_length(0);
		this.mCurrentQuadBatchID = 0;
		this.mBlendMode = "normal";
		this.mDrawCount = 0;
	}
	,trimQuadBatches: function() {
		var numUsedBatches = this.mCurrentQuadBatchID + 1;
		var numTotalBatches = this.mQuadBatches.data.get_length();
		if(numTotalBatches >= 16 && numTotalBatches > 2 * numUsedBatches) {
			var numToRemove = numTotalBatches - numUsedBatches;
			var _g = 0;
			while(_g < numToRemove) {
				var i = _g++;
				this.mQuadBatches.data.pop().dispose();
			}
		}
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) alpha = 0.0;
		if(rgb == null) rgb = 0;
		starling_core_RenderSupport._clear(rgb,alpha);
	}
	,raiseDrawCount: function(value) {
		if(value == null) value = 1;
		this.mDrawCount = this.mDrawCount + value;
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,__class__: starling_core_RenderSupport
	,__properties__: {get_drawCount:"get_drawCount",set_stencilReferenceValue:"set_stencilReferenceValue",get_stencilReferenceValue:"get_stencilReferenceValue",set_renderTarget:"set_renderTarget",get_renderTarget:"get_renderTarget",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_projectionMatrix3D:"set_projectionMatrix3D",get_projectionMatrix3D:"get_projectionMatrix3D",get_mvpMatrix3D:"get_mvpMatrix3D",set_projectionMatrix:"set_projectionMatrix",get_projectionMatrix:"get_projectionMatrix",get_modelViewMatrix:"get_modelViewMatrix",get_mvpMatrix:"get_mvpMatrix"}
};
var starling_core_Starling = function(rootClass,stage,viewPort,stage3D,renderMode,profile) {
	if(profile == null) profile = "auto";
	if(renderMode == null) renderMode = 0;
	this.mStoredDrawCount = 0;
	starling_events_EventDispatcher.call(this);
	if(stage == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Stage must not be null"));
	if(viewPort == null) viewPort = new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight);
	if(stage3D == null) stage3D = stage.stage3Ds.data.get(0);
	starling_utils_SystemUtil.initialize();
	starling_core_Starling.sAll.data.push(this);
	this.makeCurrent();
	this.mRootClass = rootClass;
	this.mViewPort = viewPort;
	this.mPreviousViewPort = new openfl_geom_Rectangle();
	this.mStage3D = stage3D;
	this.mStage = new starling_display_Stage(viewPort.width | 0,viewPort.height | 0,stage.get_color());
	this.mNativeOverlay = new openfl_display_Sprite();
	this.mNativeStage = stage;
	this.mNativeStage.addChild(this.mNativeOverlay);
	this.mNativeStageContentScaleFactor = 1.0;
	this.mTouchProcessor = new starling_events_TouchProcessor(this.mStage);
	this.mJuggler = new starling_animation_Juggler();
	this.mAntiAliasing = 0;
	this.mSimulateMultitouch = false;
	this.mEnableErrorChecking = false;
	this.mSupportHighResolutions = false;
	this.mBroadcastKeyboardEvents = true;
	this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	this.mSupport = new starling_core_RenderSupport();
	var v = new haxe_ds_StringMap();
	starling_core_Starling.sContextData.set(stage3D,v);
	v;
	var this1 = starling_core_Starling.sContextData.h[stage3D.__id__];
	var v1 = new haxe_ds_StringMap();
	this1.set("Starling.programs",v1);
	v1;
	stage.scaleMode = 2;
	stage.align = 6;
	var _g = 0;
	var _g1 = this.get_touchEventTypes();
	while(_g < _g1.length) {
		var touchEventType = _g1[_g];
		++_g;
		stage.addEventListener(touchEventType,$bind(this,this.onTouch),false,0,true);
	}
	stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame),false,0,true);
	stage.addEventListener("keyDown",$bind(this,this.onKey),false,0,true);
	stage.addEventListener("keyUp",$bind(this,this.onKey),false,0,true);
	stage.addEventListener("resize",$bind(this,this.onResize),false,0,true);
	stage.addEventListener("mouseLeave",$bind(this,this.onMouseLeave),false,0,true);
	this.mStage3D.addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,10,true);
	this.mStage3D.addEventListener("error",$bind(this,this.onStage3DError),false,10,true);
	if(this.mStage3D.context3D != null && this.mStage3D.context3D.driverInfo != "Disposed") {
		this.mProfile = this.mStage3D.context3D.profile;
		if(stage3D.context3D != null) haxe_Timer.delay($bind(this,this.initialize),1);
	} else {
		if(!starling_utils_SystemUtil.get_supportsDepthAndStencil()) haxe_Log.trace("[Starling] Mask support requires 'depthAndStencil' to be enabled" + " in the application descriptor.",{ fileName : "Starling.hx", lineNumber : 336, className : "starling.core.Starling", methodName : "new"});
		this.mShareContext = false;
		this.requestContext3D(stage3D,renderMode,profile);
	}
};
$hxClasses["starling.core.Starling"] = starling_core_Starling;
starling_core_Starling.__name__ = ["starling","core","Starling"];
starling_core_Starling.__properties__ = {set_handleLostContext:"set_handleLostContext",get_handleLostContext:"get_handleLostContext",set_multitouchEnabled:"set_multitouchEnabled",get_multitouchEnabled:"get_multitouchEnabled",get_all:"get_all",get_current:"get_current"}
starling_core_Starling.get_current = function() {
	return starling_core_Starling.sCurrent;
};
starling_core_Starling.get_all = function() {
	return starling_core_Starling.sAll;
};
starling_core_Starling.get_multitouchEnabled = function() {
	return openfl_ui_Multitouch.inputMode == 2;
};
starling_core_Starling.set_multitouchEnabled = function(value) {
	if(starling_core_Starling.sCurrent != null) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("'multitouchEnabled' must be set before Starling instance is created")); else if(value) openfl_ui_Multitouch.inputMode = 2; else openfl_ui_Multitouch.inputMode = 1;
	return openfl_ui_Multitouch.inputMode == 2;
};
starling_core_Starling.get_handleLostContext = function() {
	return starling_core_Starling.sHandleLostContext;
};
starling_core_Starling.set_handleLostContext = function(value) {
	if(starling_core_Starling.sCurrent != null) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("'handleLostContext' must be set before Starling instance is created")); else starling_core_Starling.sHandleLostContext = value;
	return starling_core_Starling.sHandleLostContext;
};
starling_core_Starling.__super__ = starling_events_EventDispatcher;
starling_core_Starling.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mStage3D: null
	,mStage: null
	,mRootClass: null
	,mRoot: null
	,mJuggler: null
	,mSupport: null
	,mTouchProcessor: null
	,mAntiAliasing: null
	,mSimulateMultitouch: null
	,mEnableErrorChecking: null
	,mLastFrameTimestamp: null
	,mLeftMouseDown: null
	,mStatsDisplay: null
	,mShareContext: null
	,mProfile: null
	,mContext: null
	,mStarted: null
	,mRendering: null
	,mSupportHighResolutions: null
	,mBroadcastKeyboardEvents: null
	,mViewPort: null
	,mPreviousViewPort: null
	,mClippedViewPort: null
	,mNativeStage: null
	,mNativeOverlay: null
	,mNativeStageContentScaleFactor: null
	,mStoredDrawCount: null
	,dispose: function() {
		this.stop(true);
		this.mNativeStage.removeEventListener("enterFrame",$bind(this,this.onEnterFrame),false);
		this.mNativeStage.removeEventListener("keyDown",$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener("keyUp",$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener("resize",$bind(this,this.onResize),false);
		this.mNativeStage.removeEventListener("mouseLeave",$bind(this,this.onMouseLeave),false);
		this.mNativeStage.removeChild(this.mNativeOverlay);
		this.mStage3D.removeEventListener("context3DCreate",$bind(this,this.onContextCreated),false);
		this.mStage3D.removeEventListener("error",$bind(this,this.onStage3DError),false);
		var _g = 0;
		var _g1 = this.get_touchEventTypes();
		while(_g < _g1.length) {
			var touchEventType = _g1[_g];
			++_g;
			this.mNativeStage.removeEventListener(touchEventType,$bind(this,this.onTouch),false);
		}
		if(this.mStage != null) this.mStage.dispose();
		if(this.mSupport != null) this.mSupport.dispose();
		if(this.mTouchProcessor != null) this.mTouchProcessor.dispose();
		if(starling_core_Starling.sCurrent == this) starling_core_Starling.sCurrent = null;
		if(this.mContext != null && !this.mShareContext) this.mContext.dispose();
		var index = starling_core_Starling.sAll.data.indexOf(this,0);
		if(index != -1) new openfl__$Vector_AbstractVector(starling_core_Starling.sAll.data.splice(index,1));
	}
	,requestContext3D: function(stage3D,renderMode,profile) {
		var _g = this;
		var profiles = [];
		var currentProfile;
		if(profile == "auto") profiles = [2,0,1]; else if(((profile | 0) === profile)) profiles = [profile]; else if((profile instanceof Array) && profile.__enum__ == null) profiles = profile; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Profile must be of type 'Context3DProfile' or 'Array'"));
		var onFinished = null;
		var onError = null;
		var requestNextProfile;
		var requestNextProfile1 = null;
		requestNextProfile1 = function() {
			currentProfile = profiles.shift();
			try {
				_g.mStage3D.requestContext3D(renderMode,currentProfile);
			} catch( error ) {
				haxe_CallStack.lastException = error;
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				if( js_Boot.__instanceof(error,openfl_errors_Error) ) {
					if(profiles.length != 0) haxe_Timer.delay(requestNextProfile1,1); else throw new js__$Boot_HaxeError(error);
				} else throw(error);
			}
		};
		requestNextProfile = requestNextProfile1;
		var onCreated = function(event) {
			var context = stage3D.context3D;
			if(renderMode == 0 && profiles.length != 0 && (context.driverInfo != null && context.driverInfo.indexOf("Software") != -1)) onError(event); else {
				_g.mProfile = currentProfile;
				onFinished();
			}
		};
		onError = function(event1) {
			if(profiles.length != 0) {
				event1.stopImmediatePropagation();
				haxe_Timer.delay(requestNextProfile,1);
			} else onFinished();
		};
		onFinished = function() {
			_g.mStage3D.removeEventListener("context3DCreate",onCreated);
			_g.mStage3D.removeEventListener("error",onError);
		};
		this.mStage3D.addEventListener("context3DCreate",onCreated,false,100);
		this.mStage3D.addEventListener("error",onError,false,100);
		requestNextProfile();
	}
	,initialize: function() {
		this.makeCurrent();
		this.initializeGraphicsAPI();
		this.initializeRoot();
		this.mTouchProcessor.set_simulateMultitouch(this.mSimulateMultitouch);
		this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	}
	,initializeGraphicsAPI: function() {
		this.mContext = this.mStage3D.context3D;
		this.mContext.set_enableErrorChecking(this.mEnableErrorChecking);
		haxe_Log.trace("[Starling] Initialization complete.",{ fileName : "Starling.hx", lineNumber : 462, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		haxe_Log.trace("[Starling] Display Driver: " + this.mContext.driverInfo,{ fileName : "Starling.hx", lineNumber : 463, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		this.updateViewPort(true);
		this.dispatchEventWith("context3DCreate",false,this.mContext);
	}
	,initializeRoot: function() {
		if(this.mRoot == null && this.mRootClass != null) {
			this.mRoot = Type.createInstance(this.mRootClass,[]);
			if(this.mRoot == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid root class: " + Std.string(this.mRootClass)));
			this.mStage.addChildAt(this.mRoot,0);
			this.dispatchEventWith("rootCreated",false,this.mRoot);
		}
	}
	,nextFrame: function() {
		var now = openfl_Lib.getTimer() / 1000.0;
		var passedTime = now - this.mLastFrameTimestamp;
		this.mLastFrameTimestamp = now;
		if(passedTime > 1.0) passedTime = 1.0;
		if(passedTime < 0.0) passedTime = 1.0 / this.mNativeStage.get_frameRate();
		this.advanceTime(passedTime);
		this.render();
	}
	,advanceTime: function(passedTime) {
		if(!this.get_contextValid()) return;
		this.makeCurrent();
		this.mTouchProcessor.advanceTime(passedTime);
		this.mStage.advanceTime(passedTime);
		this.mJuggler.advanceTime(passedTime);
	}
	,render: function() {
		if(!this.get_contextValid()) return;
		this.makeCurrent();
		this.updateViewPort();
		this.dispatchEventWith("render");
		var scaleX = this.mViewPort.width / this.mStage.get_stageWidth();
		var scaleY = this.mViewPort.height / this.mStage.get_stageHeight();
		this.mContext.setDepthTest(false,0);
		this.mContext.setCulling(3);
		this.mSupport.nextFrame();
		this.mSupport.set_stencilReferenceValue(0);
		this.mSupport.set_renderTarget(null);
		this.mSupport.setProjectionMatrix(this.mViewPort.x < 0?-this.mViewPort.x / scaleX:0.0,this.mViewPort.y < 0?-this.mViewPort.y / scaleY:0.0,this.mClippedViewPort.width / scaleX,this.mClippedViewPort.height / scaleY,this.mStage.get_stageWidth(),this.mStage.get_stageHeight(),this.mStage.get_cameraPosition());
		if(!this.mShareContext) starling_core_RenderSupport._clear(this.mStage.get_color(),1.0);
		this.mStage.render(this.mSupport,1.0);
		this.mSupport.finishQuadBatch();
		if(this.mStatsDisplay != null) this.mStatsDisplay.set_drawCount(this.mSupport.get_drawCount() + this.mStoredDrawCount);
		this.mStoredDrawCount = 0;
		if(!this.mShareContext) this.mContext.present();
	}
	,updateViewPort: function(forceUpdate) {
		if(forceUpdate == null) forceUpdate = false;
		if(forceUpdate || this.mPreviousViewPort.width != this.mViewPort.width || this.mPreviousViewPort.height != this.mViewPort.height || this.mPreviousViewPort.x != this.mViewPort.x || this.mPreviousViewPort.y != this.mViewPort.y) {
			this.mPreviousViewPort.setTo(this.mViewPort.x,this.mViewPort.y,this.mViewPort.width,this.mViewPort.height);
			this.mClippedViewPort = this.mViewPort.intersection(new openfl_geom_Rectangle(0,0,this.mNativeStage.stageWidth,this.mNativeStage.stageHeight));
			if(!this.mShareContext) {
				if(this.mProfile == 1) this.configureBackBuffer(32,32,this.mAntiAliasing,true);
				this.mStage3D.set_x(this.mClippedViewPort.x);
				this.mStage3D.set_y(this.mClippedViewPort.y);
				this.configureBackBuffer(this.mClippedViewPort.width | 0,this.mClippedViewPort.height | 0,this.mAntiAliasing,true,this.mSupportHighResolutions);
				if(this.mSupportHighResolutions && Reflect.getProperty(this.mNativeStage,"contentsScaleFactor") != null) this.mNativeStageContentScaleFactor = Reflect.getProperty(this.mNativeStage,"contentsScaleFactor"); else this.mNativeStageContentScaleFactor = 1.0;
			}
		}
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution) {
		if(wantsBestResolution == null) wantsBestResolution = false;
		this.mContext.configureBackBuffer(width,height,antiAlias,enableDepthAndStencil && starling_utils_SystemUtil.get_supportsDepthAndStencil(),wantsBestResolution);
	}
	,updateNativeOverlay: function() {
		this.mNativeOverlay.set_x(this.mViewPort.x);
		this.mNativeOverlay.set_y(this.mViewPort.y);
		this.mNativeOverlay.set_scaleX(this.mViewPort.width / this.mStage.get_stageWidth());
		this.mNativeOverlay.set_scaleY(this.mViewPort.height / this.mStage.get_stageHeight());
	}
	,stopWithFatalError: function(message) {
		var background = new openfl_display_Shape();
		background.get_graphics().beginFill(0,0.8);
		background.get_graphics().drawRect(0,0,this.mStage.get_stageWidth(),this.mStage.get_stageHeight());
		background.get_graphics().endFill();
		var textField = new openfl_text_TextField();
		var textFormat = new openfl_text_TextFormat("_sans",14,16777215);
		textFormat.align = 0;
		textField.set_defaultTextFormat(textFormat);
		textField.set_wordWrap(true);
		textField.set_width(this.mStage.get_stageWidth() * 0.75);
		textField.set_autoSize(0);
		textField.set_text(message);
		textField.set_x((this.mStage.get_stageWidth() - textField.get_width()) / 2);
		textField.set_y((this.mStage.get_stageHeight() - textField.get_height()) / 2);
		textField.set_background(true);
		textField.set_backgroundColor(5570560);
		this.updateNativeOverlay();
		this.get_nativeOverlay().addChild(background);
		this.get_nativeOverlay().addChild(textField);
		this.stop(true);
		haxe_Log.trace("[Starling]",{ fileName : "Starling.hx", lineNumber : 644, className : "starling.core.Starling", methodName : "stopWithFatalError", customParams : [message]});
		this.dispatchEventWith("fatalError",false,message);
	}
	,makeCurrent: function() {
		starling_core_Starling.sCurrent = this;
	}
	,start: function() {
		this.mStarted = this.mRendering = true;
		this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	}
	,stop: function(suspendRendering) {
		if(suspendRendering == null) suspendRendering = false;
		this.mStarted = false;
		this.mRendering = !suspendRendering;
	}
	,onStage3DError: function(event) {
		if(event.errorID == 3702) {
			var mode;
			if(openfl_system_Capabilities.playerType == "Desktop") mode = "renderMode"; else mode = "wmode";
			this.stopWithFatalError("Context3D not available! Possible reasons: wrong " + mode + " or missing device support.");
		} else this.stopWithFatalError("Stage3D error: " + event.text);
	}
	,onContextCreated: function(event) {
		if(!starling_core_Starling.get_handleLostContext() && this.mContext != null) {
			event.stopImmediatePropagation();
			this.stopWithFatalError("The application lost the device context!");
			haxe_Log.trace("[Starling] Enable 'Starling.handleLostContext' to avoid this error.",{ fileName : "Starling.hx", lineNumber : 699, className : "starling.core.Starling", methodName : "onContextCreated"});
		} else this.initialize();
	}
	,onEnterFrame: function(event) {
		if(!this.mShareContext) {
			if(this.mStarted) this.nextFrame(); else if(this.mRendering) this.render();
		}
		this.updateNativeOverlay();
	}
	,onKey: function(event) {
		if(!this.mStarted) return;
		var keyEvent = new starling_events_KeyboardEvent(event.type,event.charCode,event.keyCode,event.keyLocation,event.ctrlKey,event.altKey,event.shiftKey);
		this.makeCurrent();
		if(this.mBroadcastKeyboardEvents) this.mStage.broadcastEvent(keyEvent); else this.mStage.dispatchEvent(keyEvent);
		if(keyEvent.isDefaultPrevented()) event.preventDefault();
	}
	,onResize: function(event) {
		var _g = this;
		var stageWidth;
		stageWidth = (js_Boot.__cast(event.target , openfl_display_Stage)).stageWidth;
		var stageHeight;
		stageHeight = (js_Boot.__cast(event.target , openfl_display_Stage)).stageHeight;
		var dispatchResizeEvent;
		var dispatchResizeEvent1 = null;
		dispatchResizeEvent1 = function() {
			_g.makeCurrent();
			_g.removeEventListener("context3DCreate",dispatchResizeEvent1);
			_g.mStage.dispatchEvent(new starling_events_ResizeEvent("resize",stageWidth,stageHeight));
		};
		dispatchResizeEvent = dispatchResizeEvent1;
		if(this.get_contextValid()) dispatchResizeEvent(); else this.addEventListener("context3DCreate",dispatchResizeEvent);
	}
	,onMouseLeave: function(event) {
		this.mTouchProcessor.enqueueMouseLeftStage();
	}
	,onTouch: function(event) {
		if(!this.mStarted) return;
		var globalX;
		var globalY;
		var touchID;
		var phase = null;
		var pressure = 1.0;
		var width = 1.0;
		var height = 1.0;
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			globalX = mouseEvent.stageX;
			globalY = mouseEvent.stageY;
			touchID = 0;
			if(event.type == "mouseDown") this.mLeftMouseDown = true; else if(event.type == "mouseUp") this.mLeftMouseDown = false;
		} else {
			var touchEvent;
			touchEvent = js_Boot.__cast(event , openfl_events_TouchEvent);
			if(openfl_ui_Mouse.supportsCursor && touchEvent.isPrimaryTouchPoint) return; else {
				globalX = touchEvent.stageX;
				globalY = touchEvent.stageY;
				touchID = touchEvent.touchPointID;
				pressure = touchEvent.pressure;
				width = touchEvent.sizeX;
				height = touchEvent.sizeY;
			}
		}
		var _g = event.type;
		switch(_g) {
		case "touchBegin":
			phase = "began";
			break;
		case "touchMove":
			phase = "moved";
			break;
		case "touchEnd":
			phase = "ended";
			break;
		case "mouseDown":
			phase = "began";
			break;
		case "mouseUp":
			phase = "ended";
			break;
		case "mouseMove":
			if(this.mLeftMouseDown) phase = "moved"; else phase = "hover";
			break;
		}
		globalX = this.mStage.get_stageWidth() * (globalX - this.mViewPort.x) / this.mViewPort.width;
		globalY = this.mStage.get_stageHeight() * (globalY - this.mViewPort.y) / this.mViewPort.height;
		this.mTouchProcessor.enqueue(touchID,phase,globalX,globalY,pressure,width,height);
		if(event.type == "mouseUp" && openfl_ui_Mouse.supportsCursor) this.mTouchProcessor.enqueue(touchID,"hover",globalX,globalY);
	}
	,get_touchEventTypes: function() {
		var types = [];
		if(starling_core_Starling.get_multitouchEnabled()) {
			types.push("touchBegin");
			types.push("touchMove");
			types.push("touchEnd");
		}
		if(!starling_core_Starling.get_multitouchEnabled() || openfl_ui_Mouse.supportsCursor) {
			types.push("mouseDown");
			types.push("mouseMove");
			types.push("mouseUp");
		}
		return types;
	}
	,registerProgram: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = this.mContext.createProgram();
		program.upload(vertexShader,fragmentShader);
		var this1 = this.get_programs();
		this1.set(name,program);
		program;
		return program;
	}
	,registerProgramFromSource: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = starling_core_RenderSupport.assembleAgal(vertexShader,fragmentShader);
		var this1 = this.get_programs();
		this1.set(name,program);
		program;
		return program;
	}
	,deleteProgram: function(name) {
		var program = this.getProgram(name);
		if(program != null) {
			program.dispose();
			var this1 = this.get_programs();
			this1.remove(name);
		}
	}
	,getProgram: function(name) {
		var this1 = this.get_programs();
		return this1.get(name);
	}
	,hasProgram: function(name) {
		var this1 = this.get_programs();
		return this1.exists(name);
	}
	,get_programs: function() {
		var this1 = this.get_contextData();
		return this1.get("Starling.programs");
	}
	,get_isStarted: function() {
		return this.mStarted;
	}
	,get_juggler: function() {
		return this.mJuggler;
	}
	,get_context: function() {
		return this.mContext;
	}
	,get_contextData: function() {
		return starling_core_Starling.sContextData.h[this.mStage3D.__id__];
	}
	,get_backBufferWidth: function() {
		return this.mClippedViewPort.width | 0;
	}
	,get_backBufferHeight: function() {
		return this.mClippedViewPort.height | 0;
	}
	,get_backBufferPixelsPerPoint: function() {
		return this.mNativeStageContentScaleFactor | 0;
	}
	,get_simulateMultitouch: function() {
		return this.mSimulateMultitouch;
	}
	,set_simulateMultitouch: function(value) {
		this.mSimulateMultitouch = value;
		if(this.mContext != null) this.mTouchProcessor.set_simulateMultitouch(value);
		return this.mSimulateMultitouch;
	}
	,get_enableErrorChecking: function() {
		return this.mEnableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		this.mEnableErrorChecking = value;
		if(this.mContext != null) this.mContext.set_enableErrorChecking(value);
		return this.mEnableErrorChecking;
	}
	,get_antiAliasing: function() {
		return this.mAntiAliasing;
	}
	,set_antiAliasing: function(value) {
		if(this.mAntiAliasing != value) {
			this.mAntiAliasing = value;
			if(this.get_contextValid()) this.updateViewPort(true);
		}
		return this.mAntiAliasing;
	}
	,get_viewPort: function() {
		return this.mViewPort;
	}
	,set_viewPort: function(value) {
		return this.mViewPort = value.clone();
	}
	,get_contentScaleFactor: function() {
		return this.mViewPort.width * this.mNativeStageContentScaleFactor / this.mStage.get_stageWidth();
	}
	,get_nativeOverlay: function() {
		return this.mNativeOverlay;
	}
	,get_showStats: function() {
		return this.mStatsDisplay != null && this.mStatsDisplay.get_parent() != null;
	}
	,set_showStats: function(value) {
		if(value == this.get_showStats()) return this.mStatsDisplay != null && this.mStatsDisplay.get_parent() != null;
		if(value) {
			if(this.mStatsDisplay != null) this.mStage.addChild(this.mStatsDisplay); else this.showStatsAt();
		} else this.mStatsDisplay.removeFromParent();
		return this.mStatsDisplay != null && this.mStatsDisplay.get_parent() != null;
	}
	,showStatsAt: function(hAlign,vAlign,scale) {
		if(scale == null) scale = 1;
		if(vAlign == null) vAlign = "top";
		if(hAlign == null) hAlign = "left";
		var _g = this;
		var onRootCreated = null;
		if(this.mContext == null) this.addEventListener("rootCreated",onRootCreated); else {
			var stageWidth = this.mStage.get_stageWidth();
			var stageHeight = this.mStage.get_stageHeight();
			if(this.mStatsDisplay == null) {
				this.mStatsDisplay = new starling_core_StatsDisplay();
				this.mStatsDisplay.set_touchable(false);
			}
			this.mStage.addChild(this.mStatsDisplay);
			this.mStatsDisplay.set_scaleX(this.mStatsDisplay.set_scaleY(scale));
			if(hAlign == "left") this.mStatsDisplay.set_x(0); else if(hAlign == "right") this.mStatsDisplay.set_x(stageWidth - this.mStatsDisplay.get_width()); else this.mStatsDisplay.set_x(Std["int"]((stageWidth - this.mStatsDisplay.get_width()) / 2));
			if(vAlign == "top") this.mStatsDisplay.set_y(0); else if(vAlign == "bottom") this.mStatsDisplay.set_y(stageHeight - this.mStatsDisplay.get_height()); else this.mStatsDisplay.set_y(Std["int"]((stageHeight - this.mStatsDisplay.get_height()) / 2));
		}
		var onRootCreated1;
		var onRootCreated2 = null;
		onRootCreated2 = function() {
			_g.showStatsAt(hAlign,vAlign,scale);
			_g.removeEventListener("rootCreated",onRootCreated2);
		};
		onRootCreated1 = onRootCreated2;
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_stage3D: function() {
		return this.mStage3D;
	}
	,get_nativeStage: function() {
		return this.mNativeStage;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,get_rootClass: function() {
		return this.mRootClass;
	}
	,set_rootClass: function(value) {
		if(this.mRootClass != null && this.mRoot != null) throw new js__$Boot_HaxeError(new openfl_errors_Error("Root class may not change after root has been instantiated")); else if(this.mRootClass == null) {
			this.mRootClass = value;
			if(this.mContext != null) this.initializeRoot();
		}
		return this.mRootClass;
	}
	,get_shareContext: function() {
		return this.mShareContext;
	}
	,set_shareContext: function(value) {
		return this.mShareContext = value;
	}
	,get_profile: function() {
		return this.mProfile;
	}
	,get_supportHighResolutions: function() {
		return this.mSupportHighResolutions;
	}
	,set_supportHighResolutions: function(value) {
		if(this.mSupportHighResolutions != value) {
			this.mSupportHighResolutions = value;
			if(this.get_contextValid()) this.updateViewPort(true);
		}
		return this.mSupportHighResolutions;
	}
	,get_broadcastKeyboardEvents: function() {
		return this.mBroadcastKeyboardEvents;
	}
	,set_broadcastKeyboardEvents: function(value) {
		return this.mBroadcastKeyboardEvents = value;
	}
	,get_touchProcessor: function() {
		return this.mTouchProcessor;
	}
	,set_touchProcessor: function(value) {
		if(value != this.mTouchProcessor) {
			this.mTouchProcessor.dispose();
			this.mTouchProcessor = value;
		}
		return this.mTouchProcessor;
	}
	,get_contextValid: function() {
		if(this.mContext != null) {
			var driverInfo = this.mContext.driverInfo;
			return driverInfo != null && driverInfo != "" && driverInfo != "Disposed";
		} else return false;
	}
	,__class__: starling_core_Starling
	,__properties__: {get_contextValid:"get_contextValid",set_touchProcessor:"set_touchProcessor",get_touchProcessor:"get_touchProcessor",set_supportHighResolutions:"set_supportHighResolutions",get_supportHighResolutions:"get_supportHighResolutions",get_profile:"get_profile",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_rootClass:"set_rootClass",get_rootClass:"get_rootClass",get_root:"get_root",get_nativeStage:"get_nativeStage",get_stage3D:"get_stage3D",get_stage:"get_stage",set_showStats:"set_showStats",get_showStats:"get_showStats",get_nativeOverlay:"get_nativeOverlay",get_contentScaleFactor:"get_contentScaleFactor",set_viewPort:"set_viewPort",get_viewPort:"get_viewPort",set_antiAliasing:"set_antiAliasing",get_antiAliasing:"get_antiAliasing",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch",get_backBufferPixelsPerPoint:"get_backBufferPixelsPerPoint",get_backBufferHeight:"get_backBufferHeight",get_backBufferWidth:"get_backBufferWidth",get_contextData:"get_contextData",get_context:"get_context",get_juggler:"get_juggler",get_isStarted:"get_isStarted",get_programs:"get_programs",get_touchEventTypes:"get_touchEventTypes"}
});
var starling_core_StatsDisplay = function() {
	this.mDrawCount = 0;
	this.mMemory = 0;
	this.mFps = 0;
	this.mTotalTime = 0;
	this.mFrameCount = 0;
	starling_display_Sprite.call(this);
	this.mBackground = new starling_display_Quad(70,45,0);
	this.mTextField = new starling_text_TextField(68,45,"","_sans",12,16777215);
	this.mTextField.set_x(2);
	this.mTextField.set_hAlign("left");
	this.mTextField.set_vAlign("top");
	this.addChild(this.mBackground);
	this.addChild(this.mTextField);
	this.set_blendMode("none");
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
};
$hxClasses["starling.core.StatsDisplay"] = starling_core_StatsDisplay;
starling_core_StatsDisplay.__name__ = ["starling","core","StatsDisplay"];
starling_core_StatsDisplay.__super__ = starling_display_Sprite;
starling_core_StatsDisplay.prototype = $extend(starling_display_Sprite.prototype,{
	mBackground: null
	,mTextField: null
	,mFrameCount: null
	,mTotalTime: null
	,mFps: null
	,mMemory: null
	,mDrawCount: null
	,onAddedToStage: function(e) {
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.mTotalTime = this.mFrameCount = 0;
		this.update();
	}
	,onRemovedFromStage: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(e) {
		var event;
		event = js_Boot.__cast(e , starling_events_EnterFrameEvent);
		this.mTotalTime += event.get_passedTime();
		this.mFrameCount++;
		if(this.mTotalTime > 0.5) {
			this.update();
			this.mFrameCount = Std["int"](this.mTotalTime = 0);
		}
	}
	,update: function() {
		if(this.mTotalTime > 0) this.mFps = this.mFrameCount / this.mTotalTime; else this.mFps = 0;
		this.mMemory = openfl_system_System.get_totalMemory() * 0.000000954;
		this.mTextField.set_text("FPS: " + Math.round(this.mFps * 10) / 10 + "\nMEM: " + Math.round(this.mMemory * 10) / 10 + "\nDRW: " + (this.mTotalTime > 0?this.mDrawCount - 2:this.mDrawCount));
	}
	,render: function(support,parentAlpha) {
		support.finishQuadBatch();
		starling_display_Sprite.prototype.render.call(this,support,parentAlpha);
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,set_drawCount: function(value) {
		return this.mDrawCount = value;
	}
	,get_fps: function() {
		return this.mFps;
	}
	,set_fps: function(value) {
		return this.mFps = value;
	}
	,get_memory: function() {
		return this.mMemory;
	}
	,set_memory: function(value) {
		return this.mMemory = value;
	}
	,__class__: starling_core_StatsDisplay
	,__properties__: $extend(starling_display_Sprite.prototype.__properties__,{set_memory:"set_memory",get_memory:"get_memory",set_fps:"set_fps",get_fps:"get_fps",set_drawCount:"set_drawCount",get_drawCount:"get_drawCount"})
});
var starling_display_BlendMode = function() { };
$hxClasses["starling.display.BlendMode"] = starling_display_BlendMode;
starling_display_BlendMode.__name__ = ["starling","display","BlendMode"];
starling_display_BlendMode.getBlendFactors = function(mode,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	var modes = starling_display_BlendMode.sBlendFactors[premultipliedAlpha?1:0];
	var ret;
	ret = __map_reserved[mode] != null?modes.getReserved(mode):modes.h[mode];
	if(ret != null) return ret; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid blend mode"));
};
starling_display_BlendMode.register = function(name,sourceFactor,destFactor,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	var modes = starling_display_BlendMode.sBlendFactors[premultipliedAlpha?1:0];
	var v = [sourceFactor,destFactor];
	if(__map_reserved[name] != null) modes.setReserved(name,v); else modes.h[name] = v;
	v;
	var otherModes = starling_display_BlendMode.sBlendFactors[!premultipliedAlpha?1:0];
	if(!(__map_reserved[name] != null?otherModes.existsReserved(name):otherModes.h.hasOwnProperty(name))) {
		var v1 = [sourceFactor,destFactor];
		if(__map_reserved[name] != null) otherModes.setReserved(name,v1); else otherModes.h[name] = v1;
		v1;
	}
};
var starling_display_Ring = function(xoff,yoff,innerRadius,outerRadius,color,alpha,premultipliedAlpha,nsides,startangle) {
	if(nsides == null) nsides = -1;
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(alpha == null) alpha = 1.0;
	if(color == null) color = 16777215;
	starling_display_Sprite.call(this);
	this._polygons = [];
	this._innerRadius = innerRadius;
	this._outerRadius = outerRadius;
	this._outerRadius2 = outerRadius * outerRadius;
	var c0 = new openfl_geom_Point();
	var c1 = new openfl_geom_Point();
	var p0 = new openfl_geom_Point();
	var p1 = new openfl_geom_Point();
	var nParts = Std["int"](Math.max(Math.round(outerRadius),8));
	if(nsides > -1) nParts = nsides;
	var angle = 0;
	if(startangle != null) angle = startangle;
	var _g = 0;
	while(_g < nParts) {
		var i = _g++;
		var a0 = angle + (i + 0.0) * 2.0 * Math.PI / nParts;
		var a1 = angle + (i + 1.0) * 2.0 * Math.PI / nParts;
		var ca0 = Math.cos(a0);
		var sa0 = Math.sin(a0);
		var ca1 = Math.cos(a1);
		var sa1 = Math.sin(a1);
		c0.x = xoff + (outerRadius + ca0 * innerRadius);
		c0.y = yoff + (outerRadius + sa0 * innerRadius);
		c1.x = xoff + (outerRadius + ca1 * innerRadius);
		c1.y = yoff + (outerRadius + sa1 * innerRadius);
		p0.x = xoff + (outerRadius + ca0 * outerRadius);
		p0.y = yoff + (outerRadius + sa0 * outerRadius);
		p1.x = xoff + (outerRadius + ca1 * outerRadius);
		p1.y = yoff + (outerRadius + sa1 * outerRadius);
		var q = new starling_display_Poly4(c0.x,c0.y,p0.x,p0.y,c1.x,c1.y,p1.x,p1.y,color,premultipliedAlpha);
		if(alpha != 1.0) q.set_alpha(alpha);
		this._polygons.push(q);
		this.addChild(q);
	}
};
$hxClasses["starling.display.Ring"] = starling_display_Ring;
starling_display_Ring.__name__ = ["starling","display","Ring"];
starling_display_Ring.__super__ = starling_display_Sprite;
starling_display_Ring.prototype = $extend(starling_display_Sprite.prototype,{
	_innerRadius: null
	,_outerRadius: null
	,_outerRadius2: null
	,_polygons: null
	,setpolycolor: function(value) {
		var _g1 = 0;
		var _g = this._polygons.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._polygons[i].set_color(value);
		}
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		var vx = localPoint.x - this._outerRadius;
		var vy = localPoint.y - this._outerRadius;
		var l2 = vx * vx + vy * vy;
		if(l2 < this._outerRadius2) return this; else return null;
	}
	,__class__: starling_display_Ring
});
var starling_display_Disk = function(xoff,yoff,radius,color,alpha,premultipliedAlpha,nsides,startangle) {
	if(nsides == null) nsides = -1;
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(alpha == null) alpha = 1.0;
	if(color == null) color = 16777215;
	starling_display_Ring.call(this,xoff,yoff,0,radius,color,alpha,premultipliedAlpha,nsides,startangle);
};
$hxClasses["starling.display.Disk"] = starling_display_Disk;
starling_display_Disk.__name__ = ["starling","display","Disk"];
starling_display_Disk.__super__ = starling_display_Ring;
starling_display_Disk.prototype = $extend(starling_display_Ring.prototype,{
	__class__: starling_display_Disk
});
var starling_display_Image = function(texture) {
	if(texture != null) {
		var frame = texture.get_frame();
		var width;
		if(frame != null) width = frame.width; else width = texture.get_width();
		var height;
		if(frame != null) height = frame.height; else height = texture.get_height();
		var pma = texture.get_premultipliedAlpha();
		starling_display_Quad.call(this,width,height,16777215,pma);
		this.mVertexData.setTexCoords(0,0.0,0.0);
		this.mVertexData.setTexCoords(1,1.0,0.0);
		this.mVertexData.setTexCoords(2,0.0,1.0);
		this.mVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture = texture;
		this.mSmoothing = "bilinear";
		this.mVertexDataCache = new starling_utils_VertexData(4,pma);
		this.mVertexDataCacheInvalid = true;
	} else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null"));
};
$hxClasses["starling.display.Image"] = starling_display_Image;
starling_display_Image.__name__ = ["starling","display","Image"];
starling_display_Image.fromBitmap = function(bitmap,generateMipMaps,scale) {
	if(scale == null) scale = 1;
	if(generateMipMaps == null) generateMipMaps = true;
	return new starling_display_Image(starling_textures_Texture.fromBitmap(bitmap,generateMipMaps,false,scale));
};
starling_display_Image.__super__ = starling_display_Quad;
starling_display_Image.prototype = $extend(starling_display_Quad.prototype,{
	mTexture: null
	,mSmoothing: null
	,mVertexDataCache: null
	,mVertexDataCacheInvalid: null
	,onVertexDataChanged: function() {
		this.mVertexDataCacheInvalid = true;
	}
	,readjustSize: function() {
		var frame = this.get_texture().get_frame();
		var width;
		if(frame != null) width = frame.width; else width = this.get_texture().get_width();
		var height;
		if(frame != null) height = frame.height; else height = this.get_texture().get_height();
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.onVertexDataChanged();
	}
	,setTexCoords: function(vertexID,coords) {
		this.mVertexData.setTexCoords(vertexID,coords.x,coords.y);
		this.onVertexDataChanged();
	}
	,setTexCoordsTo: function(vertexID,u,v) {
		this.mVertexData.setTexCoords(vertexID,u,v);
		this.onVertexDataChanged();
	}
	,getTexCoords: function(vertexID,resultPoint) {
		if(resultPoint == null) resultPoint = new openfl_geom_Point();
		this.mVertexData.getTexCoords(vertexID,resultPoint);
		return resultPoint;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) targetVertexID = 0;
		this.copyVertexDataTransformedTo(targetData,targetVertexID,null);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) targetVertexID = 0;
		if(this.mVertexDataCacheInvalid) {
			this.mVertexDataCacheInvalid = false;
			this.mVertexData.copyTo(this.mVertexDataCache);
			this.mTexture.adjustVertexData(this.mVertexDataCache,0,4);
		}
		this.mVertexDataCache.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null")); else if(value != this.mTexture) {
			this.mTexture = value;
			this.mVertexData.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha());
			this.mVertexDataCache.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha(),false);
			this.onVertexDataChanged();
		}
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,set_smoothing: function(value) {
		if(starling_textures_TextureSmoothing.isValid(value)) this.mSmoothing = value; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid smoothing mode: " + value));
		return this.mSmoothing;
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha,this.mTexture,this.mSmoothing);
	}
	,__class__: starling_display_Image
	,__properties__: $extend(starling_display_Quad.prototype.__properties__,{set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_texture:"set_texture",get_texture:"get_texture"})
});
var starling_display_QuadBatch = function(optimizeForProfile) {
	if(optimizeForProfile == null) optimizeForProfile = false;
	starling_display_DisplayObject.call(this);
	this.mVertexData = new starling_utils_VertexData(0,true);
	this.mIndexData = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.mNumQuads = 0;
	this.mTinted = false;
	this.mSyncRequired = false;
	this.mBatchable = false;
	this.mOwnsTexture = false;
	if(optimizeForProfile) {
		var profile = starling_core_Starling.get_current().get_profile();
		this.mForceTinted = profile != 1 && profile != 0;
	}
	this.mForceTinted = true;
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.display.QuadBatch"] = starling_display_QuadBatch;
starling_display_QuadBatch.__name__ = ["starling","display","QuadBatch"];
starling_display_QuadBatch.compile = function(object,quadBatches) {
	starling_display_QuadBatch.compileObject(object,quadBatches,-1,new openfl_geom_Matrix());
};
starling_display_QuadBatch.optimize = function(quadBatches) {
	var batch1;
	var batch2;
	var _g1 = 0;
	var _g = quadBatches.data.get_length();
	while(_g1 < _g) {
		var i = _g1++;
		batch1 = quadBatches.data.get(i);
		var j = i + 1;
		while(j < quadBatches.data.get_length()) {
			batch2 = quadBatches.data.get(j);
			if(!batch1.isStateChange(batch2.get_tinted(),1.0,batch2.get_texture(),batch2.get_smoothing(),batch2.get_blendMode(),batch2.get_numQuads())) {
				batch1.addQuadBatch(batch2);
				batch2.dispose();
				new openfl__$Vector_AbstractVector(quadBatches.data.splice(j,1));
			} else ++j;
		}
	}
};
starling_display_QuadBatch.compileObject = function(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,ignoreCurrentFilter) {
	if(ignoreCurrentFilter == null) ignoreCurrentFilter = false;
	if(alpha == null) alpha = 1.0;
	if(js_Boot.__instanceof(object,starling_display_Sprite3D)) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Sprite3D objects cannot be flattened"));
	var i;
	var quadBatch;
	var isRootObject = false;
	var objectAlpha = object.get_alpha();
	var container;
	if(js_Boot.__instanceof(object,starling_display_DisplayObjectContainer)) container = object; else container = null;
	var quad;
	if(js_Boot.__instanceof(object,starling_display_Quad)) quad = object; else quad = null;
	var batch;
	if(js_Boot.__instanceof(object,starling_display_QuadBatch)) batch = object; else batch = null;
	var filter = object.get_filter();
	if(quadBatchID == -1) {
		isRootObject = true;
		quadBatchID = 0;
		objectAlpha = 1.0;
		blendMode = object.get_blendMode();
		ignoreCurrentFilter = true;
		if(quadBatches.data.get_length() == 0) {
			var value = new starling_display_QuadBatch(true);
			quadBatches.data.set(0,value);
		} else {
			quadBatches.data.get(0).reset();
			quadBatches.data.get(0).set_ownsTexture(false);
		}
	} else {
		if(object.get_mask() != null) haxe_Log.trace("[Starling] Masks are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 584, className : "starling.display.QuadBatch", methodName : "compileObject"});
		if(js_Boot.__instanceof(object,starling_display_Sprite) && (js_Boot.__cast(object , starling_display_Sprite)).get_clipRect() != null) haxe_Log.trace("[Starling] ClipRects are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 587, className : "starling.display.QuadBatch", methodName : "compileObject"});
	}
	if(filter != null && !ignoreCurrentFilter) {
		if(filter.get_mode() == "above") quadBatchID = starling_display_QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		quadBatchID = starling_display_QuadBatch.compileObject(filter.compile(object),quadBatches,quadBatchID,transformationMatrix,alpha,blendMode);
		quadBatches.data.get(quadBatchID).set_ownsTexture(true);
		if(filter.get_mode() == "below") quadBatchID = starling_display_QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
	} else if(container != null) {
		var numChildren = container.get_numChildren();
		var childMatrix = new openfl_geom_Matrix();
		var _g = 0;
		while(_g < numChildren) {
			var i1 = _g++;
			var child = container.getChildAt(i1);
			if(child.get_hasVisibleArea()) {
				var childBlendMode;
				if(child.get_blendMode() == "auto") childBlendMode = blendMode; else childBlendMode = child.get_blendMode();
				childMatrix.copyFrom(transformationMatrix);
				starling_core_RenderSupport.transformMatrixForObject(childMatrix,child);
				quadBatchID = starling_display_QuadBatch.compileObject(child,quadBatches,quadBatchID,childMatrix,alpha * objectAlpha,childBlendMode);
			}
		}
	} else if(quad != null || batch != null) {
		var texture;
		var smoothing;
		var tinted;
		var numQuads;
		if(quad != null) {
			var image;
			if(js_Boot.__instanceof(quad,starling_display_Image)) image = quad; else image = null;
			if(image != null) texture = image.get_texture(); else texture = null;
			if(image != null) smoothing = image.get_smoothing(); else smoothing = null;
			tinted = quad.get_tinted();
			numQuads = 1;
		} else {
			texture = batch.mTexture;
			smoothing = batch.mSmoothing;
			tinted = batch.mTinted;
			numQuads = batch.mNumQuads;
		}
		quadBatch = quadBatches.data.get(quadBatchID);
		if(quadBatch.isStateChange(tinted,alpha * objectAlpha,texture,smoothing,blendMode,numQuads)) {
			quadBatchID++;
			if(quadBatches.data.get_length() <= quadBatchID) {
				var x = new starling_display_QuadBatch(true);
				quadBatches.data.push(x);
			}
			quadBatch = quadBatches.data.get(quadBatchID);
			quadBatch.reset();
			quadBatch.set_ownsTexture(false);
		}
		if(quad != null) quadBatch.addQuad(quad,alpha,texture,smoothing,transformationMatrix,blendMode); else quadBatch.addQuadBatch(batch,alpha,transformationMatrix,blendMode);
	} else throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported display object: " + Type.getClassName(object == null?null:js_Boot.getClass(object))));
	if(isRootObject) {
		i = quadBatches.data.get_length() - 1;
		while(i > quadBatchID) {
			quadBatches.data.pop().dispose();
			--i;
		}
	}
	return quadBatchID;
};
starling_display_QuadBatch.getImageProgramName = function(tinted,mipMap,repeat,format,smoothing) {
	if(smoothing == null) smoothing = "bilinear";
	if(repeat == null) repeat = false;
	if(mipMap == null) mipMap = true;
	if(format == null) format = 1;
	var bitField = 0;
	if(tinted) bitField = bitField | 1;
	if(mipMap) bitField = bitField | 2;
	if(repeat) bitField = bitField | 4;
	if(smoothing == "none") bitField = bitField | 8; else if(smoothing == "trilinear") bitField = bitField | 16;
	if(format == 3) bitField = bitField | 32; else if(format == 4) bitField = bitField | 64;
	var name = starling_display_QuadBatch.sProgramNameCache.h[bitField];
	if(name == null) {
		name = "QB_i." + StringTools.hex(bitField);
		{
			starling_display_QuadBatch.sProgramNameCache.h[bitField] = name;
			name;
		}
	}
	return name;
};
starling_display_QuadBatch.__super__ = starling_display_DisplayObject;
starling_display_QuadBatch.prototype = $extend(starling_display_DisplayObject.prototype,{
	mNumQuads: null
	,mSyncRequired: null
	,mBatchable: null
	,mForceTinted: null
	,mOwnsTexture: null
	,mTinted: null
	,mTexture: null
	,mSmoothing: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mVertexData: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		this.destroyBuffers();
		this.mVertexData.set_numVertices(0);
		this.mIndexData = null;
		this.mNumQuads = 0;
		if(this.mTexture != null && this.mOwnsTexture) this.mTexture.dispose();
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,onContextCreated: function(event) {
		this.createBuffers();
	}
	,onVertexDataChanged: function() {
		this.mSyncRequired = true;
	}
	,clone: function() {
		var clone = new starling_display_QuadBatch();
		clone.mVertexData = this.mVertexData.clone(0,this.mNumQuads * 4);
		clone.mIndexData = new openfl__$Vector_AbstractVector(this.mIndexData.data.slice(0,this.mNumQuads * 6));
		clone.mNumQuads = this.mNumQuads;
		clone.mTinted = this.mTinted;
		clone.mTexture = this.mTexture;
		clone.mSmoothing = this.mSmoothing;
		clone.mSyncRequired = true;
		clone.mForceTinted = this.mForceTinted;
		clone.set_blendMode(this.get_blendMode());
		clone.set_alpha(this.get_alpha());
		return clone;
	}
	,expand: function() {
		var oldCapacity = this.get_capacity();
		if(oldCapacity >= 16383) throw new js__$Boot_HaxeError(new openfl_errors_Error("Exceeded maximum number of quads!"));
		this.set_capacity(oldCapacity < 8?16:oldCapacity * 2);
	}
	,createBuffers: function() {
		this.destroyBuffers();
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.data.get_length();
		var context = starling_core_Starling.get_current().get_context();
		if(numVertices == 0) return;
		if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		this.mVertexBuffer = context.createVertexBuffer(numVertices,8);
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,numVertices);
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mSyncRequired = false;
	}
	,destroyBuffers: function() {
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
			this.mVertexBuffer = null;
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
			this.mIndexBuffer = null;
		}
	}
	,syncBuffers: function() {
		if(this.mVertexBuffer == null) this.createBuffers(); else {
			this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,this.mVertexData.get_numVertices());
			this.mSyncRequired = false;
		}
	}
	,renderCustom: function(mvpMatrix,parentAlpha,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(this.mNumQuads == 0) return;
		if(this.mSyncRequired) this.syncBuffers();
		var pma = this.mVertexData.get_premultipliedAlpha();
		var context = starling_core_Starling.get_current().get_context();
		var tinted = this.mTinted || parentAlpha != 1.0;
		var value;
		var value1 = starling_display_QuadBatch.sRenderAlpha.data.set(2,pma?parentAlpha:1.0);
		value = starling_display_QuadBatch.sRenderAlpha.data.set(1,value1);
		starling_display_QuadBatch.sRenderAlpha.data.set(0,value);
		starling_display_QuadBatch.sRenderAlpha.data.set(3,parentAlpha);
		starling_core_RenderSupport.setBlendFactors(pma,blendMode != null?blendMode:this.get_blendMode());
		context.setProgram(this.getProgram(tinted));
		if(tinted) context.setProgramConstantsFromVector(1,0,starling_display_QuadBatch.sRenderAlpha,1);
		context.setProgramConstantsFromMatrix(1,1,mvpMatrix,true);
		context.setVertexBufferAt(0,this.mVertexBuffer,0,2);
		if(this.mTexture == null || tinted) context.setVertexBufferAt(1,this.mVertexBuffer,2,4);
		if(this.mTexture != null) {
			context.setTextureAt(0,this.mTexture.get_base());
			context.setVertexBufferAt(2,this.mVertexBuffer,6,2);
		}
		context.drawTriangles(this.mIndexBuffer,0,this.mNumQuads * 2);
		if(this.mTexture != null) {
			context.setTextureAt(0,null);
			context.setVertexBufferAt(2,null);
		}
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(0,null);
	}
	,reset: function() {
		if(this.mTexture != null && this.mOwnsTexture) this.mTexture.dispose();
		this.mNumQuads = 0;
		this.mTexture = null;
		this.mSmoothing = null;
		this.mSyncRequired = true;
	}
	,addImage: function(image,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		this.addQuad(image,parentAlpha,image.get_texture(),image.get_smoothing(),modelViewMatrix,blendMode);
	}
	,addQuad: function(quad,parentAlpha,texture,smoothing,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(modelViewMatrix == null) modelViewMatrix = quad.get_transformationMatrix();
		var alpha = parentAlpha * quad.get_alpha();
		var vertexID = this.mNumQuads * 4;
		if(this.mNumQuads + 1 > this.mVertexData.get_numVertices() / 4) this.expand();
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quad.get_blendMode());
			this.mTexture = texture;
			this.mTinted = this.mForceTinted || quad.get_tinted() || parentAlpha != 1.0;
			this.mSmoothing = smoothing;
			this.mVertexData.setPremultipliedAlpha(quad.get_premultipliedAlpha());
		}
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,modelViewMatrix);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,4);
		this.mSyncRequired = true;
		this.mNumQuads++;
	}
	,addQuadBatch: function(quadBatch,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(modelViewMatrix == null) modelViewMatrix = quadBatch.get_transformationMatrix();
		var alpha = parentAlpha * quadBatch.get_alpha();
		var vertexID = this.mNumQuads * 4;
		var numQuads = quadBatch.get_numQuads();
		if(this.mNumQuads + numQuads > this.get_capacity()) this.set_capacity(this.mNumQuads + numQuads);
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quadBatch.get_blendMode());
			this.mTexture = quadBatch.mTexture;
			this.mTinted = this.mForceTinted || quadBatch.mTinted || parentAlpha != 1.0;
			this.mSmoothing = quadBatch.mSmoothing;
			this.mVertexData.setPremultipliedAlpha(quadBatch.mVertexData.get_premultipliedAlpha(),false);
		}
		quadBatch.mVertexData.copyTransformedTo(this.mVertexData,vertexID,modelViewMatrix,0,numQuads * 4);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,numQuads * 4);
		this.mSyncRequired = true;
		this.mNumQuads += numQuads;
	}
	,isStateChange: function(tinted,parentAlpha,texture,smoothing,blendMode,numQuads) {
		if(numQuads == null) numQuads = 1;
		if(this.mNumQuads == 0) return false; else if(this.mNumQuads + numQuads > 16383) return true; else if(this.mTexture == null && texture == null) return this.get_blendMode() != blendMode; else if(this.mTexture != null && texture != null) return this.mTexture.get_base() != texture.get_base() || this.mTexture.get_repeat() != texture.get_repeat() || this.mSmoothing != smoothing || this.mTinted != (this.mForceTinted || tinted || parentAlpha != 1.0) || this.get_blendMode() != blendMode; else return true;
	}
	,transformQuad: function(quadID,matrix) {
		this.mVertexData.transformVertex(quadID * 4,matrix,4);
		this.mSyncRequired = true;
	}
	,getVertexColor: function(quadID,vertexID) {
		return this.mVertexData.getColor(quadID * 4 + vertexID);
	}
	,setVertexColor: function(quadID,vertexID,color) {
		this.mVertexData.setColor(quadID * 4 + vertexID,color);
		this.mSyncRequired = true;
	}
	,getVertexAlpha: function(quadID,vertexID) {
		return this.mVertexData.getAlpha(quadID * 4 + vertexID);
	}
	,setVertexAlpha: function(quadID,vertexID,alpha) {
		this.mVertexData.setAlpha(quadID * 4 + vertexID,alpha);
		this.mSyncRequired = true;
	}
	,getQuadColor: function(quadID) {
		return this.mVertexData.getColor(quadID * 4);
	}
	,setQuadColor: function(quadID,color) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.mVertexData.setColor(quadID * 4 + i,color);
		}
		this.mSyncRequired = true;
	}
	,getQuadAlpha: function(quadID) {
		return this.mVertexData.getAlpha(quadID * 4);
	}
	,setQuadAlpha: function(quadID,alpha) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.mVertexData.setAlpha(quadID * 4 + i,alpha);
		}
		this.mSyncRequired = true;
	}
	,setQuad: function(quadID,quad) {
		var matrix = quad.get_transformationMatrix();
		var alpha = quad.get_alpha();
		var vertexID = quadID * 4 | 0;
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,matrix);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,4);
		this.mSyncRequired = true;
	}
	,getQuadBounds: function(quadID,transformationMatrix,resultRect) {
		return this.mVertexData.getBounds(transformationMatrix,quadID * 4,4,resultRect);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl_geom_Rectangle();
		var transformationMatrix;
		if(targetSpace == this) transformationMatrix = null; else transformationMatrix = this.getTransformationMatrix(targetSpace,starling_display_QuadBatch.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,this.mNumQuads * 4,resultRect);
	}
	,render: function(support,parentAlpha) {
		if(this.mNumQuads != 0) {
			if(this.mBatchable) support.batchQuadBatch(this,parentAlpha); else {
				support.finishQuadBatch();
				support.raiseDrawCount();
				this.renderCustom(support.get_mvpMatrix3D(),this.get_alpha() * parentAlpha,support.get_blendMode());
			}
		}
	}
	,get_numQuads: function() {
		return this.mNumQuads;
	}
	,get_tinted: function() {
		return this.mTinted || this.mForceTinted;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		return this.mBatchable = value;
	}
	,get_forceTinted: function() {
		return this.mForceTinted;
	}
	,set_forceTinted: function(value) {
		return this.mForceTinted = value;
	}
	,get_ownsTexture: function() {
		return this.mOwnsTexture;
	}
	,set_ownsTexture: function(value) {
		return this.mOwnsTexture = value;
	}
	,get_capacity: function() {
		return Std["int"](this.mVertexData.get_numVertices() / 4);
	}
	,set_capacity: function(value) {
		var oldCapacity = this.get_capacity();
		if(value == oldCapacity) return Std["int"](this.mVertexData.get_numVertices() / 4); else if(value == 0) throw new js__$Boot_HaxeError(new openfl_errors_Error("Capacity must be > 0")); else if(value > 16383) value = 16383;
		if(this.mNumQuads > value) this.mNumQuads = value;
		this.mVertexData.set_numVertices(value * 4);
		this.mIndexData.data.set_length(value * 6);
		var _g = oldCapacity;
		while(_g < value) {
			var i = _g++;
			this.mIndexData.data.set(i * 6,i * 4);
			this.mIndexData.data.set(i * 6 + 1,i * 4 + 1);
			this.mIndexData.data.set(i * 6 + 2,i * 4 + 2);
			this.mIndexData.data.set(i * 6 + 3,i * 4 + 1);
			this.mIndexData.data.set(i * 6 + 4,i * 4 + 3);
			this.mIndexData.data.set(i * 6 + 5,i * 4 + 2);
		}
		this.destroyBuffers();
		this.mSyncRequired = true;
		return Std["int"](this.mVertexData.get_numVertices() / 4);
	}
	,getProgram: function(tinted) {
		var target = starling_core_Starling.get_current();
		var programName = "QB_q";
		if(this.mTexture != null) programName = starling_display_QuadBatch.getImageProgramName(tinted,this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.mTexture.get_format(),this.mSmoothing);
		var program = target.getProgram(programName);
		if(program == null) {
			var vertexShader;
			var fragmentShader;
			if(this.mTexture == null) {
				vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n";
				fragmentShader = "mov oc, v0       \n";
			} else {
				if(tinted) vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n" + "mov v1, va2      \n"; else vertexShader = "m44 op, va0, vc1 \n" + "mov v1, va2      \n";
				if(tinted) fragmentShader = "tex ft1,  v1, fs0 <???> \n" + "mul  oc, ft1,  v0       \n"; else fragmentShader = "tex  oc,  v1, fs0 <???> \n";
				fragmentShader = StringTools.replace(fragmentShader,"<???>",starling_core_RenderSupport.getTextureLookupFlags(this.mTexture.get_format(),this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.get_smoothing()));
			}
			program = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
		return program;
	}
	,__class__: starling_display_QuadBatch
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_capacity:"set_capacity",get_capacity:"get_capacity",set_ownsTexture:"set_ownsTexture",get_ownsTexture:"get_ownsTexture",set_forceTinted:"set_forceTinted",get_forceTinted:"get_forceTinted",set_batchable:"set_batchable",get_batchable:"get_batchable",get_premultipliedAlpha:"get_premultipliedAlpha",get_smoothing:"get_smoothing",get_texture:"get_texture",get_tinted:"get_tinted",get_numQuads:"get_numQuads"})
});
var starling_display_Sprite3D = function() {
	starling_display_DisplayObjectContainer.call(this);
	this.mScaleZ = 1.0;
	this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0.0;
	this.mTransformationMatrix = new openfl_geom_Matrix();
	this.mTransformationMatrix3D = new openfl_geom_Matrix3D();
	this.setIs3D(true);
	this.addEventListener("added",$bind(this,this.onAddedChild));
	this.addEventListener("removed",$bind(this,this.onRemovedChild));
};
$hxClasses["starling.display.Sprite3D"] = starling_display_Sprite3D;
starling_display_Sprite3D.__name__ = ["starling","display","Sprite3D"];
starling_display_Sprite3D.__super__ = starling_display_DisplayObjectContainer;
starling_display_Sprite3D.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mRotationX: null
	,mRotationY: null
	,mScaleZ: null
	,mPivotZ: null
	,mZ: null
	,mTransformationChanged: null
	,render: function(support,parentAlpha) {
		if(this.mZ > -1e-05 && this.mZ < 0.00001 && this.mRotationX > -1e-05 && this.mRotationX < 0.00001 && this.mRotationY > -1e-05 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-05 && this.mPivotZ < 0.00001) starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha); else {
			support.finishQuadBatch();
			support.pushMatrix3D();
			support.transformMatrix3D(this);
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
			support.finishQuadBatch();
			support.popMatrix3D();
		}
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(this.mZ > -1e-05 && this.mZ < 0.00001 && this.mRotationX > -1e-05 && this.mRotationX < 0.00001 && this.mRotationY > -1e-05 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-05 && this.mPivotZ < 0.00001) return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch); else {
			if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
			starling_display_Sprite3D.sHelperMatrix.copyFrom(this.get_transformationMatrix3D());
			starling_display_Sprite3D.sHelperMatrix.invert();
			this.get_stage().getCameraPosition(this,starling_display_Sprite3D.sHelperPoint);
			starling_utils_MatrixUtil.transformCoords3D(starling_display_Sprite3D.sHelperMatrix,localPoint.x,localPoint.y,0,starling_display_Sprite3D.sHelperPointAlt);
			starling_utils_MathUtil.intersectLineWithXYPlane(starling_display_Sprite3D.sHelperPoint,starling_display_Sprite3D.sHelperPointAlt,localPoint);
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,onAddedChild: function(event) {
		this.recursivelySetIs3D(js_Boot.__cast(event.target , starling_display_DisplayObject),true);
	}
	,onRemovedChild: function(event) {
		this.recursivelySetIs3D(js_Boot.__cast(event.target , starling_display_DisplayObject),false);
	}
	,recursivelySetIs3D: function(object,value) {
		if(js_Boot.__instanceof(object,starling_display_Sprite3D)) return;
		if(js_Boot.__instanceof(object,starling_display_DisplayObjectContainer)) {
			var container = object;
			var numChildren = container.get_numChildren();
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				this.recursivelySetIs3D(container.getChildAt(i),value);
			}
		}
		object.setIs3D(value);
	}
	,updateMatrices: function() {
		var x = this.get_x();
		var y = this.get_y();
		var scaleX = this.get_scaleX();
		var scaleY = this.get_scaleY();
		var pivotX = this.get_pivotX();
		var pivotY = this.get_pivotY();
		var rotationZ = this.get_rotation();
		this.mTransformationMatrix3D.identity();
		if(scaleX != 1.0 || scaleY != 1.0 || this.mScaleZ != 1.0) this.mTransformationMatrix3D.appendScale(this.mScaleX,this.mScaleY,this.mScaleZ);
		if(this.mRotationX != 0.0) this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(this.mRotationX),new openfl_geom_Vector3D(1,0,0));
		if(this.mRotationY != 0.0) this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(this.mRotationY),new openfl_geom_Vector3D(0,1,0));
		if(rotationZ != 0.0) this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(rotationZ),new openfl_geom_Vector3D(0,0,1));
		if(x != 0.0 || y != 0.0 || this.mZ != 0.0) this.mTransformationMatrix3D.appendTranslation(x,y,this.mZ);
		if(pivotX != 0.0 || pivotY != 0.0 || this.mPivotZ != 0.0) this.mTransformationMatrix3D.prependTranslation(-pivotX,-pivotY,-this.mPivotZ);
		if(this.mZ > -1e-05 && this.mZ < 0.00001 && this.mRotationX > -1e-05 && this.mRotationX < 0.00001 && this.mRotationY > -1e-05 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-05 && this.mPivotZ < 0.00001) starling_utils_MatrixUtil.convertTo2D(this.mTransformationMatrix3D,this.mTransformationMatrix); else this.mTransformationMatrix.identity();
	}
	,get_is2D: function() {
		return this.mZ > -1e-05 && this.mZ < 0.00001 && this.mRotationX > -1e-05 && this.mRotationX < 0.00001 && this.mRotationY > -1e-05 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-05 && this.mPivotZ < 0.00001;
	}
	,get_transformationMatrix: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_transformationMatrix.call(this,value);
		this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0;
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_transformationMatrix.call(this);
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix3D;
	}
	,set_x: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_x.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_x.call(this);
	}
	,set_y: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_y.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_y.call(this);
	}
	,get_z: function() {
		return this.mZ;
	}
	,set_z: function(value) {
		this.mZ = value;
		this.mTransformationChanged = true;
		return this.mZ;
	}
	,set_pivotX: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_pivotX.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_pivotX.call(this);
	}
	,set_pivotY: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_pivotY.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_pivotY.call(this);
	}
	,get_pivotZ: function() {
		return this.mPivotZ;
	}
	,set_pivotZ: function(value) {
		this.mPivotZ = value;
		this.mTransformationChanged = true;
		return this.mPivotZ;
	}
	,set_scaleX: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_scaleX.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_scaleX.call(this);
	}
	,set_scaleY: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_scaleY.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_scaleY.call(this);
	}
	,get_scaleZ: function() {
		return this.mScaleZ;
	}
	,set_scaleZ: function(value) {
		this.mScaleZ = value;
		this.mTransformationChanged = true;
		return this.mScaleZ;
	}
	,set_skewX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("3D objects do not support skewing"));
		return starling_display_DisplayObjectContainer.prototype.get_skewX.call(this);
	}
	,set_skewY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("3D objects do not support skewing"));
		return starling_display_DisplayObjectContainer.prototype.get_skewY.call(this);
	}
	,set_rotation: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_rotation.call(this,value);
		this.mTransformationChanged = true;
		return starling_display_DisplayObjectContainer.prototype.get_rotation.call(this);
	}
	,get_rotationX: function() {
		return this.mRotationX;
	}
	,set_rotationX: function(value) {
		this.mRotationX = starling_utils_MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return this.mRotationX;
	}
	,get_rotationY: function() {
		return this.mRotationY;
	}
	,set_rotationY: function(value) {
		this.mRotationY = starling_utils_MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return this.mRotationY;
	}
	,get_rotationZ: function() {
		return this.get_rotation();
	}
	,set_rotationZ: function(value) {
		return this.set_rotation(value);
	}
	,__class__: starling_display_Sprite3D
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_pivotZ:"set_pivotZ",get_pivotZ:"get_pivotZ",set_z:"set_z",get_z:"get_z",get_is2D:"get_is2D"})
});
var starling_display_Stage = function(width,height,color) {
	if(color == null) color = 0;
	starling_display_DisplayObjectContainer.call(this);
	this.mWidth = width;
	this.mHeight = height;
	this.mColor = color;
	this.mFieldOfView = 1.0;
	this.mProjectionOffset = new openfl_geom_Point();
	this.mCameraPosition = new openfl_geom_Vector3D();
	this.mEnterFrameEvent = new starling_events_EnterFrameEvent("enterFrame",0.0);
	this.mEnterFrameListeners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.display.Stage"] = starling_display_Stage;
starling_display_Stage.__name__ = ["starling","display","Stage"];
starling_display_Stage.__super__ = starling_display_DisplayObjectContainer;
starling_display_Stage.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mWidth: null
	,mHeight: null
	,mColor: null
	,mFieldOfView: null
	,mProjectionOffset: null
	,mCameraPosition: null
	,mEnterFrameEvent: null
	,mEnterFrameListeners: null
	,advanceTime: function(passedTime) {
		this.mEnterFrameEvent.reset("enterFrame",false,passedTime);
		this.broadcastEvent(this.mEnterFrameEvent);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(localPoint.x < 0 || localPoint.x > this.mWidth || localPoint.y < 0 || localPoint.y > this.mHeight) return null;
		var target = starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		if(target == null) target = this;
		return target;
	}
	,drawToBitmapData: function(destination,transparent) {
		if(transparent == null) transparent = true;
		var support = new starling_core_RenderSupport();
		var star = starling_core_Starling.get_current();
		if(destination == null) {
			var width = star.get_backBufferWidth() * star.get_backBufferPixelsPerPoint();
			var height = star.get_backBufferHeight() * star.get_backBufferPixelsPerPoint();
			destination = new openfl_display_BitmapData(width,height,transparent);
		}
		support.set_renderTarget(null);
		support.setProjectionMatrix(0,0,this.mWidth,this.mHeight,this.mWidth,this.mHeight,this.get_cameraPosition());
		if(transparent) support.clear(); else support.clear(this.mColor,1);
		this.render(support,1.0);
		support.finishQuadBatch();
		support.dispose();
		starling_core_Starling.get_current().get_context().drawToBitmapData(destination);
		starling_core_Starling.get_current().get_context().present();
		return destination;
	}
	,getCameraPosition: function(space,result) {
		this.getTransformationMatrix3D(space,starling_display_Stage.sHelperMatrix);
		return starling_utils_MatrixUtil.transformCoords3D(starling_display_Stage.sHelperMatrix,this.mWidth / 2 + this.mProjectionOffset.x,this.mHeight / 2 + this.mProjectionOffset.y,-this.get_focalLength(),result);
	}
	,addEnterFrameListener: function(listener) {
		this.mEnterFrameListeners.data.push(listener);
	}
	,removeEnterFrameListener: function(listener) {
		var index = this.mEnterFrameListeners.data.indexOf(listener,0);
		if(index >= 0) new openfl__$Vector_AbstractVector(this.mEnterFrameListeners.data.splice(index,1));
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		if(eventType == "enterFrame" && object == this) {
			var length = this.mEnterFrameListeners.data.get_length();
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				var index = listeners.data.get_length();
				var value = this.mEnterFrameListeners.data.get(i);
				listeners.data.set(index,value);
			}
		} else starling_display_DisplayObjectContainer.prototype.getChildEventListeners.call(this,object,eventType,listeners);
	}
	,set_width: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set width of stage"));
	}
	,set_height: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set height of stage"));
	}
	,set_x: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set x-coordinate of stage"));
	}
	,set_y: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set y-coordinate of stage"));
	}
	,set_scaleX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot scale stage"));
	}
	,set_scaleY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot scale stage"));
	}
	,set_rotation: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot rotate stage"));
	}
	,set_skewX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot skew stage"));
	}
	,set_skewY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot skew stage"));
	}
	,set_filter: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot add filter to stage. Add it to 'root' instead!"));
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		return this.mColor = value;
	}
	,get_stageWidth: function() {
		return this.mWidth;
	}
	,set_stageWidth: function(value) {
		return this.mWidth = value;
	}
	,get_stageHeight: function() {
		return this.mHeight;
	}
	,set_stageHeight: function(value) {
		return this.mHeight = value;
	}
	,get_focalLength: function() {
		return this.mWidth / (2 * Math.tan(this.mFieldOfView / 2));
	}
	,set_focalLength: function(value) {
		return this.mFieldOfView = 2 * Math.atan(this.get_stageWidth() / (2 * value));
	}
	,get_fieldOfView: function() {
		return this.mFieldOfView;
	}
	,set_fieldOfView: function(value) {
		return this.mFieldOfView = value;
	}
	,get_projectionOffset: function() {
		return this.mProjectionOffset;
	}
	,set_projectionOffset: function(value) {
		this.mProjectionOffset.setTo(value.x,value.y);
		return this.mProjectionOffset;
	}
	,get_cameraPosition: function() {
		return this.getCameraPosition(null,this.mCameraPosition);
	}
	,__class__: starling_display_Stage
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{get_cameraPosition:"get_cameraPosition",set_projectionOffset:"set_projectionOffset",get_projectionOffset:"get_projectionOffset",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView",set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_stageHeight:"set_stageHeight",get_stageHeight:"get_stageHeight",set_stageWidth:"set_stageWidth",get_stageWidth:"get_stageWidth",set_color:"set_color",get_color:"get_color"})
});
var starling_errors_AbstractMethodError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Method needs to be implemented in subclass";
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractMethodError"] = starling_errors_AbstractMethodError;
starling_errors_AbstractMethodError.__name__ = ["starling","errors","AbstractMethodError"];
starling_errors_AbstractMethodError.__super__ = openfl_errors_Error;
starling_errors_AbstractMethodError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_AbstractMethodError
});
var starling_errors_MissingContextError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Starling context is missing";
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.MissingContextError"] = starling_errors_MissingContextError;
starling_errors_MissingContextError.__name__ = ["starling","errors","MissingContextError"];
starling_errors_MissingContextError.__super__ = openfl_errors_Error;
starling_errors_MissingContextError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_MissingContextError
});
var starling_errors_NotSupportedError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.NotSupportedError"] = starling_errors_NotSupportedError;
starling_errors_NotSupportedError.__name__ = ["starling","errors","NotSupportedError"];
starling_errors_NotSupportedError.__super__ = openfl_errors_Error;
starling_errors_NotSupportedError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_NotSupportedError
});
var starling_events_Event = function(type,bubbles,data) {
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.data = data;
};
$hxClasses["starling.events.Event"] = starling_events_Event;
starling_events_Event.__name__ = ["starling","events","Event"];
starling_events_Event.fromPool = function(type,bubbles,data) {
	if(bubbles == null) bubbles = false;
	if(starling_events_Event.sEventPool.data.get_length() != 0) return starling_events_Event.sEventPool.data.pop().reset(type,bubbles,data); else return new starling_events_Event(type,bubbles,data);
};
starling_events_Event.toPool = function(event) {
	event.data = event.target = event.currentTarget = null;
	var index = starling_events_Event.sEventPool.data.get_length();
	starling_events_Event.sEventPool.data.set(index,event);
};
starling_events_Event.prototype = {
	stopPropagation: function() {
		this.stopsPropagation = true;
	}
	,stopImmediatePropagation: function() {
		this.stopsPropagation = this.stopsImmediatePropagation = true;
	}
	,toString: function() {
		return starling_utils_StringUtil.formatString("[{0} type=\"{1}\" bubbles={2}]",[Type.getClassName(js_Boot.getClass(this)).split("::").pop(),this.type,this.bubbles]);
	}
	,bubbles: null
	,target: null
	,currentTarget: null
	,type: null
	,data: null
	,setTarget: function(value) {
		this.target = value;
	}
	,setCurrentTarget: function(value) {
		this.currentTarget = value;
	}
	,setData: function(value) {
		this.data = value;
	}
	,stopsPropagation: null
	,stopsImmediatePropagation: null
	,reset: function(type,bubbles,data) {
		if(bubbles == null) bubbles = false;
		this.type = type;
		this.bubbles = bubbles;
		this.data = data;
		this.target = this.currentTarget = null;
		this.stopsPropagation = this.stopsImmediatePropagation = false;
		return this;
	}
	,__class__: starling_events_Event
};
var starling_events_EnterFrameEvent = function(type,passedTime,bubbles) {
	if(bubbles == null) bubbles = false;
	starling_events_Event.call(this,type,bubbles,passedTime);
};
$hxClasses["starling.events.EnterFrameEvent"] = starling_events_EnterFrameEvent;
starling_events_EnterFrameEvent.__name__ = ["starling","events","EnterFrameEvent"];
starling_events_EnterFrameEvent.__super__ = starling_events_Event;
starling_events_EnterFrameEvent.prototype = $extend(starling_events_Event.prototype,{
	get_passedTime: function() {
		return this.data;
	}
	,__class__: starling_events_EnterFrameEvent
	,__properties__: {get_passedTime:"get_passedTime"}
});
var starling_events_KeyboardEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(keyLocation == null) keyLocation = 0;
	if(keyCode == null) keyCode = 0;
	if(charCode == null) charCode = 0;
	starling_events_Event.call(this,type,false,keyCode);
	this.mCharCode = charCode;
	this.mKeyCode = keyCode;
	this.mKeyLocation = keyLocation;
	this.mCtrlKey = ctrlKey;
	this.mAltKey = altKey;
	this.mShiftKey = shiftKey;
};
$hxClasses["starling.events.KeyboardEvent"] = starling_events_KeyboardEvent;
starling_events_KeyboardEvent.__name__ = ["starling","events","KeyboardEvent"];
starling_events_KeyboardEvent.__super__ = starling_events_Event;
starling_events_KeyboardEvent.prototype = $extend(starling_events_Event.prototype,{
	mCharCode: null
	,mKeyCode: null
	,mKeyLocation: null
	,mAltKey: null
	,mCtrlKey: null
	,mShiftKey: null
	,mIsDefaultPrevented: null
	,preventDefault: function() {
		this.mIsDefaultPrevented = true;
	}
	,isDefaultPrevented: function() {
		return this.mIsDefaultPrevented;
	}
	,get_charCode: function() {
		return this.mCharCode;
	}
	,get_keyCode: function() {
		return this.mKeyCode;
	}
	,get_keyLocation: function() {
		return this.mKeyLocation;
	}
	,get_altKey: function() {
		return this.mAltKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,__class__: starling_events_KeyboardEvent
	,__properties__: {get_shiftKey:"get_shiftKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey",get_keyLocation:"get_keyLocation",get_keyCode:"get_keyCode",get_charCode:"get_charCode"}
});
var starling_events_ResizeEvent = function(type,width,height,bubbles) {
	if(bubbles == null) bubbles = false;
	starling_events_Event.call(this,type,bubbles,new openfl_geom_Point(width,height));
};
$hxClasses["starling.events.ResizeEvent"] = starling_events_ResizeEvent;
starling_events_ResizeEvent.__name__ = ["starling","events","ResizeEvent"];
starling_events_ResizeEvent.__super__ = starling_events_Event;
starling_events_ResizeEvent.prototype = $extend(starling_events_Event.prototype,{
	get_width: function() {
		return Std["int"]((js_Boot.__cast(this.data , openfl_geom_Point)).x);
	}
	,get_height: function() {
		return Std["int"]((js_Boot.__cast(this.data , openfl_geom_Point)).y);
	}
	,__class__: starling_events_ResizeEvent
	,__properties__: {get_height:"get_height",get_width:"get_width"}
});
var starling_events_Touch = function(id) {
	this.mID = id;
	this.mTapCount = 0;
	this.mPhase = "hover";
	this.mPressure = this.mWidth = this.mHeight = 1.0;
	this.mBubbleChain = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.events.Touch"] = starling_events_Touch;
starling_events_Touch.__name__ = ["starling","events","Touch"];
starling_events_Touch.prototype = {
	mID: null
	,mGlobalX: null
	,mGlobalY: null
	,mPreviousGlobalX: null
	,mPreviousGlobalY: null
	,mTapCount: null
	,mPhase: null
	,mTarget: null
	,mTimestamp: null
	,mPressure: null
	,mWidth: null
	,mHeight: null
	,mCancelled: null
	,mBubbleChain: null
	,getLocation: function(space,resultPoint) {
		starling_events_Touch.sHelperPoint.setTo(this.mGlobalX,this.mGlobalY);
		return space.globalToLocal(starling_events_Touch.sHelperPoint,resultPoint);
	}
	,getPreviousLocation: function(space,resultPoint) {
		starling_events_Touch.sHelperPoint.setTo(this.mPreviousGlobalX,this.mPreviousGlobalY);
		return space.globalToLocal(starling_events_Touch.sHelperPoint,resultPoint);
	}
	,getMovement: function(space,resultPoint) {
		if(resultPoint == null) resultPoint = new openfl_geom_Point();
		this.getLocation(space,resultPoint);
		var x = resultPoint.x;
		var y = resultPoint.y;
		this.getPreviousLocation(space,resultPoint);
		resultPoint.setTo(x - resultPoint.x,y - resultPoint.y);
		return resultPoint;
	}
	,isTouching: function(target) {
		return this.mBubbleChain.data.indexOf(target,0) != -1;
	}
	,toString: function() {
		var args = [this.mID,this.mGlobalX,this.mGlobalY,this.mPhase];
		return starling_utils_StringUtil.formatString("Touch {0}: globalX={1}, globalY={2}, phase={3}",args);
	}
	,clone: function() {
		var clone = new starling_events_Touch(this.mID);
		clone.mGlobalX = this.mGlobalX;
		clone.mGlobalY = this.mGlobalY;
		clone.mPreviousGlobalX = this.mPreviousGlobalX;
		clone.mPreviousGlobalY = this.mPreviousGlobalY;
		clone.mPhase = this.mPhase;
		clone.mTapCount = this.mTapCount;
		clone.mTimestamp = this.mTimestamp;
		clone.mPressure = this.mPressure;
		clone.mWidth = this.mWidth;
		clone.mHeight = this.mHeight;
		clone.mCancelled = this.mCancelled;
		clone.set_target(this.mTarget);
		return clone;
	}
	,updateBubbleChain: function() {
		if(this.mTarget != null) {
			var length = 1;
			var element = this.mTarget;
			this.mBubbleChain.data.set_length(1);
			this.mBubbleChain.data.set(0,element);
			while((element = element.get_parent()) != null) {
				var index = length++;
				this.mBubbleChain.data.set(index,element);
			}
		} else this.mBubbleChain.data.set_length(0);
	}
	,get_id: function() {
		return this.mID;
	}
	,get_previousGlobalX: function() {
		return this.mPreviousGlobalX;
	}
	,get_previousGlobalY: function() {
		return this.mPreviousGlobalY;
	}
	,get_globalX: function() {
		return this.mGlobalX;
	}
	,set_globalX: function(value) {
		if(this.mGlobalX != this.mGlobalX) this.mPreviousGlobalX = value; else this.mPreviousGlobalX = this.mGlobalX;
		return this.mGlobalX = value;
	}
	,get_globalY: function() {
		return this.mGlobalY;
	}
	,set_globalY: function(value) {
		if(this.mGlobalY != this.mGlobalY) this.mPreviousGlobalY = value; else this.mPreviousGlobalY = this.mGlobalY;
		return this.mGlobalY = value;
	}
	,get_tapCount: function() {
		return this.mTapCount;
	}
	,set_tapCount: function(value) {
		return this.mTapCount = value;
	}
	,get_phase: function() {
		return this.mPhase;
	}
	,set_phase: function(value) {
		return this.mPhase = value;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,set_target: function(value) {
		if(this.mTarget != value) {
			this.mTarget = value;
			this.updateBubbleChain();
		}
		return this.mTarget;
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,set_timestamp: function(value) {
		return this.mTimestamp = value;
	}
	,get_pressure: function() {
		return this.mPressure;
	}
	,set_pressure: function(value) {
		return this.mPressure = value;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,set_width: function(value) {
		return this.mWidth = value;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,set_height: function(value) {
		return this.mHeight = value;
	}
	,get_cancelled: function() {
		return this.mCancelled;
	}
	,set_cancelled: function(value) {
		return this.mCancelled = value;
	}
	,dispatchEvent: function(event) {
		if(this.mTarget != null) event.dispatch(this.mBubbleChain);
	}
	,get_bubbleChain: function() {
		return new openfl__$Vector_AbstractVector(this.mBubbleChain.data.copy());
	}
	,__class__: starling_events_Touch
	,__properties__: {get_bubbleChain:"get_bubbleChain",set_cancelled:"set_cancelled",get_cancelled:"get_cancelled",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_pressure:"set_pressure",get_pressure:"get_pressure",set_timestamp:"set_timestamp",get_timestamp:"get_timestamp",set_target:"set_target",get_target:"get_target",set_phase:"set_phase",get_phase:"get_phase",set_tapCount:"set_tapCount",get_tapCount:"get_tapCount",set_globalY:"set_globalY",get_globalY:"get_globalY",set_globalX:"set_globalX",get_globalX:"get_globalX",get_previousGlobalY:"get_previousGlobalY",get_previousGlobalX:"get_previousGlobalX",get_id:"get_id"}
};
var starling_events_TouchEvent = function(type,touches,shiftKey,ctrlKey,bubbles) {
	if(bubbles == null) bubbles = true;
	if(ctrlKey == null) ctrlKey = false;
	if(shiftKey == null) shiftKey = false;
	starling_events_Event.call(this,type,bubbles,touches);
	this.mShiftKey = shiftKey;
	this.mCtrlKey = ctrlKey;
	this.mTimestamp = -1.0;
	this.mVisitedObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var numTouches = touches.data.get_length();
	var _g = 0;
	while(_g < numTouches) {
		var i = _g++;
		if(touches.data.get(i).get_timestamp() > this.mTimestamp) this.mTimestamp = touches.data.get(i).get_timestamp();
	}
};
$hxClasses["starling.events.TouchEvent"] = starling_events_TouchEvent;
starling_events_TouchEvent.__name__ = ["starling","events","TouchEvent"];
starling_events_TouchEvent.__super__ = starling_events_Event;
starling_events_TouchEvent.prototype = $extend(starling_events_Event.prototype,{
	mShiftKey: null
	,mCtrlKey: null
	,mTimestamp: null
	,mVisitedObjects: null
	,getTouches: function(target,phase,result) {
		if(result == null) result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var allTouches = this.data;
		var numTouches = allTouches.data.get_length();
		var _g = 0;
		while(_g < numTouches) {
			var i = _g++;
			var touch;
			touch = js_Boot.__cast(allTouches.data.get(i) , starling_events_Touch);
			var correctTarget = touch.isTouching(target);
			var correctPhase = phase == null || phase == touch.get_phase();
			if(correctTarget && correctPhase) {
				var index = result.data.get_length();
				result.data.set(index,touch);
			}
		}
		return result;
	}
	,getTouch: function(target,phase,id) {
		if(id == null) id = -1;
		this.getTouches(target,phase,starling_events_TouchEvent.sTouches);
		var numTouches = starling_events_TouchEvent.sTouches.data.get_length();
		if(numTouches > 0) {
			var touch = null;
			if(id < 0) touch = starling_events_TouchEvent.sTouches.data.get(0); else {
				var _g = 0;
				while(_g < numTouches) {
					var i = _g++;
					if(starling_events_TouchEvent.sTouches.data.get(i).get_id() == id) {
						touch = starling_events_TouchEvent.sTouches.data.get(i);
						break;
					}
				}
			}
			starling_events_TouchEvent.sTouches.data.set_length(0);
			return touch;
		} else return null;
	}
	,interactsWith: function(target) {
		var result = false;
		this.getTouches(target,null,starling_events_TouchEvent.sTouches);
		var i = starling_events_TouchEvent.sTouches.data.get_length() - 1;
		while(i >= 0) {
			if(starling_events_TouchEvent.sTouches.data.get(i).get_phase() != "ended") {
				result = true;
				break;
			}
			--i;
		}
		starling_events_TouchEvent.sTouches.data.set_length(0);
		return result;
	}
	,dispatch: function(chain) {
		if(chain != null && chain.data.get_length() != 0) {
			var chainLength;
			if(this.bubbles) chainLength = chain.data.get_length(); else chainLength = 1;
			var previousTarget = this.target;
			this.setTarget(chain.data.get(0));
			var _g = 0;
			while(_g < chainLength) {
				var i = _g++;
				var chainElement;
				chainElement = js_Boot.__cast(chain.data.get(i) , starling_events_EventDispatcher);
				if(this.mVisitedObjects.data.indexOf(chainElement,0) == -1) {
					var stopPropagation = chainElement.invokeEvent(this);
					var index = this.mVisitedObjects.data.get_length();
					this.mVisitedObjects.data.set(index,chainElement);
					if(stopPropagation) break;
				}
			}
			this.setTarget(previousTarget);
		}
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,get_touches: function() {
		var touches = this.data;
		var data = null;
		return new openfl__$Vector_AbstractVector(touches.data.concat(data));
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,__class__: starling_events_TouchEvent
	,__properties__: {get_ctrlKey:"get_ctrlKey",get_shiftKey:"get_shiftKey",get_touches:"get_touches",get_timestamp:"get_timestamp"}
});
var starling_events_TouchMarker = function() {
	starling_display_Sprite.call(this);
	this.mCenter = new openfl_geom_Point();
	this.mTexture = this.createTexture();
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var marker = new starling_display_Image(this.mTexture);
		marker.set_pivotX(this.mTexture.get_width() / 2);
		marker.set_pivotY(this.mTexture.get_height() / 2);
		marker.set_touchable(false);
		this.addChild(marker);
	}
};
$hxClasses["starling.events.TouchMarker"] = starling_events_TouchMarker;
starling_events_TouchMarker.__name__ = ["starling","events","TouchMarker"];
starling_events_TouchMarker.__super__ = starling_display_Sprite;
starling_events_TouchMarker.prototype = $extend(starling_display_Sprite.prototype,{
	mCenter: null
	,mTexture: null
	,dispose: function() {
		this.mTexture.dispose();
		starling_display_Sprite.prototype.dispose.call(this);
	}
	,moveMarker: function(x,y,withCenter) {
		if(withCenter == null) withCenter = false;
		if(withCenter) {
			this.mCenter.x += x - this.get_realMarker().get_x();
			this.mCenter.y += y - this.get_realMarker().get_y();
		}
		this.get_realMarker().set_x(x);
		this.get_realMarker().set_y(y);
		this.get_mockMarker().set_x(2 * this.mCenter.x - x);
		this.get_mockMarker().set_y(2 * this.mCenter.y - y);
	}
	,moveCenter: function(x,y) {
		this.mCenter.x = x;
		this.mCenter.y = y;
		this.moveMarker(this.get_realX(),this.get_realY());
	}
	,createTexture: function() {
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var radius = 12 * scale;
		var width = 32 * scale | 0;
		var height = 32 * scale | 0;
		var thickness = 1.5 * scale;
		var shape = new openfl_display_Shape();
		shape.get_graphics().lineStyle(thickness,0,0.3);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius + thickness);
		shape.get_graphics().beginFill(16777215,0.4);
		shape.get_graphics().lineStyle(thickness,16777215);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius);
		shape.get_graphics().endFill();
		var bmpData = new openfl_display_BitmapData(width,height,true,0);
		bmpData.draw(shape);
		return starling_textures_Texture.fromBitmapData(bmpData,false,false,scale);
	}
	,get_realMarker: function() {
		return js_Boot.__cast(this.getChildAt(0) , starling_display_Image);
	}
	,get_mockMarker: function() {
		return js_Boot.__cast(this.getChildAt(1) , starling_display_Image);
	}
	,get_realX: function() {
		return this.get_realMarker().get_x();
	}
	,get_realY: function() {
		return this.get_realMarker().get_y();
	}
	,get_mockX: function() {
		return this.get_mockMarker().get_x();
	}
	,get_mockY: function() {
		return this.get_mockMarker().get_y();
	}
	,__class__: starling_events_TouchMarker
	,__properties__: $extend(starling_display_Sprite.prototype.__properties__,{get_mockY:"get_mockY",get_mockX:"get_mockX",get_realY:"get_realY",get_realX:"get_realX",get_mockMarker:"get_mockMarker",get_realMarker:"get_realMarker"})
});
var starling_events_TouchPhase = function() { };
$hxClasses["starling.events.TouchPhase"] = starling_events_TouchPhase;
starling_events_TouchPhase.__name__ = ["starling","events","TouchPhase"];
var starling_events_TouchProcessor = function(stage) {
	this.mMultitapDistance = 25;
	this.mMultitapTime = 0.3;
	this.mCtrlDown = false;
	this.mShiftDown = false;
	this.mRoot = this.mStage = stage;
	this.mElapsedTime = 0.0;
	this.mCurrentTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mQueue = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mLastTaps = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mStage.addEventListener("keyDown",$bind(this,this.onKey));
	this.mStage.addEventListener("keyUp",$bind(this,this.onKey));
	this.monitorInterruptions(true);
};
$hxClasses["starling.events.TouchProcessor"] = starling_events_TouchProcessor;
starling_events_TouchProcessor.__name__ = ["starling","events","TouchProcessor"];
starling_events_TouchProcessor.prototype = {
	mStage: null
	,mRoot: null
	,mElapsedTime: null
	,mTouchMarker: null
	,mLastTaps: null
	,mShiftDown: null
	,mCtrlDown: null
	,mMultitapTime: null
	,mMultitapDistance: null
	,mQueue: null
	,mCurrentTouches: null
	,dispose: function() {
		this.monitorInterruptions(false);
		this.mStage.removeEventListener("keyDown",$bind(this,this.onKey));
		this.mStage.removeEventListener("keyUp",$bind(this,this.onKey));
		if(this.mTouchMarker != null) this.mTouchMarker.dispose();
	}
	,advanceTime: function(passedTime) {
		var i;
		var touch;
		this.mElapsedTime += passedTime;
		starling_events_TouchProcessor.sUpdatedTouches.data.set_length(0);
		if(this.mLastTaps.data.get_length() > 0) {
			var i1 = this.mLastTaps.data.get_length() - 1;
			while(i1 >= 0) {
				if(this.mElapsedTime - this.mLastTaps.data.get(i1).get_timestamp() > this.mMultitapTime) new openfl__$Vector_AbstractVector(this.mLastTaps.data.splice(i1,1));
				--i1;
			}
		}
		while(this.mQueue.data.get_length() > 0) {
			var _g = 0;
			var _g1 = this.mCurrentTouches;
			while(_g < _g1.data.get_length()) {
				var touch1 = _g1.data.get(_g);
				++_g;
				if(touch1.get_phase() == "began" || touch1.get_phase() == "moved") touch1.set_phase("stationary");
			}
			while(this.mQueue.data.get_length() > 0 && !this.containsTouchWithID(starling_events_TouchProcessor.sUpdatedTouches,((function($this) {
				var $r;
				var index = $this.mQueue.data.get_length() - 1;
				$r = $this.mQueue.data.get(index);
				return $r;
			}(this)))[0])) {
				var touchArgs = this.mQueue.data.pop();
				touch = this.createOrUpdateTouch(touchArgs[0],touchArgs[1],touchArgs[2],touchArgs[3],touchArgs[4],touchArgs[5],touchArgs[6]);
				var index1 = starling_events_TouchProcessor.sUpdatedTouches.data.get_length();
				starling_events_TouchProcessor.sUpdatedTouches.data.set(index1,touch);
			}
			this.processTouches(starling_events_TouchProcessor.sUpdatedTouches,this.mShiftDown,this.mCtrlDown);
			var i2 = this.mCurrentTouches.data.get_length() - 1;
			while(i2 >= 0) {
				if(this.mCurrentTouches.data.get(i2).get_phase() == "ended") new openfl__$Vector_AbstractVector(this.mCurrentTouches.data.splice(i2,1));
				--i2;
			}
			starling_events_TouchProcessor.sUpdatedTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
	}
	,processTouches: function(touches,shiftDown,ctrlDown) {
		starling_events_TouchProcessor.sHoveringTouchData.data.set_length(0);
		var touchEvent = new starling_events_TouchEvent("touch",this.mCurrentTouches,shiftDown,ctrlDown);
		var touch;
		var _g = 0;
		while(_g < touches.data.get_length()) {
			var touch1 = touches.data.get(_g);
			++_g;
			if(touch1.get_phase() == "hover" && touch1.get_target() != null) {
				var index = starling_events_TouchProcessor.sHoveringTouchData.data.get_length();
				var value = { touch : touch1, target : touch1.get_target(), bubbleChain : touch1.get_bubbleChain()};
				starling_events_TouchProcessor.sHoveringTouchData.data.set(index,value);
			}
			if(touch1.get_phase() == "hover" || touch1.get_phase() == "began") {
				starling_events_TouchProcessor.sHelperPoint.setTo(touch1.get_globalX(),touch1.get_globalY());
				touch1.set_target(this.mRoot.hitTest(starling_events_TouchProcessor.sHelperPoint,true));
			}
		}
		var _g1 = 0;
		var _g11 = starling_events_TouchProcessor.sHoveringTouchData;
		while(_g1 < _g11.data.get_length()) {
			var touchData = _g11.data.get(_g1);
			++_g1;
			if((js_Boot.__cast(touchData.touch , starling_events_Touch)).get_target() != touchData.target) touchEvent.dispatch(touchData.bubbleChain);
		}
		var _g2 = 0;
		while(_g2 < touches.data.get_length()) {
			var touch2 = touches.data.get(_g2);
			++_g2;
			touch2.dispatchEvent(touchEvent);
		}
	}
	,enqueue: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) height = 1.0;
		if(width == null) width = 1.0;
		if(pressure == null) pressure = 1.0;
		this.mQueue.data.unshift([touchID,phase,globalX,globalY,pressure,width,height]);
		if(this.mCtrlDown && this.get_simulateMultitouch() && touchID == 0) {
			this.mTouchMarker.moveMarker(globalX,globalY,this.mShiftDown);
			var x = [1,phase,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
			this.mQueue.data.unshift(x);
		}
	}
	,enqueueMouseLeftStage: function() {
		var mouse = this.getCurrentTouch(0);
		if(mouse == null || mouse.get_phase() != "hover") return;
		var offset = 1;
		var exitX = mouse.get_globalX();
		var exitY = mouse.get_globalY();
		var distLeft = mouse.get_globalX();
		var distRight = this.mStage.get_stageWidth() - distLeft;
		var distTop = mouse.get_globalY();
		var distBottom = this.mStage.get_stageHeight() - distTop;
		var minDist = starling_utils_MathUtil.min([distLeft,distRight,distTop,distBottom]);
		if(minDist == distLeft) exitX = -offset; else if(minDist == distRight) exitX = this.mStage.get_stageWidth() + offset; else if(minDist == distTop) exitY = -offset; else exitY = this.mStage.get_stageHeight() + offset;
		this.enqueue(0,"hover",exitX,exitY);
	}
	,cancelTouches: function() {
		if(this.mCurrentTouches.data.get_length() > 0) {
			var _g = 0;
			var _g1 = this.mCurrentTouches;
			while(_g < _g1.data.get_length()) {
				var touch = _g1.data.get(_g);
				++_g;
				if(touch.get_phase() == "began" || touch.get_phase() == "moved" || touch.get_phase() == "stationary") {
					touch.set_phase("ended");
					touch.set_cancelled(true);
				}
			}
			this.processTouches(this.mCurrentTouches,this.mShiftDown,this.mCtrlDown);
		}
		this.mCurrentTouches.data.set_length(0);
		this.mQueue.data.set_length(0);
	}
	,createOrUpdateTouch: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) height = 1.0;
		if(width == null) width = 1.0;
		if(pressure == null) pressure = 1.0;
		var touch = this.getCurrentTouch(touchID);
		if(touch == null) {
			touch = new starling_events_Touch(touchID);
			this.addCurrentTouch(touch);
		}
		touch.set_globalX(globalX);
		touch.set_globalY(globalY);
		touch.set_phase(phase);
		touch.set_timestamp(this.mElapsedTime);
		touch.set_pressure(pressure);
		touch.set_width(width);
		touch.set_height(height);
		if(phase == "began") this.updateTapCount(touch);
		return touch;
	}
	,updateTapCount: function(touch) {
		var nearbyTap = null;
		var minSqDist = this.mMultitapDistance * this.mMultitapDistance;
		var _g = 0;
		var _g1 = this.mLastTaps;
		while(_g < _g1.data.get_length()) {
			var tap = _g1.data.get(_g);
			++_g;
			var sqDist = Math.pow(tap.get_globalX() - touch.get_globalX(),2) + Math.pow(tap.get_globalY() - touch.get_globalY(),2);
			if(sqDist <= minSqDist) {
				nearbyTap = tap;
				break;
			}
		}
		if(nearbyTap != null) {
			touch.set_tapCount(nearbyTap.get_tapCount() + 1);
			var pos = this.mLastTaps.data.indexOf(nearbyTap,0);
			new openfl__$Vector_AbstractVector(this.mLastTaps.data.splice(pos,1));
		} else touch.set_tapCount(1);
		var x = touch.clone();
		this.mLastTaps.data.push(x);
	}
	,addCurrentTouch: function(touch) {
		var i = this.mCurrentTouches.data.get_length() - 1;
		while(i >= 0) {
			if(this.mCurrentTouches.data.get(i).get_id() == touch.get_id()) new openfl__$Vector_AbstractVector(this.mCurrentTouches.data.splice(i,1));
			--i;
		}
		this.mCurrentTouches.data.push(touch);
	}
	,getCurrentTouch: function(touchID) {
		var _g = 0;
		var _g1 = this.mCurrentTouches;
		while(_g < _g1.data.get_length()) {
			var touch = _g1.data.get(_g);
			++_g;
			if(touch.get_id() == touchID) return touch;
		}
		return null;
	}
	,containsTouchWithID: function(touches,touchID) {
		var _g = 0;
		while(_g < touches.data.get_length()) {
			var touch = touches.data.get(_g);
			++_g;
			if(touch.get_id() == touchID) return true;
		}
		return false;
	}
	,get_simulateMultitouch: function() {
		return this.mTouchMarker != null;
	}
	,set_simulateMultitouch: function(value) {
		if(this.get_simulateMultitouch() == value) return this.mTouchMarker != null;
		if(value) {
			this.mTouchMarker = new starling_events_TouchMarker();
			this.mTouchMarker.set_visible(false);
			this.mStage.addChild(this.mTouchMarker);
		} else {
			this.mTouchMarker.removeFromParent(true);
			this.mTouchMarker = null;
		}
		return this.mTouchMarker != null;
	}
	,get_multitapTime: function() {
		return this.mMultitapTime;
	}
	,set_multitapTime: function(value) {
		return this.mMultitapTime = value;
	}
	,get_multitapDistance: function() {
		return this.mMultitapDistance;
	}
	,set_multitapDistance: function(value) {
		return this.mMultitapDistance = value;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,set_root: function(value) {
		return this.mRoot = value;
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_numCurrentTouches: function() {
		return this.mCurrentTouches.data.get_length();
	}
	,onKey: function(event) {
		if((function($this) {
			var $r;
			var a = event.get_keyCode();
			$r = a == 17;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var a1 = event.get_keyCode();
			$r = a1 == 15;
			return $r;
		}(this))) {
			var wasCtrlDown = this.mCtrlDown;
			this.mCtrlDown = event.type == "keyDown";
			if(this.get_simulateMultitouch() && wasCtrlDown != this.mCtrlDown) {
				this.mTouchMarker.set_visible(this.mCtrlDown);
				this.mTouchMarker.moveCenter(this.mStage.get_stageWidth() / 2,this.mStage.get_stageHeight() / 2);
				var mouseTouch = this.getCurrentTouch(0);
				var mockedTouch = this.getCurrentTouch(1);
				if(mouseTouch != null) this.mTouchMarker.moveMarker(mouseTouch.get_globalX(),mouseTouch.get_globalY());
				if(wasCtrlDown && mockedTouch != null && mockedTouch.get_phase() != "ended") {
					var x = [1,"ended",mockedTouch.get_globalX(),mockedTouch.get_globalY()];
					this.mQueue.data.unshift(x);
				} else if(this.mCtrlDown && mouseTouch != null) {
					if(mouseTouch.get_phase() == "hover" || mouseTouch.get_phase() == "ended") {
						var x1 = [1,"hover",this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						this.mQueue.data.unshift(x1);
					} else {
						var x2 = [1,"began",this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						this.mQueue.data.unshift(x2);
					}
				}
			}
		} else if((function($this) {
			var $r;
			var a2 = event.get_keyCode();
			$r = a2 == 16;
			return $r;
		}(this))) this.mShiftDown = event.type == "keyDown";
	}
	,monitorInterruptions: function(enable) {
		try {
			if(enable) openfl_Lib.get_current().stage.addEventListener("deactivate",$bind(this,this.onInterruption),false,0,true); else openfl_Lib.get_current().stage.removeEventListener("deactivate",$bind(this,this.onInterruption));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			} else throw(e);
		}
	}
	,onInterruption: function(event) {
		this.cancelTouches();
	}
	,__class__: starling_events_TouchProcessor
	,__properties__: {get_numCurrentTouches:"get_numCurrentTouches",get_stage:"get_stage",set_root:"set_root",get_root:"get_root",set_multitapDistance:"set_multitapDistance",get_multitapDistance:"get_multitapDistance",set_multitapTime:"set_multitapTime",get_multitapTime:"get_multitapTime",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch"}
};
var starling_filters_BlurFilter = function(blurX,blurY,resolution) {
	if(resolution == null) resolution = 1;
	if(blurY == null) blurY = 1;
	if(blurX == null) blurX = 1;
	this.sTmpWeights = (function($this) {
		var $r;
		var a = [0,0,0,0,0.];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this));
	this.mColor = (function($this) {
		var $r;
		var a = [1,1,1,1.];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this));
	this.mWeights = (function($this) {
		var $r;
		var a = [0,0,0,0.];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this));
	this.mOffsets = (function($this) {
		var $r;
		var a = [0,0,0,0.];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.data.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this));
	starling_filters_FragmentFilter.call(this,1,resolution);
	this.mBlurX = blurX;
	this.mBlurY = blurY;
	this.updateMarginsAndPasses();
};
$hxClasses["starling.filters.BlurFilter"] = starling_filters_BlurFilter;
starling_filters_BlurFilter.__name__ = ["starling","filters","BlurFilter"];
starling_filters_BlurFilter.createDropShadow = function(distance,angle,color,alpha,blur,resolution) {
	if(resolution == null) resolution = 0.5;
	if(blur == null) blur = 1.0;
	if(alpha == null) alpha = 0.5;
	if(color == null) color = 0;
	if(angle == null) angle = 0.785;
	if(distance == null) distance = 4.0;
	var dropShadow = new starling_filters_BlurFilter(blur,blur,resolution);
	dropShadow.set_offsetX(Math.cos(angle) * distance);
	dropShadow.set_offsetY(Math.sin(angle) * distance);
	dropShadow.set_mode("below");
	dropShadow.setUniformColor(true,color,alpha);
	return dropShadow;
};
starling_filters_BlurFilter.createGlow = function(color,alpha,blur,resolution) {
	if(resolution == null) resolution = 0.5;
	if(blur == null) blur = 1.0;
	if(alpha == null) alpha = 1.0;
	if(color == null) color = 16776960;
	var glow = new starling_filters_BlurFilter(blur,blur,resolution);
	glow.set_mode("below");
	glow.setUniformColor(true,color,alpha);
	return glow;
};
starling_filters_BlurFilter.__super__ = starling_filters_FragmentFilter;
starling_filters_BlurFilter.prototype = $extend(starling_filters_FragmentFilter.prototype,{
	mNormalProgram: null
	,mTintedProgram: null
	,mOffsets: null
	,mWeights: null
	,mColor: null
	,mBlurX: null
	,mBlurY: null
	,mUniformColor: null
	,sTmpWeights: null
	,createPrograms: function() {
		this.mNormalProgram = this.createProgram(false);
		this.mTintedProgram = this.createProgram(true);
	}
	,createProgram: function(tinted) {
		var programName;
		if(tinted) programName = "BF_t"; else programName = "BF_n";
		var target = starling_core_Starling.get_current();
		if(target.hasProgram(programName)) return target.getProgram(programName);
		var vertexShader = "m44 op, va0, vc0       \n" + "mov v0, va1            \n" + "sub v1, va1, vc4.zwxx  \n" + "sub v2, va1, vc4.xyxx  \n" + "add v3, va1, vc4.xyxx  \n" + "add v4, va1, vc4.zwxx  \n";
		var fragmentShader = "tex ft0,  v0, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft5, ft0, fc0.xxxx                         \n" + "tex ft1,  v1, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft1, ft1, fc0.zzzz                         \n" + "add ft5, ft5, ft1                              \n" + "tex ft2,  v2, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft2, ft2, fc0.yyyy                         \n" + "add ft5, ft5, ft2                              \n" + "tex ft3,  v3, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft3, ft3, fc0.yyyy                         \n" + "add ft5, ft5, ft3                              \n" + "tex ft4,  v4, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft4, ft4, fc0.zzzz                         \n";
		if(tinted) fragmentShader += "add ft5, ft5, ft4                              \n" + "mul ft5.xyz, fc1.xyz, ft5.www                  \n" + "mul oc, ft5, fc1.wwww                          \n"; else fragmentShader += "add  oc, ft5, ft4                              \n";
		return target.registerProgramFromSource(programName,vertexShader,fragmentShader);
	}
	,activate: function(pass,context,texture) {
		this.updateParameters(pass,Std["int"](texture.get_nativeWidth()),Std["int"](texture.get_nativeHeight()));
		context.setProgramConstantsFromVector(1,4,this.mOffsets);
		context.setProgramConstantsFromVector(0,0,this.mWeights);
		if(this.mUniformColor && pass == this.get_numPasses() - 1) {
			context.setProgramConstantsFromVector(0,1,this.mColor);
			context.setProgram(this.mTintedProgram);
		} else context.setProgram(this.mNormalProgram);
	}
	,updateParameters: function(pass,textureWidth,textureHeight) {
		var sigma;
		var horizontal = pass < this.mBlurX;
		var pixelSize;
		if(horizontal) {
			sigma = Math.min(1.0,this.mBlurX - pass) * 2.0;
			pixelSize = 1.0 / textureWidth;
		} else {
			sigma = Math.min(1.0,this.mBlurY - (pass - Math.ceil(this.mBlurX))) * 2.0;
			pixelSize = 1.0 / textureHeight;
		}
		var twoSigmaSq = 2 * sigma * sigma;
		var multiplier = 1.0 / Math.sqrt(twoSigmaSq * Math.PI);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var value = multiplier * Math.exp(-i * i / twoSigmaSq);
			this.sTmpWeights.data.set(i,value);
		}
		var value1 = this.sTmpWeights.data.get(0);
		this.mWeights.data.set(0,value1);
		var value2 = this.sTmpWeights.data.get(1) + this.sTmpWeights.data.get(2);
		this.mWeights.data.set(1,value2);
		var value3 = this.sTmpWeights.data.get(3) + this.sTmpWeights.data.get(4);
		this.mWeights.data.set(2,value3);
		var weightSum = this.mWeights.data.get(0) + 2 * this.mWeights.data.get(1) + 2 * this.mWeights.data.get(2);
		var invWeightSum = 1.0 / weightSum;
		var value4 = this.mWeights.data.get(0) * invWeightSum;
		this.mWeights.data.set(0,value4);
		var value5 = this.mWeights.data.get(1) * invWeightSum;
		this.mWeights.data.set(1,value5);
		var value6 = this.mWeights.data.get(2) * invWeightSum;
		this.mWeights.data.set(2,value6);
		var offset1 = (pixelSize * this.sTmpWeights.data.get(1) + 2 * pixelSize * this.sTmpWeights.data.get(2)) / this.mWeights.data.get(1);
		var offset2 = (3 * pixelSize * this.sTmpWeights.data.get(3) + 4 * pixelSize * this.sTmpWeights.data.get(4)) / this.mWeights.data.get(2);
		if(horizontal) {
			this.mOffsets.data.set(0,offset1);
			this.mOffsets.data.set(1,0);
			this.mOffsets.data.set(2,offset2);
			this.mOffsets.data.set(3,0);
		} else {
			this.mOffsets.data.set(0,0);
			this.mOffsets.data.set(1,offset1);
			this.mOffsets.data.set(2,0);
			this.mOffsets.data.set(3,offset2);
		}
	}
	,updateMarginsAndPasses: function() {
		if(this.mBlurX == 0 && this.mBlurY == 0) this.mBlurX = 0.001;
		this.set_numPasses(Math.ceil(this.mBlurX) + Math.ceil(this.mBlurY));
		this.set_marginX((3 + Math.ceil(this.mBlurX)) / this.get_resolution());
		this.set_marginY((3 + Math.ceil(this.mBlurY)) / this.get_resolution());
	}
	,setUniformColor: function(enable,color,alpha) {
		if(alpha == null) alpha = 1.0;
		if(color == null) color = 0;
		var value = starling_utils_Color.getRed(color) / 255.0;
		this.mColor.data.set(0,value);
		var value1 = starling_utils_Color.getGreen(color) / 255.0;
		this.mColor.data.set(1,value1);
		var value2 = starling_utils_Color.getBlue(color) / 255.0;
		this.mColor.data.set(2,value2);
		this.mColor.data.set(3,alpha);
		this.mUniformColor = enable;
	}
	,get_blurX: function() {
		return this.mBlurX;
	}
	,set_blurX: function(value) {
		this.mBlurX = value;
		this.updateMarginsAndPasses();
		return this.mBlurX;
	}
	,get_blurY: function() {
		return this.mBlurY;
	}
	,set_blurY: function(value) {
		this.mBlurY = value;
		this.updateMarginsAndPasses();
		return this.mBlurY;
	}
	,__class__: starling_filters_BlurFilter
	,__properties__: $extend(starling_filters_FragmentFilter.prototype.__properties__,{set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"})
});
var starling_filters_FragmentFilterMode = function() { };
$hxClasses["starling.filters.FragmentFilterMode"] = starling_filters_FragmentFilterMode;
starling_filters_FragmentFilterMode.__name__ = ["starling","filters","FragmentFilterMode"];
var starling_text_BitmapChar = function(id,texture,xOffset,yOffset,xAdvance) {
	this.mCharID = id;
	this.mTexture = texture;
	this.mXOffset = xOffset;
	this.mYOffset = yOffset;
	this.mXAdvance = xAdvance;
	this.mKernings = null;
};
$hxClasses["starling.text.BitmapChar"] = starling_text_BitmapChar;
starling_text_BitmapChar.__name__ = ["starling","text","BitmapChar"];
starling_text_BitmapChar.prototype = {
	mTexture: null
	,mCharID: null
	,mXOffset: null
	,mYOffset: null
	,mXAdvance: null
	,mKernings: null
	,addKerning: function(charID,amount) {
		if(this.mKernings == null) this.mKernings = new haxe_ds_IntMap();
		{
			this.mKernings.h[charID] = amount;
			amount;
		}
	}
	,getKerning: function(charID) {
		if(this.mKernings == null || this.mKernings.h[charID] == null) return 0.0; else return this.mKernings.h[charID];
	}
	,createImage: function() {
		return new starling_display_Image(this.mTexture);
	}
	,get_charID: function() {
		return this.mCharID;
	}
	,get_xOffset: function() {
		return this.mXOffset;
	}
	,get_yOffset: function() {
		return this.mYOffset;
	}
	,get_xAdvance: function() {
		return this.mXAdvance;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_width: function() {
		return this.mTexture.get_width();
	}
	,get_height: function() {
		return this.mTexture.get_height();
	}
	,__class__: starling_text_BitmapChar
	,__properties__: {get_height:"get_height",get_width:"get_width",get_texture:"get_texture",get_xAdvance:"get_xAdvance",get_yOffset:"get_yOffset",get_xOffset:"get_xOffset",get_charID:"get_charID"}
};
var starling_text_BitmapFont = function(texture,fontXml) {
	if(texture == null && fontXml == null) {
		texture = starling_text_MiniBitmapFont.get_texture();
		fontXml = starling_text_MiniBitmapFont.get_xml();
	} else if(texture != null && fontXml == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("fontXml cannot be null!"));
	this.mName = "unknown";
	this.mLineHeight = this.mSize = this.mBaseline = 14;
	this.mOffsetX = this.mOffsetY = 0.0;
	this.mTexture = texture;
	this.mChars = new haxe_ds_IntMap();
	this.mHelperImage = new starling_display_Image(texture);
	this.parseFontXml(fontXml);
};
$hxClasses["starling.text.BitmapFont"] = starling_text_BitmapFont;
starling_text_BitmapFont.__name__ = ["starling","text","BitmapFont"];
starling_text_BitmapFont.prototype = {
	mTexture: null
	,mChars: null
	,mName: null
	,mSize: null
	,mLineHeight: null
	,mBaseline: null
	,mOffsetX: null
	,mOffsetY: null
	,mHelperImage: null
	,dispose: function() {
		if(this.mTexture != null) this.mTexture.dispose();
	}
	,parseFontXml: function(fontXml) {
		var scale = this.mTexture.get_scale();
		var frame = this.mTexture.get_frame();
		var frameX;
		if(frame != null) frameX = frame.x; else frameX = 0;
		var frameY;
		if(frame != null) frameY = frame.y; else frameY = 0;
		var info = fontXml.elementsNamed("info").next();
		if(info == null) {
			fontXml = fontXml.firstElement();
			info = fontXml.elementsNamed("info").next();
		}
		var common = fontXml.elementsNamed("common").next();
		this.mName = info.get("face");
		this.mSize = Std.parseFloat(info.get("size")) / scale;
		this.mLineHeight = Std.parseFloat(common.get("lineHeight")) / scale;
		this.mBaseline = Std.parseFloat(common.get("base")) / scale;
		if(info.get("smooth") == "0") this.set_smoothing("none");
		if(this.mSize <= 0) {
			haxe_Log.trace("[Starling] Warning: invalid font size in '" + this.mName + "' font.",{ fileName : "BitmapFont.hx", lineNumber : 144, className : "starling.text.BitmapFont", methodName : "parseFontXml"});
			if(this.mSize == 0.0) this.mSize = 16.0; else this.mSize = this.mSize * -1.0;
		}
		var chars = fontXml.elementsNamed("chars").next();
		var $it0 = chars.elementsNamed("char");
		while( $it0.hasNext() ) {
			var charElement = $it0.next();
			var id = Std.parseInt(charElement.get("id"));
			var xOffset = Std.parseFloat(charElement.get("xoffset")) / scale;
			var yOffset = Std.parseFloat(charElement.get("yoffset")) / scale;
			var xAdvance = Std.parseFloat(charElement.get("xadvance")) / scale;
			var region = new openfl_geom_Rectangle();
			region.x = Std.parseFloat(charElement.get("x")) / scale + frameX;
			region.y = Std.parseFloat(charElement.get("y")) / scale + frameY;
			region.width = Std.parseFloat(charElement.get("width")) / scale;
			region.height = Std.parseFloat(charElement.get("height")) / scale;
			var texture = starling_textures_Texture.fromTexture(this.mTexture,region);
			var bitmapChar = new starling_text_BitmapChar(id,texture,xOffset,yOffset,xAdvance);
			this.addChar(id,bitmapChar);
		}
		if(fontXml.exists("kernings")) {
			var kernings = fontXml.elementsNamed("kernings").next();
			var $it1 = kernings.elementsNamed("kerning");
			while( $it1.hasNext() ) {
				var kerningElement = $it1.next();
				var first = Std.parseInt(kerningElement.get("first"));
				var second = Std.parseInt(kerningElement.get("second"));
				var amount = Std.parseFloat(kerningElement.get("amount")) / scale;
				if(this.mChars.h.hasOwnProperty(second)) this.getChar(second).addKerning(first,amount);
			}
		}
	}
	,getChar: function(charID) {
		return this.mChars.h[charID];
	}
	,addChar: function(charID,bitmapChar) {
		{
			this.mChars.h[charID] = bitmapChar;
			bitmapChar;
		}
	}
	,getCharIDs: function(result) {
		if(result == null) result = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var $it0 = this.mChars.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var index = result.data.get_length();
			result.data.set(index,key);
		}
		return result;
	}
	,hasChars: function(text) {
		if(text == null) return true;
		var charID;
		var numChars = text.length;
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			charID = HxOverrides.cca(text,i);
			if(charID != 32 && charID != 9 && charID != 10 && charID != 13 && this.getChar(charID) == null) return false;
		}
		return true;
	}
	,createSprite: function(width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(vAlign == null) vAlign = "center";
		if(hAlign == null) hAlign = "center";
		if(color == null) color = 16777215;
		if(fontSize == null) fontSize = -1;
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.data.get_length();
		var sprite = new starling_display_Sprite();
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			var charLocation = charLocations.data.get(i);
			var $char = charLocation["char"].createImage();
			$char.set_x(charLocation.x);
			$char.set_y(charLocation.y);
			$char.set_scaleX($char.set_scaleY(charLocation.scale));
			$char.set_color(color);
			sprite.addChild($char);
		}
		starling_text_CharLocation.rechargePool();
		return sprite;
	}
	,fillQuadBatch: function(quadBatch,width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning,leading) {
		if(leading == null) leading = 0;
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(vAlign == null) vAlign = "center";
		if(hAlign == null) hAlign = "center";
		if(color == null) color = 16777215;
		if(fontSize == null) fontSize = -1;
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning,leading);
		var numChars = charLocations.data.get_length();
		this.mHelperImage.set_color(color);
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			var charLocation = charLocations.data.get(i);
			this.mHelperImage.set_texture(charLocation["char"].get_texture());
			this.mHelperImage.readjustSize();
			this.mHelperImage.set_x(charLocation.x);
			this.mHelperImage.set_y(charLocation.y);
			this.mHelperImage.set_scaleX(this.mHelperImage.set_scaleY(charLocation.scale));
			quadBatch.addImage(this.mHelperImage);
		}
		starling_text_CharLocation.rechargePool();
	}
	,arrangeChars: function(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning,leading) {
		if(leading == null) leading = 0;
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(vAlign == null) vAlign = "center";
		if(hAlign == null) hAlign = "center";
		if(fontSize == null) fontSize = -1;
		if(text == null || text.length == 0) return starling_text_CharLocation.vectorFromPool();
		if(fontSize < 0) fontSize *= -this.mSize;
		var finished = false;
		var charLocation;
		var numChars;
		var containerWidth = 0.0;
		var containerHeight = 0.0;
		var scale = 0.0;
		var currentX = 0;
		var currentY = 0;
		while(!finished) {
			starling_utils_ArrayUtil.clear(starling_text_BitmapFont.sLines);
			scale = fontSize / this.mSize;
			containerWidth = width / scale;
			containerHeight = height / scale;
			if(this.mLineHeight <= containerHeight) {
				var lastWhiteSpace = -1;
				var lastCharID = -1;
				var currentLine = starling_text_CharLocation.vectorFromPool();
				numChars = text.length;
				var i = 0;
				while(i < numChars) {
					var lineFull = false;
					var charID = HxOverrides.cca(text,i);
					var $char = this.getChar(charID);
					if(charID == 10 || charID == 13) lineFull = true; else if($char == null) haxe_Log.trace("[Starling] Missing character: " + charID,{ fileName : "BitmapFont.hx", lineNumber : 324, className : "starling.text.BitmapFont", methodName : "arrangeChars"}); else {
						if(charID == 32 || charID == 9) lastWhiteSpace = i;
						if(kerning) currentX += $char.getKerning(lastCharID);
						charLocation = starling_text_CharLocation.instanceFromPool($char);
						charLocation.x = currentX + $char.get_xOffset();
						charLocation.y = currentY + $char.get_yOffset();
						var index = currentLine.data.get_length();
						currentLine.data.set(index,charLocation);
						currentX += $char.get_xAdvance();
						lastCharID = charID;
						if(charLocation.x + $char.get_width() > containerWidth) {
							if(autoScale && lastWhiteSpace == -1) break;
							var numCharsToRemove;
							if(lastWhiteSpace == -1) numCharsToRemove = 1; else numCharsToRemove = i - lastWhiteSpace;
							var _g = 0;
							while(_g < numCharsToRemove) {
								var j = _g++;
								currentLine.data.pop();
							}
							if(currentLine.data.get_length() == 0) break;
							i -= numCharsToRemove;
							lineFull = true;
						}
					}
					if(i == numChars - 1) {
						starling_text_BitmapFont.sLines[starling_text_BitmapFont.sLines.length] = currentLine;
						finished = true;
					} else if(lineFull) {
						starling_text_BitmapFont.sLines[starling_text_BitmapFont.sLines.length] = currentLine;
						if(lastWhiteSpace == i) currentLine.data.pop();
						if(currentY + leading + 2 * this.mLineHeight <= containerHeight) {
							currentLine = starling_text_CharLocation.vectorFromPool();
							currentX = 0;
							currentY += this.mLineHeight + leading;
							lastWhiteSpace = -1;
							lastCharID = -1;
						} else break;
					}
					++i;
				}
			}
			if(autoScale && !finished && fontSize > 3) fontSize -= 1; else finished = true;
		}
		var finalLocations = starling_text_CharLocation.vectorFromPool();
		var numLines = starling_text_BitmapFont.sLines.length;
		var bottom = currentY + this.mLineHeight;
		var yOffset = 0;
		if(vAlign == "bottom") yOffset = containerHeight - bottom | 0; else if(vAlign == "center") yOffset = (containerHeight - bottom) / 2 | 0;
		var _g1 = 0;
		while(_g1 < numLines) {
			var lineID = _g1++;
			var line = starling_text_BitmapFont.sLines[lineID];
			numChars = line.data.get_length();
			if(numChars == 0) continue;
			var xOffset = 0;
			var lastLocation;
			var index1 = line.data.get_length() - 1;
			lastLocation = line.data.get(index1);
			var right = lastLocation.x - lastLocation["char"].get_xOffset() + lastLocation["char"].get_xAdvance();
			if(hAlign == "right") xOffset = containerWidth - right | 0; else if(hAlign == "center") xOffset = (containerWidth - right) / 2 | 0;
			var _g11 = 0;
			while(_g11 < numChars) {
				var c = _g11++;
				charLocation = line.data.get(c);
				charLocation.x = scale * (charLocation.x + xOffset + this.mOffsetX);
				charLocation.y = scale * (charLocation.y + yOffset + this.mOffsetY);
				charLocation.scale = scale;
				if(charLocation["char"].get_width() > 0 && charLocation["char"].get_height() > 0) {
					var index2 = finalLocations.data.get_length();
					finalLocations.data.set(index2,charLocation);
				}
			}
		}
		return finalLocations;
	}
	,get_name: function() {
		return this.mName;
	}
	,get_size: function() {
		return this.mSize;
	}
	,get_lineHeight: function() {
		return this.mLineHeight;
	}
	,set_lineHeight: function(value) {
		this.mLineHeight = value;
	}
	,get_smoothing: function() {
		return this.mHelperImage.get_smoothing();
	}
	,set_smoothing: function(value) {
		return this.mHelperImage.set_smoothing(value);
	}
	,get_baseline: function() {
		return this.mBaseline;
	}
	,set_baseline: function(value) {
		return this.mBaseline = value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		return this.mOffsetX = value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		return this.mOffsetY = value;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,__class__: starling_text_BitmapFont
	,__properties__: {set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_baseline:"set_baseline",get_baseline:"get_baseline",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",get_lineHeight:"get_lineHeight",get_size:"get_size",get_name:"get_name"}
};
var starling_text_CharLocation = function($char) {
	this.reset($char);
};
$hxClasses["starling.text.CharLocation"] = starling_text_CharLocation;
starling_text_CharLocation.__name__ = ["starling","text","CharLocation"];
starling_text_CharLocation.instanceFromPool = function($char) {
	var instance;
	if(starling_text_CharLocation.sInstancePool.data.get_length() > 0) instance = starling_text_CharLocation.sInstancePool.data.pop(); else instance = new starling_text_CharLocation($char);
	instance.reset($char);
	var index = starling_text_CharLocation.sInstanceLoan.data.get_length();
	starling_text_CharLocation.sInstanceLoan.data.set(index,instance);
	return instance;
};
starling_text_CharLocation.vectorFromPool = function() {
	var vector;
	if(starling_text_CharLocation.sVectorPool.length > 0) vector = starling_text_CharLocation.sVectorPool.pop(); else vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	vector.data.set_length(0);
	starling_text_CharLocation.sVectorLoan[starling_text_CharLocation.sVectorLoan.length] = vector;
	return vector;
};
starling_text_CharLocation.rechargePool = function() {
	var instance;
	var vector;
	while(starling_text_CharLocation.sInstanceLoan.data.get_length() > 0) {
		instance = starling_text_CharLocation.sInstanceLoan.data.pop();
		instance["char"] = null;
		var index = starling_text_CharLocation.sInstancePool.data.get_length();
		starling_text_CharLocation.sInstancePool.data.set(index,instance);
	}
	while(starling_text_CharLocation.sVectorLoan.length > 0) {
		vector = starling_text_CharLocation.sVectorLoan.pop();
		vector.data.set_length(0);
		starling_text_CharLocation.sVectorPool[starling_text_CharLocation.sVectorPool.length] = vector;
	}
};
starling_text_CharLocation.prototype = {
	'char': null
	,scale: null
	,x: null
	,y: null
	,reset: function($char) {
		this["char"] = $char;
		return this;
	}
	,__class__: starling_text_CharLocation
};
var starling_text_MiniBitmapFont = function() { };
$hxClasses["starling.text.MiniBitmapFont"] = starling_text_MiniBitmapFont;
starling_text_MiniBitmapFont.__name__ = ["starling","text","MiniBitmapFont"];
starling_text_MiniBitmapFont.__properties__ = {get_xml:"get_xml",get_texture:"get_texture"}
starling_text_MiniBitmapFont.get_texture = function() {
	var bitmapData = starling_text_MiniBitmapFont.getBitmapData();
	var texture = starling_textures_Texture.fromBitmapData(bitmapData,false);
	bitmapData.dispose();
	bitmapData = null;
	texture.get_root().set_onRestore(function() {
		bitmapData = starling_text_MiniBitmapFont.getBitmapData();
		texture.get_root().uploadBitmapData(bitmapData);
		bitmapData.dispose();
		bitmapData = null;
	});
	return texture;
};
starling_text_MiniBitmapFont.getBitmapData = function() {
	var bmpData = new openfl_display_BitmapData(128,64);
	var bmpBytes = new openfl_utils_ByteArrayData(0);
	var numBytes = starling_text_MiniBitmapFont.BITMAP_DATA.length;
	var _g = 0;
	while(_g < numBytes) {
		var i = _g++;
		bmpBytes.writeUnsignedInt(starling_text_MiniBitmapFont.BITMAP_DATA[i]);
	}
	bmpBytes.uncompress();
	bmpData.setPixels(new openfl_geom_Rectangle(0,0,128,64),bmpBytes);
	bmpBytes.clear();
	return bmpData;
};
starling_text_MiniBitmapFont.get_xml = function() {
	return starling_text_MiniBitmapFont.XML_DATA;
};
var starling_text_TextField = function(width,height,text,fontName,fontSize,color,bold) {
	if(bold == null) bold = false;
	if(color == null) color = 0;
	if(fontSize == null) fontSize = 12;
	if(fontName == null) fontName = "_sans";
	starling_display_DisplayObjectContainer.call(this);
	if(text != null) this.mText = text; else this.mText = "";
	this.mFontSize = fontSize;
	this.mColor = color;
	this.mHAlign = "center";
	this.mVAlign = "center";
	this.mBorder = null;
	this.mKerning = true;
	this.mLeading = 0.0;
	this.mBold = bold;
	this.mAutoSize = "none";
	this.mHitArea = new openfl_geom_Rectangle(0,0,width,height);
	this.set_fontName(fontName);
	this.addEventListener("flatten",$bind(this,this.onFlatten));
};
$hxClasses["starling.text.TextField"] = starling_text_TextField;
starling_text_TextField.__name__ = ["starling","text","TextField"];
starling_text_TextField.__properties__ = {get_bitmapFonts:"get_bitmapFonts",set_defaultTextureFormat:"set_defaultTextureFormat",get_defaultTextureFormat:"get_defaultTextureFormat"}
starling_text_TextField.get_defaultTextureFormat = function() {
	return starling_text_TextField.sDefaultTextureFormat;
};
starling_text_TextField.set_defaultTextureFormat = function(value) {
	return starling_text_TextField.sDefaultTextureFormat = value;
};
starling_text_TextField.registerBitmapFont = function(bitmapFont,name) {
	if(name == null) name = bitmapFont.get_name();
	var this1 = starling_text_TextField.get_bitmapFonts();
	var k = starling_text_TextField.convertToLowerCase(name);
	this1.set(k,bitmapFont);
	bitmapFont;
	return name;
};
starling_text_TextField.unregisterBitmapFont = function(name,dispose) {
	if(dispose == null) dispose = true;
	name = starling_text_TextField.convertToLowerCase(name);
	if(dispose && (function($this) {
		var $r;
		var this1 = starling_text_TextField.get_bitmapFonts();
		$r = this1.get(name);
		return $r;
	}(this)) != null) ((function($this) {
		var $r;
		var this2 = starling_text_TextField.get_bitmapFonts();
		$r = this2.get(name);
		return $r;
	}(this))).dispose();
	var this3 = starling_text_TextField.get_bitmapFonts();
	this3.remove(name);
};
starling_text_TextField.getBitmapFont = function(name) {
	var this1 = starling_text_TextField.get_bitmapFonts();
	var key = starling_text_TextField.convertToLowerCase(name);
	return this1.get(key);
};
starling_text_TextField.get_bitmapFonts = function() {
	var fonts;
	var this1 = starling_core_Starling.get_current().get_contextData();
	fonts = this1.get("starling.display.TextField.BitmapFonts");
	if(fonts == null) {
		fonts = new haxe_ds_StringMap();
		var this2 = starling_core_Starling.get_current().get_contextData();
		this2.set("starling.display.TextField.BitmapFonts",fonts);
		fonts;
	}
	return fonts;
};
starling_text_TextField.convertToLowerCase = function(string) {
	var result = starling_text_TextField.sStringCache.get(string);
	if(result == null) {
		result = string.toLowerCase();
		{
			starling_text_TextField.sStringCache.set(string,result);
			result;
		}
	}
	return result;
};
starling_text_TextField.__super__ = starling_display_DisplayObjectContainer;
starling_text_TextField.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mFontSize: null
	,mColor: null
	,mText: null
	,mFontName: null
	,mHAlign: null
	,mVAlign: null
	,mBold: null
	,mItalic: null
	,mUnderline: null
	,mAutoScale: null
	,mAutoSize: null
	,mKerning: null
	,mLeading: null
	,mNativeFilters: null
	,mRequiresRedraw: null
	,mIsHtmlText: null
	,mTextBounds: null
	,mBatchable: null
	,mHitArea: null
	,mBorder: null
	,mImage: null
	,mQuadBatch: null
	,dispose: function() {
		this.removeEventListener("flatten",$bind(this,this.onFlatten));
		if(this.mImage != null) this.mImage.get_texture().dispose();
		if(this.mQuadBatch != null) this.mQuadBatch.dispose();
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,onFlatten: function(e) {
		if(this.mRequiresRedraw) this.redraw();
	}
	,render: function(support,parentAlpha) {
		if(this.mRequiresRedraw) this.redraw();
		starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
	}
	,redraw: function() {
		if(this.mRequiresRedraw) {
			if(starling_text_TextField.getBitmapFont(this.mFontName) != null) this.createComposedContents(); else this.createRenderedContents();
			this.updateBorder();
			this.mRequiresRedraw = false;
		}
	}
	,createRenderedContents: function() {
		var _g = this;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.removeFromParent(true);
			this.mQuadBatch = null;
		}
		if(this.mTextBounds == null) this.mTextBounds = new openfl_geom_Rectangle();
		var texture;
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var bitmapData = this.renderText(scale,this.mTextBounds);
		var format = starling_text_TextField.sDefaultTextureFormat;
		var maxTextureSize = starling_textures_Texture.get_maxSize();
		var shrinkHelper = 0;
		while(bitmapData.width > maxTextureSize || bitmapData.height > maxTextureSize) {
			scale *= Math.min((maxTextureSize - shrinkHelper) / bitmapData.width,(maxTextureSize - shrinkHelper) / bitmapData.height);
			bitmapData.dispose();
			bitmapData = this.renderText(scale,this.mTextBounds);
			shrinkHelper += 1;
		}
		this.mHitArea.width = bitmapData.width / scale;
		this.mHitArea.height = bitmapData.height / scale;
		texture = starling_textures_Texture.fromBitmapData(bitmapData,false,false,scale,format);
		texture.get_root().set_onRestore(function() {
			if(_g.mTextBounds == null) _g.mTextBounds = new openfl_geom_Rectangle();
			bitmapData = _g.renderText(scale,_g.mTextBounds);
			texture.get_root().uploadBitmapData(bitmapData);
			bitmapData.dispose();
			bitmapData = null;
		});
		bitmapData.dispose();
		bitmapData = null;
		if(this.mImage == null) {
			this.mImage = new starling_display_Image(texture);
			this.mImage.set_touchable(false);
			this.addChild(this.mImage);
		} else {
			this.mImage.get_texture().dispose();
			this.mImage.set_texture(texture);
			this.mImage.readjustSize();
		}
	}
	,formatText: function(textField,textFormat) {
	}
	,requireRedraw: function() {
		this.mRequiresRedraw = true;
	}
	,renderText: function(scale,resultTextBounds) {
		var width = this.mHitArea.width * scale;
		var height = this.mHitArea.height * scale;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = 2147483647;
			hAlign = "left";
		}
		if(this.get_isVerticalAutoSize()) {
			height = 2147483647;
			vAlign = "top";
		}
		var textFormat = new openfl_text_TextFormat(this.mFontName,this.mFontSize * scale | 0,this.mColor,this.mBold,this.mItalic,this.mUnderline,null,null,openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(hAlign));
		textFormat.kerning = this.mKerning;
		textFormat.leading = this.mLeading | 0;
		starling_text_TextField.sNativeTextField.set_defaultTextFormat(textFormat);
		starling_text_TextField.sNativeTextField.set_width(width);
		starling_text_TextField.sNativeTextField.set_height(height);
		starling_text_TextField.sNativeTextField.set_antiAliasType(0);
		starling_text_TextField.sNativeTextField.set_selectable(false);
		starling_text_TextField.sNativeTextField.set_multiline(true);
		starling_text_TextField.sNativeTextField.set_wordWrap(true);
		if(this.mIsHtmlText) starling_text_TextField.sNativeTextField.set_htmlText(this.mText); else starling_text_TextField.sNativeTextField.set_text(this.mText);
		starling_text_TextField.sNativeTextField.set_embedFonts(true);
		starling_text_TextField.sNativeTextField.set_filters(this.mNativeFilters);
		if(starling_text_TextField.sNativeTextField.get_textWidth() == 0.0 || starling_text_TextField.sNativeTextField.get_textHeight() == 0.0) starling_text_TextField.sNativeTextField.set_embedFonts(false);
		this.formatText(starling_text_TextField.sNativeTextField,textFormat);
		if(this.mAutoScale) this.autoScaleNativeTextField(starling_text_TextField.sNativeTextField);
		var textWidth = starling_text_TextField.sNativeTextField.get_textWidth();
		var textHeight = starling_text_TextField.sNativeTextField.get_textHeight();
		if(this.get_isHorizontalAutoSize()) starling_text_TextField.sNativeTextField.set_width(width = Math.ceil(textWidth + 5));
		if(this.get_isVerticalAutoSize()) starling_text_TextField.sNativeTextField.set_height(height = Math.ceil(textHeight + 4));
		if(width < 1) width = 1.0;
		if(height < 1) height = 1.0;
		var textOffsetX = 0.0;
		if(hAlign == "left") textOffsetX = 2; else if(hAlign == "center") textOffsetX = (width - textWidth) / 2.0; else if(hAlign == "right") textOffsetX = width - textWidth - 2;
		var textOffsetY = 0.0;
		if(vAlign == "top") textOffsetY = 2; else if(vAlign == "center") textOffsetY = (height - textHeight) / 2.0; else if(vAlign == "bottom") textOffsetY = height - textHeight - 2;
		var filterOffset = this.calculateFilterOffset(starling_text_TextField.sNativeTextField,hAlign,vAlign);
		var bitmapData = new openfl_display_BitmapData(width | 0,height | 0,true,0);
		var drawMatrix = new openfl_geom_Matrix(1,0,0,1,filterOffset.x,filterOffset.y + (textOffsetY | 0) - 2);
		bitmapData.drawWithQuality(starling_text_TextField.sNativeTextField,drawMatrix,null,null,null,false,3);
		starling_text_TextField.sNativeTextField.set_text("");
		resultTextBounds.setTo((textOffsetX + filterOffset.x) / scale,(textOffsetY + filterOffset.y) / scale,textWidth / scale,textHeight / scale);
		return bitmapData;
	}
	,autoScaleNativeTextField: function(textField) {
		var size = Std["int"](textField.get_defaultTextFormat().size);
		var maxHeight = Std["int"](textField.get_height() - 4);
		var maxWidth = Std["int"](textField.get_width() - 4);
		while(textField.get_textWidth() > maxWidth || textField.get_textHeight() > maxHeight) {
			if(size <= 4) break;
			var format = textField.get_defaultTextFormat();
			format.size = size--;
			textField.set_defaultTextFormat(format);
			if(this.mIsHtmlText) textField.set_htmlText(this.mText); else textField.set_text(this.mText);
		}
	}
	,calculateFilterOffset: function(textField,hAlign,vAlign) {
		var resultOffset = new openfl_geom_Point();
		var filters = textField.get_filters();
		if(filters != null && filters.length > 0) {
			var textWidth = textField.get_textWidth();
			var textHeight = textField.get_textHeight();
			var bounds = new openfl_geom_Rectangle();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				var blurX = 0;
				var blurY = 0;
				var angleDeg = 0;
				var distance = 0;
				if(js_Boot.__instanceof(filter,openfl_filters_BlurFilter)) {
					var f = filter;
					blurX = f.blurX;
					blurY = f.blurY;
				} else if(js_Boot.__instanceof(filter,openfl_filters_DropShadowFilter)) {
					var f1 = filter;
					blurX = f1.blurX;
					blurY = f1.blurY;
				}
				var angle = starling_utils_MathUtil.deg2rad(angleDeg);
				var marginX = blurX * 1.33;
				var marginY = blurY * 1.33;
				var offsetX = Math.cos(angle) * distance - marginX / 2.0;
				var offsetY = Math.sin(angle) * distance - marginY / 2.0;
				var filterBounds = new openfl_geom_Rectangle(offsetX,offsetY,textWidth + marginX,textHeight + marginY);
				bounds = bounds.union(filterBounds);
			}
			if(hAlign == "left" && bounds.x < 0) resultOffset.x = -bounds.x; else if(hAlign == "right" && bounds.y > 0) resultOffset.x = -(bounds.get_right() - textWidth);
			if(vAlign == "top" && bounds.y < 0) resultOffset.y = -bounds.y; else if(vAlign == "bottom" && bounds.y > 0) resultOffset.y = -(bounds.get_bottom() - textHeight);
		}
		return resultOffset;
	}
	,createComposedContents: function() {
		if(this.mImage != null) {
			this.mImage.removeFromParent(true);
			this.mImage.get_texture().dispose();
			this.mImage = null;
		}
		if(this.mQuadBatch == null) {
			this.mQuadBatch = new starling_display_QuadBatch();
			this.mQuadBatch.set_touchable(false);
			this.addChild(this.mQuadBatch);
		} else this.mQuadBatch.reset();
		var bitmapFont = starling_text_TextField.getBitmapFont(this.mFontName);
		if(bitmapFont == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("Bitmap font not registered: " + this.mFontName));
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = 2147483647;
			hAlign = "left";
		}
		if(this.get_isVerticalAutoSize()) {
			height = 2147483647;
			vAlign = "top";
		}
		bitmapFont.fillQuadBatch(this.mQuadBatch,width,height,this.mText,this.mFontSize,this.mColor,hAlign,vAlign,this.mAutoScale,this.mKerning,this.mLeading);
		this.mQuadBatch.set_batchable(this.mBatchable);
		if(this.mAutoSize != "none") {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch,this.mTextBounds);
			if(this.get_isHorizontalAutoSize()) this.mHitArea.width = this.mTextBounds.x + this.mTextBounds.width;
			if(this.get_isVerticalAutoSize()) this.mHitArea.height = this.mTextBounds.y + this.mTextBounds.height;
		} else this.mTextBounds = null;
	}
	,updateBorder: function() {
		if(this.mBorder == null) return;
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var topLine;
		topLine = js_Boot.__cast(this.mBorder.getChildAt(0) , starling_display_Quad);
		var rightLine;
		rightLine = js_Boot.__cast(this.mBorder.getChildAt(1) , starling_display_Quad);
		var bottomLine;
		bottomLine = js_Boot.__cast(this.mBorder.getChildAt(2) , starling_display_Quad);
		var leftLine;
		leftLine = js_Boot.__cast(this.mBorder.getChildAt(3) , starling_display_Quad);
		topLine.set_width(width);
		topLine.set_height(1);
		bottomLine.set_width(width);
		bottomLine.set_height(1);
		leftLine.set_width(1);
		leftLine.set_height(height);
		rightLine.set_width(1);
		rightLine.set_height(height);
		rightLine.set_x(width - 1);
		bottomLine.set_y(height - 1);
		topLine.set_color(rightLine.set_color(bottomLine.set_color(leftLine.set_color(this.mColor))));
	}
	,get_isHorizontalAutoSize: function() {
		return this.mAutoSize == "horizontal" || this.mAutoSize == "bothDirections";
	}
	,get_isVerticalAutoSize: function() {
		return this.mAutoSize == "vertical" || this.mAutoSize == "bothDirections";
	}
	,get_textBounds: function() {
		if(this.mRequiresRedraw) this.redraw();
		if(this.mTextBounds == null) this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch);
		return this.mTextBounds.clone();
	}
	,getBounds: function(targetSpace,resultRect) {
		if(this.mRequiresRedraw) this.redraw();
		this.getTransformationMatrix(targetSpace,starling_text_TextField.sHelperMatrix);
		return starling_utils_RectangleUtil.getBounds(this.mHitArea,starling_text_TextField.sHelperMatrix,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null; else if(this.mHitArea.containsPoint(localPoint) && this.hitTestMask(localPoint)) return this; else return null;
	}
	,set_width: function(value) {
		this.mHitArea.width = value;
		this.mRequiresRedraw = true;
		return starling_display_DisplayObjectContainer.prototype.get_width.call(this);
	}
	,set_height: function(value) {
		this.mHitArea.height = value;
		this.mRequiresRedraw = true;
		return starling_display_DisplayObjectContainer.prototype.get_height.call(this);
	}
	,get_text: function() {
		return this.mText;
	}
	,set_text: function(value) {
		if(value == null) value = "";
		if(this.mText != value) {
			this.mText = value;
			this.mRequiresRedraw = true;
		}
		return this.mText;
	}
	,get_fontName: function() {
		return this.mFontName;
	}
	,set_fontName: function(value) {
		if(this.mFontName != value) {
			if(value == "mini" && (function($this) {
				var $r;
				var this1 = starling_text_TextField.get_bitmapFonts();
				$r = this1.get(value);
				return $r;
			}(this)) == null) starling_text_TextField.registerBitmapFont(new starling_text_BitmapFont());
			this.mFontName = value;
			this.mRequiresRedraw = true;
		}
		return this.mFontName;
	}
	,get_fontSize: function() {
		return this.mFontSize;
	}
	,set_fontSize: function(value) {
		if(this.mFontSize != value) {
			this.mFontSize = value;
			this.mRequiresRedraw = true;
		}
		return this.mFontSize;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		if(this.mColor != value) {
			this.mColor = value;
			this.mRequiresRedraw = true;
		}
		return this.mColor;
	}
	,get_hAlign: function() {
		return this.mHAlign;
	}
	,set_hAlign: function(value) {
		if(!starling_utils_HAlign.isValid(value)) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid horizontal align: " + value));
		if(this.mHAlign != value) {
			this.mHAlign = value;
			this.mRequiresRedraw = true;
		}
		return this.mHAlign;
	}
	,get_vAlign: function() {
		return this.mVAlign;
	}
	,set_vAlign: function(value) {
		if(!starling_utils_VAlign.isValid(value)) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid vertical align: " + value));
		if(this.mVAlign != value) {
			this.mVAlign = value;
			this.mRequiresRedraw = true;
		}
		return this.mVAlign;
	}
	,get_border: function() {
		return this.mBorder != null;
	}
	,set_border: function(value) {
		if(value && this.mBorder == null) {
			this.mBorder = new starling_display_Sprite();
			this.addChild(this.mBorder);
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.mBorder.addChild(new starling_display_Quad(1.0,1.0));
			}
			this.updateBorder();
		} else if(!value && this.mBorder != null) {
			this.mBorder.removeFromParent(true);
			this.mBorder = null;
		}
		return this.mBorder != null;
	}
	,get_bold: function() {
		return this.mBold;
	}
	,set_bold: function(value) {
		if(this.mBold != value) {
			this.mBold = value;
			this.mRequiresRedraw = true;
		}
		return this.mBold;
	}
	,get_italic: function() {
		return this.mItalic;
	}
	,set_italic: function(value) {
		if(this.mItalic != value) {
			this.mItalic = value;
			this.mRequiresRedraw = true;
		}
		return this.mItalic;
	}
	,get_underline: function() {
		return this.mUnderline;
	}
	,set_underline: function(value) {
		if(this.mUnderline != value) {
			this.mUnderline = value;
			this.mRequiresRedraw = true;
		}
		return this.mUnderline;
	}
	,get_kerning: function() {
		return this.mKerning;
	}
	,set_kerning: function(value) {
		if(this.mKerning != value) {
			this.mKerning = value;
			this.mRequiresRedraw = true;
		}
		return this.mKerning;
	}
	,get_autoScale: function() {
		return this.mAutoScale;
	}
	,set_autoScale: function(value) {
		if(this.mAutoScale != value) {
			this.mAutoScale = value;
			this.mRequiresRedraw = true;
		}
		return this.mAutoScale;
	}
	,get_autoSize: function() {
		return this.mAutoSize;
	}
	,set_autoSize: function(value) {
		if(this.mAutoSize != value) {
			this.mAutoSize = value;
			this.mRequiresRedraw = true;
		}
		return this.get_autoSize();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		if(this.mQuadBatch != null) this.mQuadBatch.set_batchable(value);
		return this.mBatchable;
	}
	,get_nativeFilters: function() {
		return this.mNativeFilters;
	}
	,set_nativeFilters: function(value) {
		this.mNativeFilters = value.slice();
		this.mRequiresRedraw = true;
		return this.mNativeFilters;
	}
	,get_isHtmlText: function() {
		return this.mIsHtmlText;
	}
	,set_isHtmlText: function(value) {
		if(this.mIsHtmlText != value) {
			this.mIsHtmlText = value;
			this.mRequiresRedraw = true;
		}
		return this.mIsHtmlText;
	}
	,get_leading: function() {
		return this.mLeading;
	}
	,set_leading: function(value) {
		if(this.mLeading != value) {
			this.mLeading = value;
			this.mRequiresRedraw = true;
		}
		return this.mLeading;
	}
	,__class__: starling_text_TextField
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_leading:"set_leading",get_leading:"get_leading",set_isHtmlText:"set_isHtmlText",get_isHtmlText:"get_isHtmlText",set_nativeFilters:"set_nativeFilters",get_nativeFilters:"get_nativeFilters",set_batchable:"set_batchable",get_batchable:"get_batchable",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_autoScale:"set_autoScale",get_autoScale:"get_autoScale",set_kerning:"set_kerning",get_kerning:"get_kerning",set_underline:"set_underline",get_underline:"get_underline",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_border:"set_border",get_border:"get_border",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_color:"set_color",get_color:"get_color",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",get_textBounds:"get_textBounds",get_isVerticalAutoSize:"get_isVerticalAutoSize",get_isHorizontalAutoSize:"get_isHorizontalAutoSize"})
});
var starling_text_TextFieldAutoSize = function() { };
$hxClasses["starling.text.TextFieldAutoSize"] = starling_text_TextFieldAutoSize;
starling_text_TextFieldAutoSize.__name__ = ["starling","text","TextFieldAutoSize"];
var starling_textures_AtfData = function(data) {
	if(!starling_textures_AtfData.isAtfData(data)) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid ATF data"));
	if(data.b[6] == 255) data.position = 12; else data.position = 6;
	var format = data.readUnsignedByte();
	var _g = format & 127;
	switch(_g) {
	case 0:case 1:
		this.mFormat = 1;
		break;
	case 12:case 2:case 3:
		this.mFormat = 3;
		break;
	case 13:case 4:case 5:
		this.mFormat = 4;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid ATF format"));
	}
	this.mWidth = Std["int"](Math.pow(2,data.readUnsignedByte()));
	this.mHeight = Std["int"](Math.pow(2,data.readUnsignedByte()));
	this.mNumTextures = data.readUnsignedByte();
	this.mIsCubeMap = (format & 128) != 0;
	this.mData = data;
	if(data.b[5] != 0 && data.b[6] == 255) {
		var emptyMipmaps = (data.b[5] & 1) == 1;
		var numTextures = data.b[5] >> 1 & 127;
		if(emptyMipmaps) this.mNumTextures = 1; else this.mNumTextures = numTextures;
	}
};
$hxClasses["starling.textures.AtfData"] = starling_textures_AtfData;
starling_textures_AtfData.__name__ = ["starling","textures","AtfData"];
starling_textures_AtfData.isAtfData = function(data) {
	if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) < 3) return false; else {
		var signature = "";
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			signature += String.fromCharCode(data.b[i]);
		}
		return signature == "ATF";
	}
};
starling_textures_AtfData.prototype = {
	mFormat: null
	,mWidth: null
	,mHeight: null
	,mNumTextures: null
	,mIsCubeMap: null
	,mData: null
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_numTextures: function() {
		return this.mNumTextures;
	}
	,get_isCubeMap: function() {
		return this.mIsCubeMap;
	}
	,get_data: function() {
		return this.mData;
	}
	,__class__: starling_textures_AtfData
	,__properties__: {get_data:"get_data",get_isCubeMap:"get_isCubeMap",get_numTextures:"get_numTextures",get_height:"get_height",get_width:"get_width",get_format:"get_format"}
};
var starling_textures_Texture = function() {
};
$hxClasses["starling.textures.Texture"] = starling_textures_Texture;
starling_textures_Texture.__name__ = ["starling","textures","Texture"];
starling_textures_Texture.__properties__ = {get_maxSize:"get_maxSize"}
starling_textures_Texture.fromData = function(data,options) {
	var texture = null;
	if(js_Boot.__instanceof(data,openfl_display_Bitmap)) data = (js_Boot.__cast(data , openfl_display_Bitmap)).bitmapData;
	if(options == null) options = new starling_textures_TextureOptions();
	if(js_Boot.__instanceof(data,Class)) texture = starling_textures_Texture.fromEmbeddedAsset(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat()); else if(js_Boot.__instanceof(data,openfl_display_BitmapData)) texture = starling_textures_Texture.fromBitmapData(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat()); else if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) texture = starling_textures_Texture.fromAtfData(data,options.get_scale(),options.get_mipMapping(),options.get_onReady(),options.get_repeat()); else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Unsupported 'data' type: " + Type.getClassName(data)));
	return texture;
};
starling_textures_Texture.fromEmbeddedAsset = function(assetClass,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(mipMapping == null) mipMapping = true;
	if(format == null) format = 1;
	var texture;
	var asset = Type.createEmptyInstance(assetClass);
	if(js_Boot.__instanceof(asset,openfl_display_Bitmap)) {
		texture = starling_textures_Texture.fromBitmap(asset,mipMapping,optimizeForRenderToTexture,scale,format,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadBitmap(Type.createInstance(assetClass,[]));
		});
	} else if(js_Boot.__instanceof(asset,openfl_utils_ByteArrayData)) {
		texture = starling_textures_Texture.fromAtfData(asset,scale,mipMapping,null,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadAtfData(Type.createInstance(assetClass,[]));
		});
	} else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid asset type: " + Type.getClassName(asset)));
	asset = null;
	return texture;
};
starling_textures_Texture.fromBitmap = function(bitmap,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(generateMipMaps == null) generateMipMaps = true;
	if(format == null) format = 1;
	return starling_textures_Texture.fromBitmapData(bitmap.bitmapData,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
};
starling_textures_Texture.fromBitmapData = function(data,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(generateMipMaps == null) generateMipMaps = true;
	if(format == null) format = 1;
	var texture = starling_textures_Texture.empty(data.width / scale,data.height / scale,true,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
	texture.get_root().uploadBitmapData(data);
	texture.get_root().set_onRestore(function() {
		texture.get_root().uploadBitmapData(data);
	});
	return texture;
};
starling_textures_Texture.fromAtfData = function(data,scale,useMipMaps,async,repeat) {
	if(repeat == null) repeat = false;
	if(useMipMaps == null) useMipMaps = true;
	if(scale == null) scale = 1;
	if(data == null) return null;
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	var atfData = new starling_textures_AtfData(data);
	var nativeTexture = context.createTexture(atfData.get_width(),atfData.get_height(),atfData.get_format(),false);
	var concreteTexture = new starling_textures_ConcreteTexture(nativeTexture,atfData.get_format(),atfData.get_width(),atfData.get_height(),useMipMaps && atfData.get_numTextures() > 1,false,false,scale,repeat);
	concreteTexture.uploadAtfData(data,0,async);
	concreteTexture.set_onRestore(function() {
		concreteTexture.uploadAtfData(data,0);
	});
	return concreteTexture;
};
starling_textures_Texture.fromNetStream = function(stream,scale,onComplete) {
	if(scale == null) scale = 1;
	if(stream.client == stream && !Object.prototype.hasOwnProperty.call(stream,"onMetaData")) stream.client = { onMetaData : function(md) {
	}};
	return starling_textures_Texture.fromVideoAttachment("NetStream",stream,scale,onComplete);
};
starling_textures_Texture.fromVideoAttachment = function(type,attachment,scale,onComplete) {
	var TEXTURE_READY = "textureReady";
	if(!starling_utils_SystemUtil.get_supportsVideoTexture()) throw new js__$Boot_HaxeError(new starling_errors_NotSupportedError("Video Textures are not supported on this platform"));
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	var texture = null;
	var base = Reflect.callMethod(context,Reflect.getProperty(context,"createVideoTexture"),[]);
	Reflect.callMethod(base,Reflect.getProperty(base,"attach" + type),[attachment]);
	base.addEventListener(TEXTURE_READY,(function($this) {
		var $r;
		var onTextureReady = function(event) {
			if(onComplete != null) onComplete(texture);
		};
		$r = onTextureReady;
		return $r;
	}(this)));
	texture = new starling_textures_ConcreteVideoTexture(base,scale);
	texture.set_onRestore(function() {
		texture.get_root().attachVideo(type,attachment);
	});
	return texture;
};
starling_textures_Texture.fromColor = function(width,height,color,optimizeForRenderToTexture,scale,format) {
	if(scale == null) scale = -1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(color == null) color = -1;
	if(format == null) format = 1;
	var texture = starling_textures_Texture.empty(width,height,true,false,optimizeForRenderToTexture,scale,format);
	texture.get_root().clear(color,starling_utils_Color.getAlpha(color) / 255.0);
	texture.get_root().set_onRestore(function() {
		texture.get_root().clear(color,starling_utils_Color.getAlpha(color) / 255.0);
	});
	return texture;
};
starling_textures_Texture.empty = function(width,height,premultipliedAlpha,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = -1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(mipMapping == null) mipMapping = true;
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(scale <= 0) scale = starling_core_Starling.get_current().get_contentScaleFactor();
	if(format == null) format = 1;
	var actualWidth;
	var actualHeight;
	var nativeTexture;
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	var origWidth = width * scale;
	var origHeight = height * scale;
	var useRectTexture = !mipMapping && !repeat && starling_core_Starling.get_current().get_profile() != 1 && format != 3;
	if(useRectTexture) {
		actualWidth = Math.ceil(origWidth - 0.000000001);
		actualHeight = Math.ceil(origHeight - 0.000000001);
		nativeTexture = context.createRectangleTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	} else {
		actualWidth = starling_utils_PowerOfTwo.getNextPowerOfTwo(origWidth | 0);
		actualHeight = starling_utils_PowerOfTwo.getNextPowerOfTwo(origHeight | 0);
		nativeTexture = context.createTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	}
	var concreteTexture = new starling_textures_ConcreteTexture(nativeTexture,format,actualWidth,actualHeight,mipMapping,premultipliedAlpha,optimizeForRenderToTexture,scale,repeat);
	concreteTexture.set_onRestore($bind(concreteTexture,concreteTexture.clear));
	if(actualWidth - origWidth < 0.001 && actualHeight - origHeight < 0.001) return concreteTexture; else return new starling_textures_SubTexture(concreteTexture,new openfl_geom_Rectangle(0,0,width,height),true);
};
starling_textures_Texture.fromTexture = function(texture,region,frame,rotated) {
	if(rotated == null) rotated = false;
	return new starling_textures_SubTexture(texture,region,false,frame,rotated);
};
starling_textures_Texture.get_maxSize = function() {
	var target = starling_core_Starling.get_current();
	var profile;
	if(target != null) profile = target.get_profile(); else profile = 0;
	if(profile == 0 || profile == 1) return 2048; else return 4096;
};
starling_textures_Texture.prototype = {
	dispose: function() {
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) count = -1;
		if(stride == null) stride = 0;
		if(startIndex == null) startIndex = 0;
	}
	,get_frame: function() {
		return null;
	}
	,get_repeat: function() {
		return false;
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_nativeWidth: function() {
		return 0;
	}
	,get_nativeHeight: function() {
		return 0;
	}
	,get_scale: function() {
		return 1.0;
	}
	,get_base: function() {
		return null;
	}
	,get_root: function() {
		return null;
	}
	,get_format: function() {
		return 1;
	}
	,get_mipMapping: function() {
		return false;
	}
	,get_premultipliedAlpha: function() {
		return false;
	}
	,__class__: starling_textures_Texture
	,__properties__: {get_premultipliedAlpha:"get_premultipliedAlpha",get_mipMapping:"get_mipMapping",get_format:"get_format",get_root:"get_root",get_base:"get_base",get_scale:"get_scale",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_height:"get_height",get_width:"get_width",get_repeat:"get_repeat",get_frame:"get_frame"}
};
var starling_textures_ConcreteTexture = function(base,format,width,height,mipMapping,premultipliedAlpha,optimizedForRenderTexture,scale,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizedForRenderTexture == null) optimizedForRenderTexture = false;
	starling_textures_Texture.call(this);
	if(scale <= 0) this.mScale = 1.0; else this.mScale = scale;
	this.mBase = base;
	this.mFormat = format;
	this.mWidth = width;
	this.mHeight = height;
	this.mMipMapping = mipMapping;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mOptimizedForRenderTexture = optimizedForRenderTexture;
	this.mRepeat = repeat;
	this.mOnRestore = null;
	this.mDataUploaded = false;
	this.mTextureReadyCallback = null;
};
$hxClasses["starling.textures.ConcreteTexture"] = starling_textures_ConcreteTexture;
starling_textures_ConcreteTexture.__name__ = ["starling","textures","ConcreteTexture"];
starling_textures_ConcreteTexture.__super__ = starling_textures_Texture;
starling_textures_ConcreteTexture.prototype = $extend(starling_textures_Texture.prototype,{
	mBase: null
	,mFormat: null
	,mWidth: null
	,mHeight: null
	,mMipMapping: null
	,mPremultipliedAlpha: null
	,mOptimizedForRenderTexture: null
	,mScale: null
	,mRepeat: null
	,mOnRestore: null
	,mDataUploaded: null
	,mTextureReadyCallback: null
	,dispose: function() {
		if(this.mBase != null) {
			this.mBase.removeEventListener("textureReady",$bind(this,this.onTextureReady));
			this.mBase.dispose();
		}
		this.set_onRestore(null);
		starling_textures_Texture.prototype.dispose.call(this);
	}
	,uploadBitmap: function(bitmap) {
		this.uploadBitmapData(bitmap.bitmapData);
	}
	,uploadBitmapData: function(data) {
		var potData = null;
		if(data.width != this.mWidth || data.height != this.mHeight) {
			potData = new openfl_display_BitmapData(this.mWidth,this.mHeight,true,0);
			potData.copyPixels(data,data.rect,starling_textures_ConcreteTexture.sOrigin);
			data = potData;
		}
		if(js_Boot.__instanceof(this.mBase,openfl_display3D_textures_Texture)) {
			var potTexture = this.mBase;
			potTexture.uploadFromBitmapData(data);
			if(this.mMipMapping && data.width > 1 && data.height > 1) {
				var currentWidth = data.width >> 1;
				var currentHeight = data.height >> 1;
				var level = 1;
				var canvas = new openfl_display_BitmapData(currentWidth,currentHeight,true,0);
				var transform = new openfl_geom_Matrix(.5,0,0,.5);
				var bounds = new openfl_geom_Rectangle();
				while(currentWidth >= 1 || currentHeight >= 1) {
					bounds.width = currentWidth;
					bounds.height = currentHeight;
					canvas.fillRect(bounds,0);
					canvas.draw(data,transform,null,null,null,true);
					potTexture.uploadFromBitmapData(canvas,level++);
					transform.scale(0.5,0.5);
					currentWidth = currentWidth >> 1;
					currentHeight = currentHeight >> 1;
				}
				canvas.dispose();
			}
		} else if(js_Boot.__instanceof(this.mBase,openfl_display3D_textures_RectangleTexture)) {
			var baseTexture = this.mBase;
			baseTexture.uploadFromBitmapData(data);
		}
		if(potData != null) potData.dispose();
		this.mDataUploaded = true;
	}
	,uploadAtfData: function(data,offset,async) {
		if(offset == null) offset = 0;
		var isAsync = Reflect.isFunction(async) || async == true;
		var potTexture;
		if(js_Boot.__instanceof(this.mBase,openfl_display3D_textures_Texture)) potTexture = this.mBase; else potTexture = null;
		if(potTexture == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("This texture type does not support ATF data"));
		if(Reflect.isFunction(async)) {
			this.mTextureReadyCallback = async;
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
		}
		potTexture.uploadCompressedTextureFromByteArray(data,offset,isAsync);
		this.mDataUploaded = true;
	}
	,attachNetStream: function(netStream,onComplete) {
		this.attachVideo("NetStream",netStream,onComplete);
	}
	,attachVideo: function(type,attachment,onComplete) {
		var className = Type.getClassName(Type.getClass(this.mBase));
		if(className == "flash.display3D.textures.VideoTexture") {
			this.mDataUploaded = true;
			this.mTextureReadyCallback = onComplete;
			Reflect.callMethod(this.mBase,Reflect.getProperty(this.mBase,"attach" + type),attachment);
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
		} else throw new js__$Boot_HaxeError(new openfl_errors_Error("This texture type does not support " + type + " data"));
	}
	,onTextureReady: function(event) {
		this.mBase.removeEventListener("textureReady",$bind(this,this.onTextureReady));
		if(this.mTextureReadyCallback != null) this.mTextureReadyCallback(this);
		this.mTextureReadyCallback = null;
	}
	,onContextCreated: function() {
		this.createBase();
		if(this.mOnRestore != null) this.mOnRestore();
		if(!this.mDataUploaded) this.clear();
	}
	,createBase: function() {
		var context = starling_core_Starling.get_current().get_context();
		var classType = Type.getClass(this.mBase);
		if(js_Boot.__instanceof(classType,openfl_display3D_textures_Texture)) this.mBase = context.createTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture); else if(js_Boot.__instanceof(classType,openfl_display3D_textures_RectangleTexture)) this.mBase = context.createRectangleTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture); else throw new js__$Boot_HaxeError(new starling_errors_NotSupportedError("Texture type not supported: " + Type.getClassName(classType)));
		this.mDataUploaded = false;
	}
	,clear: function(color,alpha) {
		if(alpha == null) alpha = 0.0;
		if(color == null) color = 0;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		if(this.mPremultipliedAlpha && alpha < 1.0) color = starling_utils_Color.rgb(Std["int"](starling_utils_Color.getRed(color) * alpha),Std["int"](starling_utils_Color.getGreen(color) * alpha),Std["int"](starling_utils_Color.getBlue(color) * alpha));
		context.setRenderToTexture(this.mBase);
		try {
			starling_core_RenderSupport._clear(color,alpha);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			} else throw(e);
		}
		context.setRenderToBackBuffer();
		this.mDataUploaded = true;
	}
	,get_optimizedForRenderTexture: function() {
		return this.mOptimizedForRenderTexture;
	}
	,get_onRestore: function() {
		return this.mOnRestore;
	}
	,set_onRestore: function(value) {
		starling_core_Starling.get_current().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(starling_core_Starling.get_handleLostContext() && value != null) {
			this.mOnRestore = value;
			starling_core_Starling.get_current().addEventListener("context3DCreate",$bind(this,this.onContextCreated));
		} else this.mOnRestore = null;
		return this.mOnRestore;
	}
	,get_base: function() {
		return this.mBase;
	}
	,get_root: function() {
		return this;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth / this.mScale;
	}
	,get_height: function() {
		return this.mHeight / this.mScale;
	}
	,get_nativeWidth: function() {
		return this.mWidth;
	}
	,get_nativeHeight: function() {
		return this.mHeight;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,__class__: starling_textures_ConcreteTexture
	,__properties__: $extend(starling_textures_Texture.prototype.__properties__,{set_onRestore:"set_onRestore",get_onRestore:"get_onRestore",get_optimizedForRenderTexture:"get_optimizedForRenderTexture"})
});
var starling_textures_ConcreteVideoTexture = function(base,scale) {
	if(scale == null) scale = 1;
	var format = 1;
	var width = Reflect.getProperty(base,"videoWidth");
	var height = Reflect.getProperty(base,"videoHeight");
	if(width == null) width = 0;
	if(height == null) height = 0;
	starling_textures_ConcreteTexture.call(this,base,format,width,height,false,false,false,scale,false);
};
$hxClasses["starling.textures.ConcreteVideoTexture"] = starling_textures_ConcreteVideoTexture;
starling_textures_ConcreteVideoTexture.__name__ = ["starling","textures","ConcreteVideoTexture"];
starling_textures_ConcreteVideoTexture.__super__ = starling_textures_ConcreteTexture;
starling_textures_ConcreteVideoTexture.prototype = $extend(starling_textures_ConcreteTexture.prototype,{
	get_nativeWidth: function() {
		return Reflect.getProperty(this.get_base(),"videoWidth");
	}
	,get_nativeHeight: function() {
		return Reflect.getProperty(this.get_base(),"videoHeight");
	}
	,get_width: function() {
		return this.get_nativeWidth() / this.get_scale();
	}
	,get_height: function() {
		return this.get_nativeHeight() / this.get_scale();
	}
	,__class__: starling_textures_ConcreteVideoTexture
});
var starling_textures_SubTexture = function(parent,region,ownsParent,frame,rotated) {
	if(rotated == null) rotated = false;
	if(ownsParent == null) ownsParent = false;
	starling_textures_Texture.call(this);
	this.mParent = parent;
	if(region != null) this.mRegion = region.clone(); else this.mRegion = new openfl_geom_Rectangle(0,0,parent.get_width(),parent.get_height());
	if(frame != null) this.mFrame = frame.clone(); else this.mFrame = null;
	this.mOwnsParent = ownsParent;
	this.mRotated = rotated;
	if(rotated) this.mWidth = this.mRegion.height; else this.mWidth = this.mRegion.width;
	if(rotated) this.mHeight = this.mRegion.width; else this.mHeight = this.mRegion.height;
	this.mTransformationMatrix = new openfl_geom_Matrix();
	if(rotated) {
		this.mTransformationMatrix.translate(0,-1);
		this.mTransformationMatrix.rotate(Math.PI / 2.0);
	}
	if(this.mFrame != null && (this.mFrame.x > 0 || this.mFrame.y > 0 || this.mFrame.get_right() < this.mWidth || this.mFrame.get_bottom() < this.mHeight)) haxe_Log.trace("[Starling] Warning: frames inside the texture's region are unsupported.",{ fileName : "SubTexture.hx", lineNumber : 84, className : "starling.textures.SubTexture", methodName : "new"});
	this.mTransformationMatrix.scale(this.mRegion.width / this.mParent.get_width(),this.mRegion.height / this.mParent.get_height());
	this.mTransformationMatrix.translate(this.mRegion.x / this.mParent.get_width(),this.mRegion.y / this.mParent.get_height());
};
$hxClasses["starling.textures.SubTexture"] = starling_textures_SubTexture;
starling_textures_SubTexture.__name__ = ["starling","textures","SubTexture"];
starling_textures_SubTexture.__super__ = starling_textures_Texture;
starling_textures_SubTexture.prototype = $extend(starling_textures_Texture.prototype,{
	mParent: null
	,mOwnsParent: null
	,mRegion: null
	,mFrame: null
	,mRotated: null
	,mWidth: null
	,mHeight: null
	,mTransformationMatrix: null
	,dispose: function() {
		if(this.mOwnsParent) this.mParent.dispose();
		starling_textures_Texture.prototype.dispose.call(this);
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
		var startIndex = vertexID * 8 + 6;
		var stride = 6;
		this.adjustTexCoords(vertexData.get_rawData(),startIndex,stride,count);
		if(this.mFrame != null) {
			if(count != 4) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Textures with a frame can only be used on quads"));
			var deltaRight = this.mFrame.width + this.mFrame.x - this.mWidth;
			var deltaBottom = this.mFrame.height + this.mFrame.y - this.mHeight;
			vertexData.translateVertex(vertexID,-this.mFrame.x,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 1,-deltaRight,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 2,-this.mFrame.x,-deltaBottom);
			vertexData.translateVertex(vertexID + 3,-deltaRight,-deltaBottom);
		}
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) count = -1;
		if(stride == null) stride = 0;
		if(startIndex == null) startIndex = 0;
		if(count < 0) count = Std["int"]((texCoords.data.get_length() - startIndex - 2) / (stride + 2) + 1);
		var endIndex = startIndex + count * (2 + stride);
		var texture = this;
		var u;
		var v;
		starling_textures_SubTexture.sMatrix.identity();
		while(texture != null) {
			starling_textures_SubTexture.sMatrix.concat(texture.mTransformationMatrix);
			if(Std["is"](texture.get_parent(),starling_textures_SubTexture)) texture = texture.get_parent(); else texture = null;
		}
		var i = startIndex;
		while(i < endIndex) {
			u = texCoords.data.get(i);
			v = texCoords.data.get(i + 1);
			starling_utils_MatrixUtil.transformCoords(starling_textures_SubTexture.sMatrix,u,v,starling_textures_SubTexture.sTexCoords);
			texCoords.data.set(i,starling_textures_SubTexture.sTexCoords.x);
			texCoords.data.set(i + 1,starling_textures_SubTexture.sTexCoords.y);
			i += 2 + stride;
		}
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_ownsParent: function() {
		return this.mOwnsParent;
	}
	,get_rotated: function() {
		return this.mRotated;
	}
	,get_region: function() {
		return this.mRegion;
	}
	,get_clipping: function() {
		var topLeft = new openfl_geom_Point();
		var bottomRight = new openfl_geom_Point();
		starling_utils_MatrixUtil.transformCoords(this.mTransformationMatrix,0.0,0.0,topLeft);
		starling_utils_MatrixUtil.transformCoords(this.mTransformationMatrix,1.0,1.0,bottomRight);
		var clipping = new openfl_geom_Rectangle(topLeft.x,topLeft.y,bottomRight.x - topLeft.x,bottomRight.y - topLeft.y);
		starling_utils_RectangleUtil.normalize(clipping);
		return clipping;
	}
	,get_transformationMatrix: function() {
		return this.mTransformationMatrix;
	}
	,get_base: function() {
		return this.mParent.get_base();
	}
	,get_root: function() {
		return this.mParent.get_root();
	}
	,get_format: function() {
		return this.mParent.get_format();
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_nativeWidth: function() {
		return this.mWidth * this.get_scale();
	}
	,get_nativeHeight: function() {
		return this.mHeight * this.get_scale();
	}
	,get_mipMapping: function() {
		return this.mParent.get_mipMapping();
	}
	,get_premultipliedAlpha: function() {
		return this.mParent.get_premultipliedAlpha();
	}
	,get_scale: function() {
		return this.mParent.get_scale();
	}
	,get_repeat: function() {
		return this.mParent.get_repeat();
	}
	,get_frame: function() {
		return this.mFrame;
	}
	,__class__: starling_textures_SubTexture
	,__properties__: $extend(starling_textures_Texture.prototype.__properties__,{get_transformationMatrix:"get_transformationMatrix",get_clipping:"get_clipping",get_region:"get_region",get_rotated:"get_rotated",get_ownsParent:"get_ownsParent",get_parent:"get_parent"})
});
var starling_textures_RenderTexture = function(width,height,persistent,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = -1;
	if(persistent == null) persistent = true;
	if(format == null) format = 1;
	if(scale <= 0) scale = starling_core_Starling.get_current().get_contentScaleFactor();
	var legalWidth = width;
	var legalHeight = height;
	if(!this.get_supportsNonPotDimensions()) {
		legalWidth = starling_utils_PowerOfTwo.getNextPowerOfTwo(width * scale | 0) / scale;
		legalHeight = starling_utils_PowerOfTwo.getNextPowerOfTwo(height * scale | 0) / scale;
	}
	this.mActiveTexture = starling_textures_Texture.empty(legalWidth,legalHeight,true,false,true,scale,format,repeat);
	this.mActiveTexture.get_root().set_onRestore(($_=this.mActiveTexture.get_root(),$bind($_,$_.clear)));
	starling_textures_SubTexture.call(this,this.mActiveTexture,new openfl_geom_Rectangle(0,0,width,height),true,null,false);
	var rootWidth = this.mActiveTexture.get_root().get_width();
	var rootHeight = this.mActiveTexture.get_root().get_height();
	this.mIsPersistent = persistent;
	this.mSupport = new starling_core_RenderSupport();
	this.mSupport.setProjectionMatrix(0,0,rootWidth,rootHeight,width,height);
	if(persistent && (!starling_textures_RenderTexture.optimizePersistentBuffers || !starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement())) {
		this.mBufferTexture = starling_textures_Texture.empty(legalWidth,legalHeight,true,false,true,scale,format,repeat);
		this.mBufferTexture.get_root().set_onRestore(($_=this.mBufferTexture.get_root(),$bind($_,$_.clear)));
		this.mHelperImage = new starling_display_Image(this.mBufferTexture);
		this.mHelperImage.set_smoothing("none");
	}
};
$hxClasses["starling.textures.RenderTexture"] = starling_textures_RenderTexture;
starling_textures_RenderTexture.__name__ = ["starling","textures","RenderTexture"];
starling_textures_RenderTexture.__super__ = starling_textures_SubTexture;
starling_textures_RenderTexture.prototype = $extend(starling_textures_SubTexture.prototype,{
	mActiveTexture: null
	,mBufferTexture: null
	,mHelperImage: null
	,mDrawing: null
	,mBufferReady: null
	,mIsPersistent: null
	,mSupport: null
	,dispose: function() {
		this.mSupport.dispose();
		this.mActiveTexture.dispose();
		if(this.get_isDoubleBuffered()) {
			this.mBufferTexture.dispose();
			this.mHelperImage.dispose();
		}
		starling_textures_SubTexture.prototype.dispose.call(this);
	}
	,draw: function(object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		if(alpha == null) alpha = 1.0;
		if(object == null) return;
		if(this.mDrawing) this.render(object,matrix,alpha); else this.renderBundled($bind(this,this.render),object,matrix,alpha,antiAliasing);
	}
	,drawBundled: function(drawingBlock,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		this.renderBundled(drawingBlock,null,null,1.0,antiAliasing);
	}
	,haxegonpreviousRenderTarget: null
	,bundlelock: function(antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		if(!starling_core_Starling.get_current().get_contextValid()) return;
		if(this.get_isDoubleBuffered()) {
			var tmpTexture = this.mActiveTexture;
			this.mActiveTexture = this.mBufferTexture;
			this.mBufferTexture = tmpTexture;
			this.mHelperImage.set_texture(this.mBufferTexture);
		}
		this.haxegonpreviousRenderTarget = this.mSupport.get_renderTarget();
		starling_textures_RenderTexture.sClipRect.setTo(0,0,this.mActiveTexture.get_width(),this.mActiveTexture.get_height());
		this.mSupport.pushClipRect(starling_textures_RenderTexture.sClipRect);
		this.mSupport.setRenderTarget(this.mActiveTexture,antiAliasing);
		if(this.get_isDoubleBuffered() || !this.get_isPersistent() || !this.mBufferReady) this.mSupport.clear();
		if(this.get_isDoubleBuffered() && this.mBufferReady) this.mHelperImage.render(this.mSupport,1.0); else this.mBufferReady = true;
		this.mDrawing = true;
	}
	,bundleunlock: function() {
		this.mDrawing = false;
		this.mSupport.finishQuadBatch();
		starling_core_Starling.get_current().mStoredDrawCount += this.mSupport.get_drawCount();
		this.mSupport.nextFrame();
		this.mSupport.set_renderTarget(this.haxegonpreviousRenderTarget);
		this.mSupport.popClipRect();
	}
	,render: function(object,matrix,alpha) {
		if(alpha == null) alpha = 1.0;
		var filter = object.get_filter();
		var mask = object.get_mask();
		this.mSupport.loadIdentity();
		this.mSupport.set_blendMode(object.get_blendMode() == "auto"?"normal":object.get_blendMode());
		if(matrix != null) this.mSupport.prependMatrix(matrix); else this.mSupport.transformMatrix(object);
		if(mask != null) this.mSupport.pushMask(mask);
		if(filter != null) filter.render(object,this.mSupport,alpha); else object.render(this.mSupport,alpha);
		if(mask != null) this.mSupport.popMask();
	}
	,renderBundled: function(renderBlock,object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		if(alpha == null) alpha = 1.0;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		if(!starling_core_Starling.get_current().get_contextValid()) return;
		if(this.get_isDoubleBuffered()) {
			var tmpTexture = this.mActiveTexture;
			this.mActiveTexture = this.mBufferTexture;
			this.mBufferTexture = tmpTexture;
			this.mHelperImage.set_texture(this.mBufferTexture);
		}
		var previousRenderTarget = this.mSupport.get_renderTarget();
		starling_textures_RenderTexture.sClipRect.setTo(0,0,this.mActiveTexture.get_width(),this.mActiveTexture.get_height());
		this.mSupport.pushClipRect(starling_textures_RenderTexture.sClipRect);
		this.mSupport.setRenderTarget(this.mActiveTexture,antiAliasing);
		if(this.get_isDoubleBuffered() || !this.get_isPersistent() || !this.mBufferReady) this.mSupport.clear();
		if(this.get_isDoubleBuffered() && this.mBufferReady) this.mHelperImage.render(this.mSupport,1.0); else this.mBufferReady = true;
		this.mDrawing = true;
		renderBlock(object,matrix,alpha);
		this.mDrawing = false;
		this.mSupport.finishQuadBatch();
		starling_core_Starling.get_current().mStoredDrawCount += this.mSupport.get_drawCount();
		this.mSupport.nextFrame();
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mSupport.popClipRect();
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) alpha = 0.0;
		if(rgb == null) rgb = 0;
		if(!starling_core_Starling.get_current().get_contextValid()) return;
		var previousRenderTarget = this.mSupport.get_renderTarget();
		this.mSupport.set_renderTarget(this.mActiveTexture);
		this.mSupport.clear(rgb,alpha);
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mBufferReady = true;
	}
	,get_supportsNonPotDimensions: function() {
		return true;
	}
	,get_isDoubleBuffered: function() {
		return this.mBufferTexture != null;
	}
	,get_isPersistent: function() {
		return this.mIsPersistent;
	}
	,get_base: function() {
		return this.mActiveTexture.get_base();
	}
	,get_root: function() {
		return this.mActiveTexture.get_root();
	}
	,__class__: starling_textures_RenderTexture
	,__properties__: $extend(starling_textures_SubTexture.prototype.__properties__,{get_isPersistent:"get_isPersistent",get_isDoubleBuffered:"get_isDoubleBuffered",get_supportsNonPotDimensions:"get_supportsNonPotDimensions"})
});
var starling_textures_TextureAtlas = function(texture,atlasXml) {
	this.mSubTextures = new haxe_ds_StringMap();
	this.mAtlasTexture = texture;
	if(atlasXml != null) this.parseAtlasXml(atlasXml);
};
$hxClasses["starling.textures.TextureAtlas"] = starling_textures_TextureAtlas;
starling_textures_TextureAtlas.__name__ = ["starling","textures","TextureAtlas"];
starling_textures_TextureAtlas.parseBool = function(value) {
	if(value != null) return value.toLowerCase() == "true"; else return false;
};
starling_textures_TextureAtlas.prototype = {
	mAtlasTexture: null
	,mSubTextures: null
	,mSubTextureNames: null
	,dispose: function() {
		this.mAtlasTexture.dispose();
	}
	,getXmlFloat: function(xml,attributeName) {
		var value = xml.get(attributeName);
		if(value != null) return parseFloat(value); else return 0;
	}
	,parseAtlasXml: function(atlasXml) {
		var scale = this.mAtlasTexture.get_scale();
		var region = new openfl_geom_Rectangle();
		var frame = new openfl_geom_Rectangle();
		var $it0 = atlasXml.elementsNamed("SubTexture");
		while( $it0.hasNext() ) {
			var subTexture = $it0.next();
			var name = subTexture.get("name");
			var x = this.getXmlFloat(subTexture,"x") / scale;
			var y = this.getXmlFloat(subTexture,"y") / scale;
			var width = this.getXmlFloat(subTexture,"width") / scale;
			var height = this.getXmlFloat(subTexture,"height") / scale;
			var frameX = this.getXmlFloat(subTexture,"frameX") / scale;
			var frameY = this.getXmlFloat(subTexture,"frameY") / scale;
			var frameWidth = this.getXmlFloat(subTexture,"frameWidth") / scale;
			var frameHeight = this.getXmlFloat(subTexture,"frameHeight") / scale;
			var rotated = starling_textures_TextureAtlas.parseBool(subTexture.get("rotated"));
			region.setTo(x,y,width,height);
			frame.setTo(frameX,frameY,frameWidth,frameHeight);
			if(frameWidth > 0 && frameHeight > 0) this.addRegion(name,region,frame,rotated); else this.addRegion(name,region,null,rotated);
		}
	}
	,getTexture: function(name) {
		return this.mSubTextures.get(name);
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var _g = 0;
		var _g1 = this.getNames(prefix,starling_textures_TextureAtlas.sNames);
		while(_g < _g1.data.get_length()) {
			var name = _g1.data.get(_g);
			++_g;
			var index = result.data.get_length();
			var value = this.getTexture(name);
			result.data.set(index,value);
		}
		starling_textures_TextureAtlas.sNames.data.set_length(0);
		return result;
	}
	,getNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		var name;
		if(result == null) result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		if(this.mSubTextureNames == null) {
			this.mSubTextureNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			var $it0 = this.mSubTextures.keys();
			while( $it0.hasNext() ) {
				var name1 = $it0.next();
				var index = this.mSubTextureNames.data.get_length();
				this.mSubTextureNames.data.set(index,name1);
			}
			this.mSubTextureNames.data.sort($bind(this,this.compare));
		}
		var _g = 0;
		var _g1 = this.mSubTextureNames;
		while(_g < _g1.data.get_length()) {
			var name2 = _g1.data.get(_g);
			++_g;
			if(name2.indexOf(prefix) == 0) {
				var index1 = result.data.get_length();
				result.data.set(index1,name2);
			}
		}
		return result;
	}
	,getRegion: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_region(); else return null;
	}
	,getFrame: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_frame(); else return null;
	}
	,getRotation: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_rotated(); else return false;
	}
	,addRegion: function(name,region,frame,rotated) {
		if(rotated == null) rotated = false;
		var v = new starling_textures_SubTexture(this.mAtlasTexture,region,false,frame,rotated);
		this.mSubTextures.set(name,v);
		v;
		this.mSubTextureNames = null;
	}
	,removeRegion: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) subTexture.dispose();
		this.mSubTextures.remove(name);
		this.mSubTextureNames = null;
	}
	,get_texture: function() {
		return this.mAtlasTexture;
	}
	,compare: function(a,b) {
		if(a < b) return -1; else if(a > b) return 1; else return 0;
	}
	,__class__: starling_textures_TextureAtlas
	,__properties__: {get_texture:"get_texture"}
};
var starling_textures_TextureOptions = function(scale,mipMapping,format,repeat) {
	if(repeat == null) repeat = false;
	if(mipMapping == null) mipMapping = false;
	if(scale == null) scale = 1.0;
	this.mRepeat = false;
	this.mOnReady = null;
	this.mOptimizeForRenderToTexture = false;
	if(format == null) format = 1;
	this.mScale = scale;
	this.mFormat = format;
	this.mMipMapping = mipMapping;
	this.mRepeat = repeat;
};
$hxClasses["starling.textures.TextureOptions"] = starling_textures_TextureOptions;
starling_textures_TextureOptions.__name__ = ["starling","textures","TextureOptions"];
starling_textures_TextureOptions.prototype = {
	mScale: null
	,mFormat: null
	,mMipMapping: null
	,mOptimizeForRenderToTexture: null
	,mOnReady: null
	,mRepeat: null
	,clone: function() {
		var clone = new starling_textures_TextureOptions(this.mScale,this.mMipMapping,this.mFormat,this.mRepeat);
		clone.mOptimizeForRenderToTexture = this.mOptimizeForRenderToTexture;
		clone.mOnReady = this.mOnReady;
		return clone;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,set_scale: function(value) {
		if(value > 0) this.mScale = value; else this.mScale = starling_core_Starling.get_current().get_contentScaleFactor();
		return this.mScale;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,set_format: function(value) {
		return this.mFormat = value;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,set_mipMapping: function(value) {
		return this.mMipMapping = value;
	}
	,get_optimizeForRenderToTexture: function() {
		return this.mOptimizeForRenderToTexture;
	}
	,set_optimizeForRenderToTexture: function(value) {
		return this.mOptimizeForRenderToTexture = value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		return this.mRepeat = value;
	}
	,get_onReady: function() {
		return this.mOnReady;
	}
	,set_onReady: function(value) {
		return this.mOnReady = value;
	}
	,__class__: starling_textures_TextureOptions
	,__properties__: {set_onReady:"set_onReady",get_onReady:"get_onReady",set_repeat:"set_repeat",get_repeat:"get_repeat",set_optimizeForRenderToTexture:"set_optimizeForRenderToTexture",get_optimizeForRenderToTexture:"get_optimizeForRenderToTexture",set_mipMapping:"set_mipMapping",get_mipMapping:"get_mipMapping",set_format:"set_format",get_format:"get_format",set_scale:"set_scale",get_scale:"get_scale"}
};
var starling_textures_TextureSmoothing = function() { };
$hxClasses["starling.textures.TextureSmoothing"] = starling_textures_TextureSmoothing;
starling_textures_TextureSmoothing.__name__ = ["starling","textures","TextureSmoothing"];
starling_textures_TextureSmoothing.isValid = function(smoothing) {
	return smoothing == "none" || smoothing == "bilinear" || smoothing == "trilinear";
};
var starling_utils_ArrayUtil = function() { };
$hxClasses["starling.utils.ArrayUtil"] = starling_utils_ArrayUtil;
starling_utils_ArrayUtil.__name__ = ["starling","utils","ArrayUtil"];
starling_utils_ArrayUtil.resize = function(arr,newLength,defaultValue) {
	var length = arr.length;
	if(newLength < length) arr.splice(newLength,length - newLength); else if(newLength > length) {
		var _g = length;
		while(_g < newLength) {
			var i = _g++;
			arr[i] = defaultValue;
		}
	}
};
starling_utils_ArrayUtil.clear = function(arr) {
	arr.splice(0,arr.length);
};
starling_utils_ArrayUtil.insertAt = function(array,index,object) {
	var i;
	var length = array.length;
	if(index < 0) index += length + 1;
	if(index < 0) index = 0;
	i = index - 1;
	while(i >= length) {
		array[i] = null;
		--i;
	}
	i = length;
	while(i > index) {
		array[i] = array[i - 1];
		--i;
	}
	array[index] = object;
};
starling_utils_ArrayUtil.removeAt = function(array,index) {
	var i;
	var length = array.length;
	if(index < 0) index += length;
	if(index < 0) index = 0; else if(index >= length) index = length - 1;
	var object = array[index];
	i = index + 1;
	while(i < length) {
		array[i - 1] = array[i];
		++i;
	}
	starling_utils_ArrayUtil.resize(array,array.length - 1);
	return object;
};
var starling_utils_AssetManager = function(scaleFactor,useMipmaps) {
	if(useMipmaps == null) useMipmaps = false;
	if(scaleFactor == null) scaleFactor = 1;
	this.mNumLoadingQueues = 0;
	starling_events_EventDispatcher.call(this);
	this.mDefaultTextureOptions = new starling_textures_TextureOptions(scaleFactor,useMipmaps);
	this.mTextures = new haxe_ds_StringMap();
	this.mAtlases = new haxe_ds_StringMap();
	this.mSounds = new haxe_ds_StringMap();
	this.mXmls = new haxe_ds_StringMap();
	this.mObjects = new haxe_ds_StringMap();
	this.mByteArrays = new haxe_ds_StringMap();
	this.mNumConnections = 3;
	this.mVerbose = true;
	this.mQueue = [];
};
$hxClasses["starling.utils.AssetManager"] = starling_utils_AssetManager;
starling_utils_AssetManager.__name__ = ["starling","utils","AssetManager"];
starling_utils_AssetManager.__super__ = starling_events_EventDispatcher;
starling_utils_AssetManager.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mStarling: null
	,mNumLostTextures: null
	,mNumRestoredTextures: null
	,mNumLoadingQueues: null
	,mDefaultTextureOptions: null
	,mCheckPolicyFile: null
	,mKeepAtlasXmls: null
	,mKeepFontXmls: null
	,mNumConnections: null
	,mVerbose: null
	,mQueue: null
	,mTextures: null
	,mAtlases: null
	,mSounds: null
	,mXmls: null
	,mObjects: null
	,mByteArrays: null
	,dispose: function() {
		var $it0 = this.mTextures.iterator();
		while( $it0.hasNext() ) {
			var texture = $it0.next();
			texture.dispose();
		}
		var $it1 = this.mAtlases.iterator();
		while( $it1.hasNext() ) {
			var atlas = $it1.next();
			atlas.dispose();
		}
		var $it2 = this.mByteArrays.iterator();
		while( $it2.hasNext() ) {
			var byteArray = $it2.next();
			byteArray.clear();
		}
	}
	,getTexture: function(name) {
		if(this.mTextures.exists(name)) return this.mTextures.get(name); else {
			var $it0 = this.mAtlases.iterator();
			while( $it0.hasNext() ) {
				var atlas = $it0.next();
				var texture = atlas.getTexture(name);
				if(texture != null) return texture;
			}
			return null;
		}
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var _g = 0;
		var _g1 = this.getTextureNames(prefix,starling_utils_AssetManager.sNames);
		while(_g < _g1.data.get_length()) {
			var name = _g1.data.get(_g);
			++_g;
			var index = result.data.get_length();
			var value = this.getTexture(name);
			result.data.set(index,value);
		}
		starling_utils_AssetManager.sNames.data.set_length(0);
		return result;
	}
	,getTextureNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		result = this.getDictionaryKeys(this.mTextures,prefix,result);
		var $it0 = this.mAtlases.iterator();
		while( $it0.hasNext() ) {
			var atlas = $it0.next();
			atlas.getNames(prefix,result);
		}
		result.data.sort($bind(this,this.compare));
		return result;
	}
	,getTextureAtlas: function(name) {
		return this.mAtlases.get(name);
	}
	,getTextureAtlasNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mAtlases,prefix,result);
	}
	,getSound: function(name) {
		return this.mSounds.get(name);
	}
	,getSoundNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mSounds,prefix,result);
	}
	,playSound: function(name,startTime,loops,transform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		if(this.mSounds.exists(name)) return this.getSound(name).play(startTime,loops,transform); else return null;
	}
	,getXml: function(name) {
		return this.mXmls.get(name);
	}
	,getXmlNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mXmls,prefix,result);
	}
	,getObject: function(name) {
		return this.mObjects.get(name);
	}
	,getObjectNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mObjects,prefix,result);
	}
	,getByteArray: function(name) {
		return this.mByteArrays.get(name);
	}
	,getByteArrayNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mByteArrays,prefix,result);
	}
	,addTexture: function(name,texture) {
		this.log("Adding texture '" + name + "'");
		if(this.mTextures.exists(name)) {
			this.log("Warning: name was already in use; the previous texture will be replaced.");
			this.mTextures.get(name).dispose();
		}
		{
			this.mTextures.set(name,texture);
			texture;
		}
	}
	,addTextureAtlas: function(name,atlas) {
		this.log("Adding texture atlas '" + name + "'");
		if(this.mAtlases.exists(name)) {
			this.log("Warning: name was already in use; the previous atlas will be replaced.");
			this.mAtlases.get(name).dispose();
		}
		{
			this.mAtlases.set(name,atlas);
			atlas;
		}
	}
	,addSound: function(name,sound) {
		this.log("Adding sound '" + name + "'");
		if(this.mSounds.exists(name)) this.log("Warning: name was already in use; the previous sound will be replaced.");
		{
			this.mSounds.set(name,sound);
			sound;
		}
	}
	,addXml: function(name,xml) {
		this.log("Adding XML '" + name + "'");
		if(this.mXmls.exists(name)) this.log("Warning: name was already in use; the previous XML will be replaced.");
		{
			this.mXmls.set(name,xml);
			xml;
		}
	}
	,addObject: function(name,object) {
		this.log("Adding object '" + name + "'");
		if(this.mObjects.exists(name)) this.log("Warning: name was already in use; the previous object will be replaced.");
		var v = object;
		this.mObjects.set(name,v);
		v;
	}
	,addByteArray: function(name,byteArray) {
		this.log("Adding byte array '" + name + "'");
		if(this.mByteArrays.exists(name)) {
			this.log("Warning: name was already in use; the previous byte array will be replaced.");
			this.mByteArrays.get(name).clear();
		}
		{
			this.mByteArrays.set(name,byteArray);
			byteArray;
		}
	}
	,removeTexture: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing texture '" + name + "'");
		if(dispose && this.mTextures.exists(name)) this.mTextures.get(name).dispose();
		this.mTextures.remove(name);
	}
	,removeTextureAtlas: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing texture atlas '" + name + "'");
		if(dispose && this.mAtlases.exists(name)) this.mAtlases.get(name).dispose();
		this.mAtlases.remove(name);
	}
	,removeSound: function(name) {
		this.log("Removing sound '" + name + "'");
		this.mSounds.remove(name);
	}
	,removeXml: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing xml '" + name + "'");
		this.mXmls.remove(name);
	}
	,removeObject: function(name) {
		this.log("Removing object '" + name + "'");
		this.mObjects.remove(name);
	}
	,removeByteArray: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing byte array '" + name + "'");
		if(dispose && this.mByteArrays.exists(name)) this.mByteArrays.get(name).clear();
		this.mByteArrays.remove(name);
	}
	,purgeQueue: function() {
		starling_utils_ArrayUtil.clear(this.mQueue);
		this.dispatchEventWith("cancel");
	}
	,purge: function() {
		this.log("Purging all assets, emptying queue");
		this.purgeQueue();
		this.dispose();
		this.mTextures = new haxe_ds_StringMap();
		this.mAtlases = new haxe_ds_StringMap();
		this.mSounds = new haxe_ds_StringMap();
		this.mXmls = new haxe_ds_StringMap();
		this.mObjects = new haxe_ds_StringMap();
		this.mByteArrays = new haxe_ds_StringMap();
	}
	,enqueue: function(rawAssets) {
		var _g = 0;
		while(_g < rawAssets.length) {
			var rawAsset = rawAssets[_g];
			++_g;
			if((rawAsset instanceof Array) && rawAsset.__enum__ == null) this.enqueue(rawAsset); else if(typeof(rawAsset) == "string" || js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) this.enqueueWithName(rawAsset); else this.log("Ignoring unsupported asset type: " + Type.getClassName(rawAsset));
		}
	}
	,enqueueWithName: function(asset,name,options) {
		if(name == null) name = this.getName(asset);
		if(options == null) options = this.mDefaultTextureOptions.clone(); else options = options.clone();
		this.log("Enqueuing '" + name + "'");
		this.mQueue.push({ name : name, asset : asset, options : options});
		return name;
	}
	,loadQueue: function(onProgress) {
		var _g = this;
		if(onProgress == null) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Argument 'onProgress' must not be null"));
		if(this.mQueue.length == 0) {
			onProgress(1.0);
			return;
		}
		this.mStarling = starling_core_Starling.get_current();
		if(this.mStarling == null || this.mStarling.get_context() == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("The Starling instance needs to be ready before assets can be loaded."));
		var PROGRESS_PART_ASSETS = 0.9;
		var PROGRESS_PART_XMLS = 1.0 - PROGRESS_PART_ASSETS;
		var i;
		var canceled = false;
		var xmls = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var assetInfos = this.mQueue.slice();
		var assetCount = this.mQueue.length;
		var assetProgress = [];
		var assetIndex = 0;
		var loadNextQueueElement = null;
		var cancel = null;
		var loadQueueElement = null;
		var updateAssetProgress = null;
		var processXmls = null;
		var processXml = null;
		var finish = null;
		var resume = null;
		loadNextQueueElement = function() {
			if(assetIndex < assetInfos.length) {
				var index = assetIndex++;
				loadQueueElement(index,assetInfos[index]);
			}
		};
		loadQueueElement = function(index1,assetInfo) {
			if(canceled) return;
			var onElementProgress = function(progress) {
				updateAssetProgress(index1,progress * 0.8);
			};
			var onElementLoaded = function() {
				updateAssetProgress(index1,1.0);
				assetCount--;
				if(assetCount > 0) loadNextQueueElement(); else processXmls();
			};
			_g.processRawAsset(assetInfo.name,assetInfo.asset,assetInfo.options,xmls,onElementProgress,onElementLoaded);
		};
		updateAssetProgress = function(index2,progress1) {
			assetProgress[index2] = progress1;
			var sum = 0.0;
			var len = assetProgress.length;
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				sum += assetProgress[i1];
			}
			onProgress(sum / len * PROGRESS_PART_ASSETS);
		};
		processXmls = function() {
			xmls.data.sort(function(a,b) {
				if(((function($this) {
					var $r;
					if(a.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + a.nodeType);
					$r = a.nodeName;
					return $r;
				}(this))).split(":").pop() == "TextureAtlas") return -1; else return 1;
			});
			haxe_Timer.delay(function() {
				processXml(0);
			},1);
		};
		processXml = function(index3) {
			if(canceled) return; else if(index3 == xmls.data.get_length()) {
				finish();
				return;
			}
			var name;
			var texture;
			var xml = xmls.data.get(index3);
			var rootNode;
			if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
			rootNode = xml.nodeName;
			var xmlProgress = (index3 + 1) / (xmls.data.get_length() + 1);
			if(rootNode == "TextureAtlas") {
				name = _g.getName(xml.get("imagePath"));
				texture = _g.getTexture(name);
				if(texture != null) {
					_g.addTextureAtlas(name,new starling_textures_TextureAtlas(texture,xml));
					_g.removeTexture(name,false);
					if(_g.mKeepAtlasXmls) _g.addXml(name,xml);
				} else _g.log("Cannot create atlas: texture '" + name + "' is missing.");
			} else if(rootNode == "font") {
				name = _g.getName(xml.elementsNamed("pages").next().elementsNamed("page").next().get("file"));
				texture = _g.getTexture(name);
				if(texture != null) {
					_g.log("Adding bitmap font '" + name + "'");
					starling_text_TextField.registerBitmapFont(new starling_text_BitmapFont(texture,xml),name);
					_g.removeTexture(name,false);
					if(_g.mKeepFontXmls) _g.addXml(name,xml);
				} else _g.log("Cannot create bitmap font: texture '" + name + "' is missing.");
			} else throw new js__$Boot_HaxeError(new openfl_errors_Error("XML contents not recognized: " + rootNode));
			onProgress(PROGRESS_PART_ASSETS + PROGRESS_PART_XMLS * xmlProgress);
			haxe_Timer.delay(function() {
				processXml(index3 + 1);
			},1);
		};
		cancel = function() {
			_g.removeEventListener("cancel",cancel);
			_g.mNumLoadingQueues--;
			canceled = true;
		};
		finish = function() {
			haxe_Timer.delay(function() {
				if(!canceled) {
					cancel();
					onProgress(1.0);
				}
			},1);
		};
		var _g2 = 0;
		while(_g2 < assetCount) {
			var i2 = _g2++;
			assetProgress[i2] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.mNumConnections;
		while(_g11 < _g3) {
			var i3 = _g11++;
			loadNextQueueElement();
		}
		starling_utils_ArrayUtil.clear(this.mQueue);
		this.mNumLoadingQueues++;
		this.addEventListener("cancel",cancel);
	}
	,processRawAsset: function(name,rawAsset,options,xmls,onProgress,onComplete) {
		var _g = this;
		var canceled = false;
		var cancel = null;
		var progress = null;
		var process = null;
		var process1;
		var process2 = null;
		process2 = function(asset) {
			var texture = null;
			var bytes;
			var object = null;
			var xml = null;
			_g.mStarling.makeCurrent();
			if(canceled) {
			} else if(asset == null) onComplete(); else if(js_Boot.__instanceof(asset,openfl_media_Sound)) {
				_g.addSound(name,asset);
				onComplete();
			} else if(js_Boot.__instanceof(asset,Xml)) {
				xml = asset;
				xml = xml.firstElement();
				if((function($this) {
					var $r;
					if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
					$r = xml.nodeName;
					return $r;
				}(this)) == "TextureAtlas" || (function($this) {
					var $r;
					if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
					$r = xml.nodeName;
					return $r;
				}(this)) == "font") xmls.data.push(xml); else _g.addXml(name,xml);
				onComplete();
			} else if(starling_core_Starling.get_handleLostContext() && _g.mStarling.get_context().driverInfo == "Disposed") {
				_g.log("Context lost while processing assets, retrying ...");
				haxe_Timer.delay(function() {
					process2(asset);
				},1);
				return;
			} else if(js_Boot.__instanceof(asset,openfl_display_Bitmap)) {
				texture = starling_textures_Texture.fromData(asset,options);
				texture.get_root().set_onRestore(function() {
					_g.mNumLostTextures++;
					_g.loadRawAsset(rawAsset,null,function(asset1) {
						try {
							if(asset1 == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("Reload failed"));
							texture.get_root().uploadBitmap(js_Boot.__cast(asset1 , openfl_display_Bitmap));
							asset1.bitmapData.dispose();
						} catch( e ) {
							haxe_CallStack.lastException = e;
							if (e instanceof js__$Boot_HaxeError) e = e.val;
							if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
								_g.log("Texture restoration failed for '" + name + "': " + e.message);
							} else throw(e);
						}
						_g.mNumRestoredTextures++;
						if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith("texturesRestored");
					});
				});
				asset.bitmapData.dispose();
				_g.addTexture(name,texture);
				onComplete();
			} else if(js_Boot.__instanceof(asset,openfl_utils_ByteArrayData)) {
				bytes = asset;
				if(starling_textures_AtfData.isAtfData(bytes)) {
					options.set_onReady(_g.prependCallback(options.get_onReady(),function() {
						_g.addTexture(name,texture);
						onComplete();
					}));
					texture = starling_textures_Texture.fromData(bytes,options);
					texture.get_root().set_onRestore(function() {
						_g.mNumLostTextures++;
						_g.loadRawAsset(rawAsset,null,function(asset2) {
							try {
								if(asset2 == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("Reload failed"));
								texture.get_root().uploadAtfData(js_Boot.__cast(asset2 , openfl_utils_ByteArrayData),0,true);
								asset2.clear();
							} catch( e1 ) {
								haxe_CallStack.lastException = e1;
								if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
								if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
									_g.log("Texture restoration failed for '" + name + "': " + e1.message);
								} else throw(e1);
							}
							_g.mNumRestoredTextures++;
							if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith("texturesRestored");
						});
					});
					bytes.clear();
				} else if(_g.byteArrayStartsWith(bytes,"{") || _g.byteArrayStartsWith(bytes,"[")) {
					try {
						object = JSON.parse(bytes.readUTFBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes)));
					} catch( e2 ) {
						haxe_CallStack.lastException = e2;
						if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
						if( js_Boot.__instanceof(e2,openfl_errors_Error) ) {
							_g.log("Could not parse JSON: " + e2.message);
							_g.dispatchEventWith("parseError",false,name);
						} else throw(e2);
					}
					if(object) _g.addObject(name,object);
					bytes.clear();
					onComplete();
				} else if(_g.byteArrayStartsWith(bytes,"<")) {
					try {
						xml = Xml.parse(bytes.toString());
					} catch( e3 ) {
						haxe_CallStack.lastException = e3;
						if (e3 instanceof js__$Boot_HaxeError) e3 = e3.val;
						if( js_Boot.__instanceof(e3,openfl_errors_Error) ) {
							_g.log("Could not parse XML: " + e3.message);
							_g.dispatchEventWith("parseError",false,name);
						} else throw(e3);
					}
					process2(xml);
					bytes.clear();
				} else {
					_g.addByteArray(name,bytes);
					onComplete();
				}
			} else {
				_g.addObject(name,asset);
				onComplete();
			}
			asset = null;
			bytes = null;
			_g.removeEventListener("cancel",cancel);
		};
		process1 = process2;
		progress = function(ratio) {
			if(!canceled) onProgress(ratio);
		};
		cancel = function() {
			canceled = true;
		};
		this.addEventListener("cancel",cancel);
		this.loadRawAsset(rawAsset,progress,process1);
	}
	,loadRawAsset: function(rawAsset,onProgress,onComplete) {
		var _g = this;
		var extension = null;
		var loaderInfo = null;
		var urlLoader = null;
		var urlRequest = null;
		var url = null;
		var complete = null;
		var onIoError = null;
		var onSecurityError = null;
		var onHttpResponseStatus = null;
		var onLoadProgress = null;
		var onUrlLoaderComplete = null;
		var onLoaderComplete = null;
		onIoError = function(event) {
			_g.log("IO error: " + event.text);
			_g.dispatchEventWith("ioError",false,url);
			complete(null);
		};
		onSecurityError = function(event1) {
			_g.log("security error: " + event1.text);
			_g.dispatchEventWith("securityError",false,url);
			complete(null);
		};
		onHttpResponseStatus = function(event2) {
			if(extension == null) {
				var headers = event2.responseHeaders;
				var contentType = _g.getHttpHeader(headers,"Content-Type");
				if(contentType != null && new EReg("(audio|image)/","").split(contentType) != null) extension = contentType.split("/").pop();
			}
		};
		onLoadProgress = function(event3) {
			if(onProgress != null && event3.bytesTotal > 0) onProgress(event3.bytesLoaded / event3.bytesTotal);
		};
		onUrlLoaderComplete = function(event4) {
			var bytes = _g.transformData(js_Boot.__cast(urlLoader.data , openfl_utils_ByteArrayData),url);
			var sound;
			if(bytes == null) {
				complete(null);
				return;
			}
			if(extension != null) extension = extension.toLowerCase();
			switch(extension) {
			case "mpeg":case "mp3":
				sound = new openfl_media_Sound();
				sound.loadCompressedDataFromByteArray(bytes,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes));
				bytes.clear();
				complete(sound);
				break;
			case "jpg":case "jpeg":case "png":case "gif":
				var loaderContext = new openfl_system_LoaderContext(_g.mCheckPolicyFile);
				var loader = new openfl_display_Loader();
				loaderInfo = loader.contentLoaderInfo;
				loaderInfo.addEventListener("ioError",onIoError);
				loaderInfo.addEventListener("complete",onLoaderComplete);
				loader.loadBytes(bytes,loaderContext);
				break;
			default:
				complete(bytes);
			}
		};
		onLoaderComplete = function(event5) {
			urlLoader.data.clear();
			complete(event5.target.content);
		};
		complete = function(asset) {
			if(urlLoader != null) {
				urlLoader.removeEventListener("ioError",onIoError);
				urlLoader.removeEventListener("securityError",onSecurityError);
				urlLoader.removeEventListener("httpResponseStatus",onHttpResponseStatus);
				urlLoader.removeEventListener("progress",onLoadProgress);
				urlLoader.removeEventListener("complete",onUrlLoaderComplete);
			}
			if(loaderInfo != null) {
				loaderInfo.removeEventListener("ioError",onIoError);
				loaderInfo.removeEventListener("complete",onLoaderComplete);
			}
			onComplete(asset);
		};
		if(js_Boot.__instanceof(rawAsset,Class)) haxe_Timer.delay(function() {
			Type.createInstance(rawAsset,[]);
		},1); else if(typeof(rawAsset) == "string" || js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) {
			if(js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) urlRequest = rawAsset; else urlRequest = null;
			if(urlRequest == null) urlRequest = new openfl_net_URLRequest(js_Boot.__cast(rawAsset , String));
			url = urlRequest.url;
			extension = this.getExtensionFromUrl(url);
			urlLoader = new openfl_net_URLLoader();
			urlLoader.dataFormat = 0;
			urlLoader.addEventListener("ioError",onIoError);
			urlLoader.addEventListener("securityError",onSecurityError);
			urlLoader.addEventListener("httpResponseStatus",onHttpResponseStatus);
			urlLoader.addEventListener("progress",onLoadProgress);
			urlLoader.addEventListener("complete",onUrlLoaderComplete);
			urlLoader.load(urlRequest);
		}
	}
	,getName: function(rawAsset) {
		var name = null;
		if(typeof(rawAsset) == "string") name = js_Boot.__cast(rawAsset , String); else if(js_Boot.__instanceof(rawAsset,openfl_net_URLRequest)) name = (js_Boot.__cast(rawAsset , openfl_net_URLRequest)).url;
		if(name != null) {
			name = new EReg("%20","g").replace(name," ");
			name = this.getBasenameFromUrl(name);
			if(name != null) return name; else throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Could not extract name from String '" + Std.string(rawAsset) + "'"));
		} else {
			name = Type.getClassName(rawAsset);
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Cannot extract names for objects of type '" + name + "'"));
		}
	}
	,transformData: function(data,url) {
		return data;
	}
	,log: function(message) {
		if(this.mVerbose) haxe_Log.trace("[AssetManager] " + message,{ fileName : "AssetManager.hx", lineNumber : 1191, className : "starling.utils.AssetManager", methodName : "log"});
	}
	,byteArrayStartsWith: function(bytes,$char) {
		var start = 0;
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
		var wanted = HxOverrides.cca($char,0);
		if(length >= 4 && (bytes.b[0] == 0 && bytes.b[1] == 0 && bytes.b[2] == 254 && bytes.b[3] == 255) || bytes.b[0] == 255 && bytes.b[1] == 254 && bytes.b[2] == 0 && bytes.b[3] == 0) start = 4; else if(length >= 3 && bytes.b[0] == 239 && bytes.b[1] == 187 && bytes.b[2] == 191) start = 3; else if(length >= 2 && (bytes.b[0] == 254 && bytes.b[1] == 255) || bytes.b[0] == 255 && bytes.b[1] == 254) start = 2;
		var _g = start;
		while(_g < length) {
			var i = _g++;
			var $byte = bytes.b[i];
			if($byte == 0 || $byte == 10 || $byte == 13 || $byte == 32) continue; else return $byte == wanted;
		}
		return false;
	}
	,getDictionaryKeys: function(dictionary,prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var $it0 = dictionary.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			if(name.indexOf(prefix) == 0) {
				var index = result.data.get_length();
				result.data.set(index,name);
			}
		}
		result.data.sort($bind(this,this.compare));
		return result;
	}
	,getHttpHeader: function(headers,headerName) {
		if(headers != null) {
			var _g = 0;
			while(_g < headers.length) {
				var header = headers[_g];
				++_g;
				if(header.name == headerName) return header.value;
			}
		}
		return null;
	}
	,getBasenameFromUrl: function(url) {
		var isMatched = starling_utils_AssetManager.NAME_REGEX.match(url);
		if(isMatched) return starling_utils_AssetManager.NAME_REGEX.matched(1); else return null;
	}
	,getExtensionFromUrl: function(url) {
		var isMatched = starling_utils_AssetManager.NAME_REGEX.match(url);
		if(isMatched) return starling_utils_AssetManager.NAME_REGEX.matched(2); else return null;
	}
	,prependCallback: function(oldCallback,newCallback) {
		if(oldCallback == null) return newCallback; else if(newCallback == null) return oldCallback; else return function() {
			newCallback();
			oldCallback();
		};
	}
	,compare: function(a,b) {
		if(a < b) return -1; else if(a > b) return 1; else return 0;
	}
	,get_queue: function() {
		return this.mQueue;
	}
	,get_numQueuedAssets: function() {
		return this.mQueue.length;
	}
	,get_verbose: function() {
		return this.mVerbose;
	}
	,set_verbose: function(value) {
		return this.mVerbose = value;
	}
	,get_isLoading: function() {
		return this.mNumLoadingQueues > 0;
	}
	,get_useMipMaps: function() {
		return this.mDefaultTextureOptions.get_mipMapping();
	}
	,set_useMipMaps: function(value) {
		return this.mDefaultTextureOptions.set_mipMapping(value);
	}
	,get_textureRepeat: function() {
		return this.mDefaultTextureOptions.get_repeat();
	}
	,set_textureRepeat: function(value) {
		return this.mDefaultTextureOptions.set_repeat(value);
	}
	,get_scaleFactor: function() {
		return this.mDefaultTextureOptions.get_scale();
	}
	,set_scaleFactor: function(value) {
		return this.mDefaultTextureOptions.set_scale(value);
	}
	,get_textureFormat: function() {
		return this.mDefaultTextureOptions.get_format();
	}
	,set_textureFormat: function(value) {
		return this.mDefaultTextureOptions.set_format(value);
	}
	,get_checkPolicyFile: function() {
		return this.mCheckPolicyFile;
	}
	,set_checkPolicyFile: function(value) {
		return this.mCheckPolicyFile = value;
	}
	,get_keepAtlasXmls: function() {
		return this.mKeepAtlasXmls;
	}
	,set_keepAtlasXmls: function(value) {
		return this.mKeepAtlasXmls = value;
	}
	,get_keepFontXmls: function() {
		return this.mKeepFontXmls;
	}
	,set_keepFontXmls: function(value) {
		return this.mKeepFontXmls = value;
	}
	,get_numConnections: function() {
		return this.mNumConnections;
	}
	,set_numConnections: function(value) {
		return this.mNumConnections = value;
	}
	,__class__: starling_utils_AssetManager
	,__properties__: {set_numConnections:"set_numConnections",get_numConnections:"get_numConnections",set_keepFontXmls:"set_keepFontXmls",get_keepFontXmls:"get_keepFontXmls",set_keepAtlasXmls:"set_keepAtlasXmls",get_keepAtlasXmls:"get_keepAtlasXmls",set_checkPolicyFile:"set_checkPolicyFile",get_checkPolicyFile:"get_checkPolicyFile",set_textureFormat:"set_textureFormat",get_textureFormat:"get_textureFormat",set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_textureRepeat:"set_textureRepeat",get_textureRepeat:"get_textureRepeat",set_useMipMaps:"set_useMipMaps",get_useMipMaps:"get_useMipMaps",get_isLoading:"get_isLoading",set_verbose:"set_verbose",get_verbose:"get_verbose",get_numQueuedAssets:"get_numQueuedAssets",get_queue:"get_queue"}
});
var starling_utils_Color = function() { };
$hxClasses["starling.utils.Color"] = starling_utils_Color;
starling_utils_Color.__name__ = ["starling","utils","Color"];
starling_utils_Color.getAlpha = function(color) {
	return color >> 24 & 255;
};
starling_utils_Color.getRed = function(color) {
	return color >> 16 & 255;
};
starling_utils_Color.getGreen = function(color) {
	return color >> 8 & 255;
};
starling_utils_Color.getBlue = function(color) {
	return color & 255;
};
starling_utils_Color.rgb = function(red,green,blue) {
	return red << 16 | green << 8 | blue;
};
starling_utils_Color.argb = function(alpha,red,green,blue) {
	return alpha << 24 | red << 16 | green << 8 | blue;
};
var starling_utils_HAlign = function() { };
$hxClasses["starling.utils.HAlign"] = starling_utils_HAlign;
starling_utils_HAlign.__name__ = ["starling","utils","HAlign"];
starling_utils_HAlign.isValid = function(hAlign) {
	return hAlign == "left" || hAlign == "center" || hAlign == "right";
};
var starling_utils_MathUtil = function() { };
$hxClasses["starling.utils.MathUtil"] = starling_utils_MathUtil;
starling_utils_MathUtil.__name__ = ["starling","utils","MathUtil"];
starling_utils_MathUtil.intersectLineWithXYPlane = function(pointA,pointB,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl_geom_Point();
	var vectorX = pointB.x - pointA.x;
	var vectorY = pointB.y - pointA.y;
	var vectorZ = pointB.z - pointA.z;
	var lambda = -pointA.z / vectorZ;
	resultPoint.x = pointA.x + lambda * vectorX;
	resultPoint.y = pointA.y + lambda * vectorY;
	return resultPoint;
};
starling_utils_MathUtil.normalizeAngle = function(angle) {
	angle = angle % starling_utils_MathUtil.TWO_PI;
	if(angle < -Math.PI) angle += starling_utils_MathUtil.TWO_PI;
	if(angle > Math.PI) angle -= starling_utils_MathUtil.TWO_PI;
	return angle;
};
starling_utils_MathUtil.clamp = function(value,min,max) {
	if(value < min) return min; else if(value > max) return max; else return value;
};
starling_utils_MathUtil.min = function(values) {
	if(values.length == 0) return 0.0;
	var min = values[0];
	var _g1 = 1;
	var _g = values.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(values[i] < min) min = values[i];
	}
	return min;
};
starling_utils_MathUtil.deg2rad = function(deg) {
	return deg / 180.0 * Math.PI;
};
starling_utils_MathUtil.rad2deg = function(rad) {
	return rad / Math.PI * 180.0;
};
var starling_utils_MatrixUtil = function() { };
$hxClasses["starling.utils.MatrixUtil"] = starling_utils_MatrixUtil;
starling_utils_MatrixUtil.__name__ = ["starling","utils","MatrixUtil"];
starling_utils_MatrixUtil.convertTo3D = function(matrix,resultMatrix) {
	if(resultMatrix == null) resultMatrix = new openfl_geom_Matrix3D();
	starling_utils_MatrixUtil.sRawData.data.set(0,matrix.a);
	starling_utils_MatrixUtil.sRawData.data.set(1,matrix.b);
	starling_utils_MatrixUtil.sRawData.data.set(4,matrix.c);
	starling_utils_MatrixUtil.sRawData.data.set(5,matrix.d);
	starling_utils_MatrixUtil.sRawData.data.set(12,matrix.tx);
	starling_utils_MatrixUtil.sRawData.data.set(13,matrix.ty);
	resultMatrix.copyRawDataFrom(starling_utils_MatrixUtil.sRawData);
	return resultMatrix;
};
starling_utils_MatrixUtil.convertTo2D = function(matrix3D,resultMatrix) {
	if(resultMatrix == null) resultMatrix = new openfl_geom_Matrix();
	matrix3D.copyRawDataTo(starling_utils_MatrixUtil.sRawData2);
	resultMatrix.a = starling_utils_MatrixUtil.sRawData2.data.get(0);
	resultMatrix.b = starling_utils_MatrixUtil.sRawData2.data.get(1);
	resultMatrix.c = starling_utils_MatrixUtil.sRawData2.data.get(4);
	resultMatrix.d = starling_utils_MatrixUtil.sRawData2.data.get(5);
	resultMatrix.tx = starling_utils_MatrixUtil.sRawData2.data.get(12);
	resultMatrix.ty = starling_utils_MatrixUtil.sRawData2.data.get(13);
	return resultMatrix;
};
starling_utils_MatrixUtil.transformPoint = function(matrix,point,resultPoint) {
	return starling_utils_MatrixUtil.transformCoords(matrix,point.x,point.y,resultPoint);
};
starling_utils_MatrixUtil.transformPoint3D = function(matrix,point,resultPoint) {
	return starling_utils_MatrixUtil.transformCoords3D(matrix,point.x,point.y,point.z,resultPoint);
};
starling_utils_MatrixUtil.transformCoords = function(matrix,x,y,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl_geom_Point();
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling_utils_MatrixUtil.transformCoords3D = function(matrix,x,y,z,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl_geom_Vector3D();
	matrix.copyRawDataTo(starling_utils_MatrixUtil.sRawData2);
	resultPoint.x = x * starling_utils_MatrixUtil.sRawData2.data.get(0) + y * starling_utils_MatrixUtil.sRawData2.data.get(4) + z * starling_utils_MatrixUtil.sRawData2.data.get(8) + starling_utils_MatrixUtil.sRawData2.data.get(12);
	resultPoint.y = x * starling_utils_MatrixUtil.sRawData2.data.get(1) + y * starling_utils_MatrixUtil.sRawData2.data.get(5) + z * starling_utils_MatrixUtil.sRawData2.data.get(9) + starling_utils_MatrixUtil.sRawData2.data.get(13);
	resultPoint.z = x * starling_utils_MatrixUtil.sRawData2.data.get(2) + y * starling_utils_MatrixUtil.sRawData2.data.get(6) + z * starling_utils_MatrixUtil.sRawData2.data.get(10) + starling_utils_MatrixUtil.sRawData2.data.get(14);
	resultPoint.w = x * starling_utils_MatrixUtil.sRawData2.data.get(3) + y * starling_utils_MatrixUtil.sRawData2.data.get(7) + z * starling_utils_MatrixUtil.sRawData2.data.get(11) + starling_utils_MatrixUtil.sRawData2.data.get(15);
	return resultPoint;
};
starling_utils_MatrixUtil.skew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY - matrix.b * sinX,matrix.a * sinY + matrix.b * cosX,matrix.c * cosY - matrix.d * sinX,matrix.c * sinY + matrix.d * cosX,matrix.tx * cosY - matrix.ty * sinX,matrix.tx * sinY + matrix.ty * cosX);
};
starling_utils_MatrixUtil.prependMatrix = function(base,prep) {
	base.setTo(base.a * prep.a + base.c * prep.b,base.b * prep.a + base.d * prep.b,base.a * prep.c + base.c * prep.d,base.b * prep.c + base.d * prep.d,base.tx + base.a * prep.tx + base.c * prep.ty,base.ty + base.b * prep.tx + base.d * prep.ty);
};
starling_utils_MatrixUtil.prependTranslation = function(matrix,tx,ty) {
	matrix.tx += matrix.a * tx + matrix.c * ty;
	matrix.ty += matrix.b * tx + matrix.d * ty;
};
starling_utils_MatrixUtil.prependScale = function(matrix,sx,sy) {
	matrix.setTo(matrix.a * sx,matrix.b * sx,matrix.c * sy,matrix.d * sy,matrix.tx,matrix.ty);
};
starling_utils_MatrixUtil.prependRotation = function(matrix,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	matrix.setTo(matrix.a * cos + matrix.c * sin,matrix.b * cos + matrix.d * sin,matrix.c * cos - matrix.a * sin,matrix.d * cos - matrix.b * sin,matrix.tx,matrix.ty);
};
starling_utils_MatrixUtil.prependSkew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY + matrix.c * sinY,matrix.b * cosY + matrix.d * sinY,matrix.c * cosX - matrix.a * sinX,matrix.d * cosX - matrix.b * sinX,matrix.tx,matrix.ty);
};
var starling_utils_Max = function() { };
$hxClasses["starling.utils.Max"] = starling_utils_Max;
starling_utils_Max.__name__ = ["starling","utils","Max"];
var starling_utils_PowerOfTwo = function() { };
$hxClasses["starling.utils.PowerOfTwo"] = starling_utils_PowerOfTwo;
starling_utils_PowerOfTwo.__name__ = ["starling","utils","PowerOfTwo"];
starling_utils_PowerOfTwo.getNextPowerOfTwo = function(number) {
	if(number > 0 && (number & number - 1) == 0) return number; else {
		var result = 1;
		while(result < number) result <<= 1;
		return result;
	}
};
var starling_utils_RectangleUtil = function() { };
$hxClasses["starling.utils.RectangleUtil"] = starling_utils_RectangleUtil;
starling_utils_RectangleUtil.__name__ = ["starling","utils","RectangleUtil"];
starling_utils_RectangleUtil.intersect = function(rect1,rect2,resultRect) {
	if(resultRect == null) resultRect = new openfl_geom_Rectangle();
	var left;
	if(rect1.x > rect2.x) left = rect1.x; else left = rect2.x;
	var right;
	if(rect1.get_right() < rect2.get_right()) right = rect1.get_right(); else right = rect2.get_right();
	var top;
	if(rect1.y > rect2.y) top = rect1.y; else top = rect2.y;
	var bottom;
	if(rect1.get_bottom() < rect2.get_bottom()) bottom = rect1.get_bottom(); else bottom = rect2.get_bottom();
	if(left > right || top > bottom) resultRect.setEmpty(); else resultRect.setTo(left,top,right - left,bottom - top);
	return resultRect;
};
starling_utils_RectangleUtil.fit = function(rectangle,into,scaleMode,pixelPerfect,resultRect) {
	if(pixelPerfect == null) pixelPerfect = false;
	if(scaleMode == null) scaleMode = "showAll";
	if(!starling_utils_ScaleMode.isValid(scaleMode)) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid scaleMode: " + scaleMode));
	if(resultRect == null) resultRect = new openfl_geom_Rectangle();
	var width = rectangle.width;
	var height = rectangle.height;
	var factorX = into.width / width;
	var factorY = into.height / height;
	var factor = 1.0;
	if(scaleMode == "showAll") {
		if(factorX < factorY) factor = factorX; else factor = factorY;
		if(pixelPerfect) factor = starling_utils_RectangleUtil.nextSuitableScaleFactor(factor,false);
	} else if(scaleMode == "noBorder") {
		if(factorX > factorY) factor = factorX; else factor = factorY;
		if(pixelPerfect) factor = starling_utils_RectangleUtil.nextSuitableScaleFactor(factor,true);
	}
	width *= factor;
	height *= factor;
	resultRect.setTo(into.x + (into.width - width) / 2,into.y + (into.height - height) / 2,width,height);
	return resultRect;
};
starling_utils_RectangleUtil.nextSuitableScaleFactor = function(factor,up) {
	var divisor = 1.0;
	if(up) {
		if(factor >= 0.5) return Math.ceil(factor); else while(1.0 / (divisor + 1) > factor) ++divisor;
	} else if(factor >= 1.0) return Math.floor(factor); else while(1.0 / divisor > factor) ++divisor;
	return 1.0 / divisor;
};
starling_utils_RectangleUtil.normalize = function(rect) {
	if(rect.width < 0) {
		rect.width = -rect.width;
		rect.x -= rect.width;
	}
	if(rect.height < 0) {
		rect.height = -rect.height;
		rect.y -= rect.height;
	}
};
starling_utils_RectangleUtil.getBounds = function(rectangle,transformationMatrix,resultRect) {
	if(resultRect == null) resultRect = new openfl_geom_Rectangle();
	var minX = 1.79e+308;
	var maxX = -1.79e+308;
	var minY = 1.79e+308;
	var maxY = -1.79e+308;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		starling_utils_MatrixUtil.transformCoords(transformationMatrix,starling_utils_RectangleUtil.sPositions[i].x * rectangle.width,starling_utils_RectangleUtil.sPositions[i].y * rectangle.height,starling_utils_RectangleUtil.sHelperPoint);
		if(minX > starling_utils_RectangleUtil.sHelperPoint.x) minX = starling_utils_RectangleUtil.sHelperPoint.x;
		if(maxX < starling_utils_RectangleUtil.sHelperPoint.x) maxX = starling_utils_RectangleUtil.sHelperPoint.x;
		if(minY > starling_utils_RectangleUtil.sHelperPoint.y) minY = starling_utils_RectangleUtil.sHelperPoint.y;
		if(maxY < starling_utils_RectangleUtil.sHelperPoint.y) maxY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
	return resultRect;
};
var starling_utils_ScaleMode = function() { };
$hxClasses["starling.utils.ScaleMode"] = starling_utils_ScaleMode;
starling_utils_ScaleMode.__name__ = ["starling","utils","ScaleMode"];
starling_utils_ScaleMode.isValid = function(scaleMode) {
	return scaleMode == "none" || scaleMode == "noBorder" || scaleMode == "showAll";
};
var starling_utils_StringUtil = function() { };
$hxClasses["starling.utils.StringUtil"] = starling_utils_StringUtil;
starling_utils_StringUtil.__name__ = ["starling","utils","StringUtil"];
starling_utils_StringUtil.formatString = function(format,args) {
	var _g1 = 0;
	var _g = args.length;
	while(_g1 < _g) {
		var i = _g1++;
		var r = new EReg("\\{" + i + "\\}","g");
		format = r.replace(format,Std.string(args[i]));
	}
	return format;
};
var starling_utils_SystemUtil = function() { };
$hxClasses["starling.utils.SystemUtil"] = starling_utils_SystemUtil;
starling_utils_SystemUtil.__name__ = ["starling","utils","SystemUtil"];
starling_utils_SystemUtil.__properties__ = {get_supportsVideoTexture:"get_supportsVideoTexture",get_supportsDepthAndStencil:"get_supportsDepthAndStencil",get_supportsRelaxedTargetClearRequirement:"get_supportsRelaxedTargetClearRequirement",get_platform:"get_platform",get_isDesktop:"get_isDesktop",get_isAIR:"get_isAIR",get_isApplicationActive:"get_isApplicationActive"}
starling_utils_SystemUtil.initialize = function() {
	if(starling_utils_SystemUtil.sInitialized) return;
	starling_utils_SystemUtil.sInitialized = true;
	var _this = openfl_system_Capabilities.get_version();
	starling_utils_SystemUtil.sVersion = HxOverrides.substr(_this,4,null);
	try {
		var nativeApp = openfl_Lib.get_current();
		nativeApp.addEventListener("activate",starling_utils_SystemUtil.onActivate,false,0,true);
		nativeApp.addEventListener("deactivate",starling_utils_SystemUtil.onDeactivate,false,0,true);
		var windowConfig = lime_app_Application.current.__windows[0].config;
		starling_utils_SystemUtil.sSupportsDepthAndStencil = windowConfig.depthBuffer || windowConfig.stencilBuffer;
		starling_utils_SystemUtil.sAIR = true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			starling_utils_SystemUtil.sAIR = false;
		} else throw(e);
	}
};
starling_utils_SystemUtil.onActivate = function(event) {
	starling_utils_SystemUtil.sApplicationActive = true;
	var _g = 0;
	var _g1 = starling_utils_SystemUtil.sWaitingCalls;
	while(_g < _g1.length) {
		var call = _g1[_g];
		++_g;
		try {
			Reflect.callMethod(null,call[0],call[1]);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				haxe_Log.trace("[Starling] Error in 'executeWhenApplicationIsActive' call: " + e.message,{ fileName : "SystemUtil.hx", lineNumber : 79, className : "starling.utils.SystemUtil", methodName : "onActivate"});
			} else throw(e);
		}
	}
	starling_utils_SystemUtil.sWaitingCalls = [];
};
starling_utils_SystemUtil.onDeactivate = function(event) {
	starling_utils_SystemUtil.sApplicationActive = false;
};
starling_utils_SystemUtil.executeWhenApplicationIsActive = function(call,args) {
	starling_utils_SystemUtil.initialize();
	if(starling_utils_SystemUtil.sApplicationActive) call(args); else starling_utils_SystemUtil.sWaitingCalls.push([call,args]);
};
starling_utils_SystemUtil.get_isApplicationActive = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sApplicationActive;
};
starling_utils_SystemUtil.get_isAIR = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sAIR;
};
starling_utils_SystemUtil.get_isDesktop = function() {
	starling_utils_SystemUtil.initialize();
	return true;
};
starling_utils_SystemUtil.get_platform = function() {
	starling_utils_SystemUtil.initialize();
	return "";
};
starling_utils_SystemUtil.get_version = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sVersion;
};
starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement = function() {
	return true;
};
starling_utils_SystemUtil.get_supportsDepthAndStencil = function() {
	return starling_utils_SystemUtil.sSupportsDepthAndStencil;
};
starling_utils_SystemUtil.get_supportsVideoTexture = function() {
	return openfl_display3D_Context3D.supportsVideoTexture;
};
var starling_utils_VAlign = function() { };
$hxClasses["starling.utils.VAlign"] = starling_utils_VAlign;
starling_utils_VAlign.__name__ = ["starling","utils","VAlign"];
starling_utils_VAlign.isValid = function(vAlign) {
	return vAlign == "top" || vAlign == "center" || vAlign == "bottom";
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$backend_html5_HTML5Application;
var init = lime_app_Application;
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = $global.DataView || js_html_compat_DataView;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) console.log = function() {
};
lime_utils_Log.throwErrors = true;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = window.document.createElement("canvas");
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d");
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
haxe_ds_ObjectMap.count = 0;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool_$openfl_$Vector_$openfl_$display_$DisplayObject(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.data.set_length(0);
});
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxegon_Col.BLACK = 0;
haxegon_Col.GREY = 10329501;
haxegon_Col.GRAY = 10329501;
haxegon_Col.WHITE = 16777215;
haxegon_Col.RED = 12461619;
haxegon_Col.PINK = 14708619;
haxegon_Col.DARKBROWN = 4799531;
haxegon_Col.BROWN = 10773538;
haxegon_Col.ORANGE = 15436081;
haxegon_Col.YELLOW = 16245355;
haxegon_Col.DARKGREEN = 3098702;
haxegon_Col.GREEN = 4491546;
haxegon_Col.LIGHTGREEN = 10735143;
haxegon_Col.NIGHTBLUE = 1779250;
haxegon_Col.DARKBLUE = 22404;
haxegon_Col.BLUE = 3252978;
haxegon_Col.LIGHTBLUE = 11721967;
haxegon_Col.MAGENTA = 16711935;
haxegon_Col.TRANSPARENT = 1;
haxegon_Col.hslval = [0.0,0.0,0.0];
starling_events_EventDispatcher.sBubbleChains = [];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Matrix(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_Point.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Point(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool_$openfl_$geom_$Rectangle(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
starling_display_DisplayObject.sAncestors = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObject.sHelperPoint = new openfl_geom_Point();
starling_display_DisplayObject.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_DisplayObject.sHelperPointAlt3D = new openfl_geom_Vector3D();
starling_display_DisplayObject.sHelperRect = new openfl_geom_Rectangle();
starling_display_DisplayObject.sHelperMatrix = new openfl_geom_Matrix();
starling_display_DisplayObject.sHelperMatrixAlt = new openfl_geom_Matrix();
starling_display_DisplayObject.sHelperMatrix3D = new openfl_geom_Matrix3D();
starling_display_DisplayObject.sHelperMatrixAlt3D = new openfl_geom_Matrix3D();
starling_display_DisplayObjectContainer.sHelperMatrix = new openfl_geom_Matrix();
starling_display_DisplayObjectContainer.sHelperPoint = new openfl_geom_Point();
starling_display_DisplayObjectContainer.sBroadcastListeners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObjectContainer.sSortBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_Sprite.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Sprite.sHelperPoint = new openfl_geom_Point();
starling_display_Sprite.sHelperRect = new openfl_geom_Rectangle();
haxegon_Core.WINDOW_WIDTH = "240";
haxegon_Core.WINDOW_HEIGHT = "150";
haxegon_Core.TARGETFRAMERATE = 60;
haxegon_Core.MAXFRAMESKIP = 4;
haxegon_Core.startframeextended = false;
haxegon_Core.updateextended = false;
haxegon_Core.renderextended = false;
haxegon_Data.width = 0;
haxegon_Data.height = 0;
haxegon_Debug.history = [];
haxegon_Debug.posinfo = [];
haxegon_Debug.repeatcount = [];
haxegon_Geom.rect1 = new openfl_geom_Rectangle();
haxegon_Geom.rect2 = new openfl_geom_Rectangle();
starling_display_Quad.sHelperPoint = new openfl_geom_Point();
starling_display_Quad.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_Quad.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Quad.sHelperMatrix3D = new openfl_geom_Matrix3D();
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
starling_utils_VertexData.ELEMENTS_PER_VERTEX = 8;
starling_utils_VertexData.POSITION_OFFSET = 0;
starling_utils_VertexData.COLOR_OFFSET = 2;
starling_utils_VertexData.TEXCOORD_OFFSET = 6;
starling_utils_VertexData.sHelperPoint = new openfl_geom_Point();
starling_utils_VertexData.sHelperPoint3D = new openfl_geom_Vector3D();
haxegon_Gfx.MAX_NUM_QUADS = 16383;
haxegon_Gfx.LEFT = -10000;
haxegon_Gfx.RIGHT = -20000;
haxegon_Gfx.TOP = -10000;
haxegon_Gfx.BOTTOM = -20000;
haxegon_Gfx.CENTER = -15000;
haxegon_Gfx.clearcolor = 0;
haxegon_Gfx.quadbatchcount = 0;
haxegon_Gfx.tempquad = new starling_display_Quad(1,1);
haxegon_Gfx.temppoly4 = new starling_display_Poly4(0,0,1,0,1,1,0,1);
haxegon_Gfx.templine = new starling_display_Line(1,1,2,2,1,16777215);
haxegon_Gfx.drawstate = 0;
haxegon_Gfx.DRAWSTATE_NONE = 0;
haxegon_Gfx.DRAWSTATE_QUAD = 1;
haxegon_Gfx.DRAWSTATE_POLY4 = 2;
haxegon_Gfx.DRAWSTATE_IMAGE = 3;
haxegon_Gfx.DRAWSTATE_TILES = 4;
haxegon_Gfx.DRAWSTATE_TEXT = 5;
haxegon_Gfx.trect = new openfl_geom_Rectangle();
haxegon_Gfx.shapematrix = new openfl_geom_Matrix();
haxegon_Gfx.imageindex = new haxe_ds_StringMap();
haxegon_Gfx.images = [];
haxegon_Gfx.tiles = [];
haxegon_Gfx.tilesetindex = new haxe_ds_StringMap();
haxegon_Gfx.currenttileset = -1;
haxegon_Gfx.gfxinit = false;
haxegon_Input.clipboardbuffer = [""];
haxegon_Input.keymap = new haxe_ds_EnumValueMap();
haxegon_Input.lookup = new haxe_ds_IntMap();
haxegon_Input.current = [];
haxegon_Input.last = [];
haxegon_Input.keyheld = [];
haxegon_Input.numletters = 256;
haxegon_Input.keybuffer = "";
haxegon_Mouse.mousewheel = 0;
haxegon_Music.musicchan = [];
haxegon_Music.effectindex = new haxe_ds_StringMap();
haxegon_Music.volumelevels = [];
haxegon_Music.songindex = new haxe_ds_StringMap();
haxegon_Music.songvolumelevels = [];
haxegon_Music.efchannel = [];
haxegon_Music.efchan = [];
haxegon_Random._initialseed = 1;
haxegon_Random._actualseed = 1;
haxegon_Text.fontfile = [];
haxegon_Text.fontfileindex = new haxe_ds_StringMap();
haxegon_Text.fontlastsize = new haxe_ds_StringMap();
haxegon_Text.typeface = [];
haxegon_Text.typefaceindex = new haxe_ds_StringMap();
haxegon_Text.fontmatrix = new openfl_geom_Matrix();
haxegon_Text.currentindex = -1;
haxegon_Text.currentfont = "null";
haxegon_Text.currentsize = -1;
haxegon_Text.LEFT = -10000;
haxegon_Text.RIGHT = -20000;
haxegon_Text.TOP = -10000;
haxegon_Text.BOTTOM = -20000;
haxegon_Text.CENTER = -15000;
haxegon_Text.textalign = -10000;
haxegon_Text.textrotate = 0;
haxegon_Text.textrotatexpivot = 0;
haxegon_Text.textrotateypivot = 0;
haxegon_Text.tempxpivot = 0;
haxegon_Text.tempypivot = 0;
haxegon_Text.wordwrapwidth = 0;
haxegon_embeddedassets_DefaultFont.XML_DATA = "\r\n\t\t<font>\r\n\t\t\t<info face=\"default\" size=\"8\" bold=\"0\" italic=\"0\" charset=\"\" unicode=\"1\" stretchH=\"100\" smooth=\"0\" aa=\"1\" padding=\"0,0,0,0\" spacing=\"1,1\" outline=\"0\"/>\r\n\t\t\t<common lineHeight=\"8\" base=\"7\" scaleW=\"256\" scaleH=\"22\" pages=\"1\" packed=\"0\" alphaChnl=\"1\" redChnl=\"0\" greenChnl=\"0\" blueChnl=\"0\"/>\r\n\t\t\t<pages>\r\n\t\t\t\t<page id=\"0\" file=\"default_0.png\" />\r\n\t\t\t</pages>\r\n\t\t\t<chars count=\"96\">\r\n\t\t\t\t<char id=\"32\" x=\"85\" y=\"16\" width=\"3\" height=\"1\" xoffset=\"-1\" yoffset=\"7\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"33\" x=\"127\" y=\"8\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"3\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"34\" x=\"44\" y=\"16\" width=\"4\" height=\"3\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"35\" x=\"54\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"36\" x=\"250\" y=\"0\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"37\" x=\"162\" y=\"8\" width=\"6\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"38\" x=\"75\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"39\" x=\"49\" y=\"16\" width=\"3\" height=\"3\" xoffset=\"0\" yoffset=\"0\" xadvance=\"4\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"40\" x=\"123\" y=\"8\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"4\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"41\" x=\"119\" y=\"8\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"4\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"42\" x=\"63\" y=\"8\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"43\" x=\"14\" y=\"16\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"44\" x=\"53\" y=\"16\" width=\"3\" height=\"3\" xoffset=\"0\" yoffset=\"5\" xadvance=\"4\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"45\" x=\"78\" y=\"16\" width=\"6\" height=\"1\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"46\" x=\"66\" y=\"16\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"5\" xadvance=\"3\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"47\" x=\"32\" y=\"0\" width=\"7\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"48\" x=\"89\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"49\" x=\"133\" y=\"8\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"3\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"50\" x=\"145\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"51\" x=\"152\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"52\" x=\"159\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"53\" x=\"166\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"54\" x=\"173\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"55\" x=\"180\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"56\" x=\"40\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"57\" x=\"187\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"58\" x=\"252\" y=\"8\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"59\" x=\"183\" y=\"8\" width=\"3\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"60\" x=\"114\" y=\"8\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"61\" x=\"32\" y=\"16\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"62\" x=\"104\" y=\"8\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"63\" x=\"215\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"64\" x=\"222\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"65\" x=\"229\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"66\" x=\"236\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"67\" x=\"243\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"68\" x=\"117\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"69\" x=\"0\" y=\"9\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"70\" x=\"7\" y=\"9\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"71\" x=\"14\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"72\" x=\"21\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"73\" x=\"136\" y=\"8\" width=\"1\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"2\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"74\" x=\"69\" y=\"8\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"75\" x=\"28\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"76\" x=\"35\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"77\" x=\"42\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"78\" x=\"49\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"79\" x=\"68\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"80\" x=\"47\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"81\" x=\"208\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"82\" x=\"201\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"83\" x=\"194\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"84\" x=\"16\" y=\"0\" width=\"7\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"85\" x=\"131\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"86\" x=\"124\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"87\" x=\"110\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"88\" x=\"82\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"89\" x=\"8\" y=\"0\" width=\"7\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"90\" x=\"56\" y=\"8\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"91\" x=\"109\" y=\"8\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"92\" x=\"24\" y=\"0\" width=\"7\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"93\" x=\"99\" y=\"8\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"94\" x=\"38\" y=\"16\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"95\" x=\"69\" y=\"16\" width=\"8\" height=\"1\" xoffset=\"0\" yoffset=\"7\" xadvance=\"9\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"96\" x=\"57\" y=\"16\" width=\"3\" height=\"3\" xoffset=\"0\" yoffset=\"0\" xadvance=\"4\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"97\" x=\"245\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"98\" x=\"61\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"99\" x=\"26\" y=\"16\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"100\" x=\"96\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"101\" x=\"203\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"102\" x=\"103\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"103\" x=\"148\" y=\"8\" width=\"6\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"104\" x=\"138\" y=\"0\" width=\"6\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"105\" x=\"138\" y=\"8\" width=\"1\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"2\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"106\" x=\"0\" y=\"0\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"107\" x=\"75\" y=\"8\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"108\" x=\"130\" y=\"8\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"3\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"109\" x=\"187\" y=\"8\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"110\" x=\"20\" y=\"16\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"111\" x=\"210\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"112\" x=\"169\" y=\"8\" width=\"6\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"113\" x=\"176\" y=\"8\" width=\"6\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"114\" x=\"217\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"115\" x=\"7\" y=\"17\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"116\" x=\"81\" y=\"8\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"117\" x=\"224\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"118\" x=\"231\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"119\" x=\"195\" y=\"8\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"120\" x=\"238\" y=\"8\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"121\" x=\"155\" y=\"8\" width=\"6\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"122\" x=\"0\" y=\"17\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"123\" x=\"87\" y=\"8\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"124\" x=\"6\" y=\"0\" width=\"1\" height=\"8\" xoffset=\"0\" yoffset=\"0\" xadvance=\"2\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"125\" x=\"93\" y=\"8\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"126\" x=\"61\" y=\"16\" width=\"4\" height=\"2\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\" page=\"0\" chnl=\"15\" />\r\n\t\t\t\t<char id=\"127\" x=\"140\" y=\"8\" width=\"7\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"8\" page=\"0\" chnl=\"15\" />\r\n\t\t\t</chars>\r\n\t\t</font>\r\n\t";
starling_filters_FragmentFilter.MIN_TEXTURE_SIZE = 64;
starling_filters_FragmentFilter.PMA = true;
starling_filters_FragmentFilter.STD_VERTEX_SHADER = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
starling_filters_FragmentFilter.STD_FRAGMENT_SHADER = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
starling_filters_FragmentFilter.sStageBounds = new openfl_geom_Rectangle();
starling_filters_FragmentFilter.sTransformationMatrix = new openfl_geom_Matrix();
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$backend_html5_HTML5HTTPRequest.requestLimit = 4;
lime__$backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__tempPointer = new lime_utils_BytePointerData(null,0);
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_JNI.alreadyCreated = new haxe_ds_StringMap();
lime_system_JNI.initialized = false;
lime_system_System.__directories = new haxe_ds_IntMap();
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_text_unifill_Unicode.minCodePoint = 0;
lime_text_unifill_Unicode.maxCodePoint = 1114111;
lime_text_unifill_Unicode.minHighSurrogate = 55296;
lime_text_unifill_Unicode.maxHighSurrogate = 56319;
lime_text_unifill_Unicode.minLowSurrogate = 56320;
lime_text_unifill_Unicode.maxLowSurrogate = 57343;
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNKNOWN = 0;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSPACE = 42;
lime_ui__$ScanCode_ScanCode_$Impl_$.TAB = 43;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN = 40;
lime_ui__$ScanCode_ScanCode_$Impl_$.ESCAPE = 41;
lime_ui__$ScanCode_ScanCode_$Impl_$.SPACE = 44;
lime_ui__$ScanCode_ScanCode_$Impl_$.SINGLE_QUOTE = 52;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMMA = 54;
lime_ui__$ScanCode_ScanCode_$Impl_$.MINUS = 45;
lime_ui__$ScanCode_ScanCode_$Impl_$.PERIOD = 55;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLASH = 56;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_0 = 39;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_1 = 30;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_2 = 31;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_3 = 32;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_4 = 33;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_5 = 34;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_6 = 35;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_7 = 36;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_8 = 37;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_9 = 38;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEMICOLON = 51;
lime_ui__$ScanCode_ScanCode_$Impl_$.EQUALS = 46;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_BRACKET = 47;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSLASH = 49;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_BRACKET = 48;
lime_ui__$ScanCode_ScanCode_$Impl_$.GRAVE = 53;
lime_ui__$ScanCode_ScanCode_$Impl_$.A = 4;
lime_ui__$ScanCode_ScanCode_$Impl_$.B = 5;
lime_ui__$ScanCode_ScanCode_$Impl_$.C = 6;
lime_ui__$ScanCode_ScanCode_$Impl_$.D = 7;
lime_ui__$ScanCode_ScanCode_$Impl_$.E = 8;
lime_ui__$ScanCode_ScanCode_$Impl_$.F = 9;
lime_ui__$ScanCode_ScanCode_$Impl_$.G = 10;
lime_ui__$ScanCode_ScanCode_$Impl_$.H = 11;
lime_ui__$ScanCode_ScanCode_$Impl_$.I = 12;
lime_ui__$ScanCode_ScanCode_$Impl_$.J = 13;
lime_ui__$ScanCode_ScanCode_$Impl_$.K = 14;
lime_ui__$ScanCode_ScanCode_$Impl_$.L = 15;
lime_ui__$ScanCode_ScanCode_$Impl_$.M = 16;
lime_ui__$ScanCode_ScanCode_$Impl_$.N = 17;
lime_ui__$ScanCode_ScanCode_$Impl_$.O = 18;
lime_ui__$ScanCode_ScanCode_$Impl_$.P = 19;
lime_ui__$ScanCode_ScanCode_$Impl_$.Q = 20;
lime_ui__$ScanCode_ScanCode_$Impl_$.R = 21;
lime_ui__$ScanCode_ScanCode_$Impl_$.S = 22;
lime_ui__$ScanCode_ScanCode_$Impl_$.T = 23;
lime_ui__$ScanCode_ScanCode_$Impl_$.U = 24;
lime_ui__$ScanCode_ScanCode_$Impl_$.V = 25;
lime_ui__$ScanCode_ScanCode_$Impl_$.W = 26;
lime_ui__$ScanCode_ScanCode_$Impl_$.X = 27;
lime_ui__$ScanCode_ScanCode_$Impl_$.Y = 28;
lime_ui__$ScanCode_ScanCode_$Impl_$.Z = 29;
lime_ui__$ScanCode_ScanCode_$Impl_$.DELETE = 76;
lime_ui__$ScanCode_ScanCode_$Impl_$.CAPS_LOCK = 57;
lime_ui__$ScanCode_ScanCode_$Impl_$.F1 = 58;
lime_ui__$ScanCode_ScanCode_$Impl_$.F2 = 59;
lime_ui__$ScanCode_ScanCode_$Impl_$.F3 = 60;
lime_ui__$ScanCode_ScanCode_$Impl_$.F4 = 61;
lime_ui__$ScanCode_ScanCode_$Impl_$.F5 = 62;
lime_ui__$ScanCode_ScanCode_$Impl_$.F6 = 63;
lime_ui__$ScanCode_ScanCode_$Impl_$.F7 = 64;
lime_ui__$ScanCode_ScanCode_$Impl_$.F8 = 65;
lime_ui__$ScanCode_ScanCode_$Impl_$.F9 = 66;
lime_ui__$ScanCode_ScanCode_$Impl_$.F10 = 67;
lime_ui__$ScanCode_ScanCode_$Impl_$.F11 = 68;
lime_ui__$ScanCode_ScanCode_$Impl_$.F12 = 69;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRINT_SCREEN = 70;
lime_ui__$ScanCode_ScanCode_$Impl_$.SCROLL_LOCK = 71;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAUSE = 72;
lime_ui__$ScanCode_ScanCode_$Impl_$.INSERT = 73;
lime_ui__$ScanCode_ScanCode_$Impl_$.HOME = 74;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_UP = 75;
lime_ui__$ScanCode_ScanCode_$Impl_$.END = 77;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_DOWN = 78;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT = 79;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT = 80;
lime_ui__$ScanCode_ScanCode_$Impl_$.DOWN = 81;
lime_ui__$ScanCode_ScanCode_$Impl_$.UP = 82;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUM_LOCK = 83;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DIVIDE = 84;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MULTIPLY = 85;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MINUS = 86;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS = 87;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_ENTER = 88;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_1 = 89;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_2 = 90;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_3 = 91;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_4 = 92;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_5 = 93;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_6 = 94;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_7 = 95;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_8 = 96;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_9 = 97;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_0 = 98;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERIOD = 99;
lime_ui__$ScanCode_ScanCode_$Impl_$.APPLICATION = 101;
lime_ui__$ScanCode_ScanCode_$Impl_$.POWER = 102;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EQUALS = 103;
lime_ui__$ScanCode_ScanCode_$Impl_$.F13 = 104;
lime_ui__$ScanCode_ScanCode_$Impl_$.F14 = 105;
lime_ui__$ScanCode_ScanCode_$Impl_$.F15 = 106;
lime_ui__$ScanCode_ScanCode_$Impl_$.F16 = 107;
lime_ui__$ScanCode_ScanCode_$Impl_$.F17 = 108;
lime_ui__$ScanCode_ScanCode_$Impl_$.F18 = 109;
lime_ui__$ScanCode_ScanCode_$Impl_$.F19 = 110;
lime_ui__$ScanCode_ScanCode_$Impl_$.F20 = 111;
lime_ui__$ScanCode_ScanCode_$Impl_$.F21 = 112;
lime_ui__$ScanCode_ScanCode_$Impl_$.F22 = 113;
lime_ui__$ScanCode_ScanCode_$Impl_$.F23 = 114;
lime_ui__$ScanCode_ScanCode_$Impl_$.F24 = 115;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXECUTE = 116;
lime_ui__$ScanCode_ScanCode_$Impl_$.HELP = 117;
lime_ui__$ScanCode_ScanCode_$Impl_$.MENU = 118;
lime_ui__$ScanCode_ScanCode_$Impl_$.SELECT = 119;
lime_ui__$ScanCode_ScanCode_$Impl_$.STOP = 120;
lime_ui__$ScanCode_ScanCode_$Impl_$.AGAIN = 121;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNDO = 122;
lime_ui__$ScanCode_ScanCode_$Impl_$.CUT = 123;
lime_ui__$ScanCode_ScanCode_$Impl_$.COPY = 124;
lime_ui__$ScanCode_ScanCode_$Impl_$.PASTE = 125;
lime_ui__$ScanCode_ScanCode_$Impl_$.FIND = 126;
lime_ui__$ScanCode_ScanCode_$Impl_$.MUTE = 127;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_UP = 128;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_DOWN = 129;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COMMA = 133;
lime_ui__$ScanCode_ScanCode_$Impl_$.ALT_ERASE = 153;
lime_ui__$ScanCode_ScanCode_$Impl_$.SYSTEM_REQUEST = 154;
lime_ui__$ScanCode_ScanCode_$Impl_$.CANCEL = 155;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR = 156;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRIOR = 157;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN2 = 158;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEPARATOR = 159;
lime_ui__$ScanCode_ScanCode_$Impl_$.OUT = 160;
lime_ui__$ScanCode_ScanCode_$Impl_$.OPER = 161;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR_AGAIN = 162;
lime_ui__$ScanCode_ScanCode_$Impl_$.CRSEL = 163;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXSEL = 164;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_00 = 176;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_000 = 177;
lime_ui__$ScanCode_ScanCode_$Impl_$.THOUSAND_SEPARATOR = 178;
lime_ui__$ScanCode_ScanCode_$Impl_$.DECIMAL_SEPARATOR = 179;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_UNIT = 180;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_SUBUNIT = 181;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_BRACE = 184;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_BRACE = 185;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_TAB = 186;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BACKSPACE = 187;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_A = 188;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_B = 189;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_C = 190;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_D = 191;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_E = 192;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_F = 193;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_XOR = 194;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_POWER = 195;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERCENT = 196;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LESS_THAN = 197;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_GREATER_THAN = 198;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AMPERSAND = 199;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_VERTICAL_BAR = 201;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COLON = 203;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HASH = 204;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_SPACE = 205;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AT = 206;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EXCLAMATION = 207;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_STORE = 208;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_RECALL = 209;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_CLEAR = 210;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_ADD = 211;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 212;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 213;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_DIVIDE = 214;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS_MINUS = 215;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR = 216;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 217;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BINARY = 218;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_OCTAL = 219;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DECIMAL = 220;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HEXADECIMAL = 221;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_CTRL = 224;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_SHIFT = 225;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_ALT = 226;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_META = 227;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_CTRL = 228;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_SHIFT = 229;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_ALT = 230;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_META = 231;
lime_ui__$ScanCode_ScanCode_$Impl_$.MODE = 257;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_NEXT = 258;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PREVIOUS = 259;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_STOP = 260;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PLAY = 261;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_MUTE = 262;
lime_ui__$ScanCode_ScanCode_$Impl_$.MEDIA_SELECT = 263;
lime_ui__$ScanCode_ScanCode_$Impl_$.WWW = 264;
lime_ui__$ScanCode_ScanCode_$Impl_$.MAIL = 265;
lime_ui__$ScanCode_ScanCode_$Impl_$.CALCULATOR = 266;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMPUTER = 267;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_SEARCH = 268;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_HOME = 269;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BACK = 270;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_FORWARD = 271;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_STOP = 272;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_REFRESH = 273;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BOOKMARKS = 274;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_DOWN = 275;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_UP = 276;
lime_ui__$ScanCode_ScanCode_$Impl_$.DISPLAY_SWITCH = 277;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_TOGGLE = 278;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_DOWN = 279;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_UP = 280;
lime_ui__$ScanCode_ScanCode_$Impl_$.EJECT = 281;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Float64Array_Float64Array_$Impl_$.BYTES_PER_ELEMENT = 8;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int8Array_Int8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.BYTES_PER_ELEMENT = 1;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasRenderer.scale = 1;
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_opengl_GLMaskManager.maskShader = new openfl__$internal_renderer_opengl_GLMaskShader();
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_text_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_text_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_text_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display_BitmapData.__bufferStride = 26;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
openfl_display3D_Context3D.DEPTH_STENCIL = 0;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_EXTENDED = 5;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_external_ExternalInterface.available = true;
openfl_external_ExternalInterface.marshallExceptions = false;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_Capabilities.avHardwareDisable = true;
openfl_system_Capabilities.hasAccessibility = false;
openfl_system_Capabilities.hasAudio = true;
openfl_system_Capabilities.hasAudioEncoder = false;
openfl_system_Capabilities.hasEmbeddedVideo = false;
openfl_system_Capabilities.hasIME = false;
openfl_system_Capabilities.hasMP3 = false;
openfl_system_Capabilities.hasPrinting = true;
openfl_system_Capabilities.hasScreenBroadcast = false;
openfl_system_Capabilities.hasScreenPlayback = false;
openfl_system_Capabilities.hasStreamingAudio = false;
openfl_system_Capabilities.hasStreamingVideo = false;
openfl_system_Capabilities.hasTLS = true;
openfl_system_Capabilities.hasVideoEncoder = true;
openfl_system_Capabilities.isDebugger = false;
openfl_system_Capabilities.isEmbeddedInAcrobat = false;
openfl_system_Capabilities.localFileReadDisable = true;
openfl_system_Capabilities.maxLevelIDC = 0;
openfl_system_Capabilities.playerType = "PlugIn";
openfl_system_Capabilities.screenColor = "color";
openfl_system_Capabilities.serverString = "";
openfl_system_Capabilities.supports32BitProcesses = false;
openfl_system_Capabilities.supports64BitProcesses = false;
openfl_system_Capabilities.touchscreenType = 0;
openfl_system_Capabilities.__standardDensities = [120,160,240,320,480,640,800,960];
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.FINGER = 0;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.NONE = 1;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.STYLUS = 2;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.ARROW = "arrow";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.AUTO = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.BUTTON = "button";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.HAND = "hand";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.IBEAM = "ibeam";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CROSSHAIR = "crosshair";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CUSTOM = "custom";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__MOVE = "move";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NESW = "resize_nesw";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NS = "resize_ns";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NWSE = "resize_nwse";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_WE = "resize_we";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT = "wait";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT_ARROW = "waitarrow";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.GESTURE = 0;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.NONE = 1;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.TOUCH_POINT = 2;
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer = new lime_utils_BytePointerData(null,0);
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
openfl_utils_TouchData.__pool = new lime_utils_ObjectPool_$openfl_$utils_$TouchData(function() {
	return new openfl_utils_TouchData();
},function(data) {
	data.reset();
});
starling_animation_DelayedCall.sPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_animation_Transitions.LINEAR = "linear";
starling_animation_Transitions.EASE_IN = "easeIn";
starling_animation_Transitions.EASE_OUT = "easeOut";
starling_animation_Transitions.EASE_IN_OUT = "easeInOut";
starling_animation_Transitions.EASE_OUT_IN = "easeOutIn";
starling_animation_Transitions.EASE_IN_BACK = "easeInBack";
starling_animation_Transitions.EASE_OUT_BACK = "easeOutBack";
starling_animation_Transitions.EASE_IN_OUT_BACK = "easeInOutBack";
starling_animation_Transitions.EASE_OUT_IN_BACK = "easeOutInBack";
starling_animation_Transitions.EASE_IN_ELASTIC = "easeInElastic";
starling_animation_Transitions.EASE_OUT_ELASTIC = "easeOutElastic";
starling_animation_Transitions.EASE_IN_OUT_ELASTIC = "easeInOutElastic";
starling_animation_Transitions.EASE_OUT_IN_ELASTIC = "easeOutInElastic";
starling_animation_Transitions.EASE_IN_BOUNCE = "easeInBounce";
starling_animation_Transitions.EASE_OUT_BOUNCE = "easeOutBounce";
starling_animation_Transitions.EASE_IN_OUT_BOUNCE = "easeInOutBounce";
starling_animation_Transitions.EASE_OUT_IN_BOUNCE = "easeOutInBounce";
starling_animation_Tween.HINT_MARKER = "#";
starling_animation_Tween.sTweenPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_core_RenderSupport.RENDER_TARGET_NAME = "Starling.renderTarget";
starling_core_RenderSupport.sPoint = new openfl_geom_Point();
starling_core_RenderSupport.sPoint3D = new openfl_geom_Vector3D();
starling_core_RenderSupport.sClipRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sBufferRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sScissorRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sAssembler = new openfl_utils_AGALMiniAssembler();
starling_core_RenderSupport.sMatrix3D = new openfl_geom_Matrix3D();
starling_core_RenderSupport.sMatrixData = (function($this) {
	var $r;
	var a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_core_Starling.VERSION = "1.8";
starling_core_Starling.PROGRAM_DATA_NAME = "Starling.programs";
starling_core_Starling.sHandleLostContext = true;
starling_core_Starling.sContextData = new haxe_ds_ObjectMap();
starling_core_Starling.sAll = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_core_StatsDisplay.UPDATE_INTERVAL = 0.5;
starling_display_BlendMode.sBlendFactors = [(function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.set("none",[2,9]);
	_g.set("normal",[7,5]);
	_g.set("add",[7,0]);
	_g.set("multiply",[1,5]);
	_g.set("screen",[7,2]);
	_g.set("erase",[9,5]);
	_g.set("mask",[9,7]);
	_g.set("below",[3,0]);
	$r = _g;
	return $r;
}(this)),(function($this) {
	var $r;
	var _g1 = new haxe_ds_StringMap();
	_g1.set("none",[2,9]);
	_g1.set("normal",[2,5]);
	_g1.set("add",[2,2]);
	_g1.set("multiply",[1,5]);
	_g1.set("screen",[2,6]);
	_g1.set("erase",[9,5]);
	_g1.set("mask",[9,7]);
	_g1.set("below",[3,0]);
	$r = _g1;
	return $r;
}(this))];
starling_display_BlendMode.AUTO = "auto";
starling_display_BlendMode.NONE = "none";
starling_display_BlendMode.NORMAL = "normal";
starling_display_BlendMode.ADD = "add";
starling_display_BlendMode.MULTIPLY = "multiply";
starling_display_BlendMode.SCREEN = "screen";
starling_display_BlendMode.ERASE = "erase";
starling_display_BlendMode.MASK = "mask";
starling_display_BlendMode.BELOW = "below";
starling_display_QuadBatch.MAX_NUM_QUADS = 16383;
starling_display_QuadBatch.QUAD_PROGRAM_NAME = "QB_q";
starling_display_QuadBatch.sHelperMatrix = new openfl_geom_Matrix();
starling_display_QuadBatch.sRenderAlpha = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_display_QuadBatch.sProgramNameCache = new haxe_ds_IntMap();
starling_display_Sprite3D.E = 0.00001;
starling_display_Sprite3D.sHelperPoint = new openfl_geom_Vector3D();
starling_display_Sprite3D.sHelperPointAlt = new openfl_geom_Vector3D();
starling_display_Sprite3D.sHelperMatrix = new openfl_geom_Matrix3D();
starling_display_Stage.sHelperMatrix = new openfl_geom_Matrix3D();
starling_events_Event.ADDED = "added";
starling_events_Event.ADDED_TO_STAGE = "addedToStage";
starling_events_Event.ENTER_FRAME = "enterFrame";
starling_events_Event.REMOVED = "removed";
starling_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
starling_events_Event.TRIGGERED = "triggered";
starling_events_Event.FLATTEN = "flatten";
starling_events_Event.RESIZE = "resize";
starling_events_Event.COMPLETE = "complete";
starling_events_Event.CONTEXT3D_CREATE = "context3DCreate";
starling_events_Event.RENDER = "render";
starling_events_Event.ROOT_CREATED = "rootCreated";
starling_events_Event.REMOVE_FROM_JUGGLER = "removeFromJuggler";
starling_events_Event.TEXTURES_RESTORED = "texturesRestored";
starling_events_Event.IO_ERROR = "ioError";
starling_events_Event.SECURITY_ERROR = "securityError";
starling_events_Event.PARSE_ERROR = "parseError";
starling_events_Event.FATAL_ERROR = "fatalError";
starling_events_Event.CHANGE = "change";
starling_events_Event.CANCEL = "cancel";
starling_events_Event.SCROLL = "scroll";
starling_events_Event.OPEN = "open";
starling_events_Event.CLOSE = "close";
starling_events_Event.SELECT = "select";
starling_events_Event.READY = "ready";
starling_events_Event.sEventPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_EnterFrameEvent.ENTER_FRAME = "enterFrame";
starling_events_KeyboardEvent.KEY_UP = "keyUp";
starling_events_KeyboardEvent.KEY_DOWN = "keyDown";
starling_events_ResizeEvent.RESIZE = "resize";
starling_events_Touch.sHelperPoint = new openfl_geom_Point();
starling_events_TouchEvent.TOUCH = "touch";
starling_events_TouchEvent.sTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchPhase.HOVER = "hover";
starling_events_TouchPhase.BEGAN = "began";
starling_events_TouchPhase.MOVED = "moved";
starling_events_TouchPhase.STATIONARY = "stationary";
starling_events_TouchPhase.ENDED = "ended";
starling_events_TouchProcessor.sUpdatedTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchProcessor.sHoveringTouchData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchProcessor.sHelperPoint = new openfl_geom_Point();
starling_filters_BlurFilter.NORMAL_PROGRAM_NAME = "BF_n";
starling_filters_BlurFilter.TINTED_PROGRAM_NAME = "BF_t";
starling_filters_BlurFilter.MAX_SIGMA = 2.0;
starling_filters_FragmentFilterMode.BELOW = "below";
starling_filters_FragmentFilterMode.REPLACE = "replace";
starling_filters_FragmentFilterMode.ABOVE = "above";
starling_text_BitmapFont.NATIVE_SIZE = -1;
starling_text_BitmapFont.MINI = "mini";
starling_text_BitmapFont.CHAR_SPACE = 32;
starling_text_BitmapFont.CHAR_TAB = 9;
starling_text_BitmapFont.CHAR_NEWLINE = 10;
starling_text_BitmapFont.CHAR_CARRIAGE_RETURN = 13;
starling_text_BitmapFont.sLines = [];
starling_text_CharLocation.sInstancePool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_text_CharLocation.sVectorPool = [];
starling_text_CharLocation.sInstanceLoan = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_text_CharLocation.sVectorLoan = [];
starling_text_MiniBitmapFont.BITMAP_WIDTH = 128;
starling_text_MiniBitmapFont.BITMAP_HEIGHT = 64;
starling_text_MiniBitmapFont.BITMAP_DATA = [2027613533,-881927360,202148514,-2028041698,-88080844,-8114179,2034947,-1092263897,352977282,-1337209332,-1181314416,-2136898414,1468709156,-2026903579,-1515657153,2101025806,-878458241,-79172757,-692798458,1038056207,1932393374,-1112681669,-1208165062,1741291262,2017257123,-899686453,984074419,-1245274149,-308890273,1055013549,1806563255,1754714962,1577746187,1124058786,-406208038,-1812738253,-1378383630,-551901968,866060213,1695195001,-1893385228,-1181619395,-1678445700,1053798161,2093370968,-65941613,560451479,854767518,-1684725974,-15925948,-113394816,-263722323,587139110,1081376765,962217926,783603325,-689440871,-192965380,289204733,-1659827041,-840985601,-807112923,2132197241,-1130192222,-37326968,770238970,144664537,707141570,-1360534225,871272893,512964596,808491899,481894297,-1198984815,-696603140,1710636358,-1390950977,1751040139,596966466,1363963692,465815609,315567311,-4301137,-208944745,179721458,-2073232326,-352742308,1519355876,-1002643514,-361540066,-980767403,-558739948,-448928871,603088884,-1617618069,-1087897969,-739691329,-1231913013,-1230390083,-882923117,693642210,-14453347,762928717,1802215333,-520117622,-73811966,970959395,557220237,2107226136,-785144314,-891682508,-29147277,898597576,991077243,2091615904,-960250408,633599866,-76187187,-2078966920,834870947,2118009742,1362731961,236280636,1274945142,1458729366,797960805,-1005597576,2103717340,-348561293,-1618444407,1624104606,1156993903,-1108796892,-2040468225,1204911924,1314218830,-987880904,-1470691337,-455101617,2073394964,1873329433,1754205930,1528429545,1631106062,-2031694831,-74470249,-772073531,-653590993,707451487,-842470509,1390653868,-1674411503,1027328684,-875283820,-632773593,765701986,-486688164,786403271,-470531459,713234896,-33110897,-823036565,-301474417,1447960461,1398434593,1914230187,-1896324011,-138592832,-435628089,-1074267235,-921718534,-1108936862,1315917060,-1485114815,-286413393,-189355343,1599499652,-781109705,877854499,-96707841,-646407219,-1456931877,-1039373106,-1829388839,-31462095,534904657,-1405705698,1358214576,1069250354,-424956739,-1666070713,-846356418,442343309,1024736866,-279848163,-1044100017,1513359261,-1852877700,1944476762,735490552,426990058,-60861185,1204305707,-963972031,-1896317928,-73919173,1724669255,-493851587,-805638506,-398564363,-598030357,-1457984001,-638216903,-945242784,-484551009,-639969688,-10512193,-2000027733,-87269364,642748805,-1817985657,-1975547398,572956615,-461728356,964924880,2081600351,-722508880,2056247513,1951368808,2133449703,-1511238668,512866577,913279200,1678129016,-806388305,-921014367,-1731970345,-628908371,1664169178,1943591935,750675303,154399903,-1723376406,852654952,-177659530,1971649621,-114771476,1222535348,-11014081,-1414305060,-1577556316,1175907705,1157322027,505963121,-1663426680,-633739640,-703163943,-1670840475,1948662907,-698902193,1147387734,256773959,1173572460,-1933009825,-84091220,-1214786676,-830166086,-473313037,1465302035,-1443781839,-1151701152,-501786882,-926134193,-20296584,-821148188,-807397964,773123355,1618635668,-1724791106,2075248691,1740805534,288646743,1837597401,603556968,-1112430424,673184603,-1206210243,-1397912892,-1102315980,-1409631494,1057233368,1118437241,-112840833,-1184502521,-981775682,-1933980022,735505357,-1302335871,-1934038485,-107132769,279183208,1586420003,1174008423,-231979707,1162167621,1162167621,1162167621,1162167621,1174119799,787274608];
starling_text_MiniBitmapFont.XML_DATA = Xml.createElement("\n      <font>\n      <info face=\"mini\" size=\"8\" bold=\"0\" italic=\"0\" smooth=\"0\"/>\n      <common lineHeight=\"8\" base=\"7\" scaleW=\"128\" scaleH=\"64\" pages=\"1\" packed=\"0\"/>\n      <chars count=\"191\">\n        <char id=\"195\" x=\"1\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"209\" x=\"7\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"213\" x=\"13\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"253\" x=\"19\" y=\"1\" width=\"4\" height=\"9\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"255\" x=\"24\" y=\"1\" width=\"4\" height=\"9\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"192\" x=\"29\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"193\" x=\"35\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"194\" x=\"41\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"197\" x=\"47\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"200\" x=\"53\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"201\" x=\"59\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"202\" x=\"65\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"210\" x=\"71\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"211\" x=\"77\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"212\" x=\"83\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"217\" x=\"89\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"218\" x=\"95\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"219\" x=\"101\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"221\" x=\"107\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"206\" x=\"113\" y=\"1\" width=\"3\" height=\"8\" xoffset=\"-1\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"204\" x=\"117\" y=\"1\" width=\"2\" height=\"8\" xoffset=\"-1\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"205\" x=\"120\" y=\"1\" width=\"2\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"36\"  x=\"1\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\"/>\n        <char id=\"196\" x=\"7\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"199\" x=\"13\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"203\" x=\"19\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"214\" x=\"25\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"220\" x=\"31\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"224\" x=\"37\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"225\" x=\"42\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"226\" x=\"47\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"227\" x=\"52\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"232\" x=\"57\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"233\" x=\"62\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"234\" x=\"67\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"235\" x=\"72\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"241\" x=\"77\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"242\" x=\"82\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"243\" x=\"87\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"244\" x=\"92\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"245\" x=\"97\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"249\" x=\"102\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"250\" x=\"107\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"251\" x=\"112\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"254\" x=\"117\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"123\" x=\"122\" y=\"11\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"125\" x=\"1\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"167\" x=\"5\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"207\" x=\"9\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"-1\" yoffset=\"0\" xadvance=\"2\"/>\n        <char id=\"106\" x=\"13\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"40\" x=\"16\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"41\" x=\"19\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"91\" x=\"22\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"93\" x=\"25\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"124\" x=\"28\" y=\"19\" width=\"1\" height=\"7\" xoffset=\"1\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"81\" x=\"30\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"163\" x=\"36\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\"/>\n        <char id=\"177\" x=\"42\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"181\" x=\"48\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"103\" x=\"54\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"112\" x=\"59\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"113\" x=\"64\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"121\" x=\"69\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"162\" x=\"74\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"228\" x=\"79\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"229\" x=\"84\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"231\" x=\"89\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"240\" x=\"94\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"246\" x=\"99\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"252\" x=\"104\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"238\" x=\"109\" y=\"19\" width=\"3\" height=\"6\" xoffset=\"-1\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"59\" x=\"113\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"236\" x=\"116\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"-1\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"237\" x=\"119\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"198\" x=\"1\" y=\"27\" width=\"9\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"10\"/>\n        <char id=\"190\" x=\"11\" y=\"27\" width=\"8\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"9\"/>\n        <char id=\"87\" x=\"20\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"188\" x=\"28\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"189\" x=\"36\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"38\" x=\"44\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"164\" x=\"51\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"208\" x=\"58\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"8364\" x=\"65\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"65\" x=\"72\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"66\" x=\"78\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"67\" x=\"84\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"68\" x=\"90\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"69\" x=\"96\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"70\" x=\"102\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"71\" x=\"108\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"72\" x=\"114\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"75\" x=\"120\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"77\" x=\"1\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"78\" x=\"7\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"79\" x=\"13\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"80\" x=\"19\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"82\" x=\"25\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"83\" x=\"31\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"84\" x=\"37\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"85\" x=\"43\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"86\" x=\"49\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"88\" x=\"55\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"89\" x=\"61\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"90\" x=\"67\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"50\" x=\"73\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"51\" x=\"79\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"52\" x=\"85\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"53\" x=\"91\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"54\" x=\"97\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"56\" x=\"103\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"57\" x=\"109\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"48\" x=\"115\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"47\" x=\"121\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"64\" x=\"1\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"92\" x=\"7\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"37\" x=\"13\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"43\" x=\"19\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"35\" x=\"25\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"42\" x=\"31\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"165\" x=\"37\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"169\" x=\"43\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"174\" x=\"49\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"182\" x=\"55\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"216\" x=\"61\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"247\" x=\"67\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"74\" x=\"73\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"76\" x=\"78\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"98\" x=\"83\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"100\" x=\"88\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"104\" x=\"93\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"107\" x=\"98\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"55\" x=\"103\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"63\" x=\"108\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"191\" x=\"113\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"222\" x=\"118\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"223\" x=\"123\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"116\" x=\"1\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"60\" x=\"5\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"62\" x=\"9\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"170\" x=\"13\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"186\" x=\"17\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"239\" x=\"21\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"-1\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"102\" x=\"25\" y=\"45\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"49\" x=\"28\" y=\"45\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"73\" x=\"31\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"105\" x=\"33\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"108\" x=\"35\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"33\" x=\"37\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"1\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"161\" x=\"39\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"166\" x=\"41\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"109\" x=\"43\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"119\" x=\"51\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"230\" x=\"59\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"97\" x=\"67\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"99\" x=\"72\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"101\" x=\"77\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"110\" x=\"82\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"111\" x=\"87\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"115\" x=\"92\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"117\" x=\"97\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"118\" x=\"102\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"120\" x=\"107\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"122\" x=\"112\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"215\" x=\"117\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"248\" x=\"122\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"114\" x=\"1\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"178\" x=\"5\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"179\" x=\"9\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"185\" x=\"13\" y=\"51\" width=\"1\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"61\" x=\"15\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"171\" x=\"21\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"172\" x=\"27\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"4\" xadvance=\"6\"/>\n        <char id=\"187\" x=\"33\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"176\" x=\"39\" y=\"51\" width=\"3\" height=\"3\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"44\" x=\"43\" y=\"51\" width=\"2\" height=\"3\" xoffset=\"0\" yoffset=\"6\" xadvance=\"3\"/>\n        <char id=\"58\" x=\"46\" y=\"51\" width=\"1\" height=\"3\" xoffset=\"1\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"94\" x=\"48\" y=\"51\" width=\"4\" height=\"2\" xoffset=\"-1\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"126\" x=\"53\" y=\"51\" width=\"4\" height=\"2\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"34\" x=\"58\" y=\"51\" width=\"3\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"96\" x=\"62\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"180\" x=\"65\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"184\" x=\"68\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"7\" xadvance=\"3\"/>\n        <char id=\"39\" x=\"71\" y=\"51\" width=\"1\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"95\" x=\"73\" y=\"51\" width=\"5\" height=\"1\" xoffset=\"0\" yoffset=\"7\" xadvance=\"6\"/>\n        <char id=\"45\" x=\"79\" y=\"51\" width=\"4\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"5\"/>\n        <char id=\"173\" x=\"84\" y=\"51\" width=\"4\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"5\"/>\n        <char id=\"168\" x=\"89\" y=\"51\" width=\"3\" height=\"1\" xoffset=\"1\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"175\" x=\"93\" y=\"51\" width=\"3\" height=\"1\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"46\" x=\"97\" y=\"51\" width=\"1\" height=\"1\" xoffset=\"0\" yoffset=\"6\" xadvance=\"2\"/>\n        <char id=\"183\" x=\"99\" y=\"51\" width=\"1\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"2\"/>\n        <char id=\"32\" x=\"6\" y=\"56\" width=\"0\" height=\"0\" xoffset=\"0\" yoffset=\"127\" xadvance=\"3\"/>\n      </chars>\n    </font>\n    ");
starling_text_TextField.BITMAP_FONT_DATA_NAME = "starling.display.TextField.BitmapFonts";
starling_text_TextField.sDefaultTextureFormat = 1;
starling_text_TextField.sHelperMatrix = new openfl_geom_Matrix();
starling_text_TextField.sNativeTextField = new openfl_text_TextField();
starling_text_TextField.sStringCache = new haxe_ds_StringMap();
starling_text_TextFieldAutoSize.NONE = "none";
starling_text_TextFieldAutoSize.HORIZONTAL = "horizontal";
starling_text_TextFieldAutoSize.VERTICAL = "vertical";
starling_text_TextFieldAutoSize.BOTH_DIRECTIONS = "bothDirections";
starling_textures_ConcreteTexture.TEXTURE_READY = "textureReady";
starling_textures_ConcreteTexture.sOrigin = new openfl_geom_Point();
starling_textures_SubTexture.sTexCoords = new openfl_geom_Point();
starling_textures_SubTexture.sMatrix = new openfl_geom_Matrix();
starling_textures_RenderTexture.CONTEXT_POT_SUPPORT_KEY = "RenderTexture.supportsNonPotDimensions";
starling_textures_RenderTexture.PMA = true;
starling_textures_RenderTexture.sClipRect = new openfl_geom_Rectangle();
starling_textures_RenderTexture.optimizePersistentBuffers = false;
starling_textures_TextureAtlas.sNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_textures_TextureSmoothing.NONE = "none";
starling_textures_TextureSmoothing.BILINEAR = "bilinear";
starling_textures_TextureSmoothing.TRILINEAR = "trilinear";
starling_utils_AssetManager.HTTP_RESPONSE_STATUS = "httpResponseStatus";
starling_utils_AssetManager.sNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_utils_AssetManager.NAME_REGEX = new EReg("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$","");
starling_utils_Color.WHITE = 16777215;
starling_utils_Color.SILVER = 12632256;
starling_utils_Color.GRAY = 8421504;
starling_utils_Color.BLACK = 0;
starling_utils_Color.RED = 16711680;
starling_utils_Color.MAROON = 8388608;
starling_utils_Color.YELLOW = 16776960;
starling_utils_Color.OLIVE = 8421376;
starling_utils_Color.LIME = 65280;
starling_utils_Color.GREEN = 32768;
starling_utils_Color.AQUA = 65535;
starling_utils_Color.TEAL = 32896;
starling_utils_Color.BLUE = 255;
starling_utils_Color.NAVY = 128;
starling_utils_Color.FUCHSIA = 16711935;
starling_utils_Color.PURPLE = 8388736;
starling_utils_HAlign.LEFT = "left";
starling_utils_HAlign.CENTER = "center";
starling_utils_HAlign.RIGHT = "right";
starling_utils_MathUtil.TWO_PI = Math.PI * 2.0;
starling_utils_MatrixUtil.sRawData = (function($this) {
	var $r;
	var a = [1.0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_utils_MatrixUtil.sRawData2 = (function($this) {
	var $r;
	var a = [0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_utils_Max.MAX_VALUE = 1.79e+308;
starling_utils_Max.MIN_VALUE = 5e-324;
starling_utils_Max.INT_MAX_VALUE = 2147483647;
starling_utils_Max.INT_MIN_VALUE = -2147483647;
starling_utils_Max.UINT_MAX_VALUE = -1;
starling_utils_RectangleUtil.sHelperPoint = new openfl_geom_Point();
starling_utils_RectangleUtil.sPositions = [new openfl_geom_Point(0,0),new openfl_geom_Point(1,0),new openfl_geom_Point(0,1),new openfl_geom_Point(1,1)];
starling_utils_RectangleUtil.MAX_VALUE = 1.79e+308;
starling_utils_RectangleUtil.MIN_VALUE = 5e-324;
starling_utils_ScaleMode.NONE = "none";
starling_utils_ScaleMode.NO_BORDER = "noBorder";
starling_utils_ScaleMode.SHOW_ALL = "showAll";
starling_utils_SystemUtil.sInitialized = false;
starling_utils_SystemUtil.sApplicationActive = true;
starling_utils_SystemUtil.sWaitingCalls = [];
starling_utils_SystemUtil.sSupportsDepthAndStencil = true;
starling_utils_VAlign.TOP = "top";
starling_utils_VAlign.CENTER = "center";
starling_utils_VAlign.BOTTOM = "bottom";
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
